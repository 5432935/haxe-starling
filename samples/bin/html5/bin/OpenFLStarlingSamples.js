(function ($hx_exports) { "use strict";
$hx_exports.openfl = $hx_exports.openfl || {};
$hx_exports.lime = $hx_exports.lime || {};
var $hxClasses = {},$estr = function() { return js.Boot.__string_rec(this,''); };
function $extend(from, fields) {
	function Inherit() {} Inherit.prototype = from; var proto = new Inherit();
	for (var name in fields) proto[name] = fields[name];
	if( fields.toString !== Object.prototype.toString ) proto.toString = fields.toString;
	return proto;
}
var ApplicationMain = function() { };
$hxClasses["ApplicationMain"] = ApplicationMain;
ApplicationMain.__name__ = ["ApplicationMain"];
ApplicationMain.config = null;
ApplicationMain.preloader = null;
ApplicationMain.create = function() {
	var app = new lime.app.Application();
	app.create(ApplicationMain.config);
	openfl.Lib.application = app;
	var stage = new openfl.display.Stage(app.windows[0].__width,app.windows[0].__height,ApplicationMain.config.background);
	stage.addChild(openfl.Lib.current);
	app.addModule(stage);
	var display = new NMEPreloader();
	ApplicationMain.preloader = new openfl.display.Preloader(display);
	ApplicationMain.preloader.onComplete = ApplicationMain.init;
	ApplicationMain.preloader.create(ApplicationMain.config);
	var urls = [];
	var types = [];
	urls.push("assets/audio/wing_flap.mp3");
	types.push("MUSIC");
	urls.push("assets/fonts/1x/desyrel.fnt");
	types.push("TEXT");
	urls.push("assets/fonts/1x/desyrel.png");
	types.push("IMAGE");
	urls.push("assets/fonts/2x/desyrel.fnt");
	types.push("TEXT");
	urls.push("assets/fonts/2x/desyrel.png");
	types.push("IMAGE");
	urls.push("assets/fonts/Ubuntu-License.txt");
	types.push("TEXT");
	urls.push("Ubuntu");
	types.push("FONT");
	urls.push("assets/textures/1x/atlas.png");
	types.push("IMAGE");
	urls.push("assets/textures/1x/atlas.xml");
	types.push("TEXT");
	urls.push("assets/textures/1x/background.jpg");
	types.push("IMAGE");
	urls.push("assets/textures/1x/compressed_texture.atf");
	types.push("BINARY");
	urls.push("assets/textures/1x/jsHeader.png");
	types.push("IMAGE");
	urls.push("assets/textures/1x/title-logo.png");
	types.push("IMAGE");
	urls.push("assets/textures/2x/atlas.png");
	types.push("IMAGE");
	urls.push("assets/textures/2x/atlas.xml");
	types.push("TEXT");
	urls.push("assets/textures/2x/background.jpg");
	types.push("IMAGE");
	urls.push("assets/textures/2x/compressed_texture.atf");
	types.push("BINARY");
	urls.push("assets/textures/Untitled.png");
	types.push("IMAGE");
	if(ApplicationMain.config.assetsPrefix != null) {
		var _g1 = 0;
		var _g = urls.length;
		while(_g1 < _g) {
			var i = _g1++;
			if(types[i] != "FONT") urls[i] = ApplicationMain.config.assetsPrefix + urls[i];
		}
	}
	ApplicationMain.preloader.load(urls,types);
	var result = app.exec();
};
ApplicationMain.init = function() {
	var loaded = 0;
	var total = 0;
	var library_onLoad = function(__) {
		loaded++;
		if(loaded == total) ApplicationMain.start();
	};
	ApplicationMain.preloader = null;
	if(loaded == total) ApplicationMain.start();
};
ApplicationMain.main = function() {
	ApplicationMain.config = { antialiasing : 0, background : 0, borderless : false, company : "P.J.Shand", depthBuffer : false, file : "OpenFLStarlingSamples", fps : 60, fullscreen : false, height : 480, orientation : "", packageName : "OpenFLStarlingSamples", resizable : true, stencilBuffer : true, title : "OpenFLStarlingSamples", version : "1.0.0", vsync : false, width : 320};
};
ApplicationMain.start = function() {
	var hasMain = false;
	var entryPoint = Type.resolveClass("Main");
	var _g = 0;
	var _g1 = Type.getClassFields(entryPoint);
	while(_g < _g1.length) {
		var methodName = _g1[_g];
		++_g;
		if(methodName == "main") {
			hasMain = true;
			break;
		}
	}
	lime.Assets.initialize();
	if(hasMain) Reflect.callMethod(entryPoint,Reflect.field(entryPoint,"main"),[]); else {
		var instance = Type.createInstance(DocumentClass,[]);
	}
	openfl.Lib.current.stage.dispatchEvent(new openfl.events.Event(openfl.events.Event.RESIZE,false,false));
};
var openfl = {};
openfl.events = {};
openfl.events.IEventDispatcher = function() { };
$hxClasses["openfl.events.IEventDispatcher"] = openfl.events.IEventDispatcher;
openfl.events.IEventDispatcher.__name__ = ["openfl","events","IEventDispatcher"];
openfl.events.IEventDispatcher.prototype = {
	addEventListener: null
	,dispatchEvent: null
	,hasEventListener: null
	,removeEventListener: null
	,willTrigger: null
	,__class__: openfl.events.IEventDispatcher
};
openfl.events.EventDispatcher = function(target) {
	if(target != null) this.__targetDispatcher = target;
};
$hxClasses["openfl.events.EventDispatcher"] = openfl.events.EventDispatcher;
openfl.events.EventDispatcher.__name__ = ["openfl","events","EventDispatcher"];
openfl.events.EventDispatcher.__interfaces__ = [openfl.events.IEventDispatcher];
openfl.events.EventDispatcher.__sortByPriority = function(l1,l2) {
	if(l1.priority == l2.priority) return 0; else if(l1.priority > l2.priority) return -1; else return 1;
};
openfl.events.EventDispatcher.prototype = {
	__targetDispatcher: null
	,__eventMap: null
	,addEventListener: function(type,listener,useCapture,priority,useWeakReference) {
		if(useWeakReference == null) useWeakReference = false;
		if(priority == null) priority = 0;
		if(useCapture == null) useCapture = false;
		if(this.__eventMap == null) this.__eventMap = new haxe.ds.StringMap();
		if(!this.__eventMap.exists(type)) {
			var list = new Array();
			list.push(new openfl.events._EventDispatcher.Listener(listener,useCapture,priority));
			this.__eventMap.set(type,list);
		} else {
			var list1 = this.__eventMap.get(type);
			var _g1 = 0;
			var _g = list1.length;
			while(_g1 < _g) {
				var i = _g1++;
				if(Reflect.compareMethods(list1[i].callback,listener)) return;
			}
			list1.push(new openfl.events._EventDispatcher.Listener(listener,useCapture,priority));
			list1.sort(openfl.events.EventDispatcher.__sortByPriority);
		}
	}
	,dispatchEvent: function(event) {
		if(this.__eventMap == null || event == null) return false;
		var list = this.__eventMap.get(event.type);
		if(list == null) return false;
		if(event.target == null) {
			if(this.__targetDispatcher != null) event.target = this.__targetDispatcher; else event.target = this;
		}
		event.currentTarget = this;
		var capture = event.eventPhase == openfl.events.EventPhase.CAPTURING_PHASE;
		var index = 0;
		var listener;
		while(index < list.length) {
			listener = list[index];
			if(listener.useCapture == capture) {
				listener.callback(event);
				if(event.__isCancelledNow) return true;
			}
			if(listener == list[index]) index++;
		}
		return true;
	}
	,hasEventListener: function(type) {
		if(this.__eventMap == null) return false;
		return this.__eventMap.exists(type);
	}
	,removeEventListener: function(type,listener,capture) {
		if(capture == null) capture = false;
		if(this.__eventMap == null) return;
		var list = this.__eventMap.get(type);
		if(list == null) return;
		var _g1 = 0;
		var _g = list.length;
		while(_g1 < _g) {
			var i = _g1++;
			if(list[i].match(listener,capture)) {
				list.splice(i,1);
				break;
			}
		}
		if(list.length == 0) this.__eventMap.remove(type);
		if(!this.__eventMap.iterator().hasNext()) this.__eventMap = null;
	}
	,toString: function() {
		var full = Type.getClassName(Type.getClass(this));
		var $short = full.split(".").pop();
		return "[object " + $short + "]";
	}
	,willTrigger: function(type) {
		return this.hasEventListener(type);
	}
	,__class__: openfl.events.EventDispatcher
};
openfl.display = {};
openfl.display.IBitmapDrawable = function() { };
$hxClasses["openfl.display.IBitmapDrawable"] = openfl.display.IBitmapDrawable;
openfl.display.IBitmapDrawable.__name__ = ["openfl","display","IBitmapDrawable"];
openfl.display.IBitmapDrawable.prototype = {
	__worldTransform: null
	,__worldColorTransform: null
	,blendMode: null
	,__renderCanvas: null
	,__renderGL: null
	,__renderMask: null
	,__updateChildren: null
	,__updateMask: null
	,__class__: openfl.display.IBitmapDrawable
};
openfl.display.DisplayObject = function() {
	this.__maskCached = false;
	openfl.events.EventDispatcher.call(this);
	this.__alpha = 1;
	this.__rotation = 0;
	this.__scaleX = 1;
	this.__scaleY = 1;
	this.__visible = true;
	this.__x = 0;
	this.__y = 0;
	this.__worldAlpha = 1;
	this.__worldTransform = new openfl.geom.Matrix();
	this.__rotationCache = 0;
	this.__rotationSine = 0;
	this.__rotationCosine = 1;
	this.__worldColorTransform = new openfl.geom.ColorTransform();
	this.__worldVisible = true;
	this.set_name("instance" + ++openfl.display.DisplayObject.__instanceCount);
};
$hxClasses["openfl.display.DisplayObject"] = openfl.display.DisplayObject;
openfl.display.DisplayObject.__name__ = ["openfl","display","DisplayObject"];
openfl.display.DisplayObject.__interfaces__ = [openfl.display.IBitmapDrawable];
openfl.display.DisplayObject.__super__ = openfl.events.EventDispatcher;
openfl.display.DisplayObject.prototype = $extend(openfl.events.EventDispatcher.prototype,{
	blendMode: null
	,cacheAsBitmap: null
	,loaderInfo: null
	,mouseX: null
	,mouseY: null
	,opaqueBackground: null
	,parent: null
	,root: null
	,scale9Grid: null
	,stage: null
	,__worldTransform: null
	,__worldColorTransform: null
	,__alpha: null
	,__filters: null
	,__graphics: null
	,__interactive: null
	,__isMask: null
	,__mask: null
	,__maskGraphics: null
	,__maskCached: null
	,__name: null
	,__renderable: null
	,__renderDirty: null
	,__rotation: null
	,__rotationCache: null
	,__rotationCosine: null
	,__rotationSine: null
	,__scaleX: null
	,__scaleY: null
	,__scrollRect: null
	,__transform: null
	,__transformDirty: null
	,__visible: null
	,__worldAlpha: null
	,__worldAlphaChanged: null
	,__worldClip: null
	,__worldClipChanged: null
	,__worldTransformCache: null
	,__worldTransformChanged: null
	,__worldVisible: null
	,__worldVisibleChanged: null
	,__worldZ: null
	,__x: null
	,__y: null
	,__canvas: null
	,__context: null
	,__style: null
	,dispatchEvent: function(event) {
		var result = openfl.events.EventDispatcher.prototype.dispatchEvent.call(this,event);
		if(event.__isCancelled) return true;
		if(event.bubbles && this.parent != null && this.parent != this) {
			event.eventPhase = openfl.events.EventPhase.BUBBLING_PHASE;
			this.parent.dispatchEvent(event);
		}
		return result;
	}
	,getBounds: function(targetCoordinateSpace) {
		var matrix = this.__getTransform();
		if(targetCoordinateSpace != null) {
			matrix = new openfl.geom.Matrix(matrix.a,matrix.b,matrix.c,matrix.d,matrix.tx,matrix.ty);
			matrix.concat(targetCoordinateSpace.__worldTransform.clone().invert());
		}
		var bounds = new openfl.geom.Rectangle();
		this.__getBounds(bounds,matrix);
		return bounds;
	}
	,getRect: function(targetCoordinateSpace) {
		return this.getBounds(targetCoordinateSpace);
	}
	,globalToLocal: function(pos) {
		return this.__getTransform().clone().invert().transformPoint(pos);
	}
	,hitTestObject: function(obj) {
		if(obj != null && obj.parent != null && this.parent != null) {
			var currentBounds = this.getBounds(this);
			var targetBounds = obj.getBounds(this);
			return currentBounds.intersects(targetBounds);
		}
		return false;
	}
	,hitTestPoint: function(x,y,shapeFlag) {
		if(shapeFlag == null) shapeFlag = false;
		if(this.parent != null) {
			var currentBounds = this.getBounds(this);
			return currentBounds.containsPoint(new openfl.geom.Point(x,y));
		}
		return false;
	}
	,localToGlobal: function(point) {
		return this.__getTransform().transformPoint(point);
	}
	,__broadcast: function(event,notifyChilden) {
		if(this.__eventMap != null && this.hasEventListener(event.type)) {
			var result = openfl.events.EventDispatcher.prototype.dispatchEvent.call(this,event);
			if(event.__isCancelled) return true;
			return result;
		}
		return false;
	}
	,__getBounds: function(rect,matrix) {
		if(this.__graphics != null) this.__graphics.__getBounds(rect,matrix != null?matrix:this.__worldTransform);
	}
	,__getInteractive: function(stack) {
	}
	,__getLocalBounds: function(rect) {
		this.__getTransform();
		this.__getBounds(rect,new openfl.geom.Matrix());
	}
	,__getTransform: function() {
		if(this.__transformDirty || openfl.display.DisplayObject.__worldTransformDirty > 0) {
			var list = [];
			var current = this;
			var transformDirty = this.__transformDirty;
			if(this.parent == null) {
				if(transformDirty) this.__update(true,false);
			} else while(current.parent != null) {
				list.push(current);
				current = current.parent;
				if(current.__transformDirty) transformDirty = true;
			}
			if(transformDirty) {
				var i = list.length;
				while(--i >= 0) list[i].__update(true,false);
			}
		}
		return this.__worldTransform;
	}
	,__hitTest: function(x,y,shapeFlag,stack,interactiveOnly) {
		if(this.__graphics != null) {
			if(this.get_visible() && this.__graphics.__hitTest(x,y,shapeFlag,this.__getTransform())) {
				if(!interactiveOnly) stack.push(this);
				return true;
			}
		}
		return false;
	}
	,__renderCanvas: function(renderSession) {
		if(this.__graphics != null) openfl._internal.renderer.canvas.CanvasShape.render(this,renderSession);
	}
	,__renderDOM: function(renderSession) {
		if(this.__graphics != null) openfl._internal.renderer.dom.DOMShape.render(this,renderSession);
	}
	,__renderGL: function(renderSession) {
		if(!this.__renderable || this.__worldAlpha <= 0) return;
		if(this.__graphics != null) openfl._internal.renderer.opengl.utils.GraphicsRenderer.render(this,renderSession);
	}
	,__renderMask: function(renderSession) {
		if(this.__graphics != null) openfl._internal.renderer.canvas.CanvasGraphics.renderMask(this.__graphics,renderSession);
	}
	,__setStageReference: function(stage) {
		if(this.stage != stage) {
			if(this.stage != null) this.dispatchEvent(new openfl.events.Event(openfl.events.Event.REMOVED_FROM_STAGE,false,false));
			this.stage = stage;
			if(stage != null) this.dispatchEvent(new openfl.events.Event(openfl.events.Event.ADDED_TO_STAGE,false,false));
		}
	}
	,__setRenderDirty: function() {
		if(!this.__renderDirty) {
			this.__renderDirty = true;
			openfl.display.DisplayObject.__worldRenderDirty++;
		}
	}
	,__setTransformDirty: function() {
		if(!this.__transformDirty) {
			this.__transformDirty = true;
			openfl.display.DisplayObject.__worldTransformDirty++;
		}
	}
	,__update: function(transformOnly,updateChildren,maskGraphics) {
		this.__renderable = this.get_visible() && this.get_scaleX() != 0 && this.get_scaleY() != 0 && !this.__isMask;
		if(this.get_rotation() != this.__rotationCache) {
			this.__rotationCache = this.get_rotation();
			var radians = this.get_rotation() * (Math.PI / 180);
			this.__rotationSine = Math.sin(radians);
			this.__rotationCosine = Math.cos(radians);
		}
		if(this.parent != null) {
			var parentTransform = this.parent.__worldTransform;
			var a00 = this.__rotationCosine * this.get_scaleX();
			var a01 = this.__rotationSine * this.get_scaleX();
			var a10 = -this.__rotationSine * this.get_scaleY();
			var a11 = this.__rotationCosine * this.get_scaleY();
			var b00 = parentTransform.a;
			var b01 = parentTransform.b;
			var b10 = parentTransform.c;
			var b11 = parentTransform.d;
			if(this.__worldTransform == null) this.__worldTransform = new openfl.geom.Matrix();
			this.__worldTransform.a = a00 * b00 + a01 * b10;
			this.__worldTransform.b = a00 * b01 + a01 * b11;
			this.__worldTransform.c = a10 * b00 + a11 * b10;
			this.__worldTransform.d = a10 * b01 + a11 * b11;
			if(this.get_scrollRect() == null) {
				this.__worldTransform.tx = this.get_x() * b00 + this.get_y() * b10 + parentTransform.tx;
				this.__worldTransform.ty = this.get_x() * b01 + this.get_y() * b11 + parentTransform.ty;
			} else {
				this.__worldTransform.tx = (this.get_x() - this.get_scrollRect().x) * b00 + (this.get_y() - this.get_scrollRect().y) * b10 + parentTransform.tx;
				this.__worldTransform.ty = (this.get_x() - this.get_scrollRect().x) * b01 + (this.get_y() - this.get_scrollRect().y) * b11 + parentTransform.ty;
			}
			if(this.__isMask) this.__maskCached = false;
		} else {
			this.__worldTransform.a = this.__rotationCosine * this.get_scaleX();
			this.__worldTransform.c = -this.__rotationSine * this.get_scaleY();
			this.__worldTransform.b = this.__rotationSine * this.get_scaleX();
			this.__worldTransform.d = this.__rotationCosine * this.get_scaleY();
			if(this.get_scrollRect() == null) {
				this.__worldTransform.tx = this.get_x();
				this.__worldTransform.ty = this.get_y();
			} else {
				this.__worldTransform.tx = this.get_y() - this.get_scrollRect().x;
				this.__worldTransform.ty = this.get_y() - this.get_scrollRect().y;
			}
		}
		if(updateChildren && this.__transformDirty) {
			this.__transformDirty = false;
			openfl.display.DisplayObject.__worldTransformDirty--;
		}
		if(!transformOnly && this.__mask != null && !this.__mask.__maskCached) {
			if(this.__maskGraphics == null) this.__maskGraphics = new openfl.display.Graphics();
			this.__maskGraphics.clear();
			this.__mask.__update(true,true,this.__maskGraphics);
			this.__mask.__maskCached = true;
		}
		if(maskGraphics != null) this.__updateMask(maskGraphics);
		if(!transformOnly) {
			this.__worldTransformChanged = !this.__worldTransform.equals(this.__worldTransformCache);
			this.__worldTransformCache = this.__worldTransform.clone();
			var worldClip = null;
			if(!this.__worldColorTransform.__equals(this.get_transform().get_colorTransform())) this.__worldColorTransform = this.get_transform().get_colorTransform().__clone();
			if(this.parent != null) {
				var worldVisible = this.parent.__worldVisible && this.get_visible();
				this.__worldVisibleChanged = this.__worldVisible != worldVisible;
				this.__worldVisible = worldVisible;
				var worldAlpha = this.get_alpha() * this.parent.__worldAlpha;
				this.__worldAlphaChanged = this.__worldAlpha != worldAlpha;
				this.__worldAlpha = worldAlpha;
				if(this.parent.__worldClip != null) worldClip = this.parent.__worldClip.clone();
				if(this.get_scrollRect() != null) {
					var bounds = this.get_scrollRect().clone();
					bounds = bounds.transform(this.__worldTransform);
					if(worldClip != null) bounds.__contract(worldClip.x - this.get_scrollRect().x,worldClip.y - this.get_scrollRect().y,worldClip.width,worldClip.height);
					worldClip = bounds;
				}
			} else {
				this.__worldAlpha = this.get_alpha();
				this.__worldVisibleChanged = this.__worldVisible != this.get_visible();
				this.__worldVisible = this.get_visible();
				this.__worldAlphaChanged = this.__worldAlpha != this.get_alpha();
				if(this.get_scrollRect() != null) worldClip = this.get_scrollRect().clone().transform(this.__worldTransform);
			}
			this.__worldClipChanged = worldClip == null && this.__worldClip != null || worldClip != null && !worldClip.equals(this.__worldClip);
			this.__worldClip = worldClip;
			if(updateChildren && this.__renderDirty) this.__renderDirty = false;
		}
	}
	,__updateChildren: function(transformOnly) {
		this.__renderable = this.get_visible() && this.get_scaleX() != 0 && this.get_scaleY() != 0 && !this.__isMask;
		if(!this.__renderable && !this.__isMask) return;
		this.__worldAlpha = this.get_alpha();
		if(this.__transformDirty) {
			this.__transformDirty = false;
			openfl.display.DisplayObject.__worldTransformDirty--;
		}
	}
	,__updateMask: function(maskGraphics) {
		if(this.__graphics != null) {
			maskGraphics.__commands.push(openfl.display.DrawCommand.OverrideMatrix(this.__worldTransform));
			maskGraphics.__commands = maskGraphics.__commands.concat(this.__graphics.__commands);
			maskGraphics.set___dirty(true);
			maskGraphics.__visible = true;
			if(maskGraphics.__bounds == null) maskGraphics.__bounds = new openfl.geom.Rectangle();
			this.__graphics.__getBounds(maskGraphics.__bounds,openfl.geom.Matrix.__identity);
		}
	}
	,get_alpha: function() {
		return this.__alpha;
	}
	,set_alpha: function(value) {
		if(value != this.__alpha) {
			if(!this.__renderDirty) {
				this.__renderDirty = true;
				openfl.display.DisplayObject.__worldRenderDirty++;
			}
		}
		return this.__alpha = value;
	}
	,get_filters: function() {
		if(this.__filters == null) return new Array(); else return this.__filters.slice();
	}
	,set_filters: function(value) {
		return value;
	}
	,get_height: function() {
		var bounds = new openfl.geom.Rectangle();
		this.__getTransform();
		this.__getBounds(bounds,new openfl.geom.Matrix());
		return bounds.height * this.get_scaleY();
	}
	,set_height: function(value) {
		var bounds = new openfl.geom.Rectangle();
		this.__getTransform();
		this.__getBounds(bounds,new openfl.geom.Matrix());
		if(value != bounds.height) this.set_scaleY(value / bounds.height); else this.set_scaleY(1);
		return value;
	}
	,get_mask: function() {
		return this.__mask;
	}
	,set_mask: function(value) {
		if(value != this.__mask) {
			if(!this.__transformDirty) {
				this.__transformDirty = true;
				openfl.display.DisplayObject.__worldTransformDirty++;
			}
			if(!this.__renderDirty) {
				this.__renderDirty = true;
				openfl.display.DisplayObject.__worldRenderDirty++;
			}
		}
		if(this.__mask != null) {
			this.__mask.__isMask = false;
			this.__mask.__maskCached = false;
			this.__mask.__setTransformDirty();
			this.__mask.__setRenderDirty();
			this.__maskGraphics = null;
		}
		if(value != null) value.__isMask = true;
		return this.__mask = value;
	}
	,get_mouseX: function() {
		if(this.stage != null) return this.globalToLocal(new openfl.geom.Point(this.stage.__mouseX,0)).x;
		return 0;
	}
	,get_mouseY: function() {
		if(this.stage != null) return this.globalToLocal(new openfl.geom.Point(0,this.stage.__mouseY)).y;
		return 0;
	}
	,get_name: function() {
		return this.__name;
	}
	,set_name: function(value) {
		return this.__name = value;
	}
	,get_root: function() {
		if(this.stage != null) return openfl.Lib.current;
		return null;
	}
	,get_rotation: function() {
		return this.__rotation;
	}
	,set_rotation: function(value) {
		if(value != this.__rotation) {
			if(!this.__transformDirty) {
				this.__transformDirty = true;
				openfl.display.DisplayObject.__worldTransformDirty++;
			}
		}
		return this.__rotation = value;
	}
	,get_scaleX: function() {
		return this.__scaleX;
	}
	,set_scaleX: function(value) {
		if(value != this.__scaleX) {
			if(!this.__transformDirty) {
				this.__transformDirty = true;
				openfl.display.DisplayObject.__worldTransformDirty++;
			}
		}
		return this.__scaleX = value;
	}
	,get_scaleY: function() {
		return this.__scaleY;
	}
	,set_scaleY: function(value) {
		if(this.__scaleY != value) {
			if(!this.__transformDirty) {
				this.__transformDirty = true;
				openfl.display.DisplayObject.__worldTransformDirty++;
			}
		}
		return this.__scaleY = value;
	}
	,get_scrollRect: function() {
		return this.__scrollRect;
	}
	,set_scrollRect: function(value) {
		if(value != this.__scrollRect) {
			if(!this.__transformDirty) {
				this.__transformDirty = true;
				openfl.display.DisplayObject.__worldTransformDirty++;
			}
			if(!this.__renderDirty) {
				this.__renderDirty = true;
				openfl.display.DisplayObject.__worldRenderDirty++;
			}
		}
		return this.__scrollRect = value;
	}
	,get_transform: function() {
		if(this.__transform == null) this.__transform = new openfl.geom.Transform(this);
		return this.__transform;
	}
	,set_transform: function(value) {
		if(value == null) throw new openfl.errors.TypeError("Parameter transform must be non-null.");
		if(this.__transform == null) this.__transform = new openfl.geom.Transform(this);
		if(!this.__transformDirty) {
			this.__transformDirty = true;
			openfl.display.DisplayObject.__worldTransformDirty++;
		}
		this.__transform.set_matrix(value.get_matrix().clone());
		this.__transform.set_colorTransform(value.get_colorTransform().__clone());
		return this.__transform;
	}
	,get_visible: function() {
		return this.__visible;
	}
	,set_visible: function(value) {
		if(value != this.__visible) {
			if(!this.__renderDirty) {
				this.__renderDirty = true;
				openfl.display.DisplayObject.__worldRenderDirty++;
			}
		}
		return this.__visible = value;
	}
	,get_width: function() {
		var bounds = new openfl.geom.Rectangle();
		this.__getTransform();
		this.__getBounds(bounds,new openfl.geom.Matrix());
		return bounds.width * this.get_scaleX();
	}
	,set_width: function(value) {
		var bounds = new openfl.geom.Rectangle();
		this.__getTransform();
		this.__getBounds(bounds,new openfl.geom.Matrix());
		if(value != bounds.width) this.set_scaleX(value / bounds.width); else this.set_scaleX(1);
		return value;
	}
	,get_x: function() {
		return this.__x;
	}
	,set_x: function(value) {
		if(value != this.__x) {
			if(!this.__transformDirty) {
				this.__transformDirty = true;
				openfl.display.DisplayObject.__worldTransformDirty++;
			}
		}
		return this.__x = value;
	}
	,get_y: function() {
		return this.__y;
	}
	,set_y: function(value) {
		if(value != this.__y) {
			if(!this.__transformDirty) {
				this.__transformDirty = true;
				openfl.display.DisplayObject.__worldTransformDirty++;
			}
		}
		return this.__y = value;
	}
	,__class__: openfl.display.DisplayObject
	,__properties__: {set_y:"set_y",get_y:"get_y",set_x:"set_x",get_x:"get_x",set_width:"set_width",get_width:"get_width",set_visible:"set_visible",get_visible:"get_visible",set_transform:"set_transform",get_transform:"get_transform",set_scrollRect:"set_scrollRect",get_scrollRect:"get_scrollRect",set_scaleY:"set_scaleY",get_scaleY:"get_scaleY",set_scaleX:"set_scaleX",get_scaleX:"get_scaleX",set_rotation:"set_rotation",get_rotation:"get_rotation",get_root:"get_root",set_name:"set_name",get_name:"get_name",get_mouseY:"get_mouseY",get_mouseX:"get_mouseX",set_mask:"set_mask",get_mask:"get_mask",set_height:"set_height",get_height:"get_height",set_filters:"set_filters",get_filters:"get_filters",set_alpha:"set_alpha",get_alpha:"get_alpha"}
});
openfl.display.InteractiveObject = function() {
	openfl.display.DisplayObject.call(this);
	this.doubleClickEnabled = false;
	this.mouseEnabled = true;
	this.needsSoftKeyboard = false;
	this.tabEnabled = true;
	this.tabIndex = -1;
};
$hxClasses["openfl.display.InteractiveObject"] = openfl.display.InteractiveObject;
openfl.display.InteractiveObject.__name__ = ["openfl","display","InteractiveObject"];
openfl.display.InteractiveObject.__super__ = openfl.display.DisplayObject;
openfl.display.InteractiveObject.prototype = $extend(openfl.display.DisplayObject.prototype,{
	doubleClickEnabled: null
	,focusRect: null
	,mouseEnabled: null
	,needsSoftKeyboard: null
	,softKeyboardInputAreaOfInterest: null
	,tabEnabled: null
	,tabIndex: null
	,requestSoftKeyboard: function() {
		openfl.Lib.notImplemented("InteractiveObject.requestSoftKeyboard");
		return false;
	}
	,__getInteractive: function(stack) {
		stack.push(this);
		if(this.parent != null) this.parent.__getInteractive(stack);
	}
	,__class__: openfl.display.InteractiveObject
});
openfl.display.DisplayObjectContainer = function() {
	openfl.display.InteractiveObject.call(this);
	this.mouseChildren = true;
	this.__children = new Array();
	this.__removedChildren = new Array();
};
$hxClasses["openfl.display.DisplayObjectContainer"] = openfl.display.DisplayObjectContainer;
openfl.display.DisplayObjectContainer.__name__ = ["openfl","display","DisplayObjectContainer"];
openfl.display.DisplayObjectContainer.__super__ = openfl.display.InteractiveObject;
openfl.display.DisplayObjectContainer.prototype = $extend(openfl.display.InteractiveObject.prototype,{
	mouseChildren: null
	,numChildren: null
	,tabChildren: null
	,__children: null
	,__removedChildren: null
	,addChild: function(child) {
		if(child != null) {
			if(child.parent != null) child.parent.removeChild(child);
			this.__children.push(child);
			child.parent = this;
			if(this.stage != null) child.__setStageReference(this.stage);
			if(!child.__transformDirty) {
				child.__transformDirty = true;
				openfl.display.DisplayObject.__worldTransformDirty++;
			}
			if(!child.__renderDirty) {
				child.__renderDirty = true;
				openfl.display.DisplayObject.__worldRenderDirty++;
			}
			var event = new openfl.events.Event(openfl.events.Event.ADDED,true);
			event.target = child;
			child.dispatchEvent(event);
		}
		return child;
	}
	,addChildAt: function(child,index) {
		if(index > this.__children.length || index < 0) throw "Invalid index position " + index;
		if(child.parent == this) HxOverrides.remove(this.__children,child); else {
			if(child.parent != null) child.parent.removeChild(child);
			child.parent = this;
			if(this.stage != null) child.__setStageReference(this.stage);
			if(!child.__transformDirty) {
				child.__transformDirty = true;
				openfl.display.DisplayObject.__worldTransformDirty++;
			}
			if(!child.__renderDirty) {
				child.__renderDirty = true;
				openfl.display.DisplayObject.__worldRenderDirty++;
			}
			var event = new openfl.events.Event(openfl.events.Event.ADDED,true);
			event.target = child;
			child.dispatchEvent(event);
		}
		this.__children.splice(index,0,child);
		return child;
	}
	,areInaccessibleObjectsUnderPoint: function(point) {
		return false;
	}
	,contains: function(child) {
		return HxOverrides.indexOf(this.__children,child,0) > -1;
	}
	,getChildAt: function(index) {
		if(index >= 0 && index < this.__children.length) return this.__children[index];
		return null;
	}
	,getChildByName: function(name) {
		var _g = 0;
		var _g1 = this.__children;
		while(_g < _g1.length) {
			var child = _g1[_g];
			++_g;
			if(child.get_name() == name) return child;
		}
		return null;
	}
	,getChildIndex: function(child) {
		var _g1 = 0;
		var _g = this.__children.length;
		while(_g1 < _g) {
			var i = _g1++;
			if(this.__children[i] == child) return i;
		}
		return -1;
	}
	,getObjectsUnderPoint: function(point) {
		point = this.localToGlobal(point);
		var stack = new Array();
		this.__hitTest(point.x,point.y,false,stack,false);
		stack.reverse();
		return stack;
	}
	,removeChild: function(child) {
		if(child != null && child.parent == this) {
			if(this.stage != null) child.__setStageReference(null);
			child.parent = null;
			HxOverrides.remove(this.__children,child);
			this.__removedChildren.push(child);
			if(!child.__transformDirty) {
				child.__transformDirty = true;
				openfl.display.DisplayObject.__worldTransformDirty++;
			}
			if(!child.__renderDirty) {
				child.__renderDirty = true;
				openfl.display.DisplayObject.__worldRenderDirty++;
			}
			child.dispatchEvent(new openfl.events.Event(openfl.events.Event.REMOVED,true));
		}
		return child;
	}
	,removeChildAt: function(index) {
		if(index >= 0 && index < this.__children.length) return this.removeChild(this.__children[index]);
		return null;
	}
	,removeChildren: function(beginIndex,endIndex) {
		if(endIndex == null) endIndex = 2147483647;
		if(beginIndex == null) beginIndex = 0;
		if(endIndex == 2147483647) {
			endIndex = this.__children.length - 1;
			if(endIndex < 0) return;
		}
		if(beginIndex > this.__children.length - 1) return; else if(endIndex < beginIndex || beginIndex < 0 || endIndex > this.__children.length) throw new openfl.errors.RangeError("The supplied index is out of bounds.");
		var numRemovals = endIndex - beginIndex;
		while(numRemovals >= 0) {
			this.removeChildAt(beginIndex);
			numRemovals--;
		}
	}
	,setChildIndex: function(child,index) {
		if(index >= 0 && index <= this.__children.length && child.parent == this) {
			HxOverrides.remove(this.__children,child);
			this.__children.splice(index,0,child);
		}
	}
	,swapChildren: function(child1,child2) {
		if(child1.parent == this && child2.parent == this) {
			var index1 = HxOverrides.indexOf(this.__children,child1,0);
			var index2 = HxOverrides.indexOf(this.__children,child2,0);
			this.__children[index1] = child2;
			this.__children[index2] = child1;
		}
	}
	,swapChildrenAt: function(child1,child2) {
		var swap = this.__children[child1];
		this.__children[child1] = this.__children[child2];
		this.__children[child2] = swap;
		swap = null;
	}
	,__broadcast: function(event,notifyChilden) {
		if(event.target == null) event.target = this;
		if(notifyChilden) {
			var _g = 0;
			var _g1 = this.__children;
			while(_g < _g1.length) {
				var child = _g1[_g];
				++_g;
				child.__broadcast(event,true);
				if(event.__isCancelled) return true;
			}
		}
		return openfl.display.InteractiveObject.prototype.__broadcast.call(this,event,notifyChilden);
	}
	,__getBounds: function(rect,matrix) {
		if(this.__children.length == 0) return;
		var matrixCache = null;
		if(matrix != null) {
			matrixCache = this.__worldTransform;
			this.__worldTransform = matrix;
			this.__updateChildren(true);
		}
		var _g = 0;
		var _g1 = this.__children;
		while(_g < _g1.length) {
			var child = _g1[_g];
			++_g;
			if(!child.__renderable) continue;
			child.__getBounds(rect,null);
		}
		if(matrix != null) {
			this.__worldTransform = matrixCache;
			this.__updateChildren(true);
		}
	}
	,__hitTest: function(x,y,shapeFlag,stack,interactiveOnly) {
		if(!this.get_visible() || interactiveOnly && !this.mouseEnabled) return false;
		var i = this.__children.length;
		if(interactiveOnly) {
			if(stack == null || !this.mouseChildren) {
				while(--i >= 0) if(this.__children[i].__hitTest(x,y,shapeFlag,null,true)) {
					if(stack != null) stack.push(this);
					return true;
				}
			} else if(stack != null) {
				var length = stack.length;
				while(--i >= 0) if(this.__children[i].__hitTest(x,y,shapeFlag,stack,interactiveOnly)) {
					stack.splice(length,0,this);
					return true;
				}
			}
		} else while(--i >= 0) this.__children[i].__hitTest(x,y,shapeFlag,stack,false);
		return false;
	}
	,__renderCanvas: function(renderSession) {
		if(!this.__renderable || this.__worldAlpha <= 0) return;
		openfl.display.InteractiveObject.prototype.__renderCanvas.call(this,renderSession);
		if(this.get_scrollRect() != null) {
		}
		if(this.__mask != null) renderSession.maskManager.pushMask(this.__mask);
		var _g = 0;
		var _g1 = this.__children;
		while(_g < _g1.length) {
			var child = _g1[_g];
			++_g;
			child.__renderCanvas(renderSession);
		}
		this.__removedChildren = [];
		if(this.__mask != null) renderSession.maskManager.popMask();
		if(this.get_scrollRect() != null) {
		}
	}
	,__renderDOM: function(renderSession) {
		openfl.display.InteractiveObject.prototype.__renderDOM.call(this,renderSession);
		if(this.__mask != null) renderSession.maskManager.pushMask(this.__mask);
		var _g = 0;
		var _g1 = this.__children;
		while(_g < _g1.length) {
			var child = _g1[_g];
			++_g;
			child.__renderDOM(renderSession);
		}
		var _g2 = 0;
		var _g11 = this.__removedChildren;
		while(_g2 < _g11.length) {
			var orphan = _g11[_g2];
			++_g2;
			if(orphan.stage == null) orphan.__renderDOM(renderSession);
		}
		this.__removedChildren = [];
		if(this.__mask != null) renderSession.maskManager.popMask();
	}
	,__renderGL: function(renderSession) {
		if(!this.__renderable || this.__worldAlpha <= 0) return;
		var masked = this.__mask != null && this.__maskGraphics != null && this.__maskGraphics.__commands.length > 0;
		if(masked) {
			renderSession.spriteBatch.stop();
			renderSession.maskManager.pushMask(this,renderSession);
			renderSession.spriteBatch.start();
		}
		openfl.display.InteractiveObject.prototype.__renderGL.call(this,renderSession);
		var _g = 0;
		var _g1 = this.__children;
		while(_g < _g1.length) {
			var child = _g1[_g];
			++_g;
			child.__renderGL(renderSession);
		}
		if(masked) {
			renderSession.spriteBatch.stop();
			renderSession.maskManager.popMask(this,renderSession);
			renderSession.spriteBatch.start();
		}
		this.__removedChildren = [];
	}
	,__renderMask: function(renderSession) {
		if(this.__graphics != null) openfl._internal.renderer.canvas.CanvasGraphics.renderMask(this.__graphics,renderSession);
		var bounds = new openfl.geom.Rectangle();
		this.__getTransform();
		this.__getBounds(bounds,new openfl.geom.Matrix());
		renderSession.context.rect(0,0,bounds.width,bounds.height);
	}
	,__setStageReference: function(stage) {
		if(this.stage != stage) {
			if(this.stage != null) this.dispatchEvent(new openfl.events.Event(openfl.events.Event.REMOVED_FROM_STAGE,false,false));
			this.stage = stage;
			if(stage != null) this.dispatchEvent(new openfl.events.Event(openfl.events.Event.ADDED_TO_STAGE,false,false));
			if(this.__children != null) {
				var _g = 0;
				var _g1 = this.__children;
				while(_g < _g1.length) {
					var child = _g1[_g];
					++_g;
					child.__setStageReference(stage);
				}
			}
		}
	}
	,__update: function(transformOnly,updateChildren,maskGraphics) {
		openfl.display.InteractiveObject.prototype.__update.call(this,transformOnly,updateChildren,maskGraphics);
		if(!this.__renderable && !this.__isMask && !this.__worldAlphaChanged && !this.__worldClipChanged && !this.__worldTransformChanged && !this.__worldVisibleChanged) return;
		if(updateChildren) {
			var _g = 0;
			var _g1 = this.__children;
			while(_g < _g1.length) {
				var child = _g1[_g];
				++_g;
				child.__update(transformOnly,true,maskGraphics);
			}
		}
	}
	,__updateChildren: function(transformOnly) {
		openfl.display.InteractiveObject.prototype.__updateChildren.call(this,transformOnly);
		var _g = 0;
		var _g1 = this.__children;
		while(_g < _g1.length) {
			var child = _g1[_g];
			++_g;
			child.__update(transformOnly,true);
		}
	}
	,get_numChildren: function() {
		return this.__children.length;
	}
	,__class__: openfl.display.DisplayObjectContainer
	,__properties__: $extend(openfl.display.InteractiveObject.prototype.__properties__,{get_numChildren:"get_numChildren"})
});
openfl.display.Sprite = function() {
	openfl.display.DisplayObjectContainer.call(this);
	this.buttonMode = false;
	this.useHandCursor = true;
	this.loaderInfo = openfl.display.LoaderInfo.create(null);
};
$hxClasses["openfl.display.Sprite"] = openfl.display.Sprite;
openfl.display.Sprite.__name__ = ["openfl","display","Sprite"];
openfl.display.Sprite.__super__ = openfl.display.DisplayObjectContainer;
openfl.display.Sprite.prototype = $extend(openfl.display.DisplayObjectContainer.prototype,{
	buttonMode: null
	,graphics: null
	,useHandCursor: null
	,startDrag: function(lockCenter,bounds) {
		if(lockCenter == null) lockCenter = false;
		if(this.stage != null) this.stage.__startDrag(this,lockCenter,bounds);
	}
	,stopDrag: function() {
		if(this.stage != null) this.stage.__stopDrag(this);
	}
	,__hitTest: function(x,y,shapeFlag,stack,interactiveOnly) {
		if(!this.get_visible() || interactiveOnly && !this.mouseEnabled) return false;
		var length = 0;
		if(stack != null) length = stack.length;
		if(openfl.display.DisplayObjectContainer.prototype.__hitTest.call(this,x,y,shapeFlag,stack,interactiveOnly)) return interactiveOnly; else if(this.__graphics != null && this.__graphics.__hitTest(x,y,shapeFlag,this.__getTransform())) {
			if(stack != null) stack.push(this);
			return true;
		}
		return false;
	}
	,get_graphics: function() {
		if(this.__graphics == null) {
			this.__graphics = new openfl.display.Graphics();
			this.__graphics.__owner = this;
		}
		return this.__graphics;
	}
	,__class__: openfl.display.Sprite
	,__properties__: $extend(openfl.display.DisplayObjectContainer.prototype.__properties__,{get_graphics:"get_graphics"})
});
var Main = function() {
	openfl.display.Sprite.call(this);
	if(this.stage != null) this.start(); else this.addEventListener(starling.events.Event.ADDED_TO_STAGE,$bind(this,this.onAddedToStage));
};
$hxClasses["Main"] = Main;
Main.__name__ = ["Main"];
Main.__super__ = openfl.display.Sprite;
Main.prototype = $extend(openfl.display.Sprite.prototype,{
	mStarling: null
	,onAddedToStage: function(event) {
		this.removeEventListener(starling.events.Event.ADDED_TO_STAGE,$bind(this,this.onAddedToStage));
		this.start();
	}
	,start: function() {
		var _g = this;
		starling.core.Starling.set_multitouchEnabled(true);
		starling.core.Starling.set_handleLostContext(true);
		starling.textures.RenderTexture.optimizePersistentBuffers = true;
		this.mStarling = new starling.core.Starling(Game,this.stage,null,null,"auto","baselineExtended");
		this.mStarling.set_antiAliasing(2);
		this.mStarling.set_simulateMultitouch(true);
		this.mStarling.addEventListener(starling.events.Event.ROOT_CREATED,function() {
			_g.loadAssets($bind(_g,_g.startGame));
		});
		this.mStarling.start();
	}
	,loadAssets: function(onComplete) {
		var assets = new starling.utils.AssetManager();
		assets.enqueueWithName(EmbeddedAssets.get_atlas(),"atlas");
		assets.enqueueWithName(EmbeddedAssets.get_atlas_xml(),"atlas_xml");
		assets.enqueueWithName(EmbeddedAssets.get_background(),"background");
		assets.enqueueWithName(EmbeddedAssets.get_compressed_texture(),"compressed_texture");
		assets.enqueueWithName(EmbeddedAssets.get_desyrel(),"desyrel");
		assets.enqueueWithName(EmbeddedAssets.get_desyrel_fnt(),"desyrel_fnt");
		assets.loadQueue(function(ratio) {
			if(ratio == 1) onComplete(assets);
		});
	}
	,startGame: function(assets) {
		var game = this.mStarling.get_root();
		game.start(assets);
	}
	,__class__: Main
});
var DocumentClass = function() {
	openfl.Lib.current.addChild(this);
	Main.call(this);
	this.dispatchEvent(new openfl.events.Event(openfl.events.Event.ADDED_TO_STAGE,false,false));
};
$hxClasses["DocumentClass"] = DocumentClass;
DocumentClass.__name__ = ["DocumentClass"];
DocumentClass.__super__ = Main;
DocumentClass.prototype = $extend(Main.prototype,{
	__class__: DocumentClass
});
var Constants = function() { };
$hxClasses["Constants"] = Constants;
Constants.__name__ = ["Constants"];
var lime = {};
lime.AssetLibrary = function() {
};
$hxClasses["lime.AssetLibrary"] = lime.AssetLibrary;
lime.AssetLibrary.__name__ = ["lime","AssetLibrary"];
lime.AssetLibrary.prototype = {
	eventCallback: null
	,exists: function(id,type) {
		return false;
	}
	,getAudioBuffer: function(id) {
		return null;
	}
	,getBytes: function(id) {
		return null;
	}
	,getFont: function(id) {
		return null;
	}
	,getImage: function(id) {
		return null;
	}
	,getPath: function(id) {
		return null;
	}
	,getText: function(id) {
		var bytes = this.getBytes(id);
		if(bytes == null) return null; else return bytes.readUTFBytes(bytes.length);
	}
	,isLocal: function(id,type) {
		return true;
	}
	,list: function(type) {
		return null;
	}
	,load: function(handler) {
		handler(this);
	}
	,loadAudioBuffer: function(id,handler) {
		handler(this.getAudioBuffer(id));
	}
	,loadBytes: function(id,handler) {
		handler(this.getBytes(id));
	}
	,loadFont: function(id,handler) {
		handler(this.getFont(id));
	}
	,loadImage: function(id,handler) {
		handler(this.getImage(id));
	}
	,loadText: function(id,handler) {
		var callback = function(bytes) {
			if(bytes == null) handler(null); else handler(bytes.readUTFBytes(bytes.length));
		};
		this.loadBytes(id,callback);
	}
	,__class__: lime.AssetLibrary
};
var DefaultAssetLibrary = function() {
	this.type = new haxe.ds.StringMap();
	this.path = new haxe.ds.StringMap();
	this.className = new haxe.ds.StringMap();
	lime.AssetLibrary.call(this);
	var id;
	id = "assets/audio/wing_flap.mp3";
	this.path.set(id,id);
	this.type.set(id,"MUSIC");
	id = "assets/fonts/1x/desyrel.fnt";
	this.path.set(id,id);
	this.type.set(id,"TEXT");
	id = "assets/fonts/1x/desyrel.png";
	this.path.set(id,id);
	this.type.set(id,"IMAGE");
	id = "assets/fonts/2x/desyrel.fnt";
	this.path.set(id,id);
	this.type.set(id,"TEXT");
	id = "assets/fonts/2x/desyrel.png";
	this.path.set(id,id);
	this.type.set(id,"IMAGE");
	id = "assets/fonts/Ubuntu-License.txt";
	this.path.set(id,id);
	this.type.set(id,"TEXT");
	id = "assets/fonts/Ubuntu-R.ttf";
	this.className.set(id,__ASSET__assets_fonts_ubuntu_r_ttf);
	this.type.set(id,"FONT");
	id = "assets/textures/1x/atlas.png";
	this.path.set(id,id);
	this.type.set(id,"IMAGE");
	id = "assets/textures/1x/atlas.xml";
	this.path.set(id,id);
	this.type.set(id,"TEXT");
	id = "assets/textures/1x/background.jpg";
	this.path.set(id,id);
	this.type.set(id,"IMAGE");
	id = "assets/textures/1x/compressed_texture.atf";
	this.path.set(id,id);
	this.type.set(id,"BINARY");
	id = "assets/textures/1x/jsHeader.png";
	this.path.set(id,id);
	this.type.set(id,"IMAGE");
	id = "assets/textures/1x/title-logo.png";
	this.path.set(id,id);
	this.type.set(id,"IMAGE");
	id = "assets/textures/2x/atlas.png";
	this.path.set(id,id);
	this.type.set(id,"IMAGE");
	id = "assets/textures/2x/atlas.xml";
	this.path.set(id,id);
	this.type.set(id,"TEXT");
	id = "assets/textures/2x/background.jpg";
	this.path.set(id,id);
	this.type.set(id,"IMAGE");
	id = "assets/textures/2x/compressed_texture.atf";
	this.path.set(id,id);
	this.type.set(id,"BINARY");
	id = "assets/textures/Untitled.png";
	this.path.set(id,id);
	this.type.set(id,"IMAGE");
	var assetsPrefix = ApplicationMain.config.assetsPrefix;
	if(assetsPrefix != null) {
		var $it0 = this.path.keys();
		while( $it0.hasNext() ) {
			var k = $it0.next();
			var value = assetsPrefix + this.path.get(k);
			this.path.set(k,value);
		}
	}
};
$hxClasses["DefaultAssetLibrary"] = DefaultAssetLibrary;
DefaultAssetLibrary.__name__ = ["DefaultAssetLibrary"];
DefaultAssetLibrary.__super__ = lime.AssetLibrary;
DefaultAssetLibrary.prototype = $extend(lime.AssetLibrary.prototype,{
	className: null
	,path: null
	,type: null
	,lastModified: null
	,timer: null
	,exists: function(id,type) {
		var requestedType;
		if(type != null) requestedType = js.Boot.__cast(type , String); else requestedType = null;
		var assetType = this.type.get(id);
		if(assetType != null) {
			if(assetType == requestedType || (requestedType == "SOUND" || requestedType == "MUSIC") && (assetType == "MUSIC" || assetType == "SOUND")) return true;
			if(requestedType == "BINARY" || requestedType == null || assetType == "BINARY" && requestedType == "TEXT") return true;
		}
		return false;
	}
	,getAudioBuffer: function(id) {
		return null;
	}
	,getBytes: function(id) {
		var bytes = null;
		var data = ((function($this) {
			var $r;
			var key = $this.path.get(id);
			$r = lime.app.Preloader.loaders.get(key);
			return $r;
		}(this))).data;
		if(typeof(data) == "string") {
			bytes = new lime.utils.ByteArray();
			bytes.writeUTFBytes(data);
		} else if(js.Boot.__instanceof(data,lime.utils.ByteArray)) bytes = data; else bytes = null;
		if(bytes != null) {
			bytes.position = 0;
			return bytes;
		} else return null;
	}
	,getFont: function(id) {
		return js.Boot.__cast(Type.createInstance(this.className.get(id),[]) , lime.text.Font);
	}
	,getImage: function(id) {
		return lime.graphics.Image.fromImageElement((function($this) {
			var $r;
			var key = $this.path.get(id);
			$r = lime.app.Preloader.images.get(key);
			return $r;
		}(this)));
	}
	,getPath: function(id) {
		return this.path.get(id);
	}
	,getText: function(id) {
		var bytes = null;
		var data = ((function($this) {
			var $r;
			var key = $this.path.get(id);
			$r = lime.app.Preloader.loaders.get(key);
			return $r;
		}(this))).data;
		if(typeof(data) == "string") return data; else if(js.Boot.__instanceof(data,lime.utils.ByteArray)) bytes = data; else bytes = null;
		if(bytes != null) {
			bytes.position = 0;
			return bytes.readUTFBytes(bytes.length);
		} else return null;
	}
	,isLocal: function(id,type) {
		var requestedType;
		if(type != null) requestedType = js.Boot.__cast(type , String); else requestedType = null;
		return true;
	}
	,list: function(type) {
		var requestedType;
		if(type != null) requestedType = js.Boot.__cast(type , String); else requestedType = null;
		var items = [];
		var $it0 = this.type.keys();
		while( $it0.hasNext() ) {
			var id = $it0.next();
			if(requestedType == null || this.exists(id,type)) items.push(id);
		}
		return items;
	}
	,loadAudioBuffer: function(id,handler) {
		handler(this.getAudioBuffer(id));
	}
	,loadBytes: function(id,handler) {
		handler(this.getBytes(id));
	}
	,loadImage: function(id,handler) {
		handler(this.getImage(id));
	}
	,loadText: function(id,handler) {
		var callback = function(bytes) {
			if(bytes == null) handler(null); else handler(bytes.readUTFBytes(bytes.length));
		};
		this.loadBytes(id,callback);
	}
	,__class__: DefaultAssetLibrary
});
lime.text = {};
lime.text.Font = function(name) {
	this.name = name;
	if(this.__fontPath != null) this.__fromFile(this.__fontPath);
};
$hxClasses["lime.text.Font"] = lime.text.Font;
lime.text.Font.__name__ = ["lime","text","Font"];
lime.text.Font.fromBytes = function(bytes) {
	var font = new lime.text.Font();
	font.__fromBytes(bytes);
	return font;
};
lime.text.Font.fromFile = function(path) {
	var font = new lime.text.Font();
	font.__fromFile(path);
	return font;
};
lime.text.Font.prototype = {
	ascender: null
	,descender: null
	,height: null
	,name: null
	,numGlyphs: null
	,src: null
	,underlinePosition: null
	,underlineThickness: null
	,unitsPerEM: null
	,__fontPath: null
	,decompose: function() {
		return null;
	}
	,getGlyph: function(character) {
		return -1;
	}
	,getGlyphs: function(characters) {
		if(characters == null) characters = "abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!@#$%^`'\"/\\&*()[]{}<>|:;_-+=?,. ";
		return null;
	}
	,getGlyphMetrics: function(glyph) {
		return null;
	}
	,renderGlyph: function(glyph,fontSize) {
		return null;
	}
	,renderGlyphs: function(glyphs,fontSize) {
		return null;
	}
	,__fromBytes: function(bytes) {
		this.__fontPath = null;
	}
	,__fromFile: function(path) {
		this.__fontPath = path;
	}
	,get_ascender: function() {
		return 0;
	}
	,get_descender: function() {
		return 0;
	}
	,get_height: function() {
		return 0;
	}
	,get_numGlyphs: function() {
		return 0;
	}
	,get_underlinePosition: function() {
		return 0;
	}
	,get_underlineThickness: function() {
		return 0;
	}
	,get_unitsPerEM: function() {
		return 0;
	}
	,__class__: lime.text.Font
	,__properties__: {get_unitsPerEM:"get_unitsPerEM",get_underlineThickness:"get_underlineThickness",get_underlinePosition:"get_underlinePosition",get_numGlyphs:"get_numGlyphs",get_height:"get_height",get_descender:"get_descender",get_ascender:"get_ascender"}
};
var __ASSET__assets_fonts_ubuntu_r_ttf = function() {
	lime.text.Font.call(this);
	this.name = "Ubuntu";
};
$hxClasses["__ASSET__assets_fonts_ubuntu_r_ttf"] = __ASSET__assets_fonts_ubuntu_r_ttf;
__ASSET__assets_fonts_ubuntu_r_ttf.__name__ = ["__ASSET__assets_fonts_ubuntu_r_ttf"];
__ASSET__assets_fonts_ubuntu_r_ttf.__super__ = lime.text.Font;
__ASSET__assets_fonts_ubuntu_r_ttf.prototype = $extend(lime.text.Font.prototype,{
	__class__: __ASSET__assets_fonts_ubuntu_r_ttf
});
var EReg = function(r,opt) {
	opt = opt.split("u").join("");
	this.r = new RegExp(r,opt);
};
$hxClasses["EReg"] = EReg;
EReg.__name__ = ["EReg"];
EReg.prototype = {
	r: null
	,match: function(s) {
		if(this.r.global) this.r.lastIndex = 0;
		this.r.m = this.r.exec(s);
		this.r.s = s;
		return this.r.m != null;
	}
	,matched: function(n) {
		if(this.r.m != null && n >= 0 && n < this.r.m.length) return this.r.m[n]; else throw "EReg::matched";
	}
	,matchedLeft: function() {
		if(this.r.m == null) throw "No string matched";
		return this.r.s.substr(0,this.r.m.index);
	}
	,matchedRight: function() {
		if(this.r.m == null) throw "No string matched";
		var sz = this.r.m.index + this.r.m[0].length;
		return this.r.s.substr(sz,this.r.s.length - sz);
	}
	,matchedPos: function() {
		if(this.r.m == null) throw "No string matched";
		return { pos : this.r.m.index, len : this.r.m[0].length};
	}
	,matchSub: function(s,pos,len) {
		if(len == null) len = -1;
		if(this.r.global) {
			this.r.lastIndex = pos;
			this.r.m = this.r.exec(len < 0?s:HxOverrides.substr(s,0,pos + len));
			var b = this.r.m != null;
			if(b) this.r.s = s;
			return b;
		} else {
			var b1 = this.match(len < 0?HxOverrides.substr(s,pos,null):HxOverrides.substr(s,pos,len));
			if(b1) {
				this.r.s = s;
				this.r.m.index += pos;
			}
			return b1;
		}
	}
	,split: function(s) {
		var d = "#__delim__#";
		return s.replace(this.r,d).split(d);
	}
	,replace: function(s,by) {
		return s.replace(this.r,by);
	}
	,map: function(s,f) {
		var offset = 0;
		var buf = new StringBuf();
		do {
			if(offset >= s.length) break; else if(!this.matchSub(s,offset)) {
				buf.add(HxOverrides.substr(s,offset,null));
				break;
			}
			var p = this.matchedPos();
			buf.add(HxOverrides.substr(s,offset,p.pos - offset));
			buf.add(f(this));
			if(p.len == 0) {
				buf.add(HxOverrides.substr(s,p.pos,1));
				offset = p.pos + 1;
			} else offset = p.pos + p.len;
		} while(this.r.global);
		if(!this.r.global && offset > 0 && offset < s.length) buf.add(HxOverrides.substr(s,offset,null));
		return buf.b;
	}
	,__class__: EReg
};
var EmbeddedAssets = function() { };
$hxClasses["EmbeddedAssets"] = EmbeddedAssets;
EmbeddedAssets.__name__ = ["EmbeddedAssets"];
EmbeddedAssets.__properties__ = {get_wing_flap:"get_wing_flap",get_desyrel:"get_desyrel",get_desyrel_fnt:"get_desyrel_fnt",get_compressed_texture:"get_compressed_texture",get_background:"get_background",get_atlas:"get_atlas",get_atlas_xml:"get_atlas_xml"}
EmbeddedAssets.atlas_xml = null;
EmbeddedAssets.atlas = null;
EmbeddedAssets.background = null;
EmbeddedAssets.compressed_texture = null;
EmbeddedAssets.desyrel_fnt = null;
EmbeddedAssets.desyrel = null;
EmbeddedAssets.wing_flap = null;
EmbeddedAssets.get_atlas_xml = function() {
	return Xml.parse(openfl.Assets.getText("assets/textures/1x/atlas.xml"));
};
EmbeddedAssets.get_atlas = function() {
	return openfl.Assets.getBitmapData("assets/textures/1x/atlas.png");
};
EmbeddedAssets.get_background = function() {
	return openfl.Assets.getBitmapData("assets/textures/1x/background.jpg");
};
EmbeddedAssets.get_compressed_texture = function() {
	return openfl.Assets.getBytes("assets/textures/1x/compressed_texture.atf");
};
EmbeddedAssets.get_desyrel_fnt = function() {
	return Xml.parse(openfl.Assets.getText("assets/fonts/1x/desyrel.fnt"));
};
EmbeddedAssets.get_desyrel = function() {
	return openfl.Assets.getBitmapData("assets/fonts/1x/desyrel.png");
};
EmbeddedAssets.get_wing_flap = function() {
	return openfl.Assets.getSound("assets/audio/wing_flap.mp3");
};
var starling = {};
starling.events = {};
starling.events.EventDispatcher = function() {
};
$hxClasses["starling.events.EventDispatcher"] = starling.events.EventDispatcher;
starling.events.EventDispatcher.__name__ = ["starling","events","EventDispatcher"];
starling.events.EventDispatcher.prototype = {
	mEventListeners: null
	,addEventListener: function(type,listener) {
		if(this.mEventListeners == null) this.mEventListeners = new haxe.ds.StringMap();
		var listeners = this.mEventListeners.get(type);
		if(listeners == null) {
			var v = new Array();
			this.mEventListeners.set(type,v);
			v;
			this.mEventListeners.get(type).push(listener);
		} else if((function($this) {
			var $r;
			var x = listener;
			$r = HxOverrides.indexOf(listeners,x,0);
			return $r;
		}(this)) == -1) listeners[listeners.length] = listener;
	}
	,removeEventListener: function(type,listener) {
		if(this.mEventListeners != null) {
			var listeners = this.mEventListeners.get(type);
			var numListeners;
			if(listeners != null) numListeners = listeners.length; else numListeners = 0;
			if(numListeners > 0) {
				var index = 0;
				var restListeners;
				var length = numListeners - 1;
				var this1;
				this1 = new openfl.VectorData();
				var this2;
				this2 = new Array(length);
				this1.data = this2;
				this1.length = length;
				this1.fixed = false;
				restListeners = this1;
				var _g = 0;
				while(_g < numListeners) {
					var i = _g++;
					var otherListener = listeners[i];
					if(otherListener != listener) {
						var key;
						key = js.Boot.__cast(index++ , Int);
						var value = otherListener;
						if(!restListeners.fixed) {
							if(key >= restListeners.length) restListeners.length = key + 1;
							if(restListeners.data.length < restListeners.length) {
								var data;
								var this3;
								this3 = new Array(restListeners.data.length + 10);
								data = this3;
								haxe.ds._Vector.Vector_Impl_.blit(restListeners.data,0,data,0,restListeners.data.length);
								restListeners.data = data;
							}
						}
						restListeners.data[key] = value;
					}
				}
				var v;
				var value1 = new Array();
				var _g1 = 0;
				var _g2 = restListeners.data.length;
				while(_g1 < _g2) {
					var i1 = _g1++;
					value1.push(restListeners.data[i1]);
				}
				v = value1;
				this.mEventListeners.set(type,v);
				v;
			}
		}
	}
	,removeEventListeners: function(type) {
		if(type != null && this.mEventListeners != null) this.mEventListeners.remove(type); else this.mEventListeners = null;
	}
	,dispatchEvent: function(event) {
		var bubbles = event.get_bubbles();
		if(this.mEventListeners == null) return;
		var containsType;
		var key = event.get_type();
		containsType = this.mEventListeners.exists(key);
		if(!bubbles && (this.mEventListeners == null || containsType == false)) return;
		var previousTarget = event.get_target();
		event.setTarget(this);
		if(bubbles && js.Boot.__instanceof(this,starling.display.DisplayObject)) this.bubbleEvent(event); else this.invokeEvent(event);
		if(previousTarget != null) event.setTarget(previousTarget);
	}
	,invokeEvent: function(event) {
		var listeners;
		if(this.mEventListeners != null) {
			var key = event.get_type();
			listeners = this.mEventListeners.get(key);
		} else listeners = null;
		var numListeners;
		if(listeners == null) numListeners = 0; else numListeners = listeners.length;
		if(numListeners) {
			event.setCurrentTarget(this);
			var _g = 0;
			while(_g < numListeners) {
				var i = _g++;
				var listener = listeners[i];
				var numArgs = listener.length;
				listener(event,event.get_data());
				if(event.get_stopsImmediatePropagation()) return true;
			}
			return event.get_stopsPropagation();
		} else return false;
	}
	,bubbleEvent: function(event) {
		var chain;
		var element = this;
		var length = 1;
		if(starling.events.EventDispatcher.sBubbleChains.length > 0) {
			chain = starling.events.EventDispatcher.sBubbleChains.pop();
			if(!chain.fixed) {
				if(0 >= chain.length) chain.length = 1;
				if(chain.data.length < chain.length) {
					var data;
					var this1;
					this1 = new Array(chain.data.length + 10);
					data = this1;
					haxe.ds._Vector.Vector_Impl_.blit(chain.data,0,data,0,chain.data.length);
					chain.data = data;
				}
			}
			chain.data[0] = element;
		} else {
			var this2;
			this2 = new openfl.VectorData();
			var this3;
			this3 = new Array(0);
			this2.data = this3;
			this2.length = 0;
			this2.fixed = false;
			chain = this2;
			if(!chain.fixed) {
				chain.length++;
				if(chain.data.length < chain.length) {
					var data1;
					var this4;
					this4 = new Array(chain.data.length + 10);
					data1 = this4;
					haxe.ds._Vector.Vector_Impl_.blit(chain.data,0,data1,0,chain.data.length);
					chain.data = data1;
				}
				chain.data[chain.length - 1] = element;
			}
			chain.length;
		}
		while((element = element.get_parent()) != null) {
			var key;
			key = js.Boot.__cast(length++ , Int);
			if(!chain.fixed) {
				if(key >= chain.length) chain.length = key + 1;
				if(chain.data.length < chain.length) {
					var data2;
					var this5;
					this5 = new Array(chain.data.length + 10);
					data2 = this5;
					haxe.ds._Vector.Vector_Impl_.blit(chain.data,0,data2,0,chain.data.length);
					chain.data = data2;
				}
			}
			chain.data[key] = element;
		}
		var _g = 0;
		while(_g < length) {
			var i = _g++;
			var stopPropagation = chain.data[i].invokeEvent(event);
			if(stopPropagation) break;
		}
		if(!chain.fixed) {
			if(0 > chain.length) {
				var data3;
				var this6;
				this6 = new Array(0);
				data3 = this6;
				haxe.ds._Vector.Vector_Impl_.blit(chain.data,0,data3,0,Std["int"](Math.min(chain.data.length,0)));
				chain.data = data3;
			}
			chain.length = 0;
		}
		0;
		starling.events.EventDispatcher.sBubbleChains[starling.events.EventDispatcher.sBubbleChains.length] = chain;
	}
	,dispatchEventWith: function(type,bubbles,data) {
		if(bubbles == null) bubbles = false;
		if(bubbles || this.hasEventListener(type)) {
			var event = starling.events.Event.fromPool(type,bubbles,data);
			this.dispatchEvent(event);
			starling.events.Event.toPool(event);
		}
	}
	,hasEventListener: function(type) {
		var listeners;
		if(this.mEventListeners != null) listeners = this.mEventListeners.get(type); else listeners = null;
		if(listeners != null) return listeners.length != 0; else return false;
	}
	,__class__: starling.events.EventDispatcher
};
openfl.VectorData = function() {
	this.length = 0;
};
$hxClasses["openfl.VectorData"] = openfl.VectorData;
openfl.VectorData.__name__ = ["openfl","VectorData"];
openfl.VectorData.prototype = {
	data: null
	,fixed: null
	,length: null
	,__class__: openfl.VectorData
};
openfl.geom = {};
openfl.geom.Matrix = function(a,b,c,d,tx,ty) {
	if(ty == null) ty = 0;
	if(tx == null) tx = 0;
	if(d == null) d = 1;
	if(c == null) c = 0;
	if(b == null) b = 0;
	if(a == null) a = 1;
	this.a = a;
	this.b = b;
	this.c = c;
	this.d = d;
	this.tx = tx;
	this.ty = ty;
	this.__array = new Float32Array([a,b,c,d,tx,ty,0,0,1]);
};
$hxClasses["openfl.geom.Matrix"] = openfl.geom.Matrix;
openfl.geom.Matrix.__name__ = ["openfl","geom","Matrix"];
openfl.geom.Matrix.prototype = {
	a: null
	,b: null
	,c: null
	,d: null
	,tx: null
	,ty: null
	,__array: null
	,clone: function() {
		return new openfl.geom.Matrix(this.a,this.b,this.c,this.d,this.tx,this.ty);
	}
	,concat: function(m) {
		var a1 = this.a * m.a + this.b * m.c;
		this.b = this.a * m.b + this.b * m.d;
		this.a = a1;
		var c1 = this.c * m.a + this.d * m.c;
		this.d = this.c * m.b + this.d * m.d;
		this.c = c1;
		var tx1 = this.tx * m.a + this.ty * m.c + m.tx;
		this.ty = this.tx * m.b + this.ty * m.d + m.ty;
		this.tx = tx1;
	}
	,copyColumnFrom: function(column,vector3D) {
		if(column > 2) throw "Column " + column + " out of bounds (2)"; else if(column == 0) {
			this.a = vector3D.x;
			this.c = vector3D.y;
		} else if(column == 1) {
			this.b = vector3D.x;
			this.d = vector3D.y;
		} else {
			this.tx = vector3D.x;
			this.ty = vector3D.y;
		}
	}
	,copyColumnTo: function(column,vector3D) {
		if(column > 2) throw "Column " + column + " out of bounds (2)"; else if(column == 0) {
			vector3D.x = this.a;
			vector3D.y = this.c;
			vector3D.z = 0;
		} else if(column == 1) {
			vector3D.x = this.b;
			vector3D.y = this.d;
			vector3D.z = 0;
		} else {
			vector3D.x = this.tx;
			vector3D.y = this.ty;
			vector3D.z = 1;
		}
	}
	,copyFrom: function(sourceMatrix) {
		this.a = sourceMatrix.a;
		this.b = sourceMatrix.b;
		this.c = sourceMatrix.c;
		this.d = sourceMatrix.d;
		this.tx = sourceMatrix.tx;
		this.ty = sourceMatrix.ty;
	}
	,copyRowFrom: function(row,vector3D) {
		if(row > 2) throw "Row " + row + " out of bounds (2)"; else if(row == 0) {
			this.a = vector3D.x;
			this.c = vector3D.y;
		} else if(row == 1) {
			this.b = vector3D.x;
			this.d = vector3D.y;
		} else {
			this.tx = vector3D.x;
			this.ty = vector3D.y;
		}
	}
	,copyRowTo: function(row,vector3D) {
		if(row > 2) throw "Row " + row + " out of bounds (2)"; else if(row == 0) {
			vector3D.x = this.a;
			vector3D.y = this.b;
			vector3D.z = this.tx;
		} else if(row == 1) {
			vector3D.x = this.c;
			vector3D.y = this.d;
			vector3D.z = this.ty;
		} else {
			vector3D.x = 0;
			vector3D.y = 0;
			vector3D.z = 1;
		}
	}
	,createBox: function(scaleX,scaleY,rotation,tx,ty) {
		if(ty == null) ty = 0;
		if(tx == null) tx = 0;
		if(rotation == null) rotation = 0;
		if(rotation != 0) {
			var cos = Math.cos(rotation);
			var sin = Math.sin(rotation);
			this.a = cos * scaleX;
			this.b = sin * scaleY;
			this.c = -sin * scaleX;
			this.d = cos * scaleY;
		} else {
			this.a = scaleX;
			this.b = 0;
			this.c = 0;
			this.d = scaleY;
		}
		this.tx = tx;
		this.ty = ty;
	}
	,createGradientBox: function(width,height,rotation,tx,ty) {
		if(ty == null) ty = 0;
		if(tx == null) tx = 0;
		if(rotation == null) rotation = 0;
		this.a = width / 1638.4;
		this.d = height / 1638.4;
		if(rotation != 0) {
			var cos = Math.cos(rotation);
			var sin = Math.sin(rotation);
			this.b = sin * this.d;
			this.c = -sin * this.a;
			this.a *= cos;
			this.d *= cos;
		} else {
			this.b = 0;
			this.c = 0;
		}
		this.tx = tx + width / 2;
		this.ty = ty + height / 2;
	}
	,deltaTransformPoint: function(point) {
		return new openfl.geom.Point(point.x * this.a + point.y * this.c,point.x * this.b + point.y * this.d);
	}
	,equals: function(matrix) {
		return matrix != null && this.tx == matrix.tx && this.ty == matrix.ty && this.a == matrix.a && this.b == matrix.b && this.c == matrix.c && this.d == matrix.d;
	}
	,identity: function() {
		this.a = 1;
		this.b = 0;
		this.c = 0;
		this.d = 1;
		this.tx = 0;
		this.ty = 0;
	}
	,invert: function() {
		var norm = this.a * this.d - this.b * this.c;
		if(norm == 0) {
			this.a = this.b = this.c = this.d = 0;
			this.tx = -this.tx;
			this.ty = -this.ty;
		} else {
			norm = 1.0 / norm;
			var a1 = this.d * norm;
			this.d = this.a * norm;
			this.a = a1;
			this.b *= -norm;
			this.c *= -norm;
			var tx1 = -this.a * this.tx - this.c * this.ty;
			this.ty = -this.b * this.tx - this.d * this.ty;
			this.tx = tx1;
		}
		return this;
	}
	,mult: function(m) {
		var result = new openfl.geom.Matrix();
		result.a = this.a * m.a + this.b * m.c;
		result.b = this.a * m.b + this.b * m.d;
		result.c = this.c * m.a + this.d * m.c;
		result.d = this.c * m.b + this.d * m.d;
		result.tx = this.tx * m.a + this.ty * m.c + m.tx;
		result.ty = this.tx * m.b + this.ty * m.d + m.ty;
		return result;
	}
	,rotate: function(theta) {
		var cos = Math.cos(theta);
		var sin = Math.sin(theta);
		var a1 = this.a * cos - this.b * sin;
		this.b = this.a * sin + this.b * cos;
		this.a = a1;
		var c1 = this.c * cos - this.d * sin;
		this.d = this.c * sin + this.d * cos;
		this.c = c1;
		var tx1 = this.tx * cos - this.ty * sin;
		this.ty = this.tx * sin + this.ty * cos;
		this.tx = tx1;
	}
	,scale: function(sx,sy) {
		this.a *= sx;
		this.b *= sy;
		this.c *= sx;
		this.d *= sy;
		this.tx *= sx;
		this.ty *= sy;
	}
	,setRotation: function(theta,scale) {
		if(scale == null) scale = 1;
		this.a = Math.cos(theta) * scale;
		this.c = Math.sin(theta) * scale;
		this.b = -this.c;
		this.d = this.a;
	}
	,setTo: function(a,b,c,d,tx,ty) {
		this.a = a;
		this.b = b;
		this.c = c;
		this.d = d;
		this.tx = tx;
		this.ty = ty;
	}
	,to3DString: function(roundPixels) {
		if(roundPixels == null) roundPixels = false;
		if(roundPixels) return "matrix3d(" + this.a + ", " + this.b + ", " + "0, 0, " + this.c + ", " + this.d + ", " + "0, 0, 0, 0, 1, 0, " + (this.tx | 0) + ", " + (this.ty | 0) + ", 0, 1)"; else return "matrix3d(" + this.a + ", " + this.b + ", " + "0, 0, " + this.c + ", " + this.d + ", " + "0, 0, 0, 0, 1, 0, " + this.tx + ", " + this.ty + ", 0, 1)";
	}
	,toMozString: function() {
		return "matrix(" + this.a + ", " + this.b + ", " + this.c + ", " + this.d + ", " + this.tx + "px, " + this.ty + "px)";
	}
	,toString: function() {
		return "matrix(" + this.a + ", " + this.b + ", " + this.c + ", " + this.d + ", " + this.tx + ", " + this.ty + ")";
	}
	,transformPoint: function(pos) {
		return new openfl.geom.Point(pos.x * this.a + pos.y * this.c + this.tx,pos.x * this.b + pos.y * this.d + this.ty);
	}
	,translate: function(dx,dy) {
		var m = new openfl.geom.Matrix();
		m.tx = dx;
		m.ty = dy;
		this.concat(m);
	}
	,toArray: function(transpose) {
		if(transpose == null) transpose = false;
		if(transpose) {
			this.__array[0] = this.a;
			this.__array[1] = this.c;
			this.__array[2] = 0;
			this.__array[3] = this.b;
			this.__array[4] = this.d;
			this.__array[5] = 0;
			this.__array[6] = this.tx;
			this.__array[7] = this.ty;
			this.__array[8] = 1;
		} else {
			this.__array[0] = this.a;
			this.__array[1] = this.b;
			this.__array[2] = this.tx;
			this.__array[3] = this.c;
			this.__array[4] = this.d;
			this.__array[5] = this.ty;
			this.__array[6] = 0;
			this.__array[7] = 0;
			this.__array[8] = 1;
		}
		return this.__array;
	}
	,__cleanValues: function() {
		this.a = Math.round(this.a * 1000) / 1000;
		this.b = Math.round(this.b * 1000) / 1000;
		this.c = Math.round(this.c * 1000) / 1000;
		this.d = Math.round(this.d * 1000) / 1000;
		this.tx = Math.round(this.tx * 10) / 10;
		this.ty = Math.round(this.ty * 10) / 10;
	}
	,__transformX: function(pos) {
		return pos.x * this.a + pos.y * this.c + this.tx;
	}
	,__transformY: function(pos) {
		return pos.x * this.b + pos.y * this.d + this.ty;
	}
	,__translateTransformed: function(pos) {
		this.tx = pos.x * this.a + pos.y * this.c + this.tx;
		this.ty = pos.x * this.b + pos.y * this.d + this.ty;
	}
	,__class__: openfl.geom.Matrix
};
openfl.geom.Matrix3D = function(v) {
	if(v != null && v.length == 16) this.rawData = v; else {
		var value = [1.0,0.0,0.0,0.0,0.0,1.0,0.0,0.0,0.0,0.0,1.0,0.0,0.0,0.0,0.0,1.0];
		var vectorData = new openfl.VectorData();
		vectorData.length = value.length;
		vectorData.fixed = true;
		var vec;
		var this1;
		this1 = new Array(value.length);
		vec = this1;
		var _g1 = 0;
		var _g = value.length;
		while(_g1 < _g) {
			var i = _g1++;
			vec[i] = value[i];
		}
		vectorData.data = vec;
		this.rawData = vectorData;
	}
};
$hxClasses["openfl.geom.Matrix3D"] = openfl.geom.Matrix3D;
openfl.geom.Matrix3D.__name__ = ["openfl","geom","Matrix3D"];
openfl.geom.Matrix3D.create2D = function(x,y,scale,rotation) {
	if(rotation == null) rotation = 0;
	if(scale == null) scale = 1;
	var theta = rotation * Math.PI / 180.0;
	var c = Math.cos(theta);
	var s = Math.sin(theta);
	return new openfl.geom.Matrix3D((function($this) {
		var $r;
		var value = [c * scale,-s * scale,0,0,s * scale,c * scale,0,0,0,0,1,0,x,y,0,1];
		var vectorData = new openfl.VectorData();
		vectorData.length = value.length;
		vectorData.fixed = true;
		{
			var vec;
			var this1;
			this1 = new Array(value.length);
			vec = this1;
			var _g1 = 0;
			var _g = value.length;
			while(_g1 < _g) {
				var i = _g1++;
				vec[i] = value[i];
			}
			vectorData.data = vec;
		}
		$r = vectorData;
		return $r;
	}(this)));
};
openfl.geom.Matrix3D.createABCD = function(a,b,c,d,tx,ty) {
	return new openfl.geom.Matrix3D((function($this) {
		var $r;
		var value = [a,b,0,0,c,d,0,0,0,0,1,0,tx,ty,0,1];
		var vectorData = new openfl.VectorData();
		vectorData.length = value.length;
		vectorData.fixed = true;
		{
			var vec;
			var this1;
			this1 = new Array(value.length);
			vec = this1;
			var _g1 = 0;
			var _g = value.length;
			while(_g1 < _g) {
				var i = _g1++;
				vec[i] = value[i];
			}
			vectorData.data = vec;
		}
		$r = vectorData;
		return $r;
	}(this)));
};
openfl.geom.Matrix3D.createOrtho = function(x0,x1,y0,y1,zNear,zFar) {
	var sx = 1.0 / (x1 - x0);
	var sy = 1.0 / (y1 - y0);
	var sz = 1.0 / (zFar - zNear);
	return new openfl.geom.Matrix3D((function($this) {
		var $r;
		var value = [2.0 * sx,0,0,0,0,2.0 * sy,0,0,0,0,-2. * sz,0,-(x0 + x1) * sx,-(y0 + y1) * sy,-(zNear + zFar) * sz,1];
		var vectorData = new openfl.VectorData();
		vectorData.length = value.length;
		vectorData.fixed = true;
		{
			var vec;
			var this1;
			this1 = new Array(value.length);
			vec = this1;
			var _g1 = 0;
			var _g = value.length;
			while(_g1 < _g) {
				var i = _g1++;
				vec[i] = value[i];
			}
			vectorData.data = vec;
		}
		$r = vectorData;
		return $r;
	}(this)));
};
openfl.geom.Matrix3D.interpolate = function(thisMat,toMat,percent) {
	var m = new openfl.geom.Matrix3D();
	var _g = 0;
	while(_g < 16) {
		var i = _g++;
		var this1 = m.rawData;
		if(!this1.fixed) {
			if(i >= this1.length) this1.length = i + 1;
			if(this1.data.length < this1.length) {
				var data;
				var this2;
				this2 = new Array(this1.data.length + 10);
				data = this2;
				haxe.ds._Vector.Vector_Impl_.blit(this1.data,0,data,0,this1.data.length);
				this1.data = data;
			}
		}
		this1.data[i] = thisMat.rawData.data[i] + (toMat.rawData.data[i] - thisMat.rawData.data[i]) * percent;
	}
	return m;
};
openfl.geom.Matrix3D.getAxisRotation = function(x,y,z,degrees) {
	var m = new openfl.geom.Matrix3D();
	var a1 = new openfl.geom.Vector3D(x,y,z);
	var rad = -degrees * (Math.PI / 180);
	var c = Math.cos(rad);
	var s = Math.sin(rad);
	var t = 1.0 - c;
	var this1 = m.rawData;
	if(!this1.fixed) {
		if(0 >= this1.length) this1.length = 1;
		if(this1.data.length < this1.length) {
			var data;
			var this2;
			this2 = new Array(this1.data.length + 10);
			data = this2;
			haxe.ds._Vector.Vector_Impl_.blit(this1.data,0,data,0,this1.data.length);
			this1.data = data;
		}
	}
	this1.data[0] = c + a1.x * a1.x * t;
	var this3 = m.rawData;
	if(!this3.fixed) {
		if(5 >= this3.length) this3.length = 6;
		if(this3.data.length < this3.length) {
			var data1;
			var this4;
			this4 = new Array(this3.data.length + 10);
			data1 = this4;
			haxe.ds._Vector.Vector_Impl_.blit(this3.data,0,data1,0,this3.data.length);
			this3.data = data1;
		}
	}
	this3.data[5] = c + a1.y * a1.y * t;
	var this5 = m.rawData;
	if(!this5.fixed) {
		if(10 >= this5.length) this5.length = 11;
		if(this5.data.length < this5.length) {
			var data2;
			var this6;
			this6 = new Array(this5.data.length + 10);
			data2 = this6;
			haxe.ds._Vector.Vector_Impl_.blit(this5.data,0,data2,0,this5.data.length);
			this5.data = data2;
		}
	}
	this5.data[10] = c + a1.z * a1.z * t;
	var tmp1 = a1.x * a1.y * t;
	var tmp2 = a1.z * s;
	var this7 = m.rawData;
	if(!this7.fixed) {
		if(4 >= this7.length) this7.length = 5;
		if(this7.data.length < this7.length) {
			var data3;
			var this8;
			this8 = new Array(this7.data.length + 10);
			data3 = this8;
			haxe.ds._Vector.Vector_Impl_.blit(this7.data,0,data3,0,this7.data.length);
			this7.data = data3;
		}
	}
	this7.data[4] = tmp1 + tmp2;
	var this9 = m.rawData;
	if(!this9.fixed) {
		if(1 >= this9.length) this9.length = 2;
		if(this9.data.length < this9.length) {
			var data4;
			var this10;
			this10 = new Array(this9.data.length + 10);
			data4 = this10;
			haxe.ds._Vector.Vector_Impl_.blit(this9.data,0,data4,0,this9.data.length);
			this9.data = data4;
		}
	}
	this9.data[1] = tmp1 - tmp2;
	tmp1 = a1.x * a1.z * t;
	tmp2 = a1.y * s;
	var this11 = m.rawData;
	if(!this11.fixed) {
		if(8 >= this11.length) this11.length = 9;
		if(this11.data.length < this11.length) {
			var data5;
			var this12;
			this12 = new Array(this11.data.length + 10);
			data5 = this12;
			haxe.ds._Vector.Vector_Impl_.blit(this11.data,0,data5,0,this11.data.length);
			this11.data = data5;
		}
	}
	this11.data[8] = tmp1 - tmp2;
	var this13 = m.rawData;
	if(!this13.fixed) {
		if(2 >= this13.length) this13.length = 3;
		if(this13.data.length < this13.length) {
			var data6;
			var this14;
			this14 = new Array(this13.data.length + 10);
			data6 = this14;
			haxe.ds._Vector.Vector_Impl_.blit(this13.data,0,data6,0,this13.data.length);
			this13.data = data6;
		}
	}
	this13.data[2] = tmp1 + tmp2;
	tmp1 = a1.y * a1.z * t;
	tmp2 = a1.x * s;
	var this15 = m.rawData;
	if(!this15.fixed) {
		if(9 >= this15.length) this15.length = 10;
		if(this15.data.length < this15.length) {
			var data7;
			var this16;
			this16 = new Array(this15.data.length + 10);
			data7 = this16;
			haxe.ds._Vector.Vector_Impl_.blit(this15.data,0,data7,0,this15.data.length);
			this15.data = data7;
		}
	}
	this15.data[9] = tmp1 + tmp2;
	var this17 = m.rawData;
	if(!this17.fixed) {
		if(6 >= this17.length) this17.length = 7;
		if(this17.data.length < this17.length) {
			var data8;
			var this18;
			this18 = new Array(this17.data.length + 10);
			data8 = this18;
			haxe.ds._Vector.Vector_Impl_.blit(this17.data,0,data8,0,this17.data.length);
			this17.data = data8;
		}
	}
	this17.data[6] = tmp1 - tmp2;
	return m;
};
openfl.geom.Matrix3D.prototype = {
	determinant: null
	,rawData: null
	,append: function(lhs) {
		var m111 = this.rawData.data[0];
		var m121 = this.rawData.data[4];
		var m131 = this.rawData.data[8];
		var m141 = this.rawData.data[12];
		var m112 = this.rawData.data[1];
		var m122 = this.rawData.data[5];
		var m132 = this.rawData.data[9];
		var m142 = this.rawData.data[13];
		var m113 = this.rawData.data[2];
		var m123 = this.rawData.data[6];
		var m133 = this.rawData.data[10];
		var m143 = this.rawData.data[14];
		var m114 = this.rawData.data[3];
		var m124 = this.rawData.data[7];
		var m134 = this.rawData.data[11];
		var m144 = this.rawData.data[15];
		var m211 = lhs.rawData.data[0];
		var m221 = lhs.rawData.data[4];
		var m231 = lhs.rawData.data[8];
		var m241 = lhs.rawData.data[12];
		var m212 = lhs.rawData.data[1];
		var m222 = lhs.rawData.data[5];
		var m232 = lhs.rawData.data[9];
		var m242 = lhs.rawData.data[13];
		var m213 = lhs.rawData.data[2];
		var m223 = lhs.rawData.data[6];
		var m233 = lhs.rawData.data[10];
		var m243 = lhs.rawData.data[14];
		var m214 = lhs.rawData.data[3];
		var m224 = lhs.rawData.data[7];
		var m234 = lhs.rawData.data[11];
		var m244 = lhs.rawData.data[15];
		var this1 = this.rawData;
		if(!this1.fixed) {
			if(0 >= this1.length) this1.length = 1;
			if(this1.data.length < this1.length) {
				var data;
				var this2;
				this2 = new Array(this1.data.length + 10);
				data = this2;
				haxe.ds._Vector.Vector_Impl_.blit(this1.data,0,data,0,this1.data.length);
				this1.data = data;
			}
		}
		this1.data[0] = m111 * m211 + m112 * m221 + m113 * m231 + m114 * m241;
		var this3 = this.rawData;
		if(!this3.fixed) {
			if(1 >= this3.length) this3.length = 2;
			if(this3.data.length < this3.length) {
				var data1;
				var this4;
				this4 = new Array(this3.data.length + 10);
				data1 = this4;
				haxe.ds._Vector.Vector_Impl_.blit(this3.data,0,data1,0,this3.data.length);
				this3.data = data1;
			}
		}
		this3.data[1] = m111 * m212 + m112 * m222 + m113 * m232 + m114 * m242;
		var this5 = this.rawData;
		if(!this5.fixed) {
			if(2 >= this5.length) this5.length = 3;
			if(this5.data.length < this5.length) {
				var data2;
				var this6;
				this6 = new Array(this5.data.length + 10);
				data2 = this6;
				haxe.ds._Vector.Vector_Impl_.blit(this5.data,0,data2,0,this5.data.length);
				this5.data = data2;
			}
		}
		this5.data[2] = m111 * m213 + m112 * m223 + m113 * m233 + m114 * m243;
		var this7 = this.rawData;
		if(!this7.fixed) {
			if(3 >= this7.length) this7.length = 4;
			if(this7.data.length < this7.length) {
				var data3;
				var this8;
				this8 = new Array(this7.data.length + 10);
				data3 = this8;
				haxe.ds._Vector.Vector_Impl_.blit(this7.data,0,data3,0,this7.data.length);
				this7.data = data3;
			}
		}
		this7.data[3] = m111 * m214 + m112 * m224 + m113 * m234 + m114 * m244;
		var this9 = this.rawData;
		if(!this9.fixed) {
			if(4 >= this9.length) this9.length = 5;
			if(this9.data.length < this9.length) {
				var data4;
				var this10;
				this10 = new Array(this9.data.length + 10);
				data4 = this10;
				haxe.ds._Vector.Vector_Impl_.blit(this9.data,0,data4,0,this9.data.length);
				this9.data = data4;
			}
		}
		this9.data[4] = m121 * m211 + m122 * m221 + m123 * m231 + m124 * m241;
		var this11 = this.rawData;
		if(!this11.fixed) {
			if(5 >= this11.length) this11.length = 6;
			if(this11.data.length < this11.length) {
				var data5;
				var this12;
				this12 = new Array(this11.data.length + 10);
				data5 = this12;
				haxe.ds._Vector.Vector_Impl_.blit(this11.data,0,data5,0,this11.data.length);
				this11.data = data5;
			}
		}
		this11.data[5] = m121 * m212 + m122 * m222 + m123 * m232 + m124 * m242;
		var this13 = this.rawData;
		if(!this13.fixed) {
			if(6 >= this13.length) this13.length = 7;
			if(this13.data.length < this13.length) {
				var data6;
				var this14;
				this14 = new Array(this13.data.length + 10);
				data6 = this14;
				haxe.ds._Vector.Vector_Impl_.blit(this13.data,0,data6,0,this13.data.length);
				this13.data = data6;
			}
		}
		this13.data[6] = m121 * m213 + m122 * m223 + m123 * m233 + m124 * m243;
		var this15 = this.rawData;
		if(!this15.fixed) {
			if(7 >= this15.length) this15.length = 8;
			if(this15.data.length < this15.length) {
				var data7;
				var this16;
				this16 = new Array(this15.data.length + 10);
				data7 = this16;
				haxe.ds._Vector.Vector_Impl_.blit(this15.data,0,data7,0,this15.data.length);
				this15.data = data7;
			}
		}
		this15.data[7] = m121 * m214 + m122 * m224 + m123 * m234 + m124 * m244;
		var this17 = this.rawData;
		if(!this17.fixed) {
			if(8 >= this17.length) this17.length = 9;
			if(this17.data.length < this17.length) {
				var data8;
				var this18;
				this18 = new Array(this17.data.length + 10);
				data8 = this18;
				haxe.ds._Vector.Vector_Impl_.blit(this17.data,0,data8,0,this17.data.length);
				this17.data = data8;
			}
		}
		this17.data[8] = m131 * m211 + m132 * m221 + m133 * m231 + m134 * m241;
		var this19 = this.rawData;
		if(!this19.fixed) {
			if(9 >= this19.length) this19.length = 10;
			if(this19.data.length < this19.length) {
				var data9;
				var this20;
				this20 = new Array(this19.data.length + 10);
				data9 = this20;
				haxe.ds._Vector.Vector_Impl_.blit(this19.data,0,data9,0,this19.data.length);
				this19.data = data9;
			}
		}
		this19.data[9] = m131 * m212 + m132 * m222 + m133 * m232 + m134 * m242;
		var this21 = this.rawData;
		if(!this21.fixed) {
			if(10 >= this21.length) this21.length = 11;
			if(this21.data.length < this21.length) {
				var data10;
				var this22;
				this22 = new Array(this21.data.length + 10);
				data10 = this22;
				haxe.ds._Vector.Vector_Impl_.blit(this21.data,0,data10,0,this21.data.length);
				this21.data = data10;
			}
		}
		this21.data[10] = m131 * m213 + m132 * m223 + m133 * m233 + m134 * m243;
		var this23 = this.rawData;
		if(!this23.fixed) {
			if(11 >= this23.length) this23.length = 12;
			if(this23.data.length < this23.length) {
				var data11;
				var this24;
				this24 = new Array(this23.data.length + 10);
				data11 = this24;
				haxe.ds._Vector.Vector_Impl_.blit(this23.data,0,data11,0,this23.data.length);
				this23.data = data11;
			}
		}
		this23.data[11] = m131 * m214 + m132 * m224 + m133 * m234 + m134 * m244;
		var this25 = this.rawData;
		if(!this25.fixed) {
			if(12 >= this25.length) this25.length = 13;
			if(this25.data.length < this25.length) {
				var data12;
				var this26;
				this26 = new Array(this25.data.length + 10);
				data12 = this26;
				haxe.ds._Vector.Vector_Impl_.blit(this25.data,0,data12,0,this25.data.length);
				this25.data = data12;
			}
		}
		this25.data[12] = m141 * m211 + m142 * m221 + m143 * m231 + m144 * m241;
		var this27 = this.rawData;
		if(!this27.fixed) {
			if(13 >= this27.length) this27.length = 14;
			if(this27.data.length < this27.length) {
				var data13;
				var this28;
				this28 = new Array(this27.data.length + 10);
				data13 = this28;
				haxe.ds._Vector.Vector_Impl_.blit(this27.data,0,data13,0,this27.data.length);
				this27.data = data13;
			}
		}
		this27.data[13] = m141 * m212 + m142 * m222 + m143 * m232 + m144 * m242;
		var this29 = this.rawData;
		if(!this29.fixed) {
			if(14 >= this29.length) this29.length = 15;
			if(this29.data.length < this29.length) {
				var data14;
				var this30;
				this30 = new Array(this29.data.length + 10);
				data14 = this30;
				haxe.ds._Vector.Vector_Impl_.blit(this29.data,0,data14,0,this29.data.length);
				this29.data = data14;
			}
		}
		this29.data[14] = m141 * m213 + m142 * m223 + m143 * m233 + m144 * m243;
		var this31 = this.rawData;
		if(!this31.fixed) {
			if(15 >= this31.length) this31.length = 16;
			if(this31.data.length < this31.length) {
				var data15;
				var this32;
				this32 = new Array(this31.data.length + 10);
				data15 = this32;
				haxe.ds._Vector.Vector_Impl_.blit(this31.data,0,data15,0,this31.data.length);
				this31.data = data15;
			}
		}
		this31.data[15] = m141 * m214 + m142 * m224 + m143 * m234 + m144 * m244;
	}
	,appendRotation: function(degrees,axis,pivotPoint) {
		var m = openfl.geom.Matrix3D.getAxisRotation(axis.x,axis.y,axis.z,degrees);
		if(pivotPoint != null) {
			var p = pivotPoint;
			m.appendTranslation(p.x,p.y,p.z);
		}
		this.append(m);
	}
	,appendScale: function(xScale,yScale,zScale) {
		this.append(new openfl.geom.Matrix3D((function($this) {
			var $r;
			var value = [xScale,0.0,0.0,0.0,0.0,yScale,0.0,0.0,0.0,0.0,zScale,0.0,0.0,0.0,0.0,1.0];
			var vectorData = new openfl.VectorData();
			vectorData.length = value.length;
			vectorData.fixed = true;
			{
				var vec;
				var this1;
				this1 = new Array(value.length);
				vec = this1;
				var _g1 = 0;
				var _g = value.length;
				while(_g1 < _g) {
					var i = _g1++;
					vec[i] = value[i];
				}
				vectorData.data = vec;
			}
			$r = vectorData;
			return $r;
		}(this))));
	}
	,appendTranslation: function(x,y,z) {
		var this1 = this.rawData;
		if(!this1.fixed) {
			if(12 >= this1.length) this1.length = 13;
			if(this1.data.length < this1.length) {
				var data;
				var this2;
				this2 = new Array(this1.data.length + 10);
				data = this2;
				haxe.ds._Vector.Vector_Impl_.blit(this1.data,0,data,0,this1.data.length);
				this1.data = data;
			}
		}
		this1.data[12] = this.rawData.data[12] + x;
		var this3 = this.rawData;
		if(!this3.fixed) {
			if(13 >= this3.length) this3.length = 14;
			if(this3.data.length < this3.length) {
				var data1;
				var this4;
				this4 = new Array(this3.data.length + 10);
				data1 = this4;
				haxe.ds._Vector.Vector_Impl_.blit(this3.data,0,data1,0,this3.data.length);
				this3.data = data1;
			}
		}
		this3.data[13] = this.rawData.data[13] + y;
		var this5 = this.rawData;
		if(!this5.fixed) {
			if(14 >= this5.length) this5.length = 15;
			if(this5.data.length < this5.length) {
				var data2;
				var this6;
				this6 = new Array(this5.data.length + 10);
				data2 = this6;
				haxe.ds._Vector.Vector_Impl_.blit(this5.data,0,data2,0,this5.data.length);
				this5.data = data2;
			}
		}
		this5.data[14] = this.rawData.data[14] + z;
	}
	,clone: function() {
		return new openfl.geom.Matrix3D((function($this) {
			var $r;
			var this1 = $this.rawData;
			var vectorData = new openfl.VectorData();
			vectorData.length = this1.length;
			vectorData.fixed = this1.fixed;
			{
				var this2;
				this2 = new Array(this1.length);
				vectorData.data = this2;
			}
			haxe.ds._Vector.Vector_Impl_.blit(this1.data,0,vectorData.data,0,this1.length);
			$r = vectorData;
			return $r;
		}(this)));
	}
	,copyColumnFrom: function(column,vector3D) {
		switch(column) {
		case 0:
			var this1 = this.rawData;
			if(!this1.fixed) {
				if(0 >= this1.length) this1.length = 1;
				if(this1.data.length < this1.length) {
					var data;
					var this2;
					this2 = new Array(this1.data.length + 10);
					data = this2;
					haxe.ds._Vector.Vector_Impl_.blit(this1.data,0,data,0,this1.data.length);
					this1.data = data;
				}
			}
			this1.data[0] = vector3D.x;
			var this3 = this.rawData;
			if(!this3.fixed) {
				if(1 >= this3.length) this3.length = 2;
				if(this3.data.length < this3.length) {
					var data1;
					var this4;
					this4 = new Array(this3.data.length + 10);
					data1 = this4;
					haxe.ds._Vector.Vector_Impl_.blit(this3.data,0,data1,0,this3.data.length);
					this3.data = data1;
				}
			}
			this3.data[1] = vector3D.y;
			var this5 = this.rawData;
			if(!this5.fixed) {
				if(2 >= this5.length) this5.length = 3;
				if(this5.data.length < this5.length) {
					var data2;
					var this6;
					this6 = new Array(this5.data.length + 10);
					data2 = this6;
					haxe.ds._Vector.Vector_Impl_.blit(this5.data,0,data2,0,this5.data.length);
					this5.data = data2;
				}
			}
			this5.data[2] = vector3D.z;
			var this7 = this.rawData;
			if(!this7.fixed) {
				if(3 >= this7.length) this7.length = 4;
				if(this7.data.length < this7.length) {
					var data3;
					var this8;
					this8 = new Array(this7.data.length + 10);
					data3 = this8;
					haxe.ds._Vector.Vector_Impl_.blit(this7.data,0,data3,0,this7.data.length);
					this7.data = data3;
				}
			}
			this7.data[3] = vector3D.w;
			break;
		case 1:
			var this9 = this.rawData;
			if(!this9.fixed) {
				if(4 >= this9.length) this9.length = 5;
				if(this9.data.length < this9.length) {
					var data4;
					var this10;
					this10 = new Array(this9.data.length + 10);
					data4 = this10;
					haxe.ds._Vector.Vector_Impl_.blit(this9.data,0,data4,0,this9.data.length);
					this9.data = data4;
				}
			}
			this9.data[4] = vector3D.x;
			var this11 = this.rawData;
			if(!this11.fixed) {
				if(5 >= this11.length) this11.length = 6;
				if(this11.data.length < this11.length) {
					var data5;
					var this12;
					this12 = new Array(this11.data.length + 10);
					data5 = this12;
					haxe.ds._Vector.Vector_Impl_.blit(this11.data,0,data5,0,this11.data.length);
					this11.data = data5;
				}
			}
			this11.data[5] = vector3D.y;
			var this13 = this.rawData;
			if(!this13.fixed) {
				if(6 >= this13.length) this13.length = 7;
				if(this13.data.length < this13.length) {
					var data6;
					var this14;
					this14 = new Array(this13.data.length + 10);
					data6 = this14;
					haxe.ds._Vector.Vector_Impl_.blit(this13.data,0,data6,0,this13.data.length);
					this13.data = data6;
				}
			}
			this13.data[6] = vector3D.z;
			var this15 = this.rawData;
			if(!this15.fixed) {
				if(7 >= this15.length) this15.length = 8;
				if(this15.data.length < this15.length) {
					var data7;
					var this16;
					this16 = new Array(this15.data.length + 10);
					data7 = this16;
					haxe.ds._Vector.Vector_Impl_.blit(this15.data,0,data7,0,this15.data.length);
					this15.data = data7;
				}
			}
			this15.data[7] = vector3D.w;
			break;
		case 2:
			var this17 = this.rawData;
			if(!this17.fixed) {
				if(8 >= this17.length) this17.length = 9;
				if(this17.data.length < this17.length) {
					var data8;
					var this18;
					this18 = new Array(this17.data.length + 10);
					data8 = this18;
					haxe.ds._Vector.Vector_Impl_.blit(this17.data,0,data8,0,this17.data.length);
					this17.data = data8;
				}
			}
			this17.data[8] = vector3D.x;
			var this19 = this.rawData;
			if(!this19.fixed) {
				if(9 >= this19.length) this19.length = 10;
				if(this19.data.length < this19.length) {
					var data9;
					var this20;
					this20 = new Array(this19.data.length + 10);
					data9 = this20;
					haxe.ds._Vector.Vector_Impl_.blit(this19.data,0,data9,0,this19.data.length);
					this19.data = data9;
				}
			}
			this19.data[9] = vector3D.y;
			var this21 = this.rawData;
			if(!this21.fixed) {
				if(10 >= this21.length) this21.length = 11;
				if(this21.data.length < this21.length) {
					var data10;
					var this22;
					this22 = new Array(this21.data.length + 10);
					data10 = this22;
					haxe.ds._Vector.Vector_Impl_.blit(this21.data,0,data10,0,this21.data.length);
					this21.data = data10;
				}
			}
			this21.data[10] = vector3D.z;
			var this23 = this.rawData;
			if(!this23.fixed) {
				if(11 >= this23.length) this23.length = 12;
				if(this23.data.length < this23.length) {
					var data11;
					var this24;
					this24 = new Array(this23.data.length + 10);
					data11 = this24;
					haxe.ds._Vector.Vector_Impl_.blit(this23.data,0,data11,0,this23.data.length);
					this23.data = data11;
				}
			}
			this23.data[11] = vector3D.w;
			break;
		case 3:
			var this25 = this.rawData;
			if(!this25.fixed) {
				if(12 >= this25.length) this25.length = 13;
				if(this25.data.length < this25.length) {
					var data12;
					var this26;
					this26 = new Array(this25.data.length + 10);
					data12 = this26;
					haxe.ds._Vector.Vector_Impl_.blit(this25.data,0,data12,0,this25.data.length);
					this25.data = data12;
				}
			}
			this25.data[12] = vector3D.x;
			var this27 = this.rawData;
			if(!this27.fixed) {
				if(13 >= this27.length) this27.length = 14;
				if(this27.data.length < this27.length) {
					var data13;
					var this28;
					this28 = new Array(this27.data.length + 10);
					data13 = this28;
					haxe.ds._Vector.Vector_Impl_.blit(this27.data,0,data13,0,this27.data.length);
					this27.data = data13;
				}
			}
			this27.data[13] = vector3D.y;
			var this29 = this.rawData;
			if(!this29.fixed) {
				if(14 >= this29.length) this29.length = 15;
				if(this29.data.length < this29.length) {
					var data14;
					var this30;
					this30 = new Array(this29.data.length + 10);
					data14 = this30;
					haxe.ds._Vector.Vector_Impl_.blit(this29.data,0,data14,0,this29.data.length);
					this29.data = data14;
				}
			}
			this29.data[14] = vector3D.z;
			var this31 = this.rawData;
			if(!this31.fixed) {
				if(15 >= this31.length) this31.length = 16;
				if(this31.data.length < this31.length) {
					var data15;
					var this32;
					this32 = new Array(this31.data.length + 10);
					data15 = this32;
					haxe.ds._Vector.Vector_Impl_.blit(this31.data,0,data15,0,this31.data.length);
					this31.data = data15;
				}
			}
			this31.data[15] = vector3D.w;
			break;
		default:
			throw new openfl.errors.Error("Error, Column " + column + " out of bounds [0, ..., 3]");
		}
	}
	,copyColumnTo: function(column,vector3D) {
		switch(column) {
		case 0:
			vector3D.x = this.rawData.data[0];
			vector3D.y = this.rawData.data[1];
			vector3D.z = this.rawData.data[2];
			vector3D.w = this.rawData.data[3];
			break;
		case 1:
			vector3D.x = this.rawData.data[4];
			vector3D.y = this.rawData.data[5];
			vector3D.z = this.rawData.data[6];
			vector3D.w = this.rawData.data[7];
			break;
		case 2:
			vector3D.x = this.rawData.data[8];
			vector3D.y = this.rawData.data[9];
			vector3D.z = this.rawData.data[10];
			vector3D.w = this.rawData.data[11];
			break;
		case 3:
			vector3D.x = this.rawData.data[12];
			vector3D.y = this.rawData.data[13];
			vector3D.z = this.rawData.data[14];
			vector3D.w = this.rawData.data[15];
			break;
		default:
			throw new openfl.errors.Error("Error, Column " + column + " out of bounds [0, ..., 3]");
		}
	}
	,copyFrom: function(other) {
		var this1 = other.rawData;
		var vectorData = new openfl.VectorData();
		vectorData.length = this1.length;
		vectorData.fixed = this1.fixed;
		var this2;
		this2 = new Array(this1.length);
		vectorData.data = this2;
		haxe.ds._Vector.Vector_Impl_.blit(this1.data,0,vectorData.data,0,this1.length);
		this.rawData = vectorData;
	}
	,copyRawDataFrom: function(vector,index,transpose) {
		if(transpose == null) transpose = false;
		if(index == null) index = 0;
		if(transpose) this.transpose();
		var l = vector.length - index;
		var _g = 0;
		while(_g < l) {
			var c = _g++;
			var this1 = this.rawData;
			if(!this1.fixed) {
				if(c >= this1.length) this1.length = c + 1;
				if(this1.data.length < this1.length) {
					var data;
					var this2;
					this2 = new Array(this1.data.length + 10);
					data = this2;
					haxe.ds._Vector.Vector_Impl_.blit(this1.data,0,data,0,this1.data.length);
					this1.data = data;
				}
			}
			this1.data[c] = vector.data[c + index];
		}
		if(transpose) this.transpose();
	}
	,copyRawDataTo: function(vector,index,transpose) {
		if(transpose == null) transpose = false;
		if(index == null) index = 0;
		if(transpose) this.transpose();
		var l = this.rawData.length;
		var _g = 0;
		while(_g < l) {
			var c = _g++;
			var key = c + index;
			if(!vector.fixed) {
				if(key >= vector.length) vector.length = key + 1;
				if(vector.data.length < vector.length) {
					var data;
					var this1;
					this1 = new Array(vector.data.length + 10);
					data = this1;
					haxe.ds._Vector.Vector_Impl_.blit(vector.data,0,data,0,vector.data.length);
					vector.data = data;
				}
			}
			vector.data[key] = this.rawData.data[c];
		}
		if(transpose) this.transpose();
	}
	,copyRowFrom: function(row,vector3D) {
		switch(row) {
		case 0:
			var this1 = this.rawData;
			if(!this1.fixed) {
				if(0 >= this1.length) this1.length = 1;
				if(this1.data.length < this1.length) {
					var data;
					var this2;
					this2 = new Array(this1.data.length + 10);
					data = this2;
					haxe.ds._Vector.Vector_Impl_.blit(this1.data,0,data,0,this1.data.length);
					this1.data = data;
				}
			}
			this1.data[0] = vector3D.x;
			var this3 = this.rawData;
			if(!this3.fixed) {
				if(4 >= this3.length) this3.length = 5;
				if(this3.data.length < this3.length) {
					var data1;
					var this4;
					this4 = new Array(this3.data.length + 10);
					data1 = this4;
					haxe.ds._Vector.Vector_Impl_.blit(this3.data,0,data1,0,this3.data.length);
					this3.data = data1;
				}
			}
			this3.data[4] = vector3D.y;
			var this5 = this.rawData;
			if(!this5.fixed) {
				if(8 >= this5.length) this5.length = 9;
				if(this5.data.length < this5.length) {
					var data2;
					var this6;
					this6 = new Array(this5.data.length + 10);
					data2 = this6;
					haxe.ds._Vector.Vector_Impl_.blit(this5.data,0,data2,0,this5.data.length);
					this5.data = data2;
				}
			}
			this5.data[8] = vector3D.z;
			var this7 = this.rawData;
			if(!this7.fixed) {
				if(12 >= this7.length) this7.length = 13;
				if(this7.data.length < this7.length) {
					var data3;
					var this8;
					this8 = new Array(this7.data.length + 10);
					data3 = this8;
					haxe.ds._Vector.Vector_Impl_.blit(this7.data,0,data3,0,this7.data.length);
					this7.data = data3;
				}
			}
			this7.data[12] = vector3D.w;
			break;
		case 1:
			var this9 = this.rawData;
			if(!this9.fixed) {
				if(1 >= this9.length) this9.length = 2;
				if(this9.data.length < this9.length) {
					var data4;
					var this10;
					this10 = new Array(this9.data.length + 10);
					data4 = this10;
					haxe.ds._Vector.Vector_Impl_.blit(this9.data,0,data4,0,this9.data.length);
					this9.data = data4;
				}
			}
			this9.data[1] = vector3D.x;
			var this11 = this.rawData;
			if(!this11.fixed) {
				if(5 >= this11.length) this11.length = 6;
				if(this11.data.length < this11.length) {
					var data5;
					var this12;
					this12 = new Array(this11.data.length + 10);
					data5 = this12;
					haxe.ds._Vector.Vector_Impl_.blit(this11.data,0,data5,0,this11.data.length);
					this11.data = data5;
				}
			}
			this11.data[5] = vector3D.y;
			var this13 = this.rawData;
			if(!this13.fixed) {
				if(9 >= this13.length) this13.length = 10;
				if(this13.data.length < this13.length) {
					var data6;
					var this14;
					this14 = new Array(this13.data.length + 10);
					data6 = this14;
					haxe.ds._Vector.Vector_Impl_.blit(this13.data,0,data6,0,this13.data.length);
					this13.data = data6;
				}
			}
			this13.data[9] = vector3D.z;
			var this15 = this.rawData;
			if(!this15.fixed) {
				if(13 >= this15.length) this15.length = 14;
				if(this15.data.length < this15.length) {
					var data7;
					var this16;
					this16 = new Array(this15.data.length + 10);
					data7 = this16;
					haxe.ds._Vector.Vector_Impl_.blit(this15.data,0,data7,0,this15.data.length);
					this15.data = data7;
				}
			}
			this15.data[13] = vector3D.w;
			break;
		case 2:
			var this17 = this.rawData;
			if(!this17.fixed) {
				if(2 >= this17.length) this17.length = 3;
				if(this17.data.length < this17.length) {
					var data8;
					var this18;
					this18 = new Array(this17.data.length + 10);
					data8 = this18;
					haxe.ds._Vector.Vector_Impl_.blit(this17.data,0,data8,0,this17.data.length);
					this17.data = data8;
				}
			}
			this17.data[2] = vector3D.x;
			var this19 = this.rawData;
			if(!this19.fixed) {
				if(6 >= this19.length) this19.length = 7;
				if(this19.data.length < this19.length) {
					var data9;
					var this20;
					this20 = new Array(this19.data.length + 10);
					data9 = this20;
					haxe.ds._Vector.Vector_Impl_.blit(this19.data,0,data9,0,this19.data.length);
					this19.data = data9;
				}
			}
			this19.data[6] = vector3D.y;
			var this21 = this.rawData;
			if(!this21.fixed) {
				if(10 >= this21.length) this21.length = 11;
				if(this21.data.length < this21.length) {
					var data10;
					var this22;
					this22 = new Array(this21.data.length + 10);
					data10 = this22;
					haxe.ds._Vector.Vector_Impl_.blit(this21.data,0,data10,0,this21.data.length);
					this21.data = data10;
				}
			}
			this21.data[10] = vector3D.z;
			var this23 = this.rawData;
			if(!this23.fixed) {
				if(14 >= this23.length) this23.length = 15;
				if(this23.data.length < this23.length) {
					var data11;
					var this24;
					this24 = new Array(this23.data.length + 10);
					data11 = this24;
					haxe.ds._Vector.Vector_Impl_.blit(this23.data,0,data11,0,this23.data.length);
					this23.data = data11;
				}
			}
			this23.data[14] = vector3D.w;
			break;
		case 3:
			var this25 = this.rawData;
			if(!this25.fixed) {
				if(3 >= this25.length) this25.length = 4;
				if(this25.data.length < this25.length) {
					var data12;
					var this26;
					this26 = new Array(this25.data.length + 10);
					data12 = this26;
					haxe.ds._Vector.Vector_Impl_.blit(this25.data,0,data12,0,this25.data.length);
					this25.data = data12;
				}
			}
			this25.data[3] = vector3D.x;
			var this27 = this.rawData;
			if(!this27.fixed) {
				if(7 >= this27.length) this27.length = 8;
				if(this27.data.length < this27.length) {
					var data13;
					var this28;
					this28 = new Array(this27.data.length + 10);
					data13 = this28;
					haxe.ds._Vector.Vector_Impl_.blit(this27.data,0,data13,0,this27.data.length);
					this27.data = data13;
				}
			}
			this27.data[7] = vector3D.y;
			var this29 = this.rawData;
			if(!this29.fixed) {
				if(11 >= this29.length) this29.length = 12;
				if(this29.data.length < this29.length) {
					var data14;
					var this30;
					this30 = new Array(this29.data.length + 10);
					data14 = this30;
					haxe.ds._Vector.Vector_Impl_.blit(this29.data,0,data14,0,this29.data.length);
					this29.data = data14;
				}
			}
			this29.data[11] = vector3D.z;
			var this31 = this.rawData;
			if(!this31.fixed) {
				if(15 >= this31.length) this31.length = 16;
				if(this31.data.length < this31.length) {
					var data15;
					var this32;
					this32 = new Array(this31.data.length + 10);
					data15 = this32;
					haxe.ds._Vector.Vector_Impl_.blit(this31.data,0,data15,0,this31.data.length);
					this31.data = data15;
				}
			}
			this31.data[15] = vector3D.w;
			break;
		default:
			throw new openfl.errors.Error("Error, Row " + Std.string((function($this) {
				var $r;
				var $int = row;
				$r = $int < 0?4294967296.0 + $int:$int + 0.0;
				return $r;
			}(this))) + " out of bounds [0, ..., 3]");
		}
	}
	,copyRowTo: function(row,vector3D) {
		switch(row) {
		case 0:
			vector3D.x = this.rawData.data[0];
			vector3D.y = this.rawData.data[4];
			vector3D.z = this.rawData.data[8];
			vector3D.w = this.rawData.data[12];
			break;
		case 1:
			vector3D.x = this.rawData.data[1];
			vector3D.y = this.rawData.data[5];
			vector3D.z = this.rawData.data[9];
			vector3D.w = this.rawData.data[13];
			break;
		case 2:
			vector3D.x = this.rawData.data[2];
			vector3D.y = this.rawData.data[6];
			vector3D.z = this.rawData.data[10];
			vector3D.w = this.rawData.data[14];
			break;
		case 3:
			vector3D.x = this.rawData.data[3];
			vector3D.y = this.rawData.data[7];
			vector3D.z = this.rawData.data[11];
			vector3D.w = this.rawData.data[15];
			break;
		default:
			throw new openfl.errors.Error("Error, Row " + row + " out of bounds [0, ..., 3]");
		}
	}
	,copyToMatrix3D: function(other) {
		var this1 = this.rawData;
		var vectorData = new openfl.VectorData();
		vectorData.length = this1.length;
		vectorData.fixed = this1.fixed;
		var this2;
		this2 = new Array(this1.length);
		vectorData.data = this2;
		haxe.ds._Vector.Vector_Impl_.blit(this1.data,0,vectorData.data,0,this1.length);
		other.rawData = vectorData;
	}
	,decompose: function(orientationStyle) {
		if(orientationStyle == null) orientationStyle = openfl.geom.Orientation3D.EULER_ANGLES;
		var vec;
		var this1;
		this1 = new openfl.VectorData();
		var this2;
		this2 = new Array(0);
		this1.data = this2;
		this1.length = 0;
		this1.fixed = false;
		vec = this1;
		var m = this.clone();
		var mr;
		var this3 = m.rawData;
		var vectorData = new openfl.VectorData();
		vectorData.length = this3.length;
		vectorData.fixed = this3.fixed;
		var this4;
		this4 = new Array(this3.length);
		vectorData.data = this4;
		haxe.ds._Vector.Vector_Impl_.blit(this3.data,0,vectorData.data,0,this3.length);
		mr = vectorData;
		var pos = new openfl.geom.Vector3D(mr.data[12],mr.data[13],mr.data[14]);
		if(!mr.fixed) {
			if(12 >= mr.length) mr.length = 13;
			if(mr.data.length < mr.length) {
				var data;
				var this5;
				this5 = new Array(mr.data.length + 10);
				data = this5;
				haxe.ds._Vector.Vector_Impl_.blit(mr.data,0,data,0,mr.data.length);
				mr.data = data;
			}
		}
		mr.data[12] = 0;
		if(!mr.fixed) {
			if(13 >= mr.length) mr.length = 14;
			if(mr.data.length < mr.length) {
				var data1;
				var this6;
				this6 = new Array(mr.data.length + 10);
				data1 = this6;
				haxe.ds._Vector.Vector_Impl_.blit(mr.data,0,data1,0,mr.data.length);
				mr.data = data1;
			}
		}
		mr.data[13] = 0;
		if(!mr.fixed) {
			if(14 >= mr.length) mr.length = 15;
			if(mr.data.length < mr.length) {
				var data2;
				var this7;
				this7 = new Array(mr.data.length + 10);
				data2 = this7;
				haxe.ds._Vector.Vector_Impl_.blit(mr.data,0,data2,0,mr.data.length);
				mr.data = data2;
			}
		}
		mr.data[14] = 0;
		var scale = new openfl.geom.Vector3D();
		scale.x = Math.sqrt(mr.data[0] * mr.data[0] + mr.data[1] * mr.data[1] + mr.data[2] * mr.data[2]);
		scale.y = Math.sqrt(mr.data[4] * mr.data[4] + mr.data[5] * mr.data[5] + mr.data[6] * mr.data[6]);
		scale.z = Math.sqrt(mr.data[8] * mr.data[8] + mr.data[9] * mr.data[9] + mr.data[10] * mr.data[10]);
		if(mr.data[0] * (mr.data[5] * mr.data[10] - mr.data[6] * mr.data[9]) - mr.data[1] * (mr.data[4] * mr.data[10] - mr.data[6] * mr.data[8]) + mr.data[2] * (mr.data[4] * mr.data[9] - mr.data[5] * mr.data[8]) < 0) scale.z = -scale.z;
		if(!mr.fixed) {
			if(0 >= mr.length) mr.length = 1;
			if(mr.data.length < mr.length) {
				var data3;
				var this8;
				this8 = new Array(mr.data.length + 10);
				data3 = this8;
				haxe.ds._Vector.Vector_Impl_.blit(mr.data,0,data3,0,mr.data.length);
				mr.data = data3;
			}
		}
		mr.data[0] = mr.data[0] / scale.x;
		if(!mr.fixed) {
			if(1 >= mr.length) mr.length = 2;
			if(mr.data.length < mr.length) {
				var data4;
				var this9;
				this9 = new Array(mr.data.length + 10);
				data4 = this9;
				haxe.ds._Vector.Vector_Impl_.blit(mr.data,0,data4,0,mr.data.length);
				mr.data = data4;
			}
		}
		mr.data[1] = mr.data[1] / scale.x;
		if(!mr.fixed) {
			if(2 >= mr.length) mr.length = 3;
			if(mr.data.length < mr.length) {
				var data5;
				var this10;
				this10 = new Array(mr.data.length + 10);
				data5 = this10;
				haxe.ds._Vector.Vector_Impl_.blit(mr.data,0,data5,0,mr.data.length);
				mr.data = data5;
			}
		}
		mr.data[2] = mr.data[2] / scale.x;
		if(!mr.fixed) {
			if(4 >= mr.length) mr.length = 5;
			if(mr.data.length < mr.length) {
				var data6;
				var this11;
				this11 = new Array(mr.data.length + 10);
				data6 = this11;
				haxe.ds._Vector.Vector_Impl_.blit(mr.data,0,data6,0,mr.data.length);
				mr.data = data6;
			}
		}
		mr.data[4] = mr.data[4] / scale.y;
		if(!mr.fixed) {
			if(5 >= mr.length) mr.length = 6;
			if(mr.data.length < mr.length) {
				var data7;
				var this12;
				this12 = new Array(mr.data.length + 10);
				data7 = this12;
				haxe.ds._Vector.Vector_Impl_.blit(mr.data,0,data7,0,mr.data.length);
				mr.data = data7;
			}
		}
		mr.data[5] = mr.data[5] / scale.y;
		if(!mr.fixed) {
			if(6 >= mr.length) mr.length = 7;
			if(mr.data.length < mr.length) {
				var data8;
				var this13;
				this13 = new Array(mr.data.length + 10);
				data8 = this13;
				haxe.ds._Vector.Vector_Impl_.blit(mr.data,0,data8,0,mr.data.length);
				mr.data = data8;
			}
		}
		mr.data[6] = mr.data[6] / scale.y;
		if(!mr.fixed) {
			if(8 >= mr.length) mr.length = 9;
			if(mr.data.length < mr.length) {
				var data9;
				var this14;
				this14 = new Array(mr.data.length + 10);
				data9 = this14;
				haxe.ds._Vector.Vector_Impl_.blit(mr.data,0,data9,0,mr.data.length);
				mr.data = data9;
			}
		}
		mr.data[8] = mr.data[8] / scale.z;
		if(!mr.fixed) {
			if(9 >= mr.length) mr.length = 10;
			if(mr.data.length < mr.length) {
				var data10;
				var this15;
				this15 = new Array(mr.data.length + 10);
				data10 = this15;
				haxe.ds._Vector.Vector_Impl_.blit(mr.data,0,data10,0,mr.data.length);
				mr.data = data10;
			}
		}
		mr.data[9] = mr.data[9] / scale.z;
		if(!mr.fixed) {
			if(10 >= mr.length) mr.length = 11;
			if(mr.data.length < mr.length) {
				var data11;
				var this16;
				this16 = new Array(mr.data.length + 10);
				data11 = this16;
				haxe.ds._Vector.Vector_Impl_.blit(mr.data,0,data11,0,mr.data.length);
				mr.data = data11;
			}
		}
		mr.data[10] = mr.data[10] / scale.z;
		var rot = new openfl.geom.Vector3D();
		switch(orientationStyle[1]) {
		case 0:
			rot.w = Math.acos((mr.data[0] + mr.data[5] + mr.data[10] - 1) / 2);
			var len = Math.sqrt((mr.data[6] - mr.data[9]) * (mr.data[6] - mr.data[9]) + (mr.data[8] - mr.data[2]) * (mr.data[8] - mr.data[2]) + (mr.data[1] - mr.data[4]) * (mr.data[1] - mr.data[4]));
			if(len != 0) {
				rot.x = (mr.data[6] - mr.data[9]) / len;
				rot.y = (mr.data[8] - mr.data[2]) / len;
				rot.z = (mr.data[1] - mr.data[4]) / len;
			} else rot.x = rot.y = rot.z = 0;
			break;
		case 2:
			var tr = mr.data[0] + mr.data[5] + mr.data[10];
			if(tr > 0) {
				rot.w = Math.sqrt(1 + tr) / 2;
				rot.x = (mr.data[6] - mr.data[9]) / (4 * rot.w);
				rot.y = (mr.data[8] - mr.data[2]) / (4 * rot.w);
				rot.z = (mr.data[1] - mr.data[4]) / (4 * rot.w);
			} else if(mr.data[0] > mr.data[5] && mr.data[0] > mr.data[10]) {
				rot.x = Math.sqrt(1 + mr.data[0] - mr.data[5] - mr.data[10]) / 2;
				rot.w = (mr.data[6] - mr.data[9]) / (4 * rot.x);
				rot.y = (mr.data[1] + mr.data[4]) / (4 * rot.x);
				rot.z = (mr.data[8] + mr.data[2]) / (4 * rot.x);
			} else if(mr.data[5] > mr.data[10]) {
				rot.y = Math.sqrt(1 + mr.data[5] - mr.data[0] - mr.data[10]) / 2;
				rot.x = (mr.data[1] + mr.data[4]) / (4 * rot.y);
				rot.w = (mr.data[8] - mr.data[2]) / (4 * rot.y);
				rot.z = (mr.data[6] + mr.data[9]) / (4 * rot.y);
			} else {
				rot.z = Math.sqrt(1 + mr.data[10] - mr.data[0] - mr.data[5]) / 2;
				rot.x = (mr.data[8] + mr.data[2]) / (4 * rot.z);
				rot.y = (mr.data[6] + mr.data[9]) / (4 * rot.z);
				rot.w = (mr.data[1] - mr.data[4]) / (4 * rot.z);
			}
			break;
		case 1:
			rot.y = Math.asin(-mr.data[2]);
			if(mr.data[2] != 1 && mr.data[2] != -1) {
				rot.x = Math.atan2(mr.data[6],mr.data[10]);
				rot.z = Math.atan2(mr.data[1],mr.data[0]);
			} else {
				rot.z = 0;
				rot.x = Math.atan2(mr.data[4],mr.data[5]);
			}
			break;
		}
		if(!vec.fixed) {
			vec.length++;
			if(vec.data.length < vec.length) {
				var data12;
				var this17;
				this17 = new Array(vec.data.length + 10);
				data12 = this17;
				haxe.ds._Vector.Vector_Impl_.blit(vec.data,0,data12,0,vec.data.length);
				vec.data = data12;
			}
			vec.data[vec.length - 1] = pos;
		}
		vec.length;
		if(!vec.fixed) {
			vec.length++;
			if(vec.data.length < vec.length) {
				var data13;
				var this18;
				this18 = new Array(vec.data.length + 10);
				data13 = this18;
				haxe.ds._Vector.Vector_Impl_.blit(vec.data,0,data13,0,vec.data.length);
				vec.data = data13;
			}
			vec.data[vec.length - 1] = rot;
		}
		vec.length;
		if(!vec.fixed) {
			vec.length++;
			if(vec.data.length < vec.length) {
				var data14;
				var this19;
				this19 = new Array(vec.data.length + 10);
				data14 = this19;
				haxe.ds._Vector.Vector_Impl_.blit(vec.data,0,data14,0,vec.data.length);
				vec.data = data14;
			}
			vec.data[vec.length - 1] = scale;
		}
		vec.length;
		return vec;
	}
	,deltaTransformVector: function(v) {
		var x = v.x;
		var y = v.y;
		var z = v.z;
		return new openfl.geom.Vector3D(x * this.rawData.data[0] + y * this.rawData.data[4] + z * this.rawData.data[8] + this.rawData.data[3],x * this.rawData.data[1] + y * this.rawData.data[5] + z * this.rawData.data[9] + this.rawData.data[7],x * this.rawData.data[2] + y * this.rawData.data[6] + z * this.rawData.data[10] + this.rawData.data[11],0);
	}
	,identity: function() {
		var value = [1.0,0.0,0.0,0.0,0.0,1.0,0.0,0.0,0.0,0.0,1.0,0.0,0.0,0.0,0.0,1.0];
		var vectorData = new openfl.VectorData();
		vectorData.length = value.length;
		vectorData.fixed = true;
		var vec;
		var this1;
		this1 = new Array(value.length);
		vec = this1;
		var _g1 = 0;
		var _g = value.length;
		while(_g1 < _g) {
			var i = _g1++;
			vec[i] = value[i];
		}
		vectorData.data = vec;
		this.rawData = vectorData;
	}
	,interpolateTo: function(toMat,percent) {
		var _g = 0;
		while(_g < 16) {
			var i = _g++;
			var this1 = this.rawData;
			if(!this1.fixed) {
				if(i >= this1.length) this1.length = i + 1;
				if(this1.data.length < this1.length) {
					var data;
					var this2;
					this2 = new Array(this1.data.length + 10);
					data = this2;
					haxe.ds._Vector.Vector_Impl_.blit(this1.data,0,data,0,this1.data.length);
					this1.data = data;
				}
			}
			this1.data[i] = this.rawData.data[i] + (toMat.rawData.data[i] - this.rawData.data[i]) * percent;
		}
	}
	,invert: function() {
		var d = (this.rawData.data[0] * this.rawData.data[5] - this.rawData.data[4] * this.rawData.data[1]) * (this.rawData.data[10] * this.rawData.data[15] - this.rawData.data[14] * this.rawData.data[11]) - (this.rawData.data[0] * this.rawData.data[9] - this.rawData.data[8] * this.rawData.data[1]) * (this.rawData.data[6] * this.rawData.data[15] - this.rawData.data[14] * this.rawData.data[7]) + (this.rawData.data[0] * this.rawData.data[13] - this.rawData.data[12] * this.rawData.data[1]) * (this.rawData.data[6] * this.rawData.data[11] - this.rawData.data[10] * this.rawData.data[7]) + (this.rawData.data[4] * this.rawData.data[9] - this.rawData.data[8] * this.rawData.data[5]) * (this.rawData.data[2] * this.rawData.data[15] - this.rawData.data[14] * this.rawData.data[3]) - (this.rawData.data[4] * this.rawData.data[13] - this.rawData.data[12] * this.rawData.data[5]) * (this.rawData.data[2] * this.rawData.data[11] - this.rawData.data[10] * this.rawData.data[3]) + (this.rawData.data[8] * this.rawData.data[13] - this.rawData.data[12] * this.rawData.data[9]) * (this.rawData.data[2] * this.rawData.data[7] - this.rawData.data[6] * this.rawData.data[3]);
		var invertable = Math.abs(d) > 0.00000000001;
		if(invertable) {
			d = 1 / d;
			var m11 = this.rawData.data[0];
			var m21 = this.rawData.data[4];
			var m31 = this.rawData.data[8];
			var m41 = this.rawData.data[12];
			var m12 = this.rawData.data[1];
			var m22 = this.rawData.data[5];
			var m32 = this.rawData.data[9];
			var m42 = this.rawData.data[13];
			var m13 = this.rawData.data[2];
			var m23 = this.rawData.data[6];
			var m33 = this.rawData.data[10];
			var m43 = this.rawData.data[14];
			var m14 = this.rawData.data[3];
			var m24 = this.rawData.data[7];
			var m34 = this.rawData.data[11];
			var m44 = this.rawData.data[15];
			var this1 = this.rawData;
			if(!this1.fixed) {
				if(0 >= this1.length) this1.length = 1;
				if(this1.data.length < this1.length) {
					var data;
					var this2;
					this2 = new Array(this1.data.length + 10);
					data = this2;
					haxe.ds._Vector.Vector_Impl_.blit(this1.data,0,data,0,this1.data.length);
					this1.data = data;
				}
			}
			this1.data[0] = d * (m22 * (m33 * m44 - m43 * m34) - m32 * (m23 * m44 - m43 * m24) + m42 * (m23 * m34 - m33 * m24));
			var this3 = this.rawData;
			if(!this3.fixed) {
				if(1 >= this3.length) this3.length = 2;
				if(this3.data.length < this3.length) {
					var data1;
					var this4;
					this4 = new Array(this3.data.length + 10);
					data1 = this4;
					haxe.ds._Vector.Vector_Impl_.blit(this3.data,0,data1,0,this3.data.length);
					this3.data = data1;
				}
			}
			this3.data[1] = -d * (m12 * (m33 * m44 - m43 * m34) - m32 * (m13 * m44 - m43 * m14) + m42 * (m13 * m34 - m33 * m14));
			var this5 = this.rawData;
			if(!this5.fixed) {
				if(2 >= this5.length) this5.length = 3;
				if(this5.data.length < this5.length) {
					var data2;
					var this6;
					this6 = new Array(this5.data.length + 10);
					data2 = this6;
					haxe.ds._Vector.Vector_Impl_.blit(this5.data,0,data2,0,this5.data.length);
					this5.data = data2;
				}
			}
			this5.data[2] = d * (m12 * (m23 * m44 - m43 * m24) - m22 * (m13 * m44 - m43 * m14) + m42 * (m13 * m24 - m23 * m14));
			var this7 = this.rawData;
			if(!this7.fixed) {
				if(3 >= this7.length) this7.length = 4;
				if(this7.data.length < this7.length) {
					var data3;
					var this8;
					this8 = new Array(this7.data.length + 10);
					data3 = this8;
					haxe.ds._Vector.Vector_Impl_.blit(this7.data,0,data3,0,this7.data.length);
					this7.data = data3;
				}
			}
			this7.data[3] = -d * (m12 * (m23 * m34 - m33 * m24) - m22 * (m13 * m34 - m33 * m14) + m32 * (m13 * m24 - m23 * m14));
			var this9 = this.rawData;
			if(!this9.fixed) {
				if(4 >= this9.length) this9.length = 5;
				if(this9.data.length < this9.length) {
					var data4;
					var this10;
					this10 = new Array(this9.data.length + 10);
					data4 = this10;
					haxe.ds._Vector.Vector_Impl_.blit(this9.data,0,data4,0,this9.data.length);
					this9.data = data4;
				}
			}
			this9.data[4] = -d * (m21 * (m33 * m44 - m43 * m34) - m31 * (m23 * m44 - m43 * m24) + m41 * (m23 * m34 - m33 * m24));
			var this11 = this.rawData;
			if(!this11.fixed) {
				if(5 >= this11.length) this11.length = 6;
				if(this11.data.length < this11.length) {
					var data5;
					var this12;
					this12 = new Array(this11.data.length + 10);
					data5 = this12;
					haxe.ds._Vector.Vector_Impl_.blit(this11.data,0,data5,0,this11.data.length);
					this11.data = data5;
				}
			}
			this11.data[5] = d * (m11 * (m33 * m44 - m43 * m34) - m31 * (m13 * m44 - m43 * m14) + m41 * (m13 * m34 - m33 * m14));
			var this13 = this.rawData;
			if(!this13.fixed) {
				if(6 >= this13.length) this13.length = 7;
				if(this13.data.length < this13.length) {
					var data6;
					var this14;
					this14 = new Array(this13.data.length + 10);
					data6 = this14;
					haxe.ds._Vector.Vector_Impl_.blit(this13.data,0,data6,0,this13.data.length);
					this13.data = data6;
				}
			}
			this13.data[6] = -d * (m11 * (m23 * m44 - m43 * m24) - m21 * (m13 * m44 - m43 * m14) + m41 * (m13 * m24 - m23 * m14));
			var this15 = this.rawData;
			if(!this15.fixed) {
				if(7 >= this15.length) this15.length = 8;
				if(this15.data.length < this15.length) {
					var data7;
					var this16;
					this16 = new Array(this15.data.length + 10);
					data7 = this16;
					haxe.ds._Vector.Vector_Impl_.blit(this15.data,0,data7,0,this15.data.length);
					this15.data = data7;
				}
			}
			this15.data[7] = d * (m11 * (m23 * m34 - m33 * m24) - m21 * (m13 * m34 - m33 * m14) + m31 * (m13 * m24 - m23 * m14));
			var this17 = this.rawData;
			if(!this17.fixed) {
				if(8 >= this17.length) this17.length = 9;
				if(this17.data.length < this17.length) {
					var data8;
					var this18;
					this18 = new Array(this17.data.length + 10);
					data8 = this18;
					haxe.ds._Vector.Vector_Impl_.blit(this17.data,0,data8,0,this17.data.length);
					this17.data = data8;
				}
			}
			this17.data[8] = d * (m21 * (m32 * m44 - m42 * m34) - m31 * (m22 * m44 - m42 * m24) + m41 * (m22 * m34 - m32 * m24));
			var this19 = this.rawData;
			if(!this19.fixed) {
				if(9 >= this19.length) this19.length = 10;
				if(this19.data.length < this19.length) {
					var data9;
					var this20;
					this20 = new Array(this19.data.length + 10);
					data9 = this20;
					haxe.ds._Vector.Vector_Impl_.blit(this19.data,0,data9,0,this19.data.length);
					this19.data = data9;
				}
			}
			this19.data[9] = -d * (m11 * (m32 * m44 - m42 * m34) - m31 * (m12 * m44 - m42 * m14) + m41 * (m12 * m34 - m32 * m14));
			var this21 = this.rawData;
			if(!this21.fixed) {
				if(10 >= this21.length) this21.length = 11;
				if(this21.data.length < this21.length) {
					var data10;
					var this22;
					this22 = new Array(this21.data.length + 10);
					data10 = this22;
					haxe.ds._Vector.Vector_Impl_.blit(this21.data,0,data10,0,this21.data.length);
					this21.data = data10;
				}
			}
			this21.data[10] = d * (m11 * (m22 * m44 - m42 * m24) - m21 * (m12 * m44 - m42 * m14) + m41 * (m12 * m24 - m22 * m14));
			var this23 = this.rawData;
			if(!this23.fixed) {
				if(11 >= this23.length) this23.length = 12;
				if(this23.data.length < this23.length) {
					var data11;
					var this24;
					this24 = new Array(this23.data.length + 10);
					data11 = this24;
					haxe.ds._Vector.Vector_Impl_.blit(this23.data,0,data11,0,this23.data.length);
					this23.data = data11;
				}
			}
			this23.data[11] = -d * (m11 * (m22 * m34 - m32 * m24) - m21 * (m12 * m34 - m32 * m14) + m31 * (m12 * m24 - m22 * m14));
			var this25 = this.rawData;
			if(!this25.fixed) {
				if(12 >= this25.length) this25.length = 13;
				if(this25.data.length < this25.length) {
					var data12;
					var this26;
					this26 = new Array(this25.data.length + 10);
					data12 = this26;
					haxe.ds._Vector.Vector_Impl_.blit(this25.data,0,data12,0,this25.data.length);
					this25.data = data12;
				}
			}
			this25.data[12] = -d * (m21 * (m32 * m43 - m42 * m33) - m31 * (m22 * m43 - m42 * m23) + m41 * (m22 * m33 - m32 * m23));
			var this27 = this.rawData;
			if(!this27.fixed) {
				if(13 >= this27.length) this27.length = 14;
				if(this27.data.length < this27.length) {
					var data13;
					var this28;
					this28 = new Array(this27.data.length + 10);
					data13 = this28;
					haxe.ds._Vector.Vector_Impl_.blit(this27.data,0,data13,0,this27.data.length);
					this27.data = data13;
				}
			}
			this27.data[13] = d * (m11 * (m32 * m43 - m42 * m33) - m31 * (m12 * m43 - m42 * m13) + m41 * (m12 * m33 - m32 * m13));
			var this29 = this.rawData;
			if(!this29.fixed) {
				if(14 >= this29.length) this29.length = 15;
				if(this29.data.length < this29.length) {
					var data14;
					var this30;
					this30 = new Array(this29.data.length + 10);
					data14 = this30;
					haxe.ds._Vector.Vector_Impl_.blit(this29.data,0,data14,0,this29.data.length);
					this29.data = data14;
				}
			}
			this29.data[14] = -d * (m11 * (m22 * m43 - m42 * m23) - m21 * (m12 * m43 - m42 * m13) + m41 * (m12 * m23 - m22 * m13));
			var this31 = this.rawData;
			if(!this31.fixed) {
				if(15 >= this31.length) this31.length = 16;
				if(this31.data.length < this31.length) {
					var data15;
					var this32;
					this32 = new Array(this31.data.length + 10);
					data15 = this32;
					haxe.ds._Vector.Vector_Impl_.blit(this31.data,0,data15,0,this31.data.length);
					this31.data = data15;
				}
			}
			this31.data[15] = d * (m11 * (m22 * m33 - m32 * m23) - m21 * (m12 * m33 - m32 * m13) + m31 * (m12 * m23 - m22 * m13));
		}
		return invertable;
	}
	,pointAt: function(pos,at,up) {
		if(at == null) at = new openfl.geom.Vector3D(0,0,-1);
		if(up == null) up = new openfl.geom.Vector3D(0,-1,0);
		var dir = new openfl.geom.Vector3D(at.x - pos.x,at.y - pos.y,at.z - pos.z);
		var vup = new openfl.geom.Vector3D(up.x,up.y,up.z,up.w);
		var right;
		dir.normalize();
		vup.normalize();
		var dir2 = new openfl.geom.Vector3D(dir.x,dir.y,dir.z,dir.w);
		dir2.scaleBy(vup.x * dir.x + vup.y * dir.y + vup.z * dir.z);
		vup = new openfl.geom.Vector3D(vup.x - dir2.x,vup.y - dir2.y,vup.z - dir2.z);
		if(Math.sqrt(vup.x * vup.x + vup.y * vup.y + vup.z * vup.z) > 0) vup.normalize(); else if(dir.x != 0) vup = new openfl.geom.Vector3D(-dir.y,dir.x,0); else vup = new openfl.geom.Vector3D(1,0,0);
		right = new openfl.geom.Vector3D(vup.y * dir.z - vup.z * dir.y,vup.z * dir.x - vup.x * dir.z,vup.x * dir.y - vup.y * dir.x,1);
		right.normalize();
		var this1 = this.rawData;
		if(!this1.fixed) {
			if(0 >= this1.length) this1.length = 1;
			if(this1.data.length < this1.length) {
				var data;
				var this2;
				this2 = new Array(this1.data.length + 10);
				data = this2;
				haxe.ds._Vector.Vector_Impl_.blit(this1.data,0,data,0,this1.data.length);
				this1.data = data;
			}
		}
		this1.data[0] = right.x;
		var this3 = this.rawData;
		if(!this3.fixed) {
			if(4 >= this3.length) this3.length = 5;
			if(this3.data.length < this3.length) {
				var data1;
				var this4;
				this4 = new Array(this3.data.length + 10);
				data1 = this4;
				haxe.ds._Vector.Vector_Impl_.blit(this3.data,0,data1,0,this3.data.length);
				this3.data = data1;
			}
		}
		this3.data[4] = right.y;
		var this5 = this.rawData;
		if(!this5.fixed) {
			if(8 >= this5.length) this5.length = 9;
			if(this5.data.length < this5.length) {
				var data2;
				var this6;
				this6 = new Array(this5.data.length + 10);
				data2 = this6;
				haxe.ds._Vector.Vector_Impl_.blit(this5.data,0,data2,0,this5.data.length);
				this5.data = data2;
			}
		}
		this5.data[8] = right.z;
		var this7 = this.rawData;
		if(!this7.fixed) {
			if(12 >= this7.length) this7.length = 13;
			if(this7.data.length < this7.length) {
				var data3;
				var this8;
				this8 = new Array(this7.data.length + 10);
				data3 = this8;
				haxe.ds._Vector.Vector_Impl_.blit(this7.data,0,data3,0,this7.data.length);
				this7.data = data3;
			}
		}
		this7.data[12] = 0.0;
		var this9 = this.rawData;
		if(!this9.fixed) {
			if(1 >= this9.length) this9.length = 2;
			if(this9.data.length < this9.length) {
				var data4;
				var this10;
				this10 = new Array(this9.data.length + 10);
				data4 = this10;
				haxe.ds._Vector.Vector_Impl_.blit(this9.data,0,data4,0,this9.data.length);
				this9.data = data4;
			}
		}
		this9.data[1] = vup.x;
		var this11 = this.rawData;
		if(!this11.fixed) {
			if(5 >= this11.length) this11.length = 6;
			if(this11.data.length < this11.length) {
				var data5;
				var this12;
				this12 = new Array(this11.data.length + 10);
				data5 = this12;
				haxe.ds._Vector.Vector_Impl_.blit(this11.data,0,data5,0,this11.data.length);
				this11.data = data5;
			}
		}
		this11.data[5] = vup.y;
		var this13 = this.rawData;
		if(!this13.fixed) {
			if(9 >= this13.length) this13.length = 10;
			if(this13.data.length < this13.length) {
				var data6;
				var this14;
				this14 = new Array(this13.data.length + 10);
				data6 = this14;
				haxe.ds._Vector.Vector_Impl_.blit(this13.data,0,data6,0,this13.data.length);
				this13.data = data6;
			}
		}
		this13.data[9] = vup.z;
		var this15 = this.rawData;
		if(!this15.fixed) {
			if(13 >= this15.length) this15.length = 14;
			if(this15.data.length < this15.length) {
				var data7;
				var this16;
				this16 = new Array(this15.data.length + 10);
				data7 = this16;
				haxe.ds._Vector.Vector_Impl_.blit(this15.data,0,data7,0,this15.data.length);
				this15.data = data7;
			}
		}
		this15.data[13] = 0.0;
		var this17 = this.rawData;
		if(!this17.fixed) {
			if(2 >= this17.length) this17.length = 3;
			if(this17.data.length < this17.length) {
				var data8;
				var this18;
				this18 = new Array(this17.data.length + 10);
				data8 = this18;
				haxe.ds._Vector.Vector_Impl_.blit(this17.data,0,data8,0,this17.data.length);
				this17.data = data8;
			}
		}
		this17.data[2] = dir.x;
		var this19 = this.rawData;
		if(!this19.fixed) {
			if(6 >= this19.length) this19.length = 7;
			if(this19.data.length < this19.length) {
				var data9;
				var this20;
				this20 = new Array(this19.data.length + 10);
				data9 = this20;
				haxe.ds._Vector.Vector_Impl_.blit(this19.data,0,data9,0,this19.data.length);
				this19.data = data9;
			}
		}
		this19.data[6] = dir.y;
		var this21 = this.rawData;
		if(!this21.fixed) {
			if(10 >= this21.length) this21.length = 11;
			if(this21.data.length < this21.length) {
				var data10;
				var this22;
				this22 = new Array(this21.data.length + 10);
				data10 = this22;
				haxe.ds._Vector.Vector_Impl_.blit(this21.data,0,data10,0,this21.data.length);
				this21.data = data10;
			}
		}
		this21.data[10] = dir.z;
		var this23 = this.rawData;
		if(!this23.fixed) {
			if(14 >= this23.length) this23.length = 15;
			if(this23.data.length < this23.length) {
				var data11;
				var this24;
				this24 = new Array(this23.data.length + 10);
				data11 = this24;
				haxe.ds._Vector.Vector_Impl_.blit(this23.data,0,data11,0,this23.data.length);
				this23.data = data11;
			}
		}
		this23.data[14] = 0.0;
		var this25 = this.rawData;
		if(!this25.fixed) {
			if(3 >= this25.length) this25.length = 4;
			if(this25.data.length < this25.length) {
				var data12;
				var this26;
				this26 = new Array(this25.data.length + 10);
				data12 = this26;
				haxe.ds._Vector.Vector_Impl_.blit(this25.data,0,data12,0,this25.data.length);
				this25.data = data12;
			}
		}
		this25.data[3] = pos.x;
		var this27 = this.rawData;
		if(!this27.fixed) {
			if(7 >= this27.length) this27.length = 8;
			if(this27.data.length < this27.length) {
				var data13;
				var this28;
				this28 = new Array(this27.data.length + 10);
				data13 = this28;
				haxe.ds._Vector.Vector_Impl_.blit(this27.data,0,data13,0,this27.data.length);
				this27.data = data13;
			}
		}
		this27.data[7] = pos.y;
		var this29 = this.rawData;
		if(!this29.fixed) {
			if(11 >= this29.length) this29.length = 12;
			if(this29.data.length < this29.length) {
				var data14;
				var this30;
				this30 = new Array(this29.data.length + 10);
				data14 = this30;
				haxe.ds._Vector.Vector_Impl_.blit(this29.data,0,data14,0,this29.data.length);
				this29.data = data14;
			}
		}
		this29.data[11] = pos.z;
		var this31 = this.rawData;
		if(!this31.fixed) {
			if(15 >= this31.length) this31.length = 16;
			if(this31.data.length < this31.length) {
				var data15;
				var this32;
				this32 = new Array(this31.data.length + 10);
				data15 = this32;
				haxe.ds._Vector.Vector_Impl_.blit(this31.data,0,data15,0,this31.data.length);
				this31.data = data15;
			}
		}
		this31.data[15] = 1.0;
	}
	,prepend: function(rhs) {
		var m111 = rhs.rawData.data[0];
		var m121 = rhs.rawData.data[4];
		var m131 = rhs.rawData.data[8];
		var m141 = rhs.rawData.data[12];
		var m112 = rhs.rawData.data[1];
		var m122 = rhs.rawData.data[5];
		var m132 = rhs.rawData.data[9];
		var m142 = rhs.rawData.data[13];
		var m113 = rhs.rawData.data[2];
		var m123 = rhs.rawData.data[6];
		var m133 = rhs.rawData.data[10];
		var m143 = rhs.rawData.data[14];
		var m114 = rhs.rawData.data[3];
		var m124 = rhs.rawData.data[7];
		var m134 = rhs.rawData.data[11];
		var m144 = rhs.rawData.data[15];
		var m211 = this.rawData.data[0];
		var m221 = this.rawData.data[4];
		var m231 = this.rawData.data[8];
		var m241 = this.rawData.data[12];
		var m212 = this.rawData.data[1];
		var m222 = this.rawData.data[5];
		var m232 = this.rawData.data[9];
		var m242 = this.rawData.data[13];
		var m213 = this.rawData.data[2];
		var m223 = this.rawData.data[6];
		var m233 = this.rawData.data[10];
		var m243 = this.rawData.data[14];
		var m214 = this.rawData.data[3];
		var m224 = this.rawData.data[7];
		var m234 = this.rawData.data[11];
		var m244 = this.rawData.data[15];
		var this1 = this.rawData;
		if(!this1.fixed) {
			if(0 >= this1.length) this1.length = 1;
			if(this1.data.length < this1.length) {
				var data;
				var this2;
				this2 = new Array(this1.data.length + 10);
				data = this2;
				haxe.ds._Vector.Vector_Impl_.blit(this1.data,0,data,0,this1.data.length);
				this1.data = data;
			}
		}
		this1.data[0] = m111 * m211 + m112 * m221 + m113 * m231 + m114 * m241;
		var this3 = this.rawData;
		if(!this3.fixed) {
			if(1 >= this3.length) this3.length = 2;
			if(this3.data.length < this3.length) {
				var data1;
				var this4;
				this4 = new Array(this3.data.length + 10);
				data1 = this4;
				haxe.ds._Vector.Vector_Impl_.blit(this3.data,0,data1,0,this3.data.length);
				this3.data = data1;
			}
		}
		this3.data[1] = m111 * m212 + m112 * m222 + m113 * m232 + m114 * m242;
		var this5 = this.rawData;
		if(!this5.fixed) {
			if(2 >= this5.length) this5.length = 3;
			if(this5.data.length < this5.length) {
				var data2;
				var this6;
				this6 = new Array(this5.data.length + 10);
				data2 = this6;
				haxe.ds._Vector.Vector_Impl_.blit(this5.data,0,data2,0,this5.data.length);
				this5.data = data2;
			}
		}
		this5.data[2] = m111 * m213 + m112 * m223 + m113 * m233 + m114 * m243;
		var this7 = this.rawData;
		if(!this7.fixed) {
			if(3 >= this7.length) this7.length = 4;
			if(this7.data.length < this7.length) {
				var data3;
				var this8;
				this8 = new Array(this7.data.length + 10);
				data3 = this8;
				haxe.ds._Vector.Vector_Impl_.blit(this7.data,0,data3,0,this7.data.length);
				this7.data = data3;
			}
		}
		this7.data[3] = m111 * m214 + m112 * m224 + m113 * m234 + m114 * m244;
		var this9 = this.rawData;
		if(!this9.fixed) {
			if(4 >= this9.length) this9.length = 5;
			if(this9.data.length < this9.length) {
				var data4;
				var this10;
				this10 = new Array(this9.data.length + 10);
				data4 = this10;
				haxe.ds._Vector.Vector_Impl_.blit(this9.data,0,data4,0,this9.data.length);
				this9.data = data4;
			}
		}
		this9.data[4] = m121 * m211 + m122 * m221 + m123 * m231 + m124 * m241;
		var this11 = this.rawData;
		if(!this11.fixed) {
			if(5 >= this11.length) this11.length = 6;
			if(this11.data.length < this11.length) {
				var data5;
				var this12;
				this12 = new Array(this11.data.length + 10);
				data5 = this12;
				haxe.ds._Vector.Vector_Impl_.blit(this11.data,0,data5,0,this11.data.length);
				this11.data = data5;
			}
		}
		this11.data[5] = m121 * m212 + m122 * m222 + m123 * m232 + m124 * m242;
		var this13 = this.rawData;
		if(!this13.fixed) {
			if(6 >= this13.length) this13.length = 7;
			if(this13.data.length < this13.length) {
				var data6;
				var this14;
				this14 = new Array(this13.data.length + 10);
				data6 = this14;
				haxe.ds._Vector.Vector_Impl_.blit(this13.data,0,data6,0,this13.data.length);
				this13.data = data6;
			}
		}
		this13.data[6] = m121 * m213 + m122 * m223 + m123 * m233 + m124 * m243;
		var this15 = this.rawData;
		if(!this15.fixed) {
			if(7 >= this15.length) this15.length = 8;
			if(this15.data.length < this15.length) {
				var data7;
				var this16;
				this16 = new Array(this15.data.length + 10);
				data7 = this16;
				haxe.ds._Vector.Vector_Impl_.blit(this15.data,0,data7,0,this15.data.length);
				this15.data = data7;
			}
		}
		this15.data[7] = m121 * m214 + m122 * m224 + m123 * m234 + m124 * m244;
		var this17 = this.rawData;
		if(!this17.fixed) {
			if(8 >= this17.length) this17.length = 9;
			if(this17.data.length < this17.length) {
				var data8;
				var this18;
				this18 = new Array(this17.data.length + 10);
				data8 = this18;
				haxe.ds._Vector.Vector_Impl_.blit(this17.data,0,data8,0,this17.data.length);
				this17.data = data8;
			}
		}
		this17.data[8] = m131 * m211 + m132 * m221 + m133 * m231 + m134 * m241;
		var this19 = this.rawData;
		if(!this19.fixed) {
			if(9 >= this19.length) this19.length = 10;
			if(this19.data.length < this19.length) {
				var data9;
				var this20;
				this20 = new Array(this19.data.length + 10);
				data9 = this20;
				haxe.ds._Vector.Vector_Impl_.blit(this19.data,0,data9,0,this19.data.length);
				this19.data = data9;
			}
		}
		this19.data[9] = m131 * m212 + m132 * m222 + m133 * m232 + m134 * m242;
		var this21 = this.rawData;
		if(!this21.fixed) {
			if(10 >= this21.length) this21.length = 11;
			if(this21.data.length < this21.length) {
				var data10;
				var this22;
				this22 = new Array(this21.data.length + 10);
				data10 = this22;
				haxe.ds._Vector.Vector_Impl_.blit(this21.data,0,data10,0,this21.data.length);
				this21.data = data10;
			}
		}
		this21.data[10] = m131 * m213 + m132 * m223 + m133 * m233 + m134 * m243;
		var this23 = this.rawData;
		if(!this23.fixed) {
			if(11 >= this23.length) this23.length = 12;
			if(this23.data.length < this23.length) {
				var data11;
				var this24;
				this24 = new Array(this23.data.length + 10);
				data11 = this24;
				haxe.ds._Vector.Vector_Impl_.blit(this23.data,0,data11,0,this23.data.length);
				this23.data = data11;
			}
		}
		this23.data[11] = m131 * m214 + m132 * m224 + m133 * m234 + m134 * m244;
		var this25 = this.rawData;
		if(!this25.fixed) {
			if(12 >= this25.length) this25.length = 13;
			if(this25.data.length < this25.length) {
				var data12;
				var this26;
				this26 = new Array(this25.data.length + 10);
				data12 = this26;
				haxe.ds._Vector.Vector_Impl_.blit(this25.data,0,data12,0,this25.data.length);
				this25.data = data12;
			}
		}
		this25.data[12] = m141 * m211 + m142 * m221 + m143 * m231 + m144 * m241;
		var this27 = this.rawData;
		if(!this27.fixed) {
			if(13 >= this27.length) this27.length = 14;
			if(this27.data.length < this27.length) {
				var data13;
				var this28;
				this28 = new Array(this27.data.length + 10);
				data13 = this28;
				haxe.ds._Vector.Vector_Impl_.blit(this27.data,0,data13,0,this27.data.length);
				this27.data = data13;
			}
		}
		this27.data[13] = m141 * m212 + m142 * m222 + m143 * m232 + m144 * m242;
		var this29 = this.rawData;
		if(!this29.fixed) {
			if(14 >= this29.length) this29.length = 15;
			if(this29.data.length < this29.length) {
				var data14;
				var this30;
				this30 = new Array(this29.data.length + 10);
				data14 = this30;
				haxe.ds._Vector.Vector_Impl_.blit(this29.data,0,data14,0,this29.data.length);
				this29.data = data14;
			}
		}
		this29.data[14] = m141 * m213 + m142 * m223 + m143 * m233 + m144 * m243;
		var this31 = this.rawData;
		if(!this31.fixed) {
			if(15 >= this31.length) this31.length = 16;
			if(this31.data.length < this31.length) {
				var data15;
				var this32;
				this32 = new Array(this31.data.length + 10);
				data15 = this32;
				haxe.ds._Vector.Vector_Impl_.blit(this31.data,0,data15,0,this31.data.length);
				this31.data = data15;
			}
		}
		this31.data[15] = m141 * m214 + m142 * m224 + m143 * m234 + m144 * m244;
	}
	,prependRotation: function(degrees,axis,pivotPoint) {
		var m = openfl.geom.Matrix3D.getAxisRotation(axis.x,axis.y,axis.z,degrees);
		if(pivotPoint != null) {
			var p = pivotPoint;
			m.appendTranslation(p.x,p.y,p.z);
		}
		this.prepend(m);
	}
	,prependScale: function(xScale,yScale,zScale) {
		this.prepend(new openfl.geom.Matrix3D((function($this) {
			var $r;
			var value = [xScale,0.0,0.0,0.0,0.0,yScale,0.0,0.0,0.0,0.0,zScale,0.0,0.0,0.0,0.0,1.0];
			var vectorData = new openfl.VectorData();
			vectorData.length = value.length;
			vectorData.fixed = true;
			{
				var vec;
				var this1;
				this1 = new Array(value.length);
				vec = this1;
				var _g1 = 0;
				var _g = value.length;
				while(_g1 < _g) {
					var i = _g1++;
					vec[i] = value[i];
				}
				vectorData.data = vec;
			}
			$r = vectorData;
			return $r;
		}(this))));
	}
	,prependTranslation: function(x,y,z) {
		var m = new openfl.geom.Matrix3D();
		m.set_position(new openfl.geom.Vector3D(x,y,z));
		this.prepend(m);
	}
	,recompose: function(components,orientationStyle) {
		if(components.length < 3 || components.data[2].x == 0 || components.data[2].y == 0 || components.data[2].z == 0) return false;
		if(orientationStyle == null) orientationStyle = openfl.geom.Orientation3D.EULER_ANGLES;
		this.identity();
		var scale = [];
		scale[0] = scale[1] = scale[2] = components.data[2].x;
		scale[4] = scale[5] = scale[6] = components.data[2].y;
		scale[8] = scale[9] = scale[10] = components.data[2].z;
		switch(orientationStyle[1]) {
		case 1:
			var cx = Math.cos(components.data[1].x);
			var cy = Math.cos(components.data[1].y);
			var cz = Math.cos(components.data[1].z);
			var sx = Math.sin(components.data[1].x);
			var sy = Math.sin(components.data[1].y);
			var sz = Math.sin(components.data[1].z);
			var this1 = this.rawData;
			if(!this1.fixed) {
				if(0 >= this1.length) this1.length = 1;
				if(this1.data.length < this1.length) {
					var data;
					var this2;
					this2 = new Array(this1.data.length + 10);
					data = this2;
					haxe.ds._Vector.Vector_Impl_.blit(this1.data,0,data,0,this1.data.length);
					this1.data = data;
				}
			}
			this1.data[0] = cy * cz * scale[0];
			var this3 = this.rawData;
			if(!this3.fixed) {
				if(1 >= this3.length) this3.length = 2;
				if(this3.data.length < this3.length) {
					var data1;
					var this4;
					this4 = new Array(this3.data.length + 10);
					data1 = this4;
					haxe.ds._Vector.Vector_Impl_.blit(this3.data,0,data1,0,this3.data.length);
					this3.data = data1;
				}
			}
			this3.data[1] = cy * sz * scale[1];
			var this5 = this.rawData;
			if(!this5.fixed) {
				if(2 >= this5.length) this5.length = 3;
				if(this5.data.length < this5.length) {
					var data2;
					var this6;
					this6 = new Array(this5.data.length + 10);
					data2 = this6;
					haxe.ds._Vector.Vector_Impl_.blit(this5.data,0,data2,0,this5.data.length);
					this5.data = data2;
				}
			}
			this5.data[2] = -sy * scale[2];
			var this7 = this.rawData;
			if(!this7.fixed) {
				if(3 >= this7.length) this7.length = 4;
				if(this7.data.length < this7.length) {
					var data3;
					var this8;
					this8 = new Array(this7.data.length + 10);
					data3 = this8;
					haxe.ds._Vector.Vector_Impl_.blit(this7.data,0,data3,0,this7.data.length);
					this7.data = data3;
				}
			}
			this7.data[3] = 0;
			var this9 = this.rawData;
			if(!this9.fixed) {
				if(4 >= this9.length) this9.length = 5;
				if(this9.data.length < this9.length) {
					var data4;
					var this10;
					this10 = new Array(this9.data.length + 10);
					data4 = this10;
					haxe.ds._Vector.Vector_Impl_.blit(this9.data,0,data4,0,this9.data.length);
					this9.data = data4;
				}
			}
			this9.data[4] = (sx * sy * cz - cx * sz) * scale[4];
			var this11 = this.rawData;
			if(!this11.fixed) {
				if(5 >= this11.length) this11.length = 6;
				if(this11.data.length < this11.length) {
					var data5;
					var this12;
					this12 = new Array(this11.data.length + 10);
					data5 = this12;
					haxe.ds._Vector.Vector_Impl_.blit(this11.data,0,data5,0,this11.data.length);
					this11.data = data5;
				}
			}
			this11.data[5] = (sx * sy * sz + cx * cz) * scale[5];
			var this13 = this.rawData;
			if(!this13.fixed) {
				if(6 >= this13.length) this13.length = 7;
				if(this13.data.length < this13.length) {
					var data6;
					var this14;
					this14 = new Array(this13.data.length + 10);
					data6 = this14;
					haxe.ds._Vector.Vector_Impl_.blit(this13.data,0,data6,0,this13.data.length);
					this13.data = data6;
				}
			}
			this13.data[6] = sx * cy * scale[6];
			var this15 = this.rawData;
			if(!this15.fixed) {
				if(7 >= this15.length) this15.length = 8;
				if(this15.data.length < this15.length) {
					var data7;
					var this16;
					this16 = new Array(this15.data.length + 10);
					data7 = this16;
					haxe.ds._Vector.Vector_Impl_.blit(this15.data,0,data7,0,this15.data.length);
					this15.data = data7;
				}
			}
			this15.data[7] = 0;
			var this17 = this.rawData;
			if(!this17.fixed) {
				if(8 >= this17.length) this17.length = 9;
				if(this17.data.length < this17.length) {
					var data8;
					var this18;
					this18 = new Array(this17.data.length + 10);
					data8 = this18;
					haxe.ds._Vector.Vector_Impl_.blit(this17.data,0,data8,0,this17.data.length);
					this17.data = data8;
				}
			}
			this17.data[8] = (cx * sy * cz + sx * sz) * scale[8];
			var this19 = this.rawData;
			if(!this19.fixed) {
				if(9 >= this19.length) this19.length = 10;
				if(this19.data.length < this19.length) {
					var data9;
					var this20;
					this20 = new Array(this19.data.length + 10);
					data9 = this20;
					haxe.ds._Vector.Vector_Impl_.blit(this19.data,0,data9,0,this19.data.length);
					this19.data = data9;
				}
			}
			this19.data[9] = (cx * sy * sz - sx * cz) * scale[9];
			var this21 = this.rawData;
			if(!this21.fixed) {
				if(10 >= this21.length) this21.length = 11;
				if(this21.data.length < this21.length) {
					var data10;
					var this22;
					this22 = new Array(this21.data.length + 10);
					data10 = this22;
					haxe.ds._Vector.Vector_Impl_.blit(this21.data,0,data10,0,this21.data.length);
					this21.data = data10;
				}
			}
			this21.data[10] = cx * cy * scale[10];
			var this23 = this.rawData;
			if(!this23.fixed) {
				if(11 >= this23.length) this23.length = 12;
				if(this23.data.length < this23.length) {
					var data11;
					var this24;
					this24 = new Array(this23.data.length + 10);
					data11 = this24;
					haxe.ds._Vector.Vector_Impl_.blit(this23.data,0,data11,0,this23.data.length);
					this23.data = data11;
				}
			}
			this23.data[11] = 0;
			var this25 = this.rawData;
			if(!this25.fixed) {
				if(12 >= this25.length) this25.length = 13;
				if(this25.data.length < this25.length) {
					var data12;
					var this26;
					this26 = new Array(this25.data.length + 10);
					data12 = this26;
					haxe.ds._Vector.Vector_Impl_.blit(this25.data,0,data12,0,this25.data.length);
					this25.data = data12;
				}
			}
			this25.data[12] = components.data[0].x;
			var this27 = this.rawData;
			if(!this27.fixed) {
				if(13 >= this27.length) this27.length = 14;
				if(this27.data.length < this27.length) {
					var data13;
					var this28;
					this28 = new Array(this27.data.length + 10);
					data13 = this28;
					haxe.ds._Vector.Vector_Impl_.blit(this27.data,0,data13,0,this27.data.length);
					this27.data = data13;
				}
			}
			this27.data[13] = components.data[0].y;
			var this29 = this.rawData;
			if(!this29.fixed) {
				if(14 >= this29.length) this29.length = 15;
				if(this29.data.length < this29.length) {
					var data14;
					var this30;
					this30 = new Array(this29.data.length + 10);
					data14 = this30;
					haxe.ds._Vector.Vector_Impl_.blit(this29.data,0,data14,0,this29.data.length);
					this29.data = data14;
				}
			}
			this29.data[14] = components.data[0].z;
			var this31 = this.rawData;
			if(!this31.fixed) {
				if(15 >= this31.length) this31.length = 16;
				if(this31.data.length < this31.length) {
					var data15;
					var this32;
					this32 = new Array(this31.data.length + 10);
					data15 = this32;
					haxe.ds._Vector.Vector_Impl_.blit(this31.data,0,data15,0,this31.data.length);
					this31.data = data15;
				}
			}
			this31.data[15] = 1;
			break;
		default:
			var x = components.data[1].x;
			var y = components.data[1].y;
			var z = components.data[1].z;
			var w = components.data[1].w;
			if(Type.enumEq(orientationStyle,openfl.geom.Orientation3D.AXIS_ANGLE)) {
				x *= Math.sin(w / 2);
				y *= Math.sin(w / 2);
				z *= Math.sin(w / 2);
				w = Math.cos(w / 2);
			}
			var this33 = this.rawData;
			if(!this33.fixed) {
				if(0 >= this33.length) this33.length = 1;
				if(this33.data.length < this33.length) {
					var data16;
					var this34;
					this34 = new Array(this33.data.length + 10);
					data16 = this34;
					haxe.ds._Vector.Vector_Impl_.blit(this33.data,0,data16,0,this33.data.length);
					this33.data = data16;
				}
			}
			this33.data[0] = (1 - 2 * y * y - 2 * z * z) * scale[0];
			var this35 = this.rawData;
			if(!this35.fixed) {
				if(1 >= this35.length) this35.length = 2;
				if(this35.data.length < this35.length) {
					var data17;
					var this36;
					this36 = new Array(this35.data.length + 10);
					data17 = this36;
					haxe.ds._Vector.Vector_Impl_.blit(this35.data,0,data17,0,this35.data.length);
					this35.data = data17;
				}
			}
			this35.data[1] = (2 * x * y + 2 * w * z) * scale[1];
			var this37 = this.rawData;
			if(!this37.fixed) {
				if(2 >= this37.length) this37.length = 3;
				if(this37.data.length < this37.length) {
					var data18;
					var this38;
					this38 = new Array(this37.data.length + 10);
					data18 = this38;
					haxe.ds._Vector.Vector_Impl_.blit(this37.data,0,data18,0,this37.data.length);
					this37.data = data18;
				}
			}
			this37.data[2] = (2 * x * z - 2 * w * y) * scale[2];
			var this39 = this.rawData;
			if(!this39.fixed) {
				if(3 >= this39.length) this39.length = 4;
				if(this39.data.length < this39.length) {
					var data19;
					var this40;
					this40 = new Array(this39.data.length + 10);
					data19 = this40;
					haxe.ds._Vector.Vector_Impl_.blit(this39.data,0,data19,0,this39.data.length);
					this39.data = data19;
				}
			}
			this39.data[3] = 0;
			var this41 = this.rawData;
			if(!this41.fixed) {
				if(4 >= this41.length) this41.length = 5;
				if(this41.data.length < this41.length) {
					var data20;
					var this42;
					this42 = new Array(this41.data.length + 10);
					data20 = this42;
					haxe.ds._Vector.Vector_Impl_.blit(this41.data,0,data20,0,this41.data.length);
					this41.data = data20;
				}
			}
			this41.data[4] = (2 * x * y - 2 * w * z) * scale[4];
			var this43 = this.rawData;
			if(!this43.fixed) {
				if(5 >= this43.length) this43.length = 6;
				if(this43.data.length < this43.length) {
					var data21;
					var this44;
					this44 = new Array(this43.data.length + 10);
					data21 = this44;
					haxe.ds._Vector.Vector_Impl_.blit(this43.data,0,data21,0,this43.data.length);
					this43.data = data21;
				}
			}
			this43.data[5] = (1 - 2 * x * x - 2 * z * z) * scale[5];
			var this45 = this.rawData;
			if(!this45.fixed) {
				if(6 >= this45.length) this45.length = 7;
				if(this45.data.length < this45.length) {
					var data22;
					var this46;
					this46 = new Array(this45.data.length + 10);
					data22 = this46;
					haxe.ds._Vector.Vector_Impl_.blit(this45.data,0,data22,0,this45.data.length);
					this45.data = data22;
				}
			}
			this45.data[6] = (2 * y * z + 2 * w * x) * scale[6];
			var this47 = this.rawData;
			if(!this47.fixed) {
				if(7 >= this47.length) this47.length = 8;
				if(this47.data.length < this47.length) {
					var data23;
					var this48;
					this48 = new Array(this47.data.length + 10);
					data23 = this48;
					haxe.ds._Vector.Vector_Impl_.blit(this47.data,0,data23,0,this47.data.length);
					this47.data = data23;
				}
			}
			this47.data[7] = 0;
			var this49 = this.rawData;
			if(!this49.fixed) {
				if(8 >= this49.length) this49.length = 9;
				if(this49.data.length < this49.length) {
					var data24;
					var this50;
					this50 = new Array(this49.data.length + 10);
					data24 = this50;
					haxe.ds._Vector.Vector_Impl_.blit(this49.data,0,data24,0,this49.data.length);
					this49.data = data24;
				}
			}
			this49.data[8] = (2 * x * z + 2 * w * y) * scale[8];
			var this51 = this.rawData;
			if(!this51.fixed) {
				if(9 >= this51.length) this51.length = 10;
				if(this51.data.length < this51.length) {
					var data25;
					var this52;
					this52 = new Array(this51.data.length + 10);
					data25 = this52;
					haxe.ds._Vector.Vector_Impl_.blit(this51.data,0,data25,0,this51.data.length);
					this51.data = data25;
				}
			}
			this51.data[9] = (2 * y * z - 2 * w * x) * scale[9];
			var this53 = this.rawData;
			if(!this53.fixed) {
				if(10 >= this53.length) this53.length = 11;
				if(this53.data.length < this53.length) {
					var data26;
					var this54;
					this54 = new Array(this53.data.length + 10);
					data26 = this54;
					haxe.ds._Vector.Vector_Impl_.blit(this53.data,0,data26,0,this53.data.length);
					this53.data = data26;
				}
			}
			this53.data[10] = (1 - 2 * x * x - 2 * y * y) * scale[10];
			var this55 = this.rawData;
			if(!this55.fixed) {
				if(11 >= this55.length) this55.length = 12;
				if(this55.data.length < this55.length) {
					var data27;
					var this56;
					this56 = new Array(this55.data.length + 10);
					data27 = this56;
					haxe.ds._Vector.Vector_Impl_.blit(this55.data,0,data27,0,this55.data.length);
					this55.data = data27;
				}
			}
			this55.data[11] = 0;
			var this57 = this.rawData;
			if(!this57.fixed) {
				if(12 >= this57.length) this57.length = 13;
				if(this57.data.length < this57.length) {
					var data28;
					var this58;
					this58 = new Array(this57.data.length + 10);
					data28 = this58;
					haxe.ds._Vector.Vector_Impl_.blit(this57.data,0,data28,0,this57.data.length);
					this57.data = data28;
				}
			}
			this57.data[12] = components.data[0].x;
			var this59 = this.rawData;
			if(!this59.fixed) {
				if(13 >= this59.length) this59.length = 14;
				if(this59.data.length < this59.length) {
					var data29;
					var this60;
					this60 = new Array(this59.data.length + 10);
					data29 = this60;
					haxe.ds._Vector.Vector_Impl_.blit(this59.data,0,data29,0,this59.data.length);
					this59.data = data29;
				}
			}
			this59.data[13] = components.data[0].y;
			var this61 = this.rawData;
			if(!this61.fixed) {
				if(14 >= this61.length) this61.length = 15;
				if(this61.data.length < this61.length) {
					var data30;
					var this62;
					this62 = new Array(this61.data.length + 10);
					data30 = this62;
					haxe.ds._Vector.Vector_Impl_.blit(this61.data,0,data30,0,this61.data.length);
					this61.data = data30;
				}
			}
			this61.data[14] = components.data[0].z;
			var this63 = this.rawData;
			if(!this63.fixed) {
				if(15 >= this63.length) this63.length = 16;
				if(this63.data.length < this63.length) {
					var data31;
					var this64;
					this64 = new Array(this63.data.length + 10);
					data31 = this64;
					haxe.ds._Vector.Vector_Impl_.blit(this63.data,0,data31,0,this63.data.length);
					this63.data = data31;
				}
			}
			this63.data[15] = 1;
		}
		if(components.data[2].x == 0) {
			var this65 = this.rawData;
			if(!this65.fixed) {
				if(0 >= this65.length) this65.length = 1;
				if(this65.data.length < this65.length) {
					var data32;
					var this66;
					this66 = new Array(this65.data.length + 10);
					data32 = this66;
					haxe.ds._Vector.Vector_Impl_.blit(this65.data,0,data32,0,this65.data.length);
					this65.data = data32;
				}
			}
			this65.data[0] = 1e-15;
		}
		if(components.data[2].y == 0) {
			var this67 = this.rawData;
			if(!this67.fixed) {
				if(5 >= this67.length) this67.length = 6;
				if(this67.data.length < this67.length) {
					var data33;
					var this68;
					this68 = new Array(this67.data.length + 10);
					data33 = this68;
					haxe.ds._Vector.Vector_Impl_.blit(this67.data,0,data33,0,this67.data.length);
					this67.data = data33;
				}
			}
			this67.data[5] = 1e-15;
		}
		if(components.data[2].z == 0) {
			var this69 = this.rawData;
			if(!this69.fixed) {
				if(10 >= this69.length) this69.length = 11;
				if(this69.data.length < this69.length) {
					var data34;
					var this70;
					this70 = new Array(this69.data.length + 10);
					data34 = this70;
					haxe.ds._Vector.Vector_Impl_.blit(this69.data,0,data34,0,this69.data.length);
					this69.data = data34;
				}
			}
			this69.data[10] = 1e-15;
		}
		return !(components.data[2].x == 0 || components.data[2].y == 0 || components.data[2].y == 0);
	}
	,transformVector: function(v) {
		var x = v.x;
		var y = v.y;
		var z = v.z;
		return new openfl.geom.Vector3D(x * this.rawData.data[0] + y * this.rawData.data[4] + z * this.rawData.data[8] + this.rawData.data[12],x * this.rawData.data[1] + y * this.rawData.data[5] + z * this.rawData.data[9] + this.rawData.data[13],x * this.rawData.data[2] + y * this.rawData.data[6] + z * this.rawData.data[10] + this.rawData.data[14],x * this.rawData.data[3] + y * this.rawData.data[7] + z * this.rawData.data[11] + this.rawData.data[15]);
	}
	,transformVectors: function(vin,vout) {
		var i = 0;
		while(i + 3 <= vin.length) {
			var x = vin.data[i];
			var y = vin.data[i + 1];
			var z = vin.data[i + 2];
			if(!vout.fixed) {
				if(i >= vout.length) vout.length = i + 1;
				if(vout.data.length < vout.length) {
					var data;
					var this1;
					this1 = new Array(vout.data.length + 10);
					data = this1;
					haxe.ds._Vector.Vector_Impl_.blit(vout.data,0,data,0,vout.data.length);
					vout.data = data;
				}
			}
			vout.data[i] = x * this.rawData.data[0] + y * this.rawData.data[4] + z * this.rawData.data[8] + this.rawData.data[12];
			var key = i + 1;
			if(!vout.fixed) {
				if(key >= vout.length) vout.length = key + 1;
				if(vout.data.length < vout.length) {
					var data1;
					var this2;
					this2 = new Array(vout.data.length + 10);
					data1 = this2;
					haxe.ds._Vector.Vector_Impl_.blit(vout.data,0,data1,0,vout.data.length);
					vout.data = data1;
				}
			}
			vout.data[key] = x * this.rawData.data[1] + y * this.rawData.data[5] + z * this.rawData.data[9] + this.rawData.data[13];
			var key1 = i + 2;
			if(!vout.fixed) {
				if(key1 >= vout.length) vout.length = key1 + 1;
				if(vout.data.length < vout.length) {
					var data2;
					var this3;
					this3 = new Array(vout.data.length + 10);
					data2 = this3;
					haxe.ds._Vector.Vector_Impl_.blit(vout.data,0,data2,0,vout.data.length);
					vout.data = data2;
				}
			}
			vout.data[key1] = x * this.rawData.data[2] + y * this.rawData.data[6] + z * this.rawData.data[10] + this.rawData.data[14];
			i += 3;
		}
	}
	,transpose: function() {
		var oRawData;
		var this1 = this.rawData;
		var vectorData = new openfl.VectorData();
		vectorData.length = this1.length;
		vectorData.fixed = this1.fixed;
		var this2;
		this2 = new Array(this1.length);
		vectorData.data = this2;
		haxe.ds._Vector.Vector_Impl_.blit(this1.data,0,vectorData.data,0,this1.length);
		oRawData = vectorData;
		var this3 = this.rawData;
		if(!this3.fixed) {
			if(1 >= this3.length) this3.length = 2;
			if(this3.data.length < this3.length) {
				var data;
				var this4;
				this4 = new Array(this3.data.length + 10);
				data = this4;
				haxe.ds._Vector.Vector_Impl_.blit(this3.data,0,data,0,this3.data.length);
				this3.data = data;
			}
		}
		this3.data[1] = oRawData.data[4];
		var this5 = this.rawData;
		if(!this5.fixed) {
			if(2 >= this5.length) this5.length = 3;
			if(this5.data.length < this5.length) {
				var data1;
				var this6;
				this6 = new Array(this5.data.length + 10);
				data1 = this6;
				haxe.ds._Vector.Vector_Impl_.blit(this5.data,0,data1,0,this5.data.length);
				this5.data = data1;
			}
		}
		this5.data[2] = oRawData.data[8];
		var this7 = this.rawData;
		if(!this7.fixed) {
			if(3 >= this7.length) this7.length = 4;
			if(this7.data.length < this7.length) {
				var data2;
				var this8;
				this8 = new Array(this7.data.length + 10);
				data2 = this8;
				haxe.ds._Vector.Vector_Impl_.blit(this7.data,0,data2,0,this7.data.length);
				this7.data = data2;
			}
		}
		this7.data[3] = oRawData.data[12];
		var this9 = this.rawData;
		if(!this9.fixed) {
			if(4 >= this9.length) this9.length = 5;
			if(this9.data.length < this9.length) {
				var data3;
				var this10;
				this10 = new Array(this9.data.length + 10);
				data3 = this10;
				haxe.ds._Vector.Vector_Impl_.blit(this9.data,0,data3,0,this9.data.length);
				this9.data = data3;
			}
		}
		this9.data[4] = oRawData.data[1];
		var this11 = this.rawData;
		if(!this11.fixed) {
			if(6 >= this11.length) this11.length = 7;
			if(this11.data.length < this11.length) {
				var data4;
				var this12;
				this12 = new Array(this11.data.length + 10);
				data4 = this12;
				haxe.ds._Vector.Vector_Impl_.blit(this11.data,0,data4,0,this11.data.length);
				this11.data = data4;
			}
		}
		this11.data[6] = oRawData.data[9];
		var this13 = this.rawData;
		if(!this13.fixed) {
			if(7 >= this13.length) this13.length = 8;
			if(this13.data.length < this13.length) {
				var data5;
				var this14;
				this14 = new Array(this13.data.length + 10);
				data5 = this14;
				haxe.ds._Vector.Vector_Impl_.blit(this13.data,0,data5,0,this13.data.length);
				this13.data = data5;
			}
		}
		this13.data[7] = oRawData.data[13];
		var this15 = this.rawData;
		if(!this15.fixed) {
			if(8 >= this15.length) this15.length = 9;
			if(this15.data.length < this15.length) {
				var data6;
				var this16;
				this16 = new Array(this15.data.length + 10);
				data6 = this16;
				haxe.ds._Vector.Vector_Impl_.blit(this15.data,0,data6,0,this15.data.length);
				this15.data = data6;
			}
		}
		this15.data[8] = oRawData.data[2];
		var this17 = this.rawData;
		if(!this17.fixed) {
			if(9 >= this17.length) this17.length = 10;
			if(this17.data.length < this17.length) {
				var data7;
				var this18;
				this18 = new Array(this17.data.length + 10);
				data7 = this18;
				haxe.ds._Vector.Vector_Impl_.blit(this17.data,0,data7,0,this17.data.length);
				this17.data = data7;
			}
		}
		this17.data[9] = oRawData.data[6];
		var this19 = this.rawData;
		if(!this19.fixed) {
			if(11 >= this19.length) this19.length = 12;
			if(this19.data.length < this19.length) {
				var data8;
				var this20;
				this20 = new Array(this19.data.length + 10);
				data8 = this20;
				haxe.ds._Vector.Vector_Impl_.blit(this19.data,0,data8,0,this19.data.length);
				this19.data = data8;
			}
		}
		this19.data[11] = oRawData.data[14];
		var this21 = this.rawData;
		if(!this21.fixed) {
			if(12 >= this21.length) this21.length = 13;
			if(this21.data.length < this21.length) {
				var data9;
				var this22;
				this22 = new Array(this21.data.length + 10);
				data9 = this22;
				haxe.ds._Vector.Vector_Impl_.blit(this21.data,0,data9,0,this21.data.length);
				this21.data = data9;
			}
		}
		this21.data[12] = oRawData.data[3];
		var this23 = this.rawData;
		if(!this23.fixed) {
			if(13 >= this23.length) this23.length = 14;
			if(this23.data.length < this23.length) {
				var data10;
				var this24;
				this24 = new Array(this23.data.length + 10);
				data10 = this24;
				haxe.ds._Vector.Vector_Impl_.blit(this23.data,0,data10,0,this23.data.length);
				this23.data = data10;
			}
		}
		this23.data[13] = oRawData.data[7];
		var this25 = this.rawData;
		if(!this25.fixed) {
			if(14 >= this25.length) this25.length = 15;
			if(this25.data.length < this25.length) {
				var data11;
				var this26;
				this26 = new Array(this25.data.length + 10);
				data11 = this26;
				haxe.ds._Vector.Vector_Impl_.blit(this25.data,0,data11,0,this25.data.length);
				this25.data = data11;
			}
		}
		this25.data[14] = oRawData.data[11];
	}
	,get_determinant: function() {
		return (this.rawData.data[0] * this.rawData.data[5] - this.rawData.data[4] * this.rawData.data[1]) * (this.rawData.data[10] * this.rawData.data[15] - this.rawData.data[14] * this.rawData.data[11]) - (this.rawData.data[0] * this.rawData.data[9] - this.rawData.data[8] * this.rawData.data[1]) * (this.rawData.data[6] * this.rawData.data[15] - this.rawData.data[14] * this.rawData.data[7]) + (this.rawData.data[0] * this.rawData.data[13] - this.rawData.data[12] * this.rawData.data[1]) * (this.rawData.data[6] * this.rawData.data[11] - this.rawData.data[10] * this.rawData.data[7]) + (this.rawData.data[4] * this.rawData.data[9] - this.rawData.data[8] * this.rawData.data[5]) * (this.rawData.data[2] * this.rawData.data[15] - this.rawData.data[14] * this.rawData.data[3]) - (this.rawData.data[4] * this.rawData.data[13] - this.rawData.data[12] * this.rawData.data[5]) * (this.rawData.data[2] * this.rawData.data[11] - this.rawData.data[10] * this.rawData.data[3]) + (this.rawData.data[8] * this.rawData.data[13] - this.rawData.data[12] * this.rawData.data[9]) * (this.rawData.data[2] * this.rawData.data[7] - this.rawData.data[6] * this.rawData.data[3]);
	}
	,get_position: function() {
		return new openfl.geom.Vector3D(this.rawData.data[12],this.rawData.data[13],this.rawData.data[14]);
	}
	,set_position: function(val) {
		var this1 = this.rawData;
		if(!this1.fixed) {
			if(12 >= this1.length) this1.length = 13;
			if(this1.data.length < this1.length) {
				var data;
				var this2;
				this2 = new Array(this1.data.length + 10);
				data = this2;
				haxe.ds._Vector.Vector_Impl_.blit(this1.data,0,data,0,this1.data.length);
				this1.data = data;
			}
		}
		this1.data[12] = val.x;
		var this3 = this.rawData;
		if(!this3.fixed) {
			if(13 >= this3.length) this3.length = 14;
			if(this3.data.length < this3.length) {
				var data1;
				var this4;
				this4 = new Array(this3.data.length + 10);
				data1 = this4;
				haxe.ds._Vector.Vector_Impl_.blit(this3.data,0,data1,0,this3.data.length);
				this3.data = data1;
			}
		}
		this3.data[13] = val.y;
		var this5 = this.rawData;
		if(!this5.fixed) {
			if(14 >= this5.length) this5.length = 15;
			if(this5.data.length < this5.length) {
				var data2;
				var this6;
				this6 = new Array(this5.data.length + 10);
				data2 = this6;
				haxe.ds._Vector.Vector_Impl_.blit(this5.data,0,data2,0,this5.data.length);
				this5.data = data2;
			}
		}
		this5.data[14] = val.z;
		return val;
	}
	,__class__: openfl.geom.Matrix3D
	,__properties__: {set_position:"set_position",get_position:"get_position",get_determinant:"get_determinant"}
};
openfl.geom.Point = function(x,y) {
	if(y == null) y = 0;
	if(x == null) x = 0;
	this.x = x;
	this.y = y;
};
$hxClasses["openfl.geom.Point"] = openfl.geom.Point;
openfl.geom.Point.__name__ = ["openfl","geom","Point"];
openfl.geom.Point.distance = function(pt1,pt2) {
	var dx = pt1.x - pt2.x;
	var dy = pt1.y - pt2.y;
	return Math.sqrt(dx * dx + dy * dy);
};
openfl.geom.Point.interpolate = function(pt1,pt2,f) {
	return new openfl.geom.Point(pt2.x + f * (pt1.x - pt2.x),pt2.y + f * (pt1.y - pt2.y));
};
openfl.geom.Point.polar = function(len,angle) {
	return new openfl.geom.Point(len * Math.cos(angle),len * Math.sin(angle));
};
openfl.geom.Point.prototype = {
	length: null
	,x: null
	,y: null
	,add: function(v) {
		return new openfl.geom.Point(v.x + this.x,v.y + this.y);
	}
	,clone: function() {
		return new openfl.geom.Point(this.x,this.y);
	}
	,copyFrom: function(sourcePoint) {
		this.x = sourcePoint.x;
		this.y = sourcePoint.y;
	}
	,equals: function(toCompare) {
		return toCompare != null && toCompare.x == this.x && toCompare.y == this.y;
	}
	,normalize: function(thickness) {
		if(this.x == 0 && this.y == 0) return; else {
			var norm = thickness / Math.sqrt(this.x * this.x + this.y * this.y);
			this.x *= norm;
			this.y *= norm;
		}
	}
	,offset: function(dx,dy) {
		this.x += dx;
		this.y += dy;
	}
	,setTo: function(xa,ya) {
		this.x = xa;
		this.y = ya;
	}
	,subtract: function(v) {
		return new openfl.geom.Point(this.x - v.x,this.y - v.y);
	}
	,toString: function() {
		return "(x=" + this.x + ", y=" + this.y + ")";
	}
	,__toLimeVector2: function() {
		return new lime.math.Vector2(this.x,this.y);
	}
	,get_length: function() {
		return Math.sqrt(this.x * this.x + this.y * this.y);
	}
	,__class__: openfl.geom.Point
	,__properties__: {get_length:"get_length"}
};
openfl.geom.Vector3D = function(x,y,z,w) {
	if(w == null) w = 0;
	if(z == null) z = 0;
	if(y == null) y = 0;
	if(x == null) x = 0;
	this.w = w;
	this.x = x;
	this.y = y;
	this.z = z;
};
$hxClasses["openfl.geom.Vector3D"] = openfl.geom.Vector3D;
openfl.geom.Vector3D.__name__ = ["openfl","geom","Vector3D"];
openfl.geom.Vector3D.__properties__ = {get_Z_AXIS:"get_Z_AXIS",get_Y_AXIS:"get_Y_AXIS",get_X_AXIS:"get_X_AXIS"}
openfl.geom.Vector3D.X_AXIS = null;
openfl.geom.Vector3D.Y_AXIS = null;
openfl.geom.Vector3D.Z_AXIS = null;
openfl.geom.Vector3D.angleBetween = function(a,b) {
	var a0 = new openfl.geom.Vector3D(a.x,a.y,a.z,a.w);
	a0.normalize();
	var b0 = new openfl.geom.Vector3D(b.x,b.y,b.z,b.w);
	b0.normalize();
	return Math.acos(a0.x * b0.x + a0.y * b0.y + a0.z * b0.z);
};
openfl.geom.Vector3D.distance = function(pt1,pt2) {
	var x = pt2.x - pt1.x;
	var y = pt2.y - pt1.y;
	var z = pt2.z - pt1.z;
	return Math.sqrt(x * x + y * y + z * z);
};
openfl.geom.Vector3D.get_X_AXIS = function() {
	return new openfl.geom.Vector3D(1,0,0);
};
openfl.geom.Vector3D.get_Y_AXIS = function() {
	return new openfl.geom.Vector3D(0,1,0);
};
openfl.geom.Vector3D.get_Z_AXIS = function() {
	return new openfl.geom.Vector3D(0,0,1);
};
openfl.geom.Vector3D.prototype = {
	length: null
	,lengthSquared: null
	,w: null
	,x: null
	,y: null
	,z: null
	,add: function(a) {
		return new openfl.geom.Vector3D(this.x + a.x,this.y + a.y,this.z + a.z);
	}
	,clone: function() {
		return new openfl.geom.Vector3D(this.x,this.y,this.z,this.w);
	}
	,copyFrom: function(sourceVector3D) {
		this.x = sourceVector3D.x;
		this.y = sourceVector3D.y;
		this.z = sourceVector3D.z;
	}
	,crossProduct: function(a) {
		return new openfl.geom.Vector3D(this.y * a.z - this.z * a.y,this.z * a.x - this.x * a.z,this.x * a.y - this.y * a.x,1);
	}
	,decrementBy: function(a) {
		this.x -= a.x;
		this.y -= a.y;
		this.z -= a.z;
	}
	,dotProduct: function(a) {
		return this.x * a.x + this.y * a.y + this.z * a.z;
	}
	,equals: function(toCompare,allFour) {
		if(allFour == null) allFour = false;
		return this.x == toCompare.x && this.y == toCompare.y && this.z == toCompare.z && (!allFour || this.w == toCompare.w);
	}
	,incrementBy: function(a) {
		this.x += a.x;
		this.y += a.y;
		this.z += a.z;
	}
	,nearEquals: function(toCompare,tolerance,allFour) {
		if(allFour == null) allFour = false;
		return Math.abs(this.x - toCompare.x) < tolerance && Math.abs(this.y - toCompare.y) < tolerance && Math.abs(this.z - toCompare.z) < tolerance && (!allFour || Math.abs(this.w - toCompare.w) < tolerance);
	}
	,negate: function() {
		this.x *= -1;
		this.y *= -1;
		this.z *= -1;
	}
	,normalize: function() {
		var l = Math.sqrt(this.x * this.x + this.y * this.y + this.z * this.z);
		if(l != 0) {
			this.x /= l;
			this.y /= l;
			this.z /= l;
		}
		return l;
	}
	,project: function() {
		this.x /= this.w;
		this.y /= this.w;
		this.z /= this.w;
	}
	,scaleBy: function(s) {
		this.x *= s;
		this.y *= s;
		this.z *= s;
	}
	,setTo: function(xa,ya,za) {
		this.x = xa;
		this.y = ya;
		this.z = za;
	}
	,subtract: function(a) {
		return new openfl.geom.Vector3D(this.x - a.x,this.y - a.y,this.z - a.z);
	}
	,toString: function() {
		return "Vector3D(" + this.x + ", " + this.y + ", " + this.z + ")";
	}
	,get_length: function() {
		return Math.sqrt(this.x * this.x + this.y * this.y + this.z * this.z);
	}
	,get_lengthSquared: function() {
		return this.x * this.x + this.y * this.y + this.z * this.z;
	}
	,__class__: openfl.geom.Vector3D
	,__properties__: {get_lengthSquared:"get_lengthSquared",get_length:"get_length"}
};
openfl.geom.Rectangle = function(x,y,width,height) {
	if(height == null) height = 0;
	if(width == null) width = 0;
	if(y == null) y = 0;
	if(x == null) x = 0;
	this.x = x;
	this.y = y;
	this.width = width;
	this.height = height;
};
$hxClasses["openfl.geom.Rectangle"] = openfl.geom.Rectangle;
openfl.geom.Rectangle.__name__ = ["openfl","geom","Rectangle"];
openfl.geom.Rectangle.prototype = {
	height: null
	,width: null
	,x: null
	,y: null
	,clone: function() {
		return new openfl.geom.Rectangle(this.x,this.y,this.width,this.height);
	}
	,contains: function(x,y) {
		return x >= this.x && y >= this.y && x < this.get_right() && y < this.get_bottom();
	}
	,containsPoint: function(point) {
		return this.contains(point.x,point.y);
	}
	,containsRect: function(rect) {
		if(rect.width <= 0 || rect.height <= 0) return rect.x > this.x && rect.y > this.y && rect.get_right() < this.get_right() && rect.get_bottom() < this.get_bottom(); else return rect.x >= this.x && rect.y >= this.y && rect.get_right() <= this.get_right() && rect.get_bottom() <= this.get_bottom();
	}
	,copyFrom: function(sourceRect) {
		this.x = sourceRect.x;
		this.y = sourceRect.y;
		this.width = sourceRect.width;
		this.height = sourceRect.height;
	}
	,equals: function(toCompare) {
		return toCompare != null && this.x == toCompare.x && this.y == toCompare.y && this.width == toCompare.width && this.height == toCompare.height;
	}
	,inflate: function(dx,dy) {
		this.x -= dx;
		this.width += dx * 2;
		this.y -= dy;
		this.height += dy * 2;
	}
	,inflatePoint: function(point) {
		this.inflate(point.x,point.y);
	}
	,intersection: function(toIntersect) {
		var x0;
		if(this.x < toIntersect.x) x0 = toIntersect.x; else x0 = this.x;
		var x1;
		if(this.get_right() > toIntersect.get_right()) x1 = toIntersect.get_right(); else x1 = this.get_right();
		if(x1 <= x0) return new openfl.geom.Rectangle();
		var y0;
		if(this.y < toIntersect.y) y0 = toIntersect.y; else y0 = this.y;
		var y1;
		if(this.get_bottom() > toIntersect.get_bottom()) y1 = toIntersect.get_bottom(); else y1 = this.get_bottom();
		if(y1 <= y0) return new openfl.geom.Rectangle();
		return new openfl.geom.Rectangle(x0,y0,x1 - x0,y1 - y0);
	}
	,intersects: function(toIntersect) {
		var x0;
		if(this.x < toIntersect.x) x0 = toIntersect.x; else x0 = this.x;
		var x1;
		if(this.get_right() > toIntersect.get_right()) x1 = toIntersect.get_right(); else x1 = this.get_right();
		if(x1 <= x0) return false;
		var y0;
		if(this.y < toIntersect.y) y0 = toIntersect.y; else y0 = this.y;
		var y1;
		if(this.get_bottom() > toIntersect.get_bottom()) y1 = toIntersect.get_bottom(); else y1 = this.get_bottom();
		return y1 > y0;
	}
	,isEmpty: function() {
		return this.width <= 0 || this.height <= 0;
	}
	,offset: function(dx,dy) {
		this.x += dx;
		this.y += dy;
	}
	,offsetPoint: function(point) {
		this.x += point.x;
		this.y += point.y;
	}
	,setEmpty: function() {
		this.x = this.y = this.width = this.height = 0;
	}
	,setTo: function(xa,ya,widtha,heighta) {
		this.x = xa;
		this.y = ya;
		this.width = widtha;
		this.height = heighta;
	}
	,transform: function(m) {
		var tx0 = m.a * this.x + m.c * this.y;
		var tx1 = tx0;
		var ty0 = m.b * this.x + m.d * this.y;
		var ty1 = tx0;
		var tx = m.a * (this.x + this.width) + m.c * this.y;
		var ty = m.b * (this.x + this.width) + m.d * this.y;
		if(tx < tx0) tx0 = tx;
		if(ty < ty0) ty0 = ty;
		if(tx > tx1) tx1 = tx;
		if(ty > ty1) ty1 = ty;
		tx = m.a * (this.x + this.width) + m.c * (this.y + this.height);
		ty = m.b * (this.x + this.width) + m.d * (this.y + this.height);
		if(tx < tx0) tx0 = tx;
		if(ty < ty0) ty0 = ty;
		if(tx > tx1) tx1 = tx;
		if(ty > ty1) ty1 = ty;
		tx = m.a * this.x + m.c * (this.y + this.height);
		ty = m.b * this.x + m.d * (this.y + this.height);
		if(tx < tx0) tx0 = tx;
		if(ty < ty0) ty0 = ty;
		if(tx > tx1) tx1 = tx;
		if(ty > ty1) ty1 = ty;
		return new openfl.geom.Rectangle(tx0 + m.tx,ty0 + m.ty,tx1 - tx0,ty1 - ty0);
	}
	,union: function(toUnion) {
		if(this.width == 0 || this.height == 0) return toUnion.clone(); else if(toUnion.width == 0 || toUnion.height == 0) return this.clone();
		var x0;
		if(this.x > toUnion.x) x0 = toUnion.x; else x0 = this.x;
		var x1;
		if(this.get_right() < toUnion.get_right()) x1 = toUnion.get_right(); else x1 = this.get_right();
		var y0;
		if(this.y > toUnion.y) y0 = toUnion.y; else y0 = this.y;
		var y1;
		if(this.get_bottom() < toUnion.get_bottom()) y1 = toUnion.get_bottom(); else y1 = this.get_bottom();
		return new openfl.geom.Rectangle(x0,y0,x1 - x0,y1 - y0);
	}
	,__contract: function(x,y,width,height) {
		if(this.width == 0 && this.height == 0) return;
		var cacheRight = this.get_right();
		var cacheBottom = this.get_bottom();
		if(this.x < x) this.x = x;
		if(this.y < y) this.y = y;
		if(this.get_right() > x + width) this.width = x + width - this.x;
		if(this.get_bottom() > y + height) this.height = y + height - this.y;
	}
	,__expand: function(x,y,width,height) {
		if(this.width == 0 && this.height == 0) {
			this.x = x;
			this.y = y;
			this.width = width;
			this.height = height;
			return;
		}
		var cacheRight = this.get_right();
		var cacheBottom = this.get_bottom();
		if(this.x > x) {
			this.x = x;
			this.width = cacheRight - x;
		}
		if(this.y > y) {
			this.y = y;
			this.height = cacheBottom - y;
		}
		if(cacheRight < x + width) this.width = x + width - this.x;
		if(cacheBottom < y + height) this.height = y + height - this.y;
	}
	,__toLimeRectangle: function() {
		return new lime.math.Rectangle(this.x,this.y,this.width,this.height);
	}
	,get_bottom: function() {
		return this.y + this.height;
	}
	,set_bottom: function(b) {
		this.height = b - this.y;
		return b;
	}
	,get_bottomRight: function() {
		return new openfl.geom.Point(this.x + this.width,this.y + this.height);
	}
	,set_bottomRight: function(p) {
		this.width = p.x - this.x;
		this.height = p.y - this.y;
		return p.clone();
	}
	,get_left: function() {
		return this.x;
	}
	,set_left: function(l) {
		this.width -= l - this.x;
		this.x = l;
		return l;
	}
	,get_right: function() {
		return this.x + this.width;
	}
	,set_right: function(r) {
		this.width = r - this.x;
		return r;
	}
	,get_size: function() {
		return new openfl.geom.Point(this.width,this.height);
	}
	,set_size: function(p) {
		this.width = p.x;
		this.height = p.y;
		return p.clone();
	}
	,get_top: function() {
		return this.y;
	}
	,set_top: function(t) {
		this.height -= t - this.y;
		this.y = t;
		return t;
	}
	,get_topLeft: function() {
		return new openfl.geom.Point(this.x,this.y);
	}
	,set_topLeft: function(p) {
		this.x = p.x;
		this.y = p.y;
		return p.clone();
	}
	,__class__: openfl.geom.Rectangle
	,__properties__: {set_topLeft:"set_topLeft",get_topLeft:"get_topLeft",set_top:"set_top",get_top:"get_top",set_size:"set_size",get_size:"get_size",set_right:"set_right",get_right:"get_right",set_left:"set_left",get_left:"get_left",set_bottomRight:"set_bottomRight",get_bottomRight:"get_bottomRight",set_bottom:"set_bottom",get_bottom:"get_bottom"}
};
starling.display = {};
starling.display.DisplayObject = function() {
	starling.events.EventDispatcher.call(this);
	var name = Type.getClassName(Type.getClass(this));
	if(openfl.system.Capabilities.isDebugger && name == "starling.display.DisplayObject") throw new starling.errors.AbstractClassError();
	this.mX = this.mY = this.mPivotX = this.mPivotY = this.mRotation = this.mSkewX = this.mSkewY = 0.0;
	this.mScaleX = this.mScaleY = this.mAlpha = 1.0;
	this.mVisible = this.mTouchable = true;
	this.mBlendMode = starling.display.BlendMode.AUTO;
	this.mTransformationMatrix = new openfl.geom.Matrix();
	this.mOrientationChanged = this.mUseHandCursor = false;
};
$hxClasses["starling.display.DisplayObject"] = starling.display.DisplayObject;
starling.display.DisplayObject.__name__ = ["starling","display","DisplayObject"];
starling.display.DisplayObject.__super__ = starling.events.EventDispatcher;
starling.display.DisplayObject.prototype = $extend(starling.events.EventDispatcher.prototype,{
	mX: null
	,mY: null
	,mPivotX: null
	,mPivotY: null
	,mScaleX: null
	,mScaleY: null
	,mSkewX: null
	,mSkewY: null
	,mRotation: null
	,mAlpha: null
	,mVisible: null
	,mTouchable: null
	,mBlendMode: null
	,mName: null
	,mUseHandCursor: null
	,mParent: null
	,mTransformationMatrix: null
	,mTransformationMatrix3D: null
	,mOrientationChanged: null
	,mFilter: null
	,mIs3D: null
	,mMask: null
	,mIsMask: null
	,hasVisibleArea: null
	,isMask: null
	,transformationMatrix3D: null
	,is3D: null
	,bounds: null
	,parent: null
	,base: null
	,root: null
	,stage: null
	,dispose: function() {
		if(this.mFilter != null) this.mFilter.dispose();
		if(this.mMask != null) this.mMask.dispose();
		this.removeEventListeners();
		this.set_mask(null);
	}
	,removeFromParent: function(dispose) {
		if(dispose == null) dispose = false;
		if(this.mParent != null) this.mParent.removeChild(this,dispose); else if(dispose) this.dispose();
	}
	,getTransformationMatrix: function(targetSpace,resultMatrix) {
		var commonParent;
		var currentObject;
		if(resultMatrix != null) resultMatrix.identity(); else resultMatrix = new openfl.geom.Matrix();
		if(targetSpace == this) return resultMatrix; else if(targetSpace == this.mParent || targetSpace == null && this.mParent == null) {
			resultMatrix.copyFrom(this.get_transformationMatrix());
			return resultMatrix;
		} else if(targetSpace == null || targetSpace == this.get_base()) {
			currentObject = this;
			while(currentObject != targetSpace) {
				resultMatrix.concat(currentObject.get_transformationMatrix());
				currentObject = currentObject.mParent;
			}
			return resultMatrix;
		} else if(targetSpace.mParent == this) {
			targetSpace.getTransformationMatrix(this,resultMatrix);
			resultMatrix.invert();
			return resultMatrix;
		}
		commonParent = this.findCommonParent(this,targetSpace);
		currentObject = this;
		while(currentObject != commonParent) {
			resultMatrix.concat(currentObject.get_transformationMatrix());
			currentObject = currentObject.mParent;
		}
		if(commonParent == targetSpace) return resultMatrix;
		starling.display.DisplayObject.sHelperMatrix.identity();
		currentObject = targetSpace;
		while(currentObject != commonParent) {
			starling.display.DisplayObject.sHelperMatrix.concat(currentObject.get_transformationMatrix());
			currentObject = currentObject.mParent;
		}
		starling.display.DisplayObject.sHelperMatrix.invert();
		resultMatrix.concat(starling.display.DisplayObject.sHelperMatrix);
		return resultMatrix;
	}
	,getBounds: function(targetSpace,resultRect) {
		throw new starling.errors.AbstractMethodError();
	}
	,hitTest: function(localPoint,forTouch) {
		if(forTouch == null) forTouch = false;
		if(forTouch && (!this.mVisible || !this.mTouchable)) return null;
		if(this.mMask != null && !this.hitTestMask(localPoint)) return null;
		if(this.getBounds(this,starling.display.DisplayObject.sHelperRect).containsPoint(localPoint)) return this; else return null;
	}
	,hitTestMask: function(localPoint) {
		if(this.mMask != null) {
			if(this.mMask.get_stage() != null) this.getTransformationMatrix(this.mMask,starling.display.DisplayObject.sHelperMatrixAlt); else {
				starling.display.DisplayObject.sHelperMatrixAlt.copyFrom(this.mMask.get_transformationMatrix());
				starling.display.DisplayObject.sHelperMatrixAlt.invert();
			}
			starling.utils.MatrixUtil.transformPoint(starling.display.DisplayObject.sHelperMatrixAlt,localPoint,starling.display.DisplayObject.sHelperPoint);
			return this.mMask.hitTest(starling.display.DisplayObject.sHelperPoint,true) != null;
		} else return true;
	}
	,localToGlobal: function(localPoint,resultPoint) {
		if(this.get_is3D()) {
			starling.display.DisplayObject.sHelperPoint3D.setTo(localPoint.x,localPoint.y,0);
			return this.local3DToGlobal(starling.display.DisplayObject.sHelperPoint3D,resultPoint);
		} else {
			this.getTransformationMatrix(this.get_base(),starling.display.DisplayObject.sHelperMatrixAlt);
			return starling.utils.MatrixUtil.transformPoint(starling.display.DisplayObject.sHelperMatrixAlt,localPoint,resultPoint);
		}
	}
	,globalToLocal: function(globalPoint,resultPoint) {
		if(this.get_is3D()) {
			this.globalToLocal3D(globalPoint,starling.display.DisplayObject.sHelperPoint3D);
			return starling.utils.MathUtil.intersectLineWithXYPlane(this.get_stage().get_cameraPosition(),starling.display.DisplayObject.sHelperPoint3D,resultPoint);
		} else {
			this.getTransformationMatrix(this.get_base(),starling.display.DisplayObject.sHelperMatrixAlt);
			starling.display.DisplayObject.sHelperMatrixAlt.invert();
			return starling.utils.MatrixUtil.transformPoint(starling.display.DisplayObject.sHelperMatrixAlt,globalPoint,resultPoint);
		}
	}
	,render: function(support,parentAlpha) {
		throw new starling.errors.AbstractMethodError();
	}
	,get_hasVisibleArea: function() {
		return this.mAlpha != 0.0 && this.mVisible && !this.mIsMask && this.mScaleX != 0.0 && this.mScaleY != 0.0;
	}
	,alignPivot: function(hAlign,vAlign) {
		if(hAlign == null) hAlign = starling.utils.HAlign.CENTER;
		if(vAlign == null) vAlign = starling.utils.VAlign.CENTER;
		var bounds = this.getBounds(this);
		this.mOrientationChanged = true;
		if(hAlign == starling.utils.HAlign.LEFT) this.mPivotX = bounds.x; else if(hAlign == starling.utils.HAlign.CENTER) this.mPivotX = bounds.x + bounds.width / 2.0; else if(hAlign == starling.utils.HAlign.RIGHT) this.mPivotX = bounds.x + bounds.width; else throw new openfl.errors.ArgumentError("Invalid horizontal alignment: " + Std.string(hAlign));
		if(vAlign == starling.utils.VAlign.TOP) this.mPivotY = bounds.y; else if(vAlign == starling.utils.VAlign.CENTER) this.mPivotY = bounds.y + bounds.height / 2.0; else if(vAlign == starling.utils.VAlign.BOTTOM) this.mPivotY = bounds.y + bounds.height; else throw new openfl.errors.ArgumentError("Invalid vertical alignment: " + Std.string(vAlign));
	}
	,getTransformationMatrix3D: function(targetSpace,resultMatrix) {
		var commonParent;
		var currentObject;
		if(resultMatrix != null) resultMatrix.identity(); else resultMatrix = new openfl.geom.Matrix3D();
		if(targetSpace == this) return resultMatrix; else if(targetSpace == this.mParent || targetSpace == null && this.mParent == null) {
			resultMatrix.copyFrom(this.get_transformationMatrix3D());
			return resultMatrix;
		} else if(targetSpace == null || targetSpace == this.get_base()) {
			currentObject = this;
			while(currentObject != targetSpace) {
				resultMatrix.append(currentObject.get_transformationMatrix3D());
				currentObject = currentObject.mParent;
			}
			return resultMatrix;
		} else if(targetSpace.mParent == this) {
			targetSpace.getTransformationMatrix3D(this,resultMatrix);
			resultMatrix.invert();
			return resultMatrix;
		}
		commonParent = this.findCommonParent(this,targetSpace);
		currentObject = this;
		while(currentObject != commonParent) {
			resultMatrix.append(currentObject.get_transformationMatrix3D());
			currentObject = currentObject.mParent;
		}
		if(commonParent == targetSpace) return resultMatrix;
		starling.display.DisplayObject.sHelperMatrix3D.identity();
		currentObject = targetSpace;
		while(currentObject != commonParent) {
			starling.display.DisplayObject.sHelperMatrix3D.append(currentObject.get_transformationMatrix3D());
			currentObject = currentObject.mParent;
		}
		starling.display.DisplayObject.sHelperMatrix3D.invert();
		resultMatrix.append(starling.display.DisplayObject.sHelperMatrix3D);
		return resultMatrix;
	}
	,local3DToGlobal: function(localPoint,resultPoint) {
		var stage = this.get_stage();
		if(stage == null) throw new openfl.errors.IllegalOperationError("Dynamic not connected to stage");
		this.getTransformationMatrix3D(stage,starling.display.DisplayObject.sHelperMatrixAlt3D);
		starling.utils.MatrixUtil.transformPoint3D(starling.display.DisplayObject.sHelperMatrixAlt3D,localPoint,starling.display.DisplayObject.sHelperPoint3D);
		return starling.utils.MathUtil.intersectLineWithXYPlane(stage.get_cameraPosition(),starling.display.DisplayObject.sHelperPoint3D,resultPoint);
	}
	,globalToLocal3D: function(globalPoint,resultPoint) {
		var stage = this.get_stage();
		if(stage == null) throw new openfl.errors.IllegalOperationError("Dynamic not connected to stage");
		this.getTransformationMatrix3D(stage,starling.display.DisplayObject.sHelperMatrixAlt3D);
		starling.display.DisplayObject.sHelperMatrixAlt3D.invert();
		return starling.utils.MatrixUtil.transformCoords3D(starling.display.DisplayObject.sHelperMatrixAlt3D,globalPoint.x,globalPoint.y,0,resultPoint);
	}
	,setParent: function(value) {
		var ancestor = value;
		while(ancestor != this && ancestor != null) ancestor = ancestor.mParent;
		if(ancestor == this) throw new openfl.errors.ArgumentError("An object cannot be added as a child to itself or one " + "of its children (or children's children, etc.)"); else this.mParent = value;
	}
	,setIs3D: function(value) {
		this.mIs3D = value;
	}
	,get_isMask: function() {
		return this.mIsMask;
	}
	,isEquivalent: function(a,b,epsilon) {
		if(epsilon == null) epsilon = 0.0001;
		return a - epsilon < b && a + epsilon > b;
	}
	,findCommonParent: function(object1,object2) {
		var currentObject = object1;
		while(currentObject != null) {
			var this1 = starling.display.DisplayObject.sAncestors;
			var key = starling.display.DisplayObject.sAncestors.length;
			if(!this1.fixed) {
				if(key >= this1.length) this1.length = key + 1;
				if(this1.data.length < this1.length) {
					var data;
					var this2;
					this2 = new Array(this1.data.length + 10);
					data = this2;
					haxe.ds._Vector.Vector_Impl_.blit(this1.data,0,data,0,this1.data.length);
					this1.data = data;
				}
			}
			this1.data[key] = currentObject;
			currentObject = currentObject.mParent;
		}
		currentObject = object2;
		while(currentObject != null && (function($this) {
			var $r;
			var this3 = starling.display.DisplayObject.sAncestors;
			var value = -1;
			{
				var _g1 = 0;
				var _g = this3.length;
				while(_g1 < _g) {
					var i = _g1++;
					if(this3.data[i] == currentObject) {
						value = i;
						break;
					}
				}
			}
			$r = value;
			return $r;
		}(this)) == -1) currentObject = currentObject.mParent;
		var this4 = starling.display.DisplayObject.sAncestors;
		if(!this4.fixed) {
			if(0 > this4.length) {
				var data1;
				var this5;
				this5 = new Array(0);
				data1 = this5;
				haxe.ds._Vector.Vector_Impl_.blit(this4.data,0,data1,0,Std["int"](Math.min(this4.data.length,0)));
				this4.data = data1;
			}
			this4.length = 0;
		}
		0;
		if(currentObject != null) return currentObject; else throw new openfl.errors.ArgumentError("Dynamic not connected to target");
	}
	,dispatchEvent: function(event) {
		if(event.get_type() == starling.events.Event.REMOVED_FROM_STAGE && this.get_stage() == null) return; else starling.events.EventDispatcher.prototype.dispatchEvent.call(this,event);
	}
	,addEventListener: function(type,listener) {
		if(type == starling.events.Event.ENTER_FRAME && !this.hasEventListener(type)) {
			this.addEventListener(starling.events.Event.ADDED_TO_STAGE,$bind(this,this.addEnterFrameListenerToStage));
			this.addEventListener(starling.events.Event.REMOVED_FROM_STAGE,$bind(this,this.removeEnterFrameListenerFromStage));
			if(this.get_stage() != null) this.addEnterFrameListenerToStage();
		}
		starling.events.EventDispatcher.prototype.addEventListener.call(this,type,listener);
	}
	,removeEventListener: function(type,listener) {
		starling.events.EventDispatcher.prototype.removeEventListener.call(this,type,listener);
		if(type == starling.events.Event.ENTER_FRAME && !this.hasEventListener(type)) {
			this.removeEventListener(starling.events.Event.ADDED_TO_STAGE,$bind(this,this.addEnterFrameListenerToStage));
			this.removeEventListener(starling.events.Event.REMOVED_FROM_STAGE,$bind(this,this.removeEnterFrameListenerFromStage));
			this.removeEnterFrameListenerFromStage();
		}
	}
	,removeEventListeners: function(type) {
		var val1 = type == null;
		var val2 = type == starling.events.Event.ENTER_FRAME;
		var val3 = val1 || val2;
		if(val3 && this.hasEventListener(starling.events.Event.ENTER_FRAME)) {
			this.removeEventListener(starling.events.Event.ADDED_TO_STAGE,$bind(this,this.addEnterFrameListenerToStage));
			this.removeEventListener(starling.events.Event.REMOVED_FROM_STAGE,$bind(this,this.removeEnterFrameListenerFromStage));
			this.removeEnterFrameListenerFromStage();
		}
		starling.events.EventDispatcher.prototype.removeEventListeners.call(this,type);
	}
	,addEnterFrameListenerToStage: function() {
		starling.core.Starling.get_current().get_stage().addEnterFrameListener(this);
	}
	,removeEnterFrameListenerFromStage: function() {
		starling.core.Starling.get_current().get_stage().removeEnterFrameListener(this);
	}
	,get_transformationMatrix: function() {
		if(this.mOrientationChanged) {
			this.mOrientationChanged = false;
			if(this.mSkewX == 0.0 && this.mSkewY == 0.0) {
				if(this.mRotation == 0.0) this.mTransformationMatrix.setTo(this.mScaleX,0.0,0.0,this.mScaleY,this.mX - this.mPivotX * this.mScaleX,this.mY - this.mPivotY * this.mScaleY); else {
					var cos = Math.cos(this.mRotation);
					var sin = Math.sin(this.mRotation);
					var a = this.mScaleX * cos;
					var b = this.mScaleX * sin;
					var c = this.mScaleY * -sin;
					var d = this.mScaleY * cos;
					var tx = this.mX - this.mPivotX * a - this.mPivotY * c;
					var ty = this.mY - this.mPivotX * b - this.mPivotY * d;
					this.mTransformationMatrix.setTo(a,b,c,d,tx,ty);
				}
			} else {
				this.mTransformationMatrix.identity();
				this.mTransformationMatrix.scale(this.mScaleX,this.mScaleY);
				starling.utils.MatrixUtil.skew(this.mTransformationMatrix,this.mSkewX,this.mSkewY);
				this.mTransformationMatrix.rotate(this.mRotation);
				this.mTransformationMatrix.translate(this.mX,this.mY);
				if(this.mPivotX != 0.0 || this.mPivotY != 0.0) {
					this.mTransformationMatrix.tx = this.mX - this.mTransformationMatrix.a * this.mPivotX - this.mTransformationMatrix.c * this.mPivotY;
					this.mTransformationMatrix.ty = this.mY - this.mTransformationMatrix.b * this.mPivotX - this.mTransformationMatrix.d * this.mPivotY;
				}
			}
		}
		return this.mTransformationMatrix;
	}
	,set_transformationMatrix: function(matrix) {
		var PI_Q = Math.PI / 4.0;
		this.mOrientationChanged = false;
		this.mTransformationMatrix.copyFrom(matrix);
		this.mPivotX = this.mPivotY = 0;
		this.mX = matrix.tx;
		this.mY = matrix.ty;
		this.mSkewX = Math.atan(-matrix.c / matrix.d);
		this.mSkewY = Math.atan(matrix.b / matrix.a);
		if(this.mSkewX != this.mSkewX) this.mSkewX = 0.0;
		if(this.mSkewY != this.mSkewY) this.mSkewY = 0.0;
		if(this.mSkewX > -PI_Q && this.mSkewX < PI_Q) this.mScaleY = matrix.d / Math.cos(this.mSkewX); else this.mScaleY = -matrix.c / Math.sin(this.mSkewX);
		if(this.mSkewY > -PI_Q && this.mSkewY < PI_Q) this.mScaleX = matrix.a / Math.cos(this.mSkewY); else this.mScaleX = matrix.b / Math.sin(this.mSkewY);
		if(this.isEquivalent(this.mSkewX,this.mSkewY)) {
			this.mRotation = this.mSkewX;
			this.mSkewX = this.mSkewY = 0;
		} else this.mRotation = 0;
		return matrix;
	}
	,get_transformationMatrix3D: function() {
		if(this.mTransformationMatrix3D == null) this.mTransformationMatrix3D = new openfl.geom.Matrix3D();
		return starling.utils.MatrixUtil.convertTo3D(this.get_transformationMatrix(),this.mTransformationMatrix3D);
	}
	,get_is3D: function() {
		return this.mIs3D;
	}
	,get_useHandCursor: function() {
		return this.mUseHandCursor;
	}
	,set_useHandCursor: function(value) {
		if(value == this.mUseHandCursor) return value;
		this.mUseHandCursor = value;
		if(this.mUseHandCursor) this.addEventListener(starling.events.TouchEvent.TOUCH,$bind(this,this.onTouch)); else this.removeEventListener(starling.events.TouchEvent.TOUCH,$bind(this,this.onTouch));
		return value;
	}
	,onTouch: function(event) {
		haxe.Log.trace("CHECK",{ fileName : "DisplayObject.hx", lineNumber : 808, className : "starling.display.DisplayObject", methodName : "onTouch"});
	}
	,get_bounds: function() {
		return this.getBounds(this.mParent);
	}
	,get_width: function() {
		return this.getBounds(this.mParent,starling.display.DisplayObject.sHelperRect).width;
	}
	,set_width: function(value) {
		this.set_scaleX(1.0);
		var actualWidth = this.get_width();
		if(actualWidth != 0.0) this.set_scaleX(value / actualWidth);
		return value;
	}
	,get_height: function() {
		return this.getBounds(this.mParent,starling.display.DisplayObject.sHelperRect).height;
	}
	,set_height: function(value) {
		this.set_scaleY(1.0);
		var actualHeight = this.get_height();
		if(actualHeight != 0.0) this.set_scaleY(value / actualHeight);
		return value;
	}
	,get_x: function() {
		return this.mX;
	}
	,set_x: function(value) {
		if(this.mX != value) {
			this.mX = value;
			this.mOrientationChanged = true;
		}
		return value;
	}
	,get_y: function() {
		return this.mY;
	}
	,set_y: function(value) {
		if(this.mY != value) {
			this.mY = value;
			this.mOrientationChanged = true;
		}
		return value;
	}
	,get_pivotX: function() {
		return this.mPivotX;
	}
	,set_pivotX: function(value) {
		if(this.mPivotX != value) {
			this.mPivotX = value;
			this.mOrientationChanged = true;
		}
		return value;
	}
	,get_pivotY: function() {
		return this.mPivotY;
	}
	,set_pivotY: function(value) {
		if(this.mPivotY != value) {
			this.mPivotY = value;
			this.mOrientationChanged = true;
		}
		return value;
	}
	,get_scaleX: function() {
		return this.mScaleX;
	}
	,set_scaleX: function(value) {
		if(this.mScaleX != value) {
			this.mScaleX = value;
			this.mOrientationChanged = true;
		}
		return value;
	}
	,get_scaleY: function() {
		return this.mScaleY;
	}
	,set_scaleY: function(value) {
		if(this.mScaleY != value) {
			this.mScaleY = value;
			this.mOrientationChanged = true;
		}
		return value;
	}
	,get_skewX: function() {
		return this.mSkewX;
	}
	,set_skewX: function(value) {
		value = starling.utils.MathUtil.normalizeAngle(value);
		if(this.mSkewX != value) {
			this.mSkewX = value;
			this.mOrientationChanged = true;
		}
		return value;
	}
	,get_skewY: function() {
		return this.mSkewY;
	}
	,set_skewY: function(value) {
		value = starling.utils.MathUtil.normalizeAngle(value);
		if(this.mSkewY != value) {
			this.mSkewY = value;
			this.mOrientationChanged = true;
		}
		return value;
	}
	,get_rotation: function() {
		return this.mRotation;
	}
	,set_rotation: function(value) {
		value = starling.utils.MathUtil.normalizeAngle(value);
		if(this.mRotation != value) {
			this.mRotation = value;
			this.mOrientationChanged = true;
		}
		return value;
	}
	,get_alpha: function() {
		return this.mAlpha;
	}
	,set_alpha: function(value) {
		if(value < 0.0) this.mAlpha = 0.0; else if(value > 1.0) this.mAlpha = 1.0; else this.mAlpha = value;
		return value;
	}
	,get_visible: function() {
		return this.mVisible;
	}
	,set_visible: function(value) {
		this.mVisible = value;
		return value;
	}
	,get_touchable: function() {
		return this.mTouchable;
	}
	,set_touchable: function(value) {
		this.mTouchable = value;
		return value;
	}
	,get_blendMode: function() {
		return this.mBlendMode;
	}
	,set_blendMode: function(value) {
		this.mBlendMode = value;
		return value;
	}
	,get_name: function() {
		return this.mName;
	}
	,set_name: function(value) {
		this.mName = value;
		return value;
	}
	,get_filter: function() {
		return this.mFilter;
	}
	,set_filter: function(value) {
		this.mFilter = value;
		return value;
	}
	,get_mask: function() {
		return this.mMask;
	}
	,set_mask: function(value) {
		if(this.mMask != value) {
			if(this.mMask != null) this.mMask.mIsMask = false;
			if(value != null) value.mIsMask = true;
			this.mMask = value;
		}
		return value;
	}
	,get_parent: function() {
		return this.mParent;
	}
	,get_base: function() {
		var currentObject = this;
		while(currentObject.mParent != null) currentObject = currentObject.mParent;
		if(currentObject == this) return null; else return currentObject;
	}
	,get_root: function() {
		var currentObject = this;
		while(currentObject.mParent != null) if(js.Boot.__instanceof(currentObject.mParent,starling.display.Stage)) return currentObject; else currentObject = currentObject.get_parent();
		return null;
	}
	,get_stage: function() {
		if(this.get_base() == null) return null; else try {
			return this.get_base();
		} catch( e ) {
			if( js.Boot.__instanceof(e,openfl.errors.Error) ) {
				return null;
			} else throw(e);
		}
	}
	,__class__: starling.display.DisplayObject
	,__properties__: {get_stage:"get_stage",get_root:"get_root",get_base:"get_base",get_parent:"get_parent",set_mask:"set_mask",get_mask:"get_mask",set_filter:"set_filter",get_filter:"get_filter",set_name:"set_name",get_name:"get_name",set_blendMode:"set_blendMode",get_blendMode:"get_blendMode",set_touchable:"set_touchable",get_touchable:"get_touchable",set_visible:"set_visible",get_visible:"get_visible",set_alpha:"set_alpha",get_alpha:"get_alpha",set_rotation:"set_rotation",get_rotation:"get_rotation",set_skewY:"set_skewY",get_skewY:"get_skewY",set_skewX:"set_skewX",get_skewX:"get_skewX",set_scaleY:"set_scaleY",get_scaleY:"get_scaleY",set_scaleX:"set_scaleX",get_scaleX:"get_scaleX",set_pivotY:"set_pivotY",get_pivotY:"get_pivotY",set_pivotX:"set_pivotX",get_pivotX:"get_pivotX",set_y:"set_y",get_y:"get_y",set_x:"set_x",get_x:"get_x",set_height:"set_height",get_height:"get_height",set_width:"set_width",get_width:"get_width",get_bounds:"get_bounds",set_useHandCursor:"set_useHandCursor",get_useHandCursor:"get_useHandCursor",get_is3D:"get_is3D",get_transformationMatrix3D:"get_transformationMatrix3D",set_transformationMatrix:"set_transformationMatrix",get_transformationMatrix:"get_transformationMatrix",get_isMask:"get_isMask",get_hasVisibleArea:"get_hasVisibleArea"}
});
starling.display.DisplayObjectContainer = function() {
	starling.display.DisplayObject.call(this);
	var name = Type.getClassName(Type.getClass(this));
	if(openfl.system.Capabilities.isDebugger && name == "starling.display.DisplayObjectContainer") throw new starling.errors.AbstractClassError();
	this.mChildren = new Array();
};
$hxClasses["starling.display.DisplayObjectContainer"] = starling.display.DisplayObjectContainer;
starling.display.DisplayObjectContainer.__name__ = ["starling","display","DisplayObjectContainer"];
starling.display.DisplayObjectContainer.mergeSort = function(input,compareFunc,startIndex,length,buffer) {
	if(length <= 1) return; else {
		var i = 0;
		var endIndex = startIndex + length;
		var halfLength = length / 2;
		var l = startIndex;
		var r = startIndex + halfLength;
		starling.display.DisplayObjectContainer.mergeSort(input,compareFunc,startIndex,halfLength,buffer);
		starling.display.DisplayObjectContainer.mergeSort(input,compareFunc,startIndex + halfLength,length - halfLength,buffer);
		var _g = 0;
		while(_g < length) {
			var i1 = _g++;
			var func = compareFunc;
			if(l < startIndex + halfLength && (r == endIndex || func(input[l],input[r]) <= 0)) {
				buffer[i1] = input[l];
				l++;
			} else {
				buffer[i1] = input[r];
				r++;
			}
		}
		var _g1 = startIndex;
		while(_g1 < endIndex) {
			var i2 = _g1++;
			input[i2] = buffer[i2 - startIndex];
		}
	}
};
starling.display.DisplayObjectContainer.__super__ = starling.display.DisplayObject;
starling.display.DisplayObjectContainer.prototype = $extend(starling.display.DisplayObject.prototype,{
	mChildren: null
	,mTouchGroup: null
	,numChildren: null
	,dispose: function() {
		var _g1 = 0;
		var _g = this.mChildren.length;
		while(_g1 < _g) {
			var j = _g1++;
			var i = this.mChildren.length - j - 1;
			this.mChildren[i].dispose();
		}
		starling.display.DisplayObject.prototype.dispose.call(this);
	}
	,addChild: function(child) {
		return this.addChildAt(child,this.mChildren.length);
	}
	,addChildAt: function(child,index) {
		var numChildren = this.mChildren.length;
		if(index >= 0 && index <= numChildren) {
			if(child.get_parent() == this) this.setChildIndex(child,index); else {
				child.removeFromParent();
				if(index == numChildren) this.mChildren[numChildren] = child; else this.mChildren.splice(index,0,child);
				child.setParent(this);
				child.dispatchEventWith(starling.events.Event.ADDED,true);
				if(this.get_stage() != null) {
					var isDisplayObjectContainer = js.Boot.__instanceof(child,starling.display.DisplayObjectContainer);
					if(isDisplayObjectContainer) {
						var container;
						container = js.Boot.__cast(child , starling.display.DisplayObjectContainer);
						container.broadcastEventWith(starling.events.Event.ADDED_TO_STAGE);
					} else child.dispatchEventWith(starling.events.Event.ADDED_TO_STAGE);
				}
			}
			return child;
		} else throw new openfl.errors.RangeError("Invalid child index");
	}
	,removeChild: function(child,dispose) {
		if(dispose == null) dispose = false;
		var childIndex = this.getChildIndex(child);
		if(childIndex != -1) this.removeChildAt(childIndex,dispose);
		return child;
	}
	,removeChildAt: function(index,dispose) {
		if(dispose == null) dispose = false;
		if(index >= 0 && index < this.mChildren.length) {
			var child = this.mChildren[index];
			child.dispatchEventWith(starling.events.Event.REMOVED,true);
			if(this.get_stage() != null) {
				var container = null;
				try {
					container = child;
				} catch( e ) {
					if( js.Boot.__instanceof(e,openfl.errors.Error) ) {
					} else throw(e);
				}
				child.dispatchEventWith(starling.events.Event.REMOVED_FROM_STAGE);
			}
			child.setParent(null);
			index = HxOverrides.indexOf(this.mChildren,child,0);
			if(index >= 0) this.mChildren.splice(index,1);
			if(dispose) child.dispose();
			return child;
		} else throw new openfl.errors.RangeError("Invalid child index");
	}
	,removeChildren: function(beginIndex,endIndex,dispose) {
		if(dispose == null) dispose = false;
		if(endIndex == null) endIndex = -1;
		if(beginIndex == null) beginIndex = 0;
		if(endIndex < 0 || endIndex >= this.get_numChildren()) endIndex = this.get_numChildren() - 1;
		var _g = beginIndex;
		while(_g < endIndex) {
			var i = _g++;
			this.removeChildAt(beginIndex,dispose);
		}
	}
	,getChildAt: function(index) {
		var numChildren = this.mChildren.length;
		if(index < 0) index = numChildren + index;
		if(index >= 0 && index < numChildren) return this.mChildren[index]; else {
			throw new openfl.errors.RangeError("Invalid child index");
			return null;
		}
	}
	,getChildByName: function(name) {
		var numChildren = this.mChildren.length;
		var _g = 0;
		while(_g < numChildren) {
			var i = _g++;
			if(this.mChildren[i].get_name() == name) return this.mChildren[i];
		}
		return null;
	}
	,getChildIndex: function(child) {
		return HxOverrides.indexOf(this.mChildren,child,0);
	}
	,setChildIndex: function(child,index) {
		var oldIndex = this.getChildIndex(child);
		if(oldIndex == index) return;
		if(oldIndex == -1) throw new openfl.errors.ArgumentError("Not a child of this container");
		this.mChildren.splice(oldIndex,1);
		this.mChildren.splice(index,0,child);
	}
	,swapChildren: function(child1,child2) {
		var index1 = this.getChildIndex(child1);
		var index2 = this.getChildIndex(child2);
		if(index1 == -1 || index2 == -1) throw new openfl.errors.ArgumentError("Not a child of this container");
		this.swapChildrenAt(index1,index2);
	}
	,swapChildrenAt: function(index1,index2) {
		var child1 = this.getChildAt(index1);
		var child2 = this.getChildAt(index2);
		this.mChildren[index1] = child2;
		this.mChildren[index2] = child1;
	}
	,sortChildren: function(compareFunction) {
		var this1 = starling.display.DisplayObjectContainer.sSortBuffer;
		var value = this.mChildren.length;
		if(!this1.fixed) {
			if(value > this1.length) {
				var data;
				var this2;
				this2 = new Array(value);
				data = this2;
				haxe.ds._Vector.Vector_Impl_.blit(this1.data,0,data,0,Std["int"](Math.min(this1.data.length,value)));
				this1.data = data;
			}
			this1.length = value;
		}
		value;
		starling.display.DisplayObjectContainer.mergeSort(this.mChildren,compareFunction,0,this.mChildren.length,(function($this) {
			var $r;
			var this3 = starling.display.DisplayObjectContainer.sSortBuffer;
			var value1 = new Array();
			{
				var _g1 = 0;
				var _g = this3.data.length;
				while(_g1 < _g) {
					var i = _g1++;
					value1.push(this3.data[i]);
				}
			}
			$r = value1;
			return $r;
		}(this)));
		var this4 = starling.display.DisplayObjectContainer.sSortBuffer;
		if(!this4.fixed) {
			if(0 > this4.length) {
				var data1;
				var this5;
				this5 = new Array(0);
				data1 = this5;
				haxe.ds._Vector.Vector_Impl_.blit(this4.data,0,data1,0,Std["int"](Math.min(this4.data.length,0)));
				this4.data = data1;
			}
			this4.length = 0;
		}
		0;
	}
	,contains: function(child) {
		while(child != null) if(child == this) return true; else child = child.get_parent();
		return false;
	}
	,getBounds: function(targetSpace,resultRect) {
		if(resultRect == null) resultRect = new openfl.geom.Rectangle();
		var numChildren = this.mChildren.length;
		if(numChildren == 0) {
			this.getTransformationMatrix(targetSpace,starling.display.DisplayObjectContainer.sHelperMatrix);
			starling.utils.MatrixUtil.transformCoords(starling.display.DisplayObjectContainer.sHelperMatrix,0.0,0.0,starling.display.DisplayObjectContainer.sHelperPoint);
			resultRect.setTo(starling.display.DisplayObjectContainer.sHelperPoint.x,starling.display.DisplayObjectContainer.sHelperPoint.y,0,0);
		} else if(numChildren == 1) this.mChildren[0].getBounds(targetSpace,resultRect); else {
			var minX = Math.POSITIVE_INFINITY;
			var maxX = Math.NEGATIVE_INFINITY;
			var minY = Math.POSITIVE_INFINITY;
			var maxY = Math.NEGATIVE_INFINITY;
			var _g = 0;
			while(_g < numChildren) {
				var i = _g++;
				this.mChildren[i].getBounds(targetSpace,resultRect);
				if(minX > resultRect.x) minX = resultRect.x;
				if(maxX < resultRect.get_right()) maxX = resultRect.get_right();
				if(minY > resultRect.y) minY = resultRect.y;
				if(maxY < resultRect.get_bottom()) maxY = resultRect.get_bottom();
			}
			resultRect.setTo(minX,minY,maxX - minX,maxY - minY);
		}
		return resultRect;
	}
	,hitTest: function(localPoint,forTouch) {
		if(forTouch == null) forTouch = false;
		if(forTouch && (!this.get_visible() || !this.get_touchable())) return null;
		if(!this.hitTestMask(localPoint)) return null;
		var target = null;
		var localX = localPoint.x;
		var localY = localPoint.y;
		var numChildren = this.mChildren.length;
		var _g = 0;
		while(_g < numChildren) {
			var j = _g++;
			var i = numChildren - j - 1;
			var child = this.mChildren[i];
			if(child.get_isMask()) continue;
			starling.display.DisplayObjectContainer.sHelperMatrix.copyFrom(child.get_transformationMatrix());
			starling.display.DisplayObjectContainer.sHelperMatrix.invert();
			starling.utils.MatrixUtil.transformCoords(starling.display.DisplayObjectContainer.sHelperMatrix,localX,localY,starling.display.DisplayObjectContainer.sHelperPoint);
			target = child.hitTest(starling.display.DisplayObjectContainer.sHelperPoint,forTouch);
			if(target != null) if(forTouch && this.mTouchGroup) return this; else return target;
		}
		return null;
	}
	,render: function(support,parentAlpha) {
		var alpha = parentAlpha * this.get_alpha();
		var numChildren = this.mChildren.length;
		var blendMode = support.get_blendMode();
		var _g = 0;
		while(_g < numChildren) {
			var i = _g++;
			var child = this.mChildren[i];
			if(child.get_hasVisibleArea()) {
				var filter = child.get_filter();
				var mask = child.get_mask();
				support.pushMatrix();
				support.transformMatrix(child);
				support.set_blendMode(child.get_blendMode());
				if(mask != null) support.pushMask(mask);
				if(filter != null) filter.render(child,support,alpha); else child.render(support,alpha);
				if(mask != null) support.popMask();
				support.set_blendMode(blendMode);
				support.popMatrix();
			}
		}
	}
	,broadcastEvent: function(event) {
		if(event.get_bubbles()) throw new openfl.errors.ArgumentError("Broadcast of bubbling events is prohibited");
		var fromIndex = starling.display.DisplayObjectContainer.sBroadcastListeners.length;
		var value = this.getChildEventListeners(this,event.get_type(),(function($this) {
			var $r;
			var this1 = starling.display.DisplayObjectContainer.sBroadcastListeners;
			var value1 = new Array();
			{
				var _g1 = 0;
				var _g = this1.data.length;
				while(_g1 < _g) {
					var i = _g1++;
					value1.push(this1.data[i]);
				}
			}
			$r = value1;
			return $r;
		}(this)));
		var vectorData = new openfl.VectorData();
		vectorData.length = value.length;
		vectorData.fixed = true;
		var vec;
		var this2;
		this2 = new Array(value.length);
		vec = this2;
		var _g11 = 0;
		var _g2 = value.length;
		while(_g11 < _g2) {
			var i1 = _g11++;
			vec[i1] = value[i1];
		}
		vectorData.data = vec;
		starling.display.DisplayObjectContainer.sBroadcastListeners = vectorData;
		var toIndex = starling.display.DisplayObjectContainer.sBroadcastListeners.length;
		var _g3 = fromIndex;
		while(_g3 < toIndex) {
			var i2 = _g3++;
			starling.display.DisplayObjectContainer.sBroadcastListeners.data[i2].dispatchEvent(event);
		}
		var this3 = starling.display.DisplayObjectContainer.sBroadcastListeners;
		if(!this3.fixed) {
			if(fromIndex > this3.length) {
				var data;
				var this4;
				this4 = new Array(fromIndex);
				data = this4;
				haxe.ds._Vector.Vector_Impl_.blit(this3.data,0,data,0,Std["int"](Math.min(this3.data.length,fromIndex)));
				this3.data = data;
			}
			this3.length = fromIndex;
		}
		fromIndex;
	}
	,broadcastEventWith: function(type,data) {
		var event = starling.events.Event.fromPool(type,false,data);
		this.broadcastEvent(event);
		starling.events.Event.toPool(event);
	}
	,get_numChildren: function() {
		return this.mChildren.length;
	}
	,get_touchGroup: function() {
		return this.mTouchGroup;
	}
	,set_touchGroup: function(value) {
		this.mTouchGroup = value;
		return value;
	}
	,getChildEventListeners: function(object,eventType,listeners) {
		var isDisplayObjectContainer = js.Boot.__instanceof(object,starling.display.DisplayObjectContainer);
		var container;
		if(isDisplayObjectContainer) container = js.Boot.__cast(object , starling.display.DisplayObjectContainer); else container = null;
		if(object.hasEventListener(eventType)) listeners[listeners.length] = object;
		if(container != null) {
			var children = container.mChildren;
			var numChildren = 0;
			if(children != null) numChildren = children.length;
			var _g = 0;
			while(_g < numChildren) {
				var i = _g++;
				listeners = this.getChildEventListeners(children[i],eventType,listeners);
			}
		}
		return listeners;
	}
	,__class__: starling.display.DisplayObjectContainer
	,__properties__: $extend(starling.display.DisplayObject.prototype.__properties__,{set_touchGroup:"set_touchGroup",get_touchGroup:"get_touchGroup",get_numChildren:"get_numChildren"})
});
starling.display.Sprite = function() {
	starling.display.DisplayObjectContainer.call(this);
};
$hxClasses["starling.display.Sprite"] = starling.display.Sprite;
starling.display.Sprite.__name__ = ["starling","display","Sprite"];
starling.display.Sprite.__super__ = starling.display.DisplayObjectContainer;
starling.display.Sprite.prototype = $extend(starling.display.DisplayObjectContainer.prototype,{
	mFlattenedContents: null
	,mFlattenRequested: null
	,mFlattenOptimized: null
	,mClipRect: null
	,isFlattened: null
	,dispose: function() {
		this.disposeFlattenedContents();
		starling.display.DisplayObjectContainer.prototype.dispose.call(this);
	}
	,disposeFlattenedContents: function() {
		if(this.mFlattenedContents != null) {
			var _g1 = 0;
			var _g = this.mFlattenedContents.length;
			while(_g1 < _g) {
				var i = _g1++;
				this.mFlattenedContents[i].dispose();
			}
			this.mFlattenedContents = null;
		}
	}
	,flatten: function(ignoreChildOrder) {
		if(ignoreChildOrder == null) ignoreChildOrder = false;
		this.mFlattenRequested = true;
		this.mFlattenOptimized = ignoreChildOrder;
		this.broadcastEventWith(starling.events.Event.FLATTEN);
	}
	,unflatten: function() {
		this.mFlattenRequested = false;
		this.disposeFlattenedContents();
	}
	,get_isFlattened: function() {
		return this.mFlattenedContents != null || this.mFlattenRequested;
	}
	,get_clipRect: function() {
		return this.mClipRect;
	}
	,set_clipRect: function(value) {
		if(this.mClipRect != null && value != null) this.mClipRect.copyFrom(value); else if(value != null) this.mClipRect = value.clone(); else this.mClipRect = null;
		return value;
	}
	,getClipRect: function(targetSpace,resultRect) {
		if(this.mClipRect == null) return null;
		if(resultRect == null) resultRect = new openfl.geom.Rectangle();
		var x = 0;
		var y = 0;
		var minX = Math.POSITIVE_INFINITY;
		var maxX = Math.NEGATIVE_INFINITY;
		var minY = Math.POSITIVE_INFINITY;
		var maxY = Math.NEGATIVE_INFINITY;
		var transMatrix = this.getTransformationMatrix(targetSpace,starling.display.Sprite.sHelperMatrix);
		var _g = 0;
		while(_g < 4) {
			var i = _g++;
			switch(i) {
			case 0:
				x = this.mClipRect.get_left();
				y = this.mClipRect.get_top();
				break;
			case 1:
				x = this.mClipRect.get_left();
				y = this.mClipRect.get_bottom();
				break;
			case 2:
				x = this.mClipRect.get_right();
				y = this.mClipRect.get_top();
				break;
			case 3:
				x = this.mClipRect.get_right();
				y = this.mClipRect.get_bottom();
				break;
			}
			var transformedPoint = starling.utils.MatrixUtil.transformCoords(transMatrix,x,y,starling.display.Sprite.sHelperPoint);
			if(minX > transformedPoint.x) minX = transformedPoint.x;
			if(maxX < transformedPoint.x) maxX = transformedPoint.x;
			if(minY > transformedPoint.y) minY = transformedPoint.y;
			if(maxY < transformedPoint.y) maxY = transformedPoint.y;
		}
		resultRect.setTo(minX,minY,maxX - minX,maxY - minY);
		return resultRect;
	}
	,getBounds: function(targetSpace,resultRect) {
		var bounds = starling.display.DisplayObjectContainer.prototype.getBounds.call(this,targetSpace,resultRect);
		if(this.mClipRect != null) starling.utils.RectangleUtil.intersect(bounds,this.getClipRect(targetSpace,starling.display.Sprite.sHelperRect),bounds);
		return bounds;
	}
	,hitTest: function(localPoint,forTouch) {
		if(forTouch == null) forTouch = false;
		if(this.mClipRect != null && !this.mClipRect.containsPoint(localPoint)) return null; else return starling.display.DisplayObjectContainer.prototype.hitTest.call(this,localPoint,forTouch);
	}
	,render: function(support,parentAlpha) {
		if(this.mClipRect != null) {
			var clipRect = support.pushClipRect(this.getClipRect(this.get_stage(),starling.display.Sprite.sHelperRect));
			if(clipRect.isEmpty()) {
				support.popClipRect();
				return;
			}
		}
		if(this.mFlattenedContents != null || this.mFlattenRequested) {
			if(this.mFlattenedContents == null) this.mFlattenedContents = new Array();
			if(this.mFlattenRequested) {
				starling.display.QuadBatch.compile(this,this.mFlattenedContents);
				if(this.mFlattenOptimized) starling.display.QuadBatch.optimize(this.mFlattenedContents);
				support.applyClipRect();
				this.mFlattenRequested = false;
			}
			var alpha = parentAlpha * this.get_alpha();
			var numBatches = this.mFlattenedContents.length;
			var mvpMatrix = support.get_mvpMatrix3D();
			support.finishQuadBatch();
			support.raiseDrawCount(numBatches);
			var _g = 0;
			while(_g < numBatches) {
				var i = _g++;
				var quadBatch = this.mFlattenedContents[i];
				var blendMode;
				if(quadBatch.get_blendMode() == starling.display.BlendMode.AUTO) blendMode = support.get_blendMode(); else blendMode = quadBatch.get_blendMode();
				quadBatch.renderCustom(mvpMatrix,alpha,blendMode);
			}
		} else starling.display.DisplayObjectContainer.prototype.render.call(this,support,parentAlpha);
		if(this.mClipRect != null) support.popClipRect();
	}
	,__class__: starling.display.Sprite
	,__properties__: $extend(starling.display.DisplayObjectContainer.prototype.__properties__,{set_clipRect:"set_clipRect",get_clipRect:"get_clipRect",get_isFlattened:"get_isFlattened"})
});
var Game = function() {
	starling.display.Sprite.call(this);
	this.sceneMap = new haxe.ds.StringMap();
	var v = scenes.TextureScene;
	this.sceneMap.set("Textures",v);
	v;
	var v1 = scenes.TouchScene;
	this.sceneMap.set("Multitouch",v1);
	v1;
	var v2 = scenes.TextScene;
	this.sceneMap.set("TextFields",v2);
	v2;
	var v3 = scenes.AnimationScene;
	this.sceneMap.set("Animations",v3);
	v3;
	var v4 = scenes.CustomHitTestScene;
	this.sceneMap.set("Custom hit-test",v4);
	v4;
	var v5 = scenes.MovieScene;
	this.sceneMap.set("Movie Clip",v5);
	v5;
	var v6 = scenes.FilterScene;
	this.sceneMap.set("Filters",v6);
	v6;
	var v7 = scenes.BlendModeScene;
	this.sceneMap.set("Blend Modes",v7);
	v7;
	var v8 = scenes.RenderTextureScene;
	this.sceneMap.set("Render Texture",v8);
	v8;
	var v9 = scenes.BenchmarkScene;
	this.sceneMap.set("Benchmark",v9);
	v9;
	var v10 = scenes.MaskScene;
	this.sceneMap.set("Masks",v10);
	v10;
	var v11 = scenes.Sprite3DScene;
	this.sceneMap.set("Sprite 3D",v11);
	v11;
	this.sceneInstanceMap = new haxe.ds.StringMap();
};
$hxClasses["Game"] = Game;
Game.__name__ = ["Game"];
Game.__properties__ = {get_assets:"get_assets"}
Game.sAssets = null;
Game.assets = null;
Game.get_assets = function() {
	return Game.sAssets;
};
Game.__super__ = starling.display.Sprite;
Game.prototype = $extend(starling.display.Sprite.prototype,{
	mMainMenu: null
	,mCurrentScene: null
	,sceneMap: null
	,sceneInstanceMap: null
	,start: function(assets) {
		Game.sAssets = assets;
		var texture = assets.getTexture("background");
		this.addChild(new starling.display.Image(texture));
		this.showMainMenu();
		this.addEventListener(starling.events.Event.TRIGGERED,$bind(this,this.onButtonTriggered));
		this.get_stage().addEventListener(starling.events.KeyboardEvent.KEY_DOWN,$bind(this,this.onKey));
	}
	,showMainMenu: function() {
		openfl.system.System.gc();
		if(this.mMainMenu == null) this.mMainMenu = new MainMenu();
		this.addChild(this.mMainMenu);
	}
	,onKey: function(event) {
		if((function($this) {
			var $r;
			var a = event.get_keyCode();
			$r = (function($this) {
				var $r;
				var $int = a;
				$r = $int < 0?4294967296.0 + $int:$int + 0.0;
				return $r;
			}($this)) == 32;
			return $r;
		}(this))) starling.core.Starling.get_current().set_showStats(!starling.core.Starling.get_current().get_showStats()); else if((function($this) {
			var $r;
			var a1 = event.get_keyCode();
			$r = (function($this) {
				var $r;
				var int1 = a1;
				$r = int1 < 0?4294967296.0 + int1:int1 + 0.0;
				return $r;
			}($this)) == 88;
			return $r;
		}(this))) starling.core.Starling.get_Context().dispose();
	}
	,onButtonTriggered: function(event) {
		var button = event.get_target();
		if(button.get_name() == "backButton") this.closeScene(); else if(button.get_name() != "modeDraw" && button.get_name() != "startBenchmark" && button.get_name() != "switchBlend" && button.get_name() != "switchFilers" && button.get_name() != "startAnimation" && button.get_name() != "delayedCall" && button.get_name() != "customHit") this.showScene(button.get_name());
	}
	,closeScene: function() {
		if(this.mCurrentScene.get_parent() != null) this.mCurrentScene.get_parent().removeChild(this.mCurrentScene);
		this.showMainMenu();
	}
	,showScene: function(name) {
		if(this.sceneInstanceMap.get(name) == null) {
			var sceneClass = this.sceneMap.get(name);
			this.mCurrentScene = Type.createInstance(sceneClass,[]);
			var v = this.mCurrentScene;
			this.sceneInstanceMap.set(name,v);
			v;
		} else this.mCurrentScene = this.sceneInstanceMap.get(name);
		this.mMainMenu.removeFromParent();
		this.addChild(this.mCurrentScene);
	}
	,__class__: Game
});
var HxOverrides = function() { };
$hxClasses["HxOverrides"] = HxOverrides;
HxOverrides.__name__ = ["HxOverrides"];
HxOverrides.dateStr = function(date) {
	var m = date.getMonth() + 1;
	var d = date.getDate();
	var h = date.getHours();
	var mi = date.getMinutes();
	var s = date.getSeconds();
	return date.getFullYear() + "-" + (m < 10?"0" + m:"" + m) + "-" + (d < 10?"0" + d:"" + d) + " " + (h < 10?"0" + h:"" + h) + ":" + (mi < 10?"0" + mi:"" + mi) + ":" + (s < 10?"0" + s:"" + s);
};
HxOverrides.strDate = function(s) {
	var _g = s.length;
	switch(_g) {
	case 8:
		var k = s.split(":");
		var d = new Date();
		d.setTime(0);
		d.setUTCHours(k[0]);
		d.setUTCMinutes(k[1]);
		d.setUTCSeconds(k[2]);
		return d;
	case 10:
		var k1 = s.split("-");
		return new Date(k1[0],k1[1] - 1,k1[2],0,0,0);
	case 19:
		var k2 = s.split(" ");
		var y = k2[0].split("-");
		var t = k2[1].split(":");
		return new Date(y[0],y[1] - 1,y[2],t[0],t[1],t[2]);
	default:
		throw "Invalid date format : " + s;
	}
};
HxOverrides.cca = function(s,index) {
	var x = s.charCodeAt(index);
	if(x != x) return undefined;
	return x;
};
HxOverrides.substr = function(s,pos,len) {
	if(pos != null && pos != 0 && len != null && len < 0) return "";
	if(len == null) len = s.length;
	if(pos < 0) {
		pos = s.length + pos;
		if(pos < 0) pos = 0;
	} else if(len < 0) len = s.length + len - pos;
	return s.substr(pos,len);
};
HxOverrides.indexOf = function(a,obj,i) {
	var len = a.length;
	if(i < 0) {
		i += len;
		if(i < 0) i = 0;
	}
	while(i < len) {
		if(a[i] === obj) return i;
		i++;
	}
	return -1;
};
HxOverrides.lastIndexOf = function(a,obj,i) {
	var len = a.length;
	if(i >= len) i = len - 1; else if(i < 0) i += len;
	while(i >= 0) {
		if(a[i] === obj) return i;
		i--;
	}
	return -1;
};
HxOverrides.remove = function(a,obj) {
	var i = HxOverrides.indexOf(a,obj,0);
	if(i == -1) return false;
	a.splice(i,1);
	return true;
};
HxOverrides.iter = function(a) {
	return { cur : 0, arr : a, hasNext : function() {
		return this.cur < this.arr.length;
	}, next : function() {
		return this.arr[this.cur++];
	}};
};
var IntIterator = function(min,max) {
	this.min = min;
	this.max = max;
};
$hxClasses["IntIterator"] = IntIterator;
IntIterator.__name__ = ["IntIterator"];
IntIterator.prototype = {
	min: null
	,max: null
	,hasNext: function() {
		return this.min < this.max;
	}
	,next: function() {
		return this.min++;
	}
	,__class__: IntIterator
};
var List = function() {
	this.length = 0;
};
$hxClasses["List"] = List;
List.__name__ = ["List"];
List.prototype = {
	h: null
	,q: null
	,length: null
	,add: function(item) {
		var x = [item];
		if(this.h == null) this.h = x; else this.q[1] = x;
		this.q = x;
		this.length++;
	}
	,push: function(item) {
		var x = [item,this.h];
		this.h = x;
		if(this.q == null) this.q = x;
		this.length++;
	}
	,first: function() {
		if(this.h == null) return null; else return this.h[0];
	}
	,last: function() {
		if(this.q == null) return null; else return this.q[0];
	}
	,pop: function() {
		if(this.h == null) return null;
		var x = this.h[0];
		this.h = this.h[1];
		if(this.h == null) this.q = null;
		this.length--;
		return x;
	}
	,isEmpty: function() {
		return this.h == null;
	}
	,clear: function() {
		this.h = null;
		this.q = null;
		this.length = 0;
	}
	,remove: function(v) {
		var prev = null;
		var l = this.h;
		while(l != null) {
			if(l[0] == v) {
				if(prev == null) this.h = l[1]; else prev[1] = l[1];
				if(this.q == l) this.q = prev;
				this.length--;
				return true;
			}
			prev = l;
			l = l[1];
		}
		return false;
	}
	,iterator: function() {
		return { h : this.h, hasNext : function() {
			return this.h != null;
		}, next : function() {
			if(this.h == null) return null;
			var x = this.h[0];
			this.h = this.h[1];
			return x;
		}};
	}
	,toString: function() {
		var s = new StringBuf();
		var first = true;
		var l = this.h;
		s.b += "{";
		while(l != null) {
			if(first) first = false; else s.b += ", ";
			s.add(Std.string(l[0]));
			l = l[1];
		}
		s.b += "}";
		return s.b;
	}
	,join: function(sep) {
		var s = new StringBuf();
		var first = true;
		var l = this.h;
		while(l != null) {
			if(first) first = false; else if(sep == null) s.b += "null"; else s.b += "" + sep;
			s.b += Std.string(l[0]);
			l = l[1];
		}
		return s.b;
	}
	,filter: function(f) {
		var l2 = new List();
		var l = this.h;
		while(l != null) {
			var v = l[0];
			l = l[1];
			if(f(v)) l2.add(v);
		}
		return l2;
	}
	,map: function(f) {
		var b = new List();
		var l = this.h;
		while(l != null) {
			var v = l[0];
			l = l[1];
			b.add(f(v));
		}
		return b;
	}
	,__class__: List
};
var MainMenu = function() {
	starling.display.Sprite.call(this);
	this.init();
};
$hxClasses["MainMenu"] = MainMenu;
MainMenu.__name__ = ["MainMenu"];
MainMenu.__super__ = starling.display.Sprite;
MainMenu.prototype = $extend(starling.display.Sprite.prototype,{
	init: function() {
		var scenesToCreate = [["Textures",scenes.TextureScene,true],["Multitouch",scenes.TouchScene,true],["TextFields",scenes.TextScene,true],["Animations",scenes.AnimationScene,true],["Custom hit-test",scenes.CustomHitTestScene,true],["Movie Clip",scenes.MovieScene,true],["Filters",scenes.FilterScene,false],["Blend Modes",scenes.BlendModeScene,true],["Render Texture",scenes.RenderTextureScene,false],["Benchmark",scenes.BenchmarkScene,true],["Masks",scenes.MaskScene,false],["Sprite 3D",scenes.Sprite3DScene,true]];
		var bmd = openfl.Assets.getBitmapData("assets/textures/1x/jsHeader.png");
		var logo = new starling.display.Image(starling.textures.Texture.fromBitmapData(bmd));
		this.addChild(logo);
		var buttonTexture = Game.get_assets().getTexture("button_medium");
		var count = 0;
		var _g = 0;
		while(_g < scenesToCreate.length) {
			var sceneToCreate = scenesToCreate[_g];
			++_g;
			var sceneTitle = sceneToCreate[0];
			var sceneClass = sceneToCreate[1];
			var active = sceneToCreate[2];
			var button = new starling.display.Button(buttonTexture,sceneTitle);
			button.set_x(count % 2 == 0?28:167);
			button.set_y(155 + Math.floor(count / 2) * 46);
			button.set_name(sceneTitle);
			this.addChild(button);
			button.set_touchable(active);
			if(active == false) button.set_alpha(0.4);
			if(scenesToCreate.length % 2 != 0 && count % 2 == 1) {
				var _g1 = button;
				_g1.set_y(_g1.get_y() + 24);
			}
			++count;
		}
		var driverInfo = starling.core.Starling.get_Context().driverInfo;
		var infoText = new starling.text.TextField(310,64,driverInfo,"Verdana",10);
		infoText.set_x(5);
		infoText.set_y(475 - infoText.get_height());
		infoText.set_vAlign(starling.utils.VAlign.BOTTOM);
		infoText.addEventListener(starling.events.TouchEvent.TOUCH,$bind(this,this.onInfoTextTouched));
		this.addChildAt(infoText,0);
	}
	,onInfoTextTouched: function(event) {
		var endTouch = event.getTouch(this,starling.events.TouchPhase.BEGAN);
		if(endTouch != null) starling.core.Starling.get_current().set_showStats(!starling.core.Starling.get_current().get_showStats());
	}
	,__class__: MainMenu
});
var _Map = {};
_Map.Map_Impl_ = function() { };
$hxClasses["_Map.Map_Impl_"] = _Map.Map_Impl_;
_Map.Map_Impl_.__name__ = ["_Map","Map_Impl_"];
_Map.Map_Impl_._new = null;
_Map.Map_Impl_.set = function(this1,key,value) {
	this1.set(key,value);
};
_Map.Map_Impl_.get = function(this1,key) {
	return this1.get(key);
};
_Map.Map_Impl_.exists = function(this1,key) {
	return this1.exists(key);
};
_Map.Map_Impl_.remove = function(this1,key) {
	return this1.remove(key);
};
_Map.Map_Impl_.keys = function(this1) {
	return this1.keys();
};
_Map.Map_Impl_.iterator = function(this1) {
	return this1.iterator();
};
_Map.Map_Impl_.toString = function(this1) {
	return this1.toString();
};
_Map.Map_Impl_.arrayWrite = function(this1,k,v) {
	this1.set(k,v);
	return v;
};
_Map.Map_Impl_.toStringMap = function(t) {
	return new haxe.ds.StringMap();
};
_Map.Map_Impl_.toIntMap = function(t) {
	return new haxe.ds.IntMap();
};
_Map.Map_Impl_.toEnumValueMapMap = function(t) {
	return new haxe.ds.EnumValueMap();
};
_Map.Map_Impl_.toObjectMap = function(t) {
	return new haxe.ds.ObjectMap();
};
_Map.Map_Impl_.fromStringMap = function(map) {
	return map;
};
_Map.Map_Impl_.fromIntMap = function(map) {
	return map;
};
_Map.Map_Impl_.fromObjectMap = function(map) {
	return map;
};
var IMap = function() { };
$hxClasses["IMap"] = IMap;
IMap.__name__ = ["IMap"];
IMap.prototype = {
	get: null
	,set: null
	,exists: null
	,remove: null
	,keys: null
	,iterator: null
	,toString: null
	,__class__: IMap
};
Math.__name__ = ["Math"];
var NMEPreloader = function() {
	openfl.display.Sprite.call(this);
	var backgroundColor = this.getBackgroundColor();
	var r = backgroundColor >> 16 & 255;
	var g = backgroundColor >> 8 & 255;
	var b = backgroundColor & 255;
	var perceivedLuminosity = 0.299 * r + 0.587 * g + 0.114 * b;
	var color = 0;
	if(perceivedLuminosity < 70) color = 16777215;
	var x = 30;
	var height = 7;
	var y = this.getHeight() / 2 - height / 2;
	var width = this.getWidth() - x * 2;
	var padding = 2;
	this.outline = new openfl.display.Sprite();
	this.outline.get_graphics().beginFill(color,0.07);
	this.outline.get_graphics().drawRect(0,0,width,height);
	this.outline.set_x(x);
	this.outline.set_y(y);
	this.addChild(this.outline);
	this.progress = new openfl.display.Sprite();
	this.progress.get_graphics().beginFill(color,0.35);
	this.progress.get_graphics().drawRect(0,0,width - padding * 2,height - padding * 2);
	this.progress.set_x(x + padding);
	this.progress.set_y(y + padding);
	this.progress.set_scaleX(0);
	this.addChild(this.progress);
};
$hxClasses["NMEPreloader"] = NMEPreloader;
NMEPreloader.__name__ = ["NMEPreloader"];
NMEPreloader.__super__ = openfl.display.Sprite;
NMEPreloader.prototype = $extend(openfl.display.Sprite.prototype,{
	outline: null
	,progress: null
	,getBackgroundColor: function() {
		return 0;
	}
	,getHeight: function() {
		var height = 480;
		if(height > 0) return height; else return openfl.Lib.current.stage.stageHeight;
	}
	,getWidth: function() {
		var width = 320;
		if(width > 0) return width; else return openfl.Lib.current.stage.stageWidth;
	}
	,onInit: function() {
	}
	,onLoaded: function() {
		this.dispatchEvent(new openfl.events.Event(openfl.events.Event.COMPLETE));
	}
	,onUpdate: function(bytesLoaded,bytesTotal) {
		var percentLoaded = bytesLoaded / bytesTotal;
		if(percentLoaded > 1) percentLoaded = 1;
		this.progress.set_scaleX(percentLoaded);
	}
	,__class__: NMEPreloader
});
var Reflect = function() { };
$hxClasses["Reflect"] = Reflect;
Reflect.__name__ = ["Reflect"];
Reflect.hasField = function(o,field) {
	return Object.prototype.hasOwnProperty.call(o,field);
};
Reflect.field = function(o,field) {
	try {
		return o[field];
	} catch( e ) {
		return null;
	}
};
Reflect.setField = function(o,field,value) {
	o[field] = value;
};
Reflect.getProperty = function(o,field) {
	var tmp;
	if(o == null) return null; else if(o.__properties__ && (tmp = o.__properties__["get_" + field])) return o[tmp](); else return o[field];
};
Reflect.setProperty = function(o,field,value) {
	var tmp;
	if(o.__properties__ && (tmp = o.__properties__["set_" + field])) o[tmp](value); else o[field] = value;
};
Reflect.callMethod = function(o,func,args) {
	return func.apply(o,args);
};
Reflect.fields = function(o) {
	var a = [];
	if(o != null) {
		var hasOwnProperty = Object.prototype.hasOwnProperty;
		for( var f in o ) {
		if(f != "__id__" && f != "hx__closures__" && hasOwnProperty.call(o,f)) a.push(f);
		}
	}
	return a;
};
Reflect.isFunction = function(f) {
	return typeof(f) == "function" && !(f.__name__ || f.__ename__);
};
Reflect.compare = function(a,b) {
	if(a == b) return 0; else if(a > b) return 1; else return -1;
};
Reflect.compareMethods = function(f1,f2) {
	if(f1 == f2) return true;
	if(!Reflect.isFunction(f1) || !Reflect.isFunction(f2)) return false;
	return f1.scope == f2.scope && f1.method == f2.method && f1.method != null;
};
Reflect.isObject = function(v) {
	if(v == null) return false;
	var t = typeof(v);
	return t == "string" || t == "object" && v.__enum__ == null || t == "function" && (v.__name__ || v.__ename__) != null;
};
Reflect.isEnumValue = function(v) {
	return v != null && v.__enum__ != null;
};
Reflect.deleteField = function(o,field) {
	if(!Object.prototype.hasOwnProperty.call(o,field)) return false;
	delete(o[field]);
	return true;
};
Reflect.copy = function(o) {
	var o2 = { };
	var _g = 0;
	var _g1 = Reflect.fields(o);
	while(_g < _g1.length) {
		var f = _g1[_g];
		++_g;
		Reflect.setField(o2,f,Reflect.field(o,f));
	}
	return o2;
};
Reflect.makeVarArgs = function(f) {
	return function() {
		var a = Array.prototype.slice.call(arguments);
		return f(a);
	};
};
var Std = function() { };
$hxClasses["Std"] = Std;
Std.__name__ = ["Std"];
Std["is"] = function(v,t) {
	return js.Boot.__instanceof(v,t);
};
Std.instance = function(value,c) {
	if((value instanceof c)) return value; else return null;
};
Std.string = function(s) {
	return js.Boot.__string_rec(s,"");
};
Std["int"] = function(x) {
	return x | 0;
};
Std.parseInt = function(x) {
	var v = parseInt(x,10);
	if(v == 0 && (HxOverrides.cca(x,1) == 120 || HxOverrides.cca(x,1) == 88)) v = parseInt(x);
	if(isNaN(v)) return null;
	return v;
};
Std.parseFloat = function(x) {
	return parseFloat(x);
};
Std.random = function(x) {
	if(x <= 0) return 0; else return Math.floor(Math.random() * x);
};
var StringBuf = function() {
	this.b = "";
};
$hxClasses["StringBuf"] = StringBuf;
StringBuf.__name__ = ["StringBuf"];
StringBuf.prototype = {
	b: null
	,get_length: function() {
		return this.b.length;
	}
	,add: function(x) {
		this.b += Std.string(x);
	}
	,addChar: function(c) {
		this.b += String.fromCharCode(c);
	}
	,addSub: function(s,pos,len) {
		if(len == null) this.b += HxOverrides.substr(s,pos,null); else this.b += HxOverrides.substr(s,pos,len);
	}
	,toString: function() {
		return this.b;
	}
	,__class__: StringBuf
	,__properties__: {get_length:"get_length"}
};
var StringTools = function() { };
$hxClasses["StringTools"] = StringTools;
StringTools.__name__ = ["StringTools"];
StringTools.urlEncode = function(s) {
	return encodeURIComponent(s);
};
StringTools.urlDecode = function(s) {
	return decodeURIComponent(s.split("+").join(" "));
};
StringTools.htmlEscape = function(s,quotes) {
	s = s.split("&").join("&amp;").split("<").join("&lt;").split(">").join("&gt;");
	if(quotes) return s.split("\"").join("&quot;").split("'").join("&#039;"); else return s;
};
StringTools.htmlUnescape = function(s) {
	return s.split("&gt;").join(">").split("&lt;").join("<").split("&quot;").join("\"").split("&#039;").join("'").split("&amp;").join("&");
};
StringTools.startsWith = function(s,start) {
	return s.length >= start.length && HxOverrides.substr(s,0,start.length) == start;
};
StringTools.endsWith = function(s,end) {
	var elen = end.length;
	var slen = s.length;
	return slen >= elen && HxOverrides.substr(s,slen - elen,elen) == end;
};
StringTools.isSpace = function(s,pos) {
	var c = HxOverrides.cca(s,pos);
	return c > 8 && c < 14 || c == 32;
};
StringTools.ltrim = function(s) {
	var l = s.length;
	var r = 0;
	while(r < l && StringTools.isSpace(s,r)) r++;
	if(r > 0) return HxOverrides.substr(s,r,l - r); else return s;
};
StringTools.rtrim = function(s) {
	var l = s.length;
	var r = 0;
	while(r < l && StringTools.isSpace(s,l - r - 1)) r++;
	if(r > 0) return HxOverrides.substr(s,0,l - r); else return s;
};
StringTools.trim = function(s) {
	return StringTools.ltrim(StringTools.rtrim(s));
};
StringTools.lpad = function(s,c,l) {
	if(c.length <= 0) return s;
	while(s.length < l) s = c + s;
	return s;
};
StringTools.rpad = function(s,c,l) {
	if(c.length <= 0) return s;
	while(s.length < l) s = s + c;
	return s;
};
StringTools.replace = function(s,sub,by) {
	return s.split(sub).join(by);
};
StringTools.hex = function(n,digits) {
	var s = "";
	var hexChars = "0123456789ABCDEF";
	do {
		s = hexChars.charAt(n & 15) + s;
		n >>>= 4;
	} while(n > 0);
	if(digits != null) while(s.length < digits) s = "0" + s;
	return s;
};
StringTools.fastCodeAt = function(s,index) {
	return s.charCodeAt(index);
};
StringTools.isEof = function(c) {
	return c != c;
};
var ValueType = $hxClasses["ValueType"] = { __ename__ : ["ValueType"], __constructs__ : ["TNull","TInt","TFloat","TBool","TObject","TFunction","TClass","TEnum","TUnknown"] };
ValueType.TNull = ["TNull",0];
ValueType.TNull.toString = $estr;
ValueType.TNull.__enum__ = ValueType;
ValueType.TInt = ["TInt",1];
ValueType.TInt.toString = $estr;
ValueType.TInt.__enum__ = ValueType;
ValueType.TFloat = ["TFloat",2];
ValueType.TFloat.toString = $estr;
ValueType.TFloat.__enum__ = ValueType;
ValueType.TBool = ["TBool",3];
ValueType.TBool.toString = $estr;
ValueType.TBool.__enum__ = ValueType;
ValueType.TObject = ["TObject",4];
ValueType.TObject.toString = $estr;
ValueType.TObject.__enum__ = ValueType;
ValueType.TFunction = ["TFunction",5];
ValueType.TFunction.toString = $estr;
ValueType.TFunction.__enum__ = ValueType;
ValueType.TClass = function(c) { var $x = ["TClass",6,c]; $x.__enum__ = ValueType; $x.toString = $estr; return $x; };
ValueType.TEnum = function(e) { var $x = ["TEnum",7,e]; $x.__enum__ = ValueType; $x.toString = $estr; return $x; };
ValueType.TUnknown = ["TUnknown",8];
ValueType.TUnknown.toString = $estr;
ValueType.TUnknown.__enum__ = ValueType;
ValueType.__empty_constructs__ = [ValueType.TNull,ValueType.TInt,ValueType.TFloat,ValueType.TBool,ValueType.TObject,ValueType.TFunction,ValueType.TUnknown];
var Type = function() { };
$hxClasses["Type"] = Type;
Type.__name__ = ["Type"];
Type.getClass = function(o) {
	if(o == null) return null;
	return js.Boot.getClass(o);
};
Type.getEnum = function(o) {
	if(o == null) return null;
	return o.__enum__;
};
Type.getSuperClass = function(c) {
	return c.__super__;
};
Type.getClassName = function(c) {
	var a = c.__name__;
	return a.join(".");
};
Type.getEnumName = function(e) {
	var a = e.__ename__;
	return a.join(".");
};
Type.resolveClass = function(name) {
	var cl = $hxClasses[name];
	if(cl == null || !cl.__name__) return null;
	return cl;
};
Type.resolveEnum = function(name) {
	var e = $hxClasses[name];
	if(e == null || !e.__ename__) return null;
	return e;
};
Type.createInstance = function(cl,args) {
	var _g = args.length;
	switch(_g) {
	case 0:
		return new cl();
	case 1:
		return new cl(args[0]);
	case 2:
		return new cl(args[0],args[1]);
	case 3:
		return new cl(args[0],args[1],args[2]);
	case 4:
		return new cl(args[0],args[1],args[2],args[3]);
	case 5:
		return new cl(args[0],args[1],args[2],args[3],args[4]);
	case 6:
		return new cl(args[0],args[1],args[2],args[3],args[4],args[5]);
	case 7:
		return new cl(args[0],args[1],args[2],args[3],args[4],args[5],args[6]);
	case 8:
		return new cl(args[0],args[1],args[2],args[3],args[4],args[5],args[6],args[7]);
	default:
		throw "Too many arguments";
	}
	return null;
};
Type.createEmptyInstance = function(cl) {
	function empty() {}; empty.prototype = cl.prototype;
	return new empty();
};
Type.createEnum = function(e,constr,params) {
	var f = Reflect.field(e,constr);
	if(f == null) throw "No such constructor " + constr;
	if(Reflect.isFunction(f)) {
		if(params == null) throw "Constructor " + constr + " need parameters";
		return f.apply(e,params);
	}
	if(params != null && params.length != 0) throw "Constructor " + constr + " does not need parameters";
	return f;
};
Type.createEnumIndex = function(e,index,params) {
	var c = e.__constructs__[index];
	if(c == null) throw index + " is not a valid enum constructor index";
	return Type.createEnum(e,c,params);
};
Type.getInstanceFields = function(c) {
	var a = [];
	for(var i in c.prototype) a.push(i);
	HxOverrides.remove(a,"__class__");
	HxOverrides.remove(a,"__properties__");
	return a;
};
Type.getClassFields = function(c) {
	var a = Reflect.fields(c);
	HxOverrides.remove(a,"__name__");
	HxOverrides.remove(a,"__interfaces__");
	HxOverrides.remove(a,"__properties__");
	HxOverrides.remove(a,"__super__");
	HxOverrides.remove(a,"prototype");
	return a;
};
Type.getEnumConstructs = function(e) {
	var a = e.__constructs__;
	return a.slice();
};
Type["typeof"] = function(v) {
	var _g = typeof(v);
	switch(_g) {
	case "boolean":
		return ValueType.TBool;
	case "string":
		return ValueType.TClass(String);
	case "number":
		if(Math.ceil(v) == v % 2147483648.0) return ValueType.TInt;
		return ValueType.TFloat;
	case "object":
		if(v == null) return ValueType.TNull;
		var e = v.__enum__;
		if(e != null) return ValueType.TEnum(e);
		var c = js.Boot.getClass(v);
		if(c != null) return ValueType.TClass(c);
		return ValueType.TObject;
	case "function":
		if(v.__name__ || v.__ename__) return ValueType.TObject;
		return ValueType.TFunction;
	case "undefined":
		return ValueType.TNull;
	default:
		return ValueType.TUnknown;
	}
};
Type.enumEq = function(a,b) {
	if(a == b) return true;
	try {
		if(a[0] != b[0]) return false;
		var _g1 = 2;
		var _g = a.length;
		while(_g1 < _g) {
			var i = _g1++;
			if(!Type.enumEq(a[i],b[i])) return false;
		}
		var e = a.__enum__;
		if(e != b.__enum__ || e == null) return false;
	} catch( e1 ) {
		return false;
	}
	return true;
};
Type.enumConstructor = function(e) {
	return e[0];
};
Type.enumParameters = function(e) {
	return e.slice(2);
};
Type.enumIndex = function(e) {
	return e[1];
};
Type.allEnums = function(e) {
	return e.__empty_constructs__;
};
var _UInt = {};
_UInt.UInt_Impl_ = function() { };
$hxClasses["_UInt.UInt_Impl_"] = _UInt.UInt_Impl_;
_UInt.UInt_Impl_.__name__ = ["_UInt","UInt_Impl_"];
_UInt.UInt_Impl_.add = function(a,b) {
	return a + b;
};
_UInt.UInt_Impl_.div = function(a,b) {
	return (function($this) {
		var $r;
		var $int = a;
		$r = $int < 0?4294967296.0 + $int:$int + 0.0;
		return $r;
	}(this)) / (function($this) {
		var $r;
		var int1 = b;
		$r = int1 < 0?4294967296.0 + int1:int1 + 0.0;
		return $r;
	}(this));
};
_UInt.UInt_Impl_.mul = function(a,b) {
	return a * b;
};
_UInt.UInt_Impl_.sub = function(a,b) {
	return a - b;
};
_UInt.UInt_Impl_.gt = function(a,b) {
	var aNeg = a < 0;
	var bNeg = b < 0;
	if(aNeg != bNeg) return aNeg; else return a > b;
};
_UInt.UInt_Impl_.gte = function(a,b) {
	var aNeg = a < 0;
	var bNeg = b < 0;
	if(aNeg != bNeg) return aNeg; else return a >= b;
};
_UInt.UInt_Impl_.lt = function(a,b) {
	var aNeg = b < 0;
	var bNeg = a < 0;
	if(aNeg != bNeg) return aNeg; else return b > a;
};
_UInt.UInt_Impl_.lte = function(a,b) {
	var aNeg = b < 0;
	var bNeg = a < 0;
	if(aNeg != bNeg) return aNeg; else return b >= a;
};
_UInt.UInt_Impl_.and = function(a,b) {
	return a & b;
};
_UInt.UInt_Impl_.or = function(a,b) {
	return a | b;
};
_UInt.UInt_Impl_.xor = function(a,b) {
	return a ^ b;
};
_UInt.UInt_Impl_.shl = function(a,b) {
	return a << b;
};
_UInt.UInt_Impl_.shr = function(a,b) {
	return a >> b;
};
_UInt.UInt_Impl_.ushr = function(a,b) {
	return a >>> b;
};
_UInt.UInt_Impl_.mod = function(a,b) {
	return (function($this) {
		var $r;
		var $int = a;
		$r = $int < 0?4294967296.0 + $int:$int + 0.0;
		return $r;
	}(this)) % (function($this) {
		var $r;
		var int1 = b;
		$r = int1 < 0?4294967296.0 + int1:int1 + 0.0;
		return $r;
	}(this)) | 0;
};
_UInt.UInt_Impl_.addWithFloat = function(a,b) {
	return (function($this) {
		var $r;
		var $int = a;
		$r = $int < 0?4294967296.0 + $int:$int + 0.0;
		return $r;
	}(this)) + b;
};
_UInt.UInt_Impl_.mulWithFloat = function(a,b) {
	return (function($this) {
		var $r;
		var $int = a;
		$r = $int < 0?4294967296.0 + $int:$int + 0.0;
		return $r;
	}(this)) * b;
};
_UInt.UInt_Impl_.divFloat = function(a,b) {
	return (function($this) {
		var $r;
		var $int = a;
		$r = $int < 0?4294967296.0 + $int:$int + 0.0;
		return $r;
	}(this)) / b;
};
_UInt.UInt_Impl_.floatDiv = function(a,b) {
	return a / (function($this) {
		var $r;
		var $int = b;
		$r = $int < 0?4294967296.0 + $int:$int + 0.0;
		return $r;
	}(this));
};
_UInt.UInt_Impl_.subFloat = function(a,b) {
	return (function($this) {
		var $r;
		var $int = a;
		$r = $int < 0?4294967296.0 + $int:$int + 0.0;
		return $r;
	}(this)) - b;
};
_UInt.UInt_Impl_.floatSub = function(a,b) {
	return a - (function($this) {
		var $r;
		var $int = b;
		$r = $int < 0?4294967296.0 + $int:$int + 0.0;
		return $r;
	}(this));
};
_UInt.UInt_Impl_.gtFloat = function(a,b) {
	return (function($this) {
		var $r;
		var $int = a;
		$r = $int < 0?4294967296.0 + $int:$int + 0.0;
		return $r;
	}(this)) > b;
};
_UInt.UInt_Impl_.equalsFloat = function(a,b) {
	return (function($this) {
		var $r;
		var $int = a;
		$r = $int < 0?4294967296.0 + $int:$int + 0.0;
		return $r;
	}(this)) == b;
};
_UInt.UInt_Impl_.notEqualsFloat = function(a,b) {
	return (function($this) {
		var $r;
		var $int = a;
		$r = $int < 0?4294967296.0 + $int:$int + 0.0;
		return $r;
	}(this)) != b;
};
_UInt.UInt_Impl_.gteFloat = function(a,b) {
	return (function($this) {
		var $r;
		var $int = a;
		$r = $int < 0?4294967296.0 + $int:$int + 0.0;
		return $r;
	}(this)) >= b;
};
_UInt.UInt_Impl_.floatGt = function(a,b) {
	return a > (function($this) {
		var $r;
		var $int = b;
		$r = $int < 0?4294967296.0 + $int:$int + 0.0;
		return $r;
	}(this));
};
_UInt.UInt_Impl_.floatGte = function(a,b) {
	return a >= (function($this) {
		var $r;
		var $int = b;
		$r = $int < 0?4294967296.0 + $int:$int + 0.0;
		return $r;
	}(this));
};
_UInt.UInt_Impl_.ltFloat = function(a,b) {
	return (function($this) {
		var $r;
		var $int = a;
		$r = $int < 0?4294967296.0 + $int:$int + 0.0;
		return $r;
	}(this)) < b;
};
_UInt.UInt_Impl_.lteFloat = function(a,b) {
	return (function($this) {
		var $r;
		var $int = a;
		$r = $int < 0?4294967296.0 + $int:$int + 0.0;
		return $r;
	}(this)) <= b;
};
_UInt.UInt_Impl_.floatLt = function(a,b) {
	return a < (function($this) {
		var $r;
		var $int = b;
		$r = $int < 0?4294967296.0 + $int:$int + 0.0;
		return $r;
	}(this));
};
_UInt.UInt_Impl_.floatLte = function(a,b) {
	return a <= (function($this) {
		var $r;
		var $int = b;
		$r = $int < 0?4294967296.0 + $int:$int + 0.0;
		return $r;
	}(this));
};
_UInt.UInt_Impl_.modFloat = function(a,b) {
	return (function($this) {
		var $r;
		var $int = a;
		$r = $int < 0?4294967296.0 + $int:$int + 0.0;
		return $r;
	}(this)) % b;
};
_UInt.UInt_Impl_.floatMod = function(a,b) {
	return a % (function($this) {
		var $r;
		var $int = b;
		$r = $int < 0?4294967296.0 + $int:$int + 0.0;
		return $r;
	}(this));
};
_UInt.UInt_Impl_.negBits = function(this1) {
	return ~this1;
};
_UInt.UInt_Impl_.prefixIncrement = function(this1) {
	return ++this1;
};
_UInt.UInt_Impl_.postfixIncrement = function(this1) {
	return this1++;
};
_UInt.UInt_Impl_.prefixDecrement = function(this1) {
	return --this1;
};
_UInt.UInt_Impl_.postfixDecrement = function(this1) {
	return this1--;
};
_UInt.UInt_Impl_.toString = function(this1,radix) {
	return Std.string((function($this) {
		var $r;
		var $int = this1;
		$r = $int < 0?4294967296.0 + $int:$int + 0.0;
		return $r;
	}(this)));
};
_UInt.UInt_Impl_.toInt = function(this1) {
	return this1;
};
_UInt.UInt_Impl_.toFloat = function(this1) {
	var $int = this1;
	if($int < 0) return 4294967296.0 + $int; else return $int + 0.0;
};
var XmlType = $hxClasses["XmlType"] = { __ename__ : ["XmlType"], __constructs__ : [] };
XmlType.__empty_constructs__ = [];
var Xml = function() {
};
$hxClasses["Xml"] = Xml;
Xml.__name__ = ["Xml"];
Xml.Element = null;
Xml.PCData = null;
Xml.CData = null;
Xml.Comment = null;
Xml.DocType = null;
Xml.ProcessingInstruction = null;
Xml.Document = null;
Xml.parse = function(str) {
	return haxe.xml.Parser.parse(str);
};
Xml.createElement = function(name) {
	var r = new Xml();
	r.nodeType = Xml.Element;
	r._children = new Array();
	r._attributes = new haxe.ds.StringMap();
	r.set_nodeName(name);
	return r;
};
Xml.createPCData = function(data) {
	var r = new Xml();
	r.nodeType = Xml.PCData;
	r.set_nodeValue(data);
	return r;
};
Xml.createCData = function(data) {
	var r = new Xml();
	r.nodeType = Xml.CData;
	r.set_nodeValue(data);
	return r;
};
Xml.createComment = function(data) {
	var r = new Xml();
	r.nodeType = Xml.Comment;
	r.set_nodeValue(data);
	return r;
};
Xml.createDocType = function(data) {
	var r = new Xml();
	r.nodeType = Xml.DocType;
	r.set_nodeValue(data);
	return r;
};
Xml.createProcessingInstruction = function(data) {
	var r = new Xml();
	r.nodeType = Xml.ProcessingInstruction;
	r.set_nodeValue(data);
	return r;
};
Xml.createDocument = function() {
	var r = new Xml();
	r.nodeType = Xml.Document;
	r._children = new Array();
	return r;
};
Xml.prototype = {
	nodeType: null
	,parent: null
	,_nodeName: null
	,_nodeValue: null
	,_attributes: null
	,_children: null
	,_parent: null
	,get_nodeName: function() {
		if(this.nodeType != Xml.Element) throw "bad nodeType";
		return this._nodeName;
	}
	,set_nodeName: function(n) {
		if(this.nodeType != Xml.Element) throw "bad nodeType";
		return this._nodeName = n;
	}
	,get_nodeValue: function() {
		if(this.nodeType == Xml.Element || this.nodeType == Xml.Document) throw "bad nodeType";
		return this._nodeValue;
	}
	,set_nodeValue: function(v) {
		if(this.nodeType == Xml.Element || this.nodeType == Xml.Document) throw "bad nodeType";
		return this._nodeValue = v;
	}
	,get_parent: function() {
		return this._parent;
	}
	,get: function(att) {
		if(this.nodeType != Xml.Element) throw "bad nodeType";
		return this._attributes.get(att);
	}
	,set: function(att,value) {
		if(this.nodeType != Xml.Element) throw "bad nodeType";
		this._attributes.set(att,value);
	}
	,remove: function(att) {
		if(this.nodeType != Xml.Element) throw "bad nodeType";
		this._attributes.remove(att);
	}
	,exists: function(att) {
		if(this.nodeType != Xml.Element) throw "bad nodeType";
		return this._attributes.exists(att);
	}
	,attributes: function() {
		if(this.nodeType != Xml.Element) throw "bad nodeType";
		return this._attributes.keys();
	}
	,iterator: function() {
		if(this._children == null) throw "bad nodetype";
		return { cur : 0, x : this._children, hasNext : function() {
			return this.cur < this.x.length;
		}, next : function() {
			return this.x[this.cur++];
		}};
	}
	,elements: function() {
		if(this._children == null) throw "bad nodetype";
		return { cur : 0, x : this._children, hasNext : function() {
			var k = this.cur;
			var l = this.x.length;
			while(k < l) {
				if(this.x[k].nodeType == Xml.Element) break;
				k += 1;
			}
			this.cur = k;
			return k < l;
		}, next : function() {
			var k1 = this.cur;
			var l1 = this.x.length;
			while(k1 < l1) {
				var n = this.x[k1];
				k1 += 1;
				if(n.nodeType == Xml.Element) {
					this.cur = k1;
					return n;
				}
			}
			return null;
		}};
	}
	,elementsNamed: function(name) {
		if(this._children == null) throw "bad nodetype";
		return { cur : 0, x : this._children, hasNext : function() {
			var k = this.cur;
			var l = this.x.length;
			while(k < l) {
				var n = this.x[k];
				if(n.nodeType == Xml.Element && n._nodeName == name) break;
				k++;
			}
			this.cur = k;
			return k < l;
		}, next : function() {
			var k1 = this.cur;
			var l1 = this.x.length;
			while(k1 < l1) {
				var n1 = this.x[k1];
				k1++;
				if(n1.nodeType == Xml.Element && n1._nodeName == name) {
					this.cur = k1;
					return n1;
				}
			}
			return null;
		}};
	}
	,firstChild: function() {
		if(this._children == null) throw "bad nodetype";
		return this._children[0];
	}
	,firstElement: function() {
		if(this._children == null) throw "bad nodetype";
		var cur = 0;
		var l = this._children.length;
		while(cur < l) {
			var n = this._children[cur];
			if(n.nodeType == Xml.Element) return n;
			cur++;
		}
		return null;
	}
	,addChild: function(x) {
		if(this._children == null) throw "bad nodetype";
		if(x._parent != null) HxOverrides.remove(x._parent._children,x);
		x._parent = this;
		this._children.push(x);
	}
	,removeChild: function(x) {
		if(this._children == null) throw "bad nodetype";
		var b = HxOverrides.remove(this._children,x);
		if(b) x._parent = null;
		return b;
	}
	,insertChild: function(x,pos) {
		if(this._children == null) throw "bad nodetype";
		if(x._parent != null) HxOverrides.remove(x._parent._children,x);
		x._parent = this;
		this._children.splice(pos,0,x);
	}
	,toString: function() {
		if(this.nodeType == Xml.PCData) return StringTools.htmlEscape(this._nodeValue);
		if(this.nodeType == Xml.CData) return "<![CDATA[" + this._nodeValue + "]]>";
		if(this.nodeType == Xml.Comment) return "<!--" + this._nodeValue + "-->";
		if(this.nodeType == Xml.DocType) return "<!DOCTYPE " + this._nodeValue + ">";
		if(this.nodeType == Xml.ProcessingInstruction) return "<?" + this._nodeValue + "?>";
		var s = new StringBuf();
		if(this.nodeType == Xml.Element) {
			s.b += "<";
			s.b += Std.string(this._nodeName);
			var $it0 = this._attributes.keys();
			while( $it0.hasNext() ) {
				var k = $it0.next();
				s.b += " ";
				if(k == null) s.b += "null"; else s.b += "" + k;
				s.b += "=\"";
				s.add(this._attributes.get(k));
				s.b += "\"";
			}
			if(this._children.length == 0) {
				s.b += "/>";
				return s.b;
			}
			s.b += ">";
		}
		var $it1 = this.iterator();
		while( $it1.hasNext() ) {
			var x = $it1.next();
			s.add(x.toString());
		}
		if(this.nodeType == Xml.Element) {
			s.b += "</";
			s.b += Std.string(this._nodeName);
			s.b += ">";
		}
		return s.b;
	}
	,__class__: Xml
	,__properties__: {get_parent:"get_parent",set_nodeValue:"set_nodeValue",get_nodeValue:"get_nodeValue",set_nodeName:"set_nodeName",get_nodeName:"get_nodeName"}
};
var haxe = {};
haxe.StackItem = $hxClasses["haxe.StackItem"] = { __ename__ : ["haxe","StackItem"], __constructs__ : ["CFunction","Module","FilePos","Method","LocalFunction"] };
haxe.StackItem.CFunction = ["CFunction",0];
haxe.StackItem.CFunction.toString = $estr;
haxe.StackItem.CFunction.__enum__ = haxe.StackItem;
haxe.StackItem.Module = function(m) { var $x = ["Module",1,m]; $x.__enum__ = haxe.StackItem; $x.toString = $estr; return $x; };
haxe.StackItem.FilePos = function(s,file,line) { var $x = ["FilePos",2,s,file,line]; $x.__enum__ = haxe.StackItem; $x.toString = $estr; return $x; };
haxe.StackItem.Method = function(classname,method) { var $x = ["Method",3,classname,method]; $x.__enum__ = haxe.StackItem; $x.toString = $estr; return $x; };
haxe.StackItem.LocalFunction = function(v) { var $x = ["LocalFunction",4,v]; $x.__enum__ = haxe.StackItem; $x.toString = $estr; return $x; };
haxe.StackItem.__empty_constructs__ = [haxe.StackItem.CFunction];
haxe.CallStack = function() { };
$hxClasses["haxe.CallStack"] = haxe.CallStack;
haxe.CallStack.__name__ = ["haxe","CallStack"];
haxe.CallStack.callStack = function() {
	var oldValue = Error.prepareStackTrace;
	Error.prepareStackTrace = function(error,callsites) {
		var stack = [];
		var _g = 0;
		while(_g < callsites.length) {
			var site = callsites[_g];
			++_g;
			var method = null;
			var fullName = site.getFunctionName();
			if(fullName != null) {
				var idx = fullName.lastIndexOf(".");
				if(idx >= 0) {
					var className = HxOverrides.substr(fullName,0,idx);
					var methodName = HxOverrides.substr(fullName,idx + 1,null);
					method = haxe.StackItem.Method(className,methodName);
				}
			}
			stack.push(haxe.StackItem.FilePos(method,site.getFileName(),site.getLineNumber()));
		}
		return stack;
	};
	try {
		throw new Error();
	} catch( e ) {
		var a = haxe.CallStack.makeStack(e.stack);
		if(a != null) a.shift();
		Error.prepareStackTrace = oldValue;
		return a;
	}
};
haxe.CallStack.exceptionStack = function() {
	return [];
};
haxe.CallStack.toString = function(stack) {
	var b = new StringBuf();
	var _g = 0;
	while(_g < stack.length) {
		var s = stack[_g];
		++_g;
		b.b += "\nCalled from ";
		haxe.CallStack.itemToString(b,s);
	}
	return b.b;
};
haxe.CallStack.itemToString = function(b,s) {
	switch(s[1]) {
	case 0:
		b.b += "a C function";
		break;
	case 1:
		var m = s[2];
		b.b += "module ";
		if(m == null) b.b += "null"; else b.b += "" + m;
		break;
	case 2:
		var line = s[4];
		var file = s[3];
		var s1 = s[2];
		if(s1 != null) {
			haxe.CallStack.itemToString(b,s1);
			b.b += " (";
		}
		if(file == null) b.b += "null"; else b.b += "" + file;
		b.b += " line ";
		if(line == null) b.b += "null"; else b.b += "" + line;
		if(s1 != null) b.b += ")";
		break;
	case 3:
		var meth = s[3];
		var cname = s[2];
		if(cname == null) b.b += "null"; else b.b += "" + cname;
		b.b += ".";
		if(meth == null) b.b += "null"; else b.b += "" + meth;
		break;
	case 4:
		var n = s[2];
		b.b += "local function #";
		if(n == null) b.b += "null"; else b.b += "" + n;
		break;
	}
};
haxe.CallStack.makeStack = function(s) {
	if(typeof(s) == "string") {
		var stack = s.split("\n");
		if(stack[0] == "Error") stack.shift();
		var m = [];
		var rie10 = new EReg("^   at ([A-Za-z0-9_. ]+) \\(([^)]+):([0-9]+):([0-9]+)\\)$","");
		var _g = 0;
		while(_g < stack.length) {
			var line = stack[_g];
			++_g;
			if(rie10.match(line)) {
				var path = rie10.matched(1).split(".");
				var meth = path.pop();
				var file = rie10.matched(2);
				var line1 = Std.parseInt(rie10.matched(3));
				m.push(haxe.StackItem.FilePos(meth == "Anonymous function"?haxe.StackItem.LocalFunction():meth == "Global code"?null:haxe.StackItem.Method(path.join("."),meth),file,line1));
			} else m.push(haxe.StackItem.Module(line));
		}
		return m;
	} else return s;
};
haxe._EnumFlags = {};
haxe._EnumFlags.EnumFlags_Impl_ = function() { };
$hxClasses["haxe._EnumFlags.EnumFlags_Impl_"] = haxe._EnumFlags.EnumFlags_Impl_;
haxe._EnumFlags.EnumFlags_Impl_.__name__ = ["haxe","_EnumFlags","EnumFlags_Impl_"];
haxe._EnumFlags.EnumFlags_Impl_._new = function(i) {
	if(i == null) i = 0;
	return i;
};
haxe._EnumFlags.EnumFlags_Impl_.has = function(this1,v) {
	return (this1 & 1 << v[1]) != 0;
};
haxe._EnumFlags.EnumFlags_Impl_.set = function(this1,v) {
	this1 |= 1 << v[1];
};
haxe._EnumFlags.EnumFlags_Impl_.unset = function(this1,v) {
	this1 &= 268435455 - (1 << v[1]);
};
haxe._EnumFlags.EnumFlags_Impl_.ofInt = function(i) {
	return i;
};
haxe._EnumFlags.EnumFlags_Impl_.toInt = function(this1) {
	return this1;
};
haxe.Log = function() { };
$hxClasses["haxe.Log"] = haxe.Log;
haxe.Log.__name__ = ["haxe","Log"];
haxe.Log.trace = function(v,infos) {
	js.Boot.__trace(v,infos);
};
haxe.Log.clear = function() {
	js.Boot.__clear_trace();
};
haxe.Timer = function(time_ms) {
	var me = this;
	this.id = setInterval(function() {
		me.run();
	},time_ms);
};
$hxClasses["haxe.Timer"] = haxe.Timer;
haxe.Timer.__name__ = ["haxe","Timer"];
haxe.Timer.delay = function(f,time_ms) {
	var t = new haxe.Timer(time_ms);
	t.run = function() {
		t.stop();
		f();
	};
	return t;
};
haxe.Timer.measure = function(f,pos) {
	var t0 = haxe.Timer.stamp();
	var r = f();
	haxe.Log.trace(haxe.Timer.stamp() - t0 + "s",pos);
	return r;
};
haxe.Timer.stamp = function() {
	return new Date().getTime() / 1000;
};
haxe.Timer.prototype = {
	id: null
	,stop: function() {
		if(this.id == null) return;
		clearInterval(this.id);
		this.id = null;
	}
	,run: function() {
	}
	,__class__: haxe.Timer
};
haxe.Unserializer = function(buf) {
	this.buf = buf;
	this.length = buf.length;
	this.pos = 0;
	this.scache = new Array();
	this.cache = new Array();
	var r = haxe.Unserializer.DEFAULT_RESOLVER;
	if(r == null) {
		r = Type;
		haxe.Unserializer.DEFAULT_RESOLVER = r;
	}
	this.setResolver(r);
};
$hxClasses["haxe.Unserializer"] = haxe.Unserializer;
haxe.Unserializer.__name__ = ["haxe","Unserializer"];
haxe.Unserializer.initCodes = function() {
	var codes = new Array();
	var _g1 = 0;
	var _g = haxe.Unserializer.BASE64.length;
	while(_g1 < _g) {
		var i = _g1++;
		codes[haxe.Unserializer.BASE64.charCodeAt(i)] = i;
	}
	return codes;
};
haxe.Unserializer.run = function(v) {
	return new haxe.Unserializer(v).unserialize();
};
haxe.Unserializer.prototype = {
	buf: null
	,pos: null
	,length: null
	,cache: null
	,scache: null
	,resolver: null
	,setResolver: function(r) {
		if(r == null) this.resolver = { resolveClass : function(_) {
			return null;
		}, resolveEnum : function(_1) {
			return null;
		}}; else this.resolver = r;
	}
	,getResolver: function() {
		return this.resolver;
	}
	,get: function(p) {
		return this.buf.charCodeAt(p);
	}
	,readDigits: function() {
		var k = 0;
		var s = false;
		var fpos = this.pos;
		while(true) {
			var c = this.buf.charCodeAt(this.pos);
			if(c != c) break;
			if(c == 45) {
				if(this.pos != fpos) break;
				s = true;
				this.pos++;
				continue;
			}
			if(c < 48 || c > 57) break;
			k = k * 10 + (c - 48);
			this.pos++;
		}
		if(s) k *= -1;
		return k;
	}
	,unserializeObject: function(o) {
		while(true) {
			if(this.pos >= this.length) throw "Invalid object";
			if(this.buf.charCodeAt(this.pos) == 103) break;
			var k = this.unserialize();
			if(!(typeof(k) == "string")) throw "Invalid object key";
			var v = this.unserialize();
			o[k] = v;
		}
		this.pos++;
	}
	,unserializeEnum: function(edecl,tag) {
		if(this.get(this.pos++) != 58) throw "Invalid enum format";
		var nargs = this.readDigits();
		if(nargs == 0) return Type.createEnum(edecl,tag);
		var args = new Array();
		while(nargs-- > 0) args.push(this.unserialize());
		return Type.createEnum(edecl,tag,args);
	}
	,unserialize: function() {
		var _g = this.get(this.pos++);
		switch(_g) {
		case 110:
			return null;
		case 116:
			return true;
		case 102:
			return false;
		case 122:
			return 0;
		case 105:
			return this.readDigits();
		case 100:
			var p1 = this.pos;
			while(true) {
				var c = this.buf.charCodeAt(this.pos);
				if(c >= 43 && c < 58 || c == 101 || c == 69) this.pos++; else break;
			}
			return Std.parseFloat(HxOverrides.substr(this.buf,p1,this.pos - p1));
		case 121:
			var len = this.readDigits();
			if(this.get(this.pos++) != 58 || this.length - this.pos < len) throw "Invalid string length";
			var s = HxOverrides.substr(this.buf,this.pos,len);
			this.pos += len;
			s = decodeURIComponent(s.split("+").join(" "));
			this.scache.push(s);
			return s;
		case 107:
			return Math.NaN;
		case 109:
			return Math.NEGATIVE_INFINITY;
		case 112:
			return Math.POSITIVE_INFINITY;
		case 97:
			var buf = this.buf;
			var a = new Array();
			this.cache.push(a);
			while(true) {
				var c1 = this.buf.charCodeAt(this.pos);
				if(c1 == 104) {
					this.pos++;
					break;
				}
				if(c1 == 117) {
					this.pos++;
					var n = this.readDigits();
					a[a.length + n - 1] = null;
				} else a.push(this.unserialize());
			}
			return a;
		case 111:
			var o = { };
			this.cache.push(o);
			this.unserializeObject(o);
			return o;
		case 114:
			var n1 = this.readDigits();
			if(n1 < 0 || n1 >= this.cache.length) throw "Invalid reference";
			return this.cache[n1];
		case 82:
			var n2 = this.readDigits();
			if(n2 < 0 || n2 >= this.scache.length) throw "Invalid string reference";
			return this.scache[n2];
		case 120:
			throw this.unserialize();
			break;
		case 99:
			var name = this.unserialize();
			var cl = this.resolver.resolveClass(name);
			if(cl == null) throw "Class not found " + name;
			var o1 = Type.createEmptyInstance(cl);
			this.cache.push(o1);
			this.unserializeObject(o1);
			return o1;
		case 119:
			var name1 = this.unserialize();
			var edecl = this.resolver.resolveEnum(name1);
			if(edecl == null) throw "Enum not found " + name1;
			var e = this.unserializeEnum(edecl,this.unserialize());
			this.cache.push(e);
			return e;
		case 106:
			var name2 = this.unserialize();
			var edecl1 = this.resolver.resolveEnum(name2);
			if(edecl1 == null) throw "Enum not found " + name2;
			this.pos++;
			var index = this.readDigits();
			var tag = Type.getEnumConstructs(edecl1)[index];
			if(tag == null) throw "Unknown enum index " + name2 + "@" + index;
			var e1 = this.unserializeEnum(edecl1,tag);
			this.cache.push(e1);
			return e1;
		case 108:
			var l = new List();
			this.cache.push(l);
			var buf1 = this.buf;
			while(this.buf.charCodeAt(this.pos) != 104) l.add(this.unserialize());
			this.pos++;
			return l;
		case 98:
			var h = new haxe.ds.StringMap();
			this.cache.push(h);
			var buf2 = this.buf;
			while(this.buf.charCodeAt(this.pos) != 104) {
				var s1 = this.unserialize();
				h.set(s1,this.unserialize());
			}
			this.pos++;
			return h;
		case 113:
			var h1 = new haxe.ds.IntMap();
			this.cache.push(h1);
			var buf3 = this.buf;
			var c2 = this.get(this.pos++);
			while(c2 == 58) {
				var i = this.readDigits();
				h1.set(i,this.unserialize());
				c2 = this.get(this.pos++);
			}
			if(c2 != 104) throw "Invalid IntMap format";
			return h1;
		case 77:
			var h2 = new haxe.ds.ObjectMap();
			this.cache.push(h2);
			var buf4 = this.buf;
			while(this.buf.charCodeAt(this.pos) != 104) {
				var s2 = this.unserialize();
				h2.set(s2,this.unserialize());
			}
			this.pos++;
			return h2;
		case 118:
			var d;
			var s3 = HxOverrides.substr(this.buf,this.pos,19);
			d = HxOverrides.strDate(s3);
			this.cache.push(d);
			this.pos += 19;
			return d;
		case 115:
			var len1 = this.readDigits();
			var buf5 = this.buf;
			if(this.get(this.pos++) != 58 || this.length - this.pos < len1) throw "Invalid bytes length";
			var codes = haxe.Unserializer.CODES;
			if(codes == null) {
				codes = haxe.Unserializer.initCodes();
				haxe.Unserializer.CODES = codes;
			}
			var i1 = this.pos;
			var rest = len1 & 3;
			var size;
			size = (len1 >> 2) * 3 + (rest >= 2?rest - 1:0);
			var max = i1 + (len1 - rest);
			var bytes = haxe.io.Bytes.alloc(size);
			var bpos = 0;
			while(i1 < max) {
				var c11 = codes[StringTools.fastCodeAt(buf5,i1++)];
				var c21 = codes[StringTools.fastCodeAt(buf5,i1++)];
				bytes.set(bpos++,c11 << 2 | c21 >> 4);
				var c3 = codes[StringTools.fastCodeAt(buf5,i1++)];
				bytes.set(bpos++,c21 << 4 | c3 >> 2);
				var c4 = codes[StringTools.fastCodeAt(buf5,i1++)];
				bytes.set(bpos++,c3 << 6 | c4);
			}
			if(rest >= 2) {
				var c12 = codes[StringTools.fastCodeAt(buf5,i1++)];
				var c22 = codes[StringTools.fastCodeAt(buf5,i1++)];
				bytes.set(bpos++,c12 << 2 | c22 >> 4);
				if(rest == 3) {
					var c31 = codes[StringTools.fastCodeAt(buf5,i1++)];
					bytes.set(bpos++,c22 << 4 | c31 >> 2);
				}
			}
			this.pos += len1;
			this.cache.push(bytes);
			return bytes;
		case 67:
			var name3 = this.unserialize();
			var cl1 = this.resolver.resolveClass(name3);
			if(cl1 == null) throw "Class not found " + name3;
			var o2 = Type.createEmptyInstance(cl1);
			this.cache.push(o2);
			o2.hxUnserialize(this);
			if(this.get(this.pos++) != 103) throw "Invalid custom data";
			return o2;
		default:
		}
		this.pos--;
		throw "Invalid char " + this.buf.charAt(this.pos) + " at position " + this.pos;
	}
	,__class__: haxe.Unserializer
};
haxe.crypto = {};
haxe.crypto.Adler32 = function() {
	this.a1 = 1;
	this.a2 = 0;
};
$hxClasses["haxe.crypto.Adler32"] = haxe.crypto.Adler32;
haxe.crypto.Adler32.__name__ = ["haxe","crypto","Adler32"];
haxe.crypto.Adler32.read = function(i) {
	var a = new haxe.crypto.Adler32();
	var a2a = i.readByte();
	var a2b = i.readByte();
	var a1a = i.readByte();
	var a1b = i.readByte();
	a.a1 = a1a << 8 | a1b;
	a.a2 = a2a << 8 | a2b;
	return a;
};
haxe.crypto.Adler32.make = function(b) {
	var a = new haxe.crypto.Adler32();
	a.update(b,0,b.length);
	return a.get();
};
haxe.crypto.Adler32.prototype = {
	a1: null
	,a2: null
	,get: function() {
		return this.a2 << 16 | this.a1;
	}
	,update: function(b,pos,len) {
		var a1 = this.a1;
		var a2 = this.a2;
		var _g1 = pos;
		var _g = pos + len;
		while(_g1 < _g) {
			var p = _g1++;
			var c = b.b[p];
			a1 = (a1 + c) % 65521;
			a2 = (a2 + a1) % 65521;
		}
		this.a1 = a1;
		this.a2 = a2;
	}
	,equals: function(a) {
		return a.a1 == this.a1 && a.a2 == this.a2;
	}
	,toString: function() {
		return StringTools.hex(this.a2,8) + StringTools.hex(this.a1,8);
	}
	,__class__: haxe.crypto.Adler32
};
haxe.crypto.BaseCode = function(base) {
	var len = base.length;
	var nbits = 1;
	while(len > 1 << nbits) nbits++;
	if(nbits > 8 || len != 1 << nbits) throw "BaseCode : base length must be a power of two.";
	this.base = base;
	this.nbits = nbits;
};
$hxClasses["haxe.crypto.BaseCode"] = haxe.crypto.BaseCode;
haxe.crypto.BaseCode.__name__ = ["haxe","crypto","BaseCode"];
haxe.crypto.BaseCode.encode = function(s,base) {
	var b = new haxe.crypto.BaseCode(haxe.io.Bytes.ofString(base));
	return b.encodeString(s);
};
haxe.crypto.BaseCode.decode = function(s,base) {
	var b = new haxe.crypto.BaseCode(haxe.io.Bytes.ofString(base));
	return b.decodeString(s);
};
haxe.crypto.BaseCode.prototype = {
	base: null
	,nbits: null
	,tbl: null
	,encodeBytes: function(b) {
		var nbits = this.nbits;
		var base = this.base;
		var size = b.length * 8 / nbits | 0;
		var out = haxe.io.Bytes.alloc(size + (b.length * 8 % nbits == 0?0:1));
		var buf = 0;
		var curbits = 0;
		var mask = (1 << nbits) - 1;
		var pin = 0;
		var pout = 0;
		while(pout < size) {
			while(curbits < nbits) {
				curbits += 8;
				buf <<= 8;
				buf |= b.get(pin++);
			}
			curbits -= nbits;
			out.set(pout++,base.b[buf >> curbits & mask]);
		}
		if(curbits > 0) out.set(pout++,base.b[buf << nbits - curbits & mask]);
		return out;
	}
	,initTable: function() {
		var tbl = new Array();
		var _g = 0;
		while(_g < 256) {
			var i = _g++;
			tbl[i] = -1;
		}
		var _g1 = 0;
		var _g2 = this.base.length;
		while(_g1 < _g2) {
			var i1 = _g1++;
			tbl[this.base.b[i1]] = i1;
		}
		this.tbl = tbl;
	}
	,decodeBytes: function(b) {
		var nbits = this.nbits;
		var base = this.base;
		if(this.tbl == null) this.initTable();
		var tbl = this.tbl;
		var size = b.length * nbits >> 3;
		var out = haxe.io.Bytes.alloc(size);
		var buf = 0;
		var curbits = 0;
		var pin = 0;
		var pout = 0;
		while(pout < size) {
			while(curbits < 8) {
				curbits += nbits;
				buf <<= nbits;
				var i = tbl[b.get(pin++)];
				if(i == -1) throw "BaseCode : invalid encoded char";
				buf |= i;
			}
			curbits -= 8;
			out.set(pout++,buf >> curbits & 255);
		}
		return out;
	}
	,encodeString: function(s) {
		return this.encodeBytes(haxe.io.Bytes.ofString(s)).toString();
	}
	,decodeString: function(s) {
		return this.decodeBytes(haxe.io.Bytes.ofString(s)).toString();
	}
	,__class__: haxe.crypto.BaseCode
};
haxe.ds = {};
haxe.ds.BalancedTree = function() {
};
$hxClasses["haxe.ds.BalancedTree"] = haxe.ds.BalancedTree;
haxe.ds.BalancedTree.__name__ = ["haxe","ds","BalancedTree"];
haxe.ds.BalancedTree.prototype = {
	root: null
	,set: function(key,value) {
		this.root = this.setLoop(key,value,this.root);
	}
	,get: function(key) {
		var node = this.root;
		while(node != null) {
			var c = this.compare(key,node.key);
			if(c == 0) return node.value;
			if(c < 0) node = node.left; else node = node.right;
		}
		return null;
	}
	,remove: function(key) {
		try {
			this.root = this.removeLoop(key,this.root);
			return true;
		} catch( e ) {
			if( js.Boot.__instanceof(e,String) ) {
				return false;
			} else throw(e);
		}
	}
	,exists: function(key) {
		var node = this.root;
		while(node != null) {
			var c = this.compare(key,node.key);
			if(c == 0) return true; else if(c < 0) node = node.left; else node = node.right;
		}
		return false;
	}
	,iterator: function() {
		var ret = [];
		this.iteratorLoop(this.root,ret);
		return HxOverrides.iter(ret);
	}
	,keys: function() {
		var ret = [];
		this.keysLoop(this.root,ret);
		return HxOverrides.iter(ret);
	}
	,setLoop: function(k,v,node) {
		if(node == null) return new haxe.ds.TreeNode(null,k,v,null);
		var c = this.compare(k,node.key);
		if(c == 0) return new haxe.ds.TreeNode(node.left,k,v,node.right,node == null?0:node._height); else if(c < 0) {
			var nl = this.setLoop(k,v,node.left);
			return this.balance(nl,node.key,node.value,node.right);
		} else {
			var nr = this.setLoop(k,v,node.right);
			return this.balance(node.left,node.key,node.value,nr);
		}
	}
	,removeLoop: function(k,node) {
		if(node == null) throw "Not_found";
		var c = this.compare(k,node.key);
		if(c == 0) return this.merge(node.left,node.right); else if(c < 0) return this.balance(this.removeLoop(k,node.left),node.key,node.value,node.right); else return this.balance(node.left,node.key,node.value,this.removeLoop(k,node.right));
	}
	,iteratorLoop: function(node,acc) {
		if(node != null) {
			this.iteratorLoop(node.left,acc);
			acc.push(node.value);
			this.iteratorLoop(node.right,acc);
		}
	}
	,keysLoop: function(node,acc) {
		if(node != null) {
			this.keysLoop(node.left,acc);
			acc.push(node.key);
			this.keysLoop(node.right,acc);
		}
	}
	,merge: function(t1,t2) {
		if(t1 == null) return t2;
		if(t2 == null) return t1;
		var t = this.minBinding(t2);
		return this.balance(t1,t.key,t.value,this.removeMinBinding(t2));
	}
	,minBinding: function(t) {
		if(t == null) throw "Not_found"; else if(t.left == null) return t; else return this.minBinding(t.left);
	}
	,removeMinBinding: function(t) {
		if(t.left == null) return t.right; else return this.balance(this.removeMinBinding(t.left),t.key,t.value,t.right);
	}
	,balance: function(l,k,v,r) {
		var hl;
		if(l == null) hl = 0; else hl = l._height;
		var hr;
		if(r == null) hr = 0; else hr = r._height;
		if(hl > hr + 2) {
			if((function($this) {
				var $r;
				var _this = l.left;
				$r = _this == null?0:_this._height;
				return $r;
			}(this)) >= (function($this) {
				var $r;
				var _this1 = l.right;
				$r = _this1 == null?0:_this1._height;
				return $r;
			}(this))) return new haxe.ds.TreeNode(l.left,l.key,l.value,new haxe.ds.TreeNode(l.right,k,v,r)); else return new haxe.ds.TreeNode(new haxe.ds.TreeNode(l.left,l.key,l.value,l.right.left),l.right.key,l.right.value,new haxe.ds.TreeNode(l.right.right,k,v,r));
		} else if(hr > hl + 2) {
			if((function($this) {
				var $r;
				var _this2 = r.right;
				$r = _this2 == null?0:_this2._height;
				return $r;
			}(this)) > (function($this) {
				var $r;
				var _this3 = r.left;
				$r = _this3 == null?0:_this3._height;
				return $r;
			}(this))) return new haxe.ds.TreeNode(new haxe.ds.TreeNode(l,k,v,r.left),r.key,r.value,r.right); else return new haxe.ds.TreeNode(new haxe.ds.TreeNode(l,k,v,r.left.left),r.left.key,r.left.value,new haxe.ds.TreeNode(r.left.right,r.key,r.value,r.right));
		} else return new haxe.ds.TreeNode(l,k,v,r,(hl > hr?hl:hr) + 1);
	}
	,compare: function(k1,k2) {
		return Reflect.compare(k1,k2);
	}
	,toString: function() {
		return "{" + this.root.toString() + "}";
	}
	,__class__: haxe.ds.BalancedTree
};
haxe.ds.TreeNode = function(l,k,v,r,h) {
	if(h == null) h = -1;
	this.left = l;
	this.key = k;
	this.value = v;
	this.right = r;
	if(h == -1) this._height = ((function($this) {
		var $r;
		var _this = $this.left;
		$r = _this == null?0:_this._height;
		return $r;
	}(this)) > (function($this) {
		var $r;
		var _this1 = $this.right;
		$r = _this1 == null?0:_this1._height;
		return $r;
	}(this))?(function($this) {
		var $r;
		var _this2 = $this.left;
		$r = _this2 == null?0:_this2._height;
		return $r;
	}(this)):(function($this) {
		var $r;
		var _this3 = $this.right;
		$r = _this3 == null?0:_this3._height;
		return $r;
	}(this))) + 1; else this._height = h;
};
$hxClasses["haxe.ds.TreeNode"] = haxe.ds.TreeNode;
haxe.ds.TreeNode.__name__ = ["haxe","ds","TreeNode"];
haxe.ds.TreeNode.prototype = {
	left: null
	,right: null
	,key: null
	,value: null
	,_height: null
	,toString: function() {
		return (this.left == null?"":this.left.toString() + ", ") + ("" + Std.string(this.key) + "=" + Std.string(this.value)) + (this.right == null?"":", " + this.right.toString());
	}
	,__class__: haxe.ds.TreeNode
};
haxe.ds.EnumValueMap = function() {
	haxe.ds.BalancedTree.call(this);
};
$hxClasses["haxe.ds.EnumValueMap"] = haxe.ds.EnumValueMap;
haxe.ds.EnumValueMap.__name__ = ["haxe","ds","EnumValueMap"];
haxe.ds.EnumValueMap.__interfaces__ = [IMap];
haxe.ds.EnumValueMap.__super__ = haxe.ds.BalancedTree;
haxe.ds.EnumValueMap.prototype = $extend(haxe.ds.BalancedTree.prototype,{
	compare: function(k1,k2) {
		var d = k1[1] - k2[1];
		if(d != 0) return d;
		var p1 = k1.slice(2);
		var p2 = k2.slice(2);
		if(p1.length == 0 && p2.length == 0) return 0;
		return this.compareArgs(p1,p2);
	}
	,compareArgs: function(a1,a2) {
		var ld = a1.length - a2.length;
		if(ld != 0) return ld;
		var _g1 = 0;
		var _g = a1.length;
		while(_g1 < _g) {
			var i = _g1++;
			var d = this.compareArg(a1[i],a2[i]);
			if(d != 0) return d;
		}
		return 0;
	}
	,compareArg: function(v1,v2) {
		if(Reflect.isEnumValue(v1) && Reflect.isEnumValue(v2)) return this.compare(v1,v2); else if((v1 instanceof Array) && v1.__enum__ == null && ((v2 instanceof Array) && v2.__enum__ == null)) return this.compareArgs(v1,v2); else return Reflect.compare(v1,v2);
	}
	,__class__: haxe.ds.EnumValueMap
});
haxe.ds._HashMap = {};
haxe.ds._HashMap.HashMap_Impl_ = function() { };
$hxClasses["haxe.ds._HashMap.HashMap_Impl_"] = haxe.ds._HashMap.HashMap_Impl_;
haxe.ds._HashMap.HashMap_Impl_.__name__ = ["haxe","ds","_HashMap","HashMap_Impl_"];
haxe.ds._HashMap.HashMap_Impl_._new = function() {
	return { keys : new haxe.ds.IntMap(), values : new haxe.ds.IntMap()};
};
haxe.ds._HashMap.HashMap_Impl_.set = function(this1,k,v) {
	this1.keys.set(k.hashCode(),k);
	this1.values.set(k.hashCode(),v);
};
haxe.ds._HashMap.HashMap_Impl_.get = function(this1,k) {
	return this1.values.get(k.hashCode());
};
haxe.ds._HashMap.HashMap_Impl_.exists = function(this1,k) {
	return this1.values.exists(k.hashCode());
};
haxe.ds._HashMap.HashMap_Impl_.remove = function(this1,k) {
	this1.values.remove(k.hashCode());
	return this1.keys.remove(k.hashCode());
};
haxe.ds._HashMap.HashMap_Impl_.keys = function(this1) {
	return this1.keys.iterator();
};
haxe.ds._HashMap.HashMap_Impl_.iterator = function(this1) {
	return this1.values.iterator();
};
haxe.ds.IntMap = function() {
	this.h = { };
};
$hxClasses["haxe.ds.IntMap"] = haxe.ds.IntMap;
haxe.ds.IntMap.__name__ = ["haxe","ds","IntMap"];
haxe.ds.IntMap.__interfaces__ = [IMap];
haxe.ds.IntMap.prototype = {
	h: null
	,set: function(key,value) {
		this.h[key] = value;
	}
	,get: function(key) {
		return this.h[key];
	}
	,exists: function(key) {
		return this.h.hasOwnProperty(key);
	}
	,remove: function(key) {
		if(!this.h.hasOwnProperty(key)) return false;
		delete(this.h[key]);
		return true;
	}
	,keys: function() {
		var a = [];
		for( var key in this.h ) {
		if(this.h.hasOwnProperty(key)) a.push(key | 0);
		}
		return HxOverrides.iter(a);
	}
	,iterator: function() {
		return { ref : this.h, it : this.keys(), hasNext : function() {
			return this.it.hasNext();
		}, next : function() {
			var i = this.it.next();
			return this.ref[i];
		}};
	}
	,toString: function() {
		var s = new StringBuf();
		s.b += "{";
		var it = this.keys();
		while( it.hasNext() ) {
			var i = it.next();
			if(i == null) s.b += "null"; else s.b += "" + i;
			s.b += " => ";
			s.add(Std.string(this.get(i)));
			if(it.hasNext()) s.b += ", ";
		}
		s.b += "}";
		return s.b;
	}
	,__class__: haxe.ds.IntMap
};
haxe.ds.ObjectMap = function() {
	this.h = { };
	this.h.__keys__ = { };
};
$hxClasses["haxe.ds.ObjectMap"] = haxe.ds.ObjectMap;
haxe.ds.ObjectMap.__name__ = ["haxe","ds","ObjectMap"];
haxe.ds.ObjectMap.__interfaces__ = [IMap];
haxe.ds.ObjectMap.assignId = function(obj) {
	return obj.__id__ = ++haxe.ds.ObjectMap.count;
};
haxe.ds.ObjectMap.getId = function(obj) {
	return obj.__id__;
};
haxe.ds.ObjectMap.prototype = {
	h: null
	,set: function(key,value) {
		var id = key.__id__ || (key.__id__ = ++haxe.ds.ObjectMap.count);
		this.h[id] = value;
		this.h.__keys__[id] = key;
	}
	,get: function(key) {
		return this.h[key.__id__];
	}
	,exists: function(key) {
		return this.h.__keys__[key.__id__] != null;
	}
	,remove: function(key) {
		var id = key.__id__;
		if(this.h.__keys__[id] == null) return false;
		delete(this.h[id]);
		delete(this.h.__keys__[id]);
		return true;
	}
	,keys: function() {
		var a = [];
		for( var key in this.h.__keys__ ) {
		if(this.h.hasOwnProperty(key)) a.push(this.h.__keys__[key]);
		}
		return HxOverrides.iter(a);
	}
	,iterator: function() {
		return { ref : this.h, it : this.keys(), hasNext : function() {
			return this.it.hasNext();
		}, next : function() {
			var i = this.it.next();
			return this.ref[i.__id__];
		}};
	}
	,toString: function() {
		var s = new StringBuf();
		s.b += "{";
		var it = this.keys();
		while( it.hasNext() ) {
			var i = it.next();
			s.add(Std.string(i));
			s.b += " => ";
			s.add(Std.string(this.h[i.__id__]));
			if(it.hasNext()) s.b += ", ";
		}
		s.b += "}";
		return s.b;
	}
	,__class__: haxe.ds.ObjectMap
};
haxe.ds.StringMap = function() {
	this.h = { };
};
$hxClasses["haxe.ds.StringMap"] = haxe.ds.StringMap;
haxe.ds.StringMap.__name__ = ["haxe","ds","StringMap"];
haxe.ds.StringMap.__interfaces__ = [IMap];
haxe.ds.StringMap.prototype = {
	h: null
	,set: function(key,value) {
		this.h["$" + key] = value;
	}
	,get: function(key) {
		return this.h["$" + key];
	}
	,exists: function(key) {
		return this.h.hasOwnProperty("$" + key);
	}
	,remove: function(key) {
		key = "$" + key;
		if(!this.h.hasOwnProperty(key)) return false;
		delete(this.h[key]);
		return true;
	}
	,keys: function() {
		var a = [];
		for( var key in this.h ) {
		if(this.h.hasOwnProperty(key)) a.push(key.substr(1));
		}
		return HxOverrides.iter(a);
	}
	,iterator: function() {
		return { ref : this.h, it : this.keys(), hasNext : function() {
			return this.it.hasNext();
		}, next : function() {
			var i = this.it.next();
			return this.ref["$" + i];
		}};
	}
	,toString: function() {
		var s = new StringBuf();
		s.b += "{";
		var it = this.keys();
		while( it.hasNext() ) {
			var i = it.next();
			if(i == null) s.b += "null"; else s.b += "" + i;
			s.b += " => ";
			s.add(Std.string(this.get(i)));
			if(it.hasNext()) s.b += ", ";
		}
		s.b += "}";
		return s.b;
	}
	,__class__: haxe.ds.StringMap
};
haxe.ds._Vector = {};
haxe.ds._Vector.Vector_Impl_ = function() { };
$hxClasses["haxe.ds._Vector.Vector_Impl_"] = haxe.ds._Vector.Vector_Impl_;
haxe.ds._Vector.Vector_Impl_.__name__ = ["haxe","ds","_Vector","Vector_Impl_"];
haxe.ds._Vector.Vector_Impl_.__properties__ = {get_length:"get_length"}
haxe.ds._Vector.Vector_Impl_._new = function(length) {
	var this1;
	this1 = new Array(length);
	return this1;
};
haxe.ds._Vector.Vector_Impl_.get = function(this1,index) {
	return this1[index];
};
haxe.ds._Vector.Vector_Impl_.set = function(this1,index,val) {
	return this1[index] = val;
};
haxe.ds._Vector.Vector_Impl_.get_length = function(this1) {
	return this1.length;
};
haxe.ds._Vector.Vector_Impl_.blit = function(src,srcPos,dest,destPos,len) {
	var _g = 0;
	while(_g < len) {
		var i = _g++;
		dest[destPos + i] = src[srcPos + i];
	}
};
haxe.ds._Vector.Vector_Impl_.toArray = function(this1) {
	var a = new Array();
	var len = this1.length;
	var _g = 0;
	while(_g < len) {
		var i = _g++;
		a[i] = this1[i];
	}
	return a;
};
haxe.ds._Vector.Vector_Impl_.toData = function(this1) {
	return this1;
};
haxe.ds._Vector.Vector_Impl_.fromData = function(data) {
	return data;
};
haxe.ds._Vector.Vector_Impl_.fromArrayCopy = function(array) {
	var vec;
	var this1;
	this1 = new Array(array.length);
	vec = this1;
	var _g1 = 0;
	var _g = array.length;
	while(_g1 < _g) {
		var i = _g1++;
		vec[i] = array[i];
	}
	return vec;
};
haxe.ds.WeakMap = function() {
	throw "Not implemented for this platform";
};
$hxClasses["haxe.ds.WeakMap"] = haxe.ds.WeakMap;
haxe.ds.WeakMap.__name__ = ["haxe","ds","WeakMap"];
haxe.ds.WeakMap.__interfaces__ = [IMap];
haxe.ds.WeakMap.prototype = {
	set: function(key,value) {
	}
	,get: function(key) {
		return null;
	}
	,exists: function(key) {
		return false;
	}
	,remove: function(key) {
		return false;
	}
	,keys: function() {
		return null;
	}
	,iterator: function() {
		return null;
	}
	,toString: function() {
		return null;
	}
	,__class__: haxe.ds.WeakMap
};
haxe.format = {};
haxe.format.JsonParser = function(str) {
	this.str = str;
	this.pos = 0;
};
$hxClasses["haxe.format.JsonParser"] = haxe.format.JsonParser;
haxe.format.JsonParser.__name__ = ["haxe","format","JsonParser"];
haxe.format.JsonParser.parse = function(str) {
	return new haxe.format.JsonParser(str).parseRec();
};
haxe.format.JsonParser.prototype = {
	str: null
	,pos: null
	,parseRec: function() {
		while(true) {
			var c = StringTools.fastCodeAt(this.str,this.pos++);
			switch(c) {
			case 32:case 13:case 10:case 9:
				break;
			case 123:
				var obj = { };
				var field = null;
				var comma = null;
				while(true) {
					var c1 = StringTools.fastCodeAt(this.str,this.pos++);
					switch(c1) {
					case 32:case 13:case 10:case 9:
						break;
					case 125:
						if(field != null || comma == false) this.invalidChar();
						return obj;
					case 58:
						if(field == null) this.invalidChar();
						Reflect.setField(obj,field,this.parseRec());
						field = null;
						comma = true;
						break;
					case 44:
						if(comma) comma = false; else this.invalidChar();
						break;
					case 34:
						if(comma) this.invalidChar();
						field = this.parseString();
						break;
					default:
						this.invalidChar();
					}
				}
				break;
			case 91:
				var arr = [];
				var comma1 = null;
				while(true) {
					var c2 = StringTools.fastCodeAt(this.str,this.pos++);
					switch(c2) {
					case 32:case 13:case 10:case 9:
						break;
					case 93:
						if(comma1 == false) this.invalidChar();
						return arr;
					case 44:
						if(comma1) comma1 = false; else this.invalidChar();
						break;
					default:
						if(comma1) this.invalidChar();
						this.pos--;
						arr.push(this.parseRec());
						comma1 = true;
					}
				}
				break;
			case 116:
				var save = this.pos;
				if(StringTools.fastCodeAt(this.str,this.pos++) != 114 || StringTools.fastCodeAt(this.str,this.pos++) != 117 || StringTools.fastCodeAt(this.str,this.pos++) != 101) {
					this.pos = save;
					this.invalidChar();
				}
				return true;
			case 102:
				var save1 = this.pos;
				if(StringTools.fastCodeAt(this.str,this.pos++) != 97 || StringTools.fastCodeAt(this.str,this.pos++) != 108 || StringTools.fastCodeAt(this.str,this.pos++) != 115 || StringTools.fastCodeAt(this.str,this.pos++) != 101) {
					this.pos = save1;
					this.invalidChar();
				}
				return false;
			case 110:
				var save2 = this.pos;
				if(StringTools.fastCodeAt(this.str,this.pos++) != 117 || StringTools.fastCodeAt(this.str,this.pos++) != 108 || StringTools.fastCodeAt(this.str,this.pos++) != 108) {
					this.pos = save2;
					this.invalidChar();
				}
				return null;
			case 34:
				return this.parseString();
			case 48:case 49:case 50:case 51:case 52:case 53:case 54:case 55:case 56:case 57:case 45:
				return this.parseNumber(c);
			default:
				this.invalidChar();
			}
		}
	}
	,parseString: function() {
		var start = this.pos;
		var buf = new StringBuf();
		while(true) {
			var c = StringTools.fastCodeAt(this.str,this.pos++);
			if(c == 34) break;
			if(c == 92) {
				buf.addSub(this.str,start,this.pos - start - 1);
				c = StringTools.fastCodeAt(this.str,this.pos++);
				switch(c) {
				case 114:
					buf.b += "\r";
					break;
				case 110:
					buf.b += "\n";
					break;
				case 116:
					buf.b += "\t";
					break;
				case 98:
					buf.b += "\x08";
					break;
				case 102:
					buf.b += "\x0C";
					break;
				case 47:case 92:case 34:
					buf.b += String.fromCharCode(c);
					break;
				case 117:
					var uc = Std.parseInt("0x" + HxOverrides.substr(this.str,this.pos,4));
					this.pos += 4;
					buf.b += String.fromCharCode(uc);
					break;
				default:
					throw "Invalid escape sequence \\" + String.fromCharCode(c) + " at position " + (this.pos - 1);
				}
				start = this.pos;
			} else if(c != c) throw "Unclosed string";
		}
		buf.addSub(this.str,start,this.pos - start - 1);
		return buf.b;
	}
	,parseNumber: function(c) {
		var start = this.pos - 1;
		var minus = c == 45;
		var digit = !minus;
		var zero = c == 48;
		var point = false;
		var e = false;
		var pm = false;
		var end = false;
		while(true) {
			c = StringTools.fastCodeAt(this.str,this.pos++);
			switch(c) {
			case 48:
				if(zero && !point) this.invalidNumber(start);
				if(minus) {
					minus = false;
					zero = true;
				}
				digit = true;
				break;
			case 49:case 50:case 51:case 52:case 53:case 54:case 55:case 56:case 57:
				if(zero && !point) this.invalidNumber(start);
				if(minus) minus = false;
				digit = true;
				zero = false;
				break;
			case 46:
				if(minus || point) this.invalidNumber(start);
				digit = false;
				point = true;
				break;
			case 101:case 69:
				if(minus || zero || e) this.invalidNumber(start);
				digit = false;
				e = true;
				break;
			case 43:case 45:
				if(!e || pm) this.invalidNumber(start);
				digit = false;
				pm = true;
				break;
			default:
				if(!digit) this.invalidNumber(start);
				this.pos--;
				end = true;
			}
			if(end) break;
		}
		var f = Std.parseFloat(HxOverrides.substr(this.str,start,this.pos - start));
		var i = f | 0;
		if(i == f) return i; else return f;
	}
	,nextChar: function() {
		return StringTools.fastCodeAt(this.str,this.pos++);
	}
	,invalidChar: function() {
		this.pos--;
		throw "Invalid char " + this.str.charCodeAt(this.pos) + " at position " + this.pos;
	}
	,invalidNumber: function(start) {
		throw "Invalid number at position " + start + ": " + HxOverrides.substr(this.str,start,this.pos - start);
	}
	,__class__: haxe.format.JsonParser
};
haxe.io = {};
haxe.io.Bytes = function(length,b) {
	this.length = length;
	this.b = b;
};
$hxClasses["haxe.io.Bytes"] = haxe.io.Bytes;
haxe.io.Bytes.__name__ = ["haxe","io","Bytes"];
haxe.io.Bytes.alloc = function(length) {
	var a = new Array();
	var _g = 0;
	while(_g < length) {
		var i = _g++;
		a.push(0);
	}
	return new haxe.io.Bytes(length,a);
};
haxe.io.Bytes.ofString = function(s) {
	var a = new Array();
	var i = 0;
	while(i < s.length) {
		var c = StringTools.fastCodeAt(s,i++);
		if(55296 <= c && c <= 56319) c = c - 55232 << 10 | StringTools.fastCodeAt(s,i++) & 1023;
		if(c <= 127) a.push(c); else if(c <= 2047) {
			a.push(192 | c >> 6);
			a.push(128 | c & 63);
		} else if(c <= 65535) {
			a.push(224 | c >> 12);
			a.push(128 | c >> 6 & 63);
			a.push(128 | c & 63);
		} else {
			a.push(240 | c >> 18);
			a.push(128 | c >> 12 & 63);
			a.push(128 | c >> 6 & 63);
			a.push(128 | c & 63);
		}
	}
	return new haxe.io.Bytes(a.length,a);
};
haxe.io.Bytes.ofData = function(b) {
	return new haxe.io.Bytes(b.length,b);
};
haxe.io.Bytes.fastGet = function(b,pos) {
	return b[pos];
};
haxe.io.Bytes.prototype = {
	length: null
	,b: null
	,get: function(pos) {
		return this.b[pos];
	}
	,set: function(pos,v) {
		this.b[pos] = v & 255;
	}
	,blit: function(pos,src,srcpos,len) {
		if(pos < 0 || srcpos < 0 || len < 0 || pos + len > this.length || srcpos + len > src.length) throw haxe.io.Error.OutsideBounds;
		var b1 = this.b;
		var b2 = src.b;
		if(b1 == b2 && pos > srcpos) {
			var i = len;
			while(i > 0) {
				i--;
				b1[i + pos] = b2[i + srcpos];
			}
			return;
		}
		var _g = 0;
		while(_g < len) {
			var i1 = _g++;
			b1[i1 + pos] = b2[i1 + srcpos];
		}
	}
	,fill: function(pos,len,value) {
		var _g = 0;
		while(_g < len) {
			var i = _g++;
			this.set(pos++,value);
		}
	}
	,sub: function(pos,len) {
		if(pos < 0 || len < 0 || pos + len > this.length) throw haxe.io.Error.OutsideBounds;
		return new haxe.io.Bytes(len,this.b.slice(pos,pos + len));
	}
	,compare: function(other) {
		var b1 = this.b;
		var b2 = other.b;
		var len;
		if(this.length < other.length) len = this.length; else len = other.length;
		var _g = 0;
		while(_g < len) {
			var i = _g++;
			if(b1[i] != b2[i]) return b1[i] - b2[i];
		}
		return this.length - other.length;
	}
	,getDouble: function(pos) {
		var b = new haxe.io.BytesInput(this,pos,8);
		return b.readDouble();
	}
	,getFloat: function(pos) {
		var b = new haxe.io.BytesInput(this,pos,4);
		return b.readFloat();
	}
	,setDouble: function(pos,v) {
		throw "Not supported";
	}
	,setFloat: function(pos,v) {
		throw "Not supported";
	}
	,getString: function(pos,len) {
		if(pos < 0 || len < 0 || pos + len > this.length) throw haxe.io.Error.OutsideBounds;
		var s = "";
		var b = this.b;
		var fcc = String.fromCharCode;
		var i = pos;
		var max = pos + len;
		while(i < max) {
			var c = b[i++];
			if(c < 128) {
				if(c == 0) break;
				s += fcc(c);
			} else if(c < 224) s += fcc((c & 63) << 6 | b[i++] & 127); else if(c < 240) {
				var c2 = b[i++];
				s += fcc((c & 31) << 12 | (c2 & 127) << 6 | b[i++] & 127);
			} else {
				var c21 = b[i++];
				var c3 = b[i++];
				var u = (c & 15) << 18 | (c21 & 127) << 12 | (c3 & 127) << 6 | b[i++] & 127;
				s += fcc((u >> 10) + 55232);
				s += fcc(u & 1023 | 56320);
			}
		}
		return s;
	}
	,readString: function(pos,len) {
		return this.getString(pos,len);
	}
	,toString: function() {
		return this.getString(0,this.length);
	}
	,toHex: function() {
		var s = new StringBuf();
		var chars = [];
		var str = "0123456789abcdef";
		var _g1 = 0;
		var _g = str.length;
		while(_g1 < _g) {
			var i = _g1++;
			chars.push(HxOverrides.cca(str,i));
		}
		var _g11 = 0;
		var _g2 = this.length;
		while(_g11 < _g2) {
			var i1 = _g11++;
			var c = this.b[i1];
			s.b += String.fromCharCode(chars[c >> 4]);
			s.b += String.fromCharCode(chars[c & 15]);
		}
		return s.b;
	}
	,getData: function() {
		return this.b;
	}
	,__class__: haxe.io.Bytes
};
haxe.io.BytesBuffer = function() {
	this.b = new Array();
};
$hxClasses["haxe.io.BytesBuffer"] = haxe.io.BytesBuffer;
haxe.io.BytesBuffer.__name__ = ["haxe","io","BytesBuffer"];
haxe.io.BytesBuffer.prototype = {
	b: null
	,get_length: function() {
		return this.b.length;
	}
	,addByte: function($byte) {
		this.b.push($byte);
	}
	,add: function(src) {
		var b1 = this.b;
		var b2 = src.b;
		var _g1 = 0;
		var _g = src.length;
		while(_g1 < _g) {
			var i = _g1++;
			this.b.push(b2[i]);
		}
	}
	,addString: function(v) {
		this.add(haxe.io.Bytes.ofString(v));
	}
	,addFloat: function(v) {
		var b = new haxe.io.BytesOutput();
		b.writeFloat(v);
		this.add(b.getBytes());
	}
	,addDouble: function(v) {
		var b = new haxe.io.BytesOutput();
		b.writeDouble(v);
		this.add(b.getBytes());
	}
	,addBytes: function(src,pos,len) {
		if(pos < 0 || len < 0 || pos + len > src.length) throw haxe.io.Error.OutsideBounds;
		var b1 = this.b;
		var b2 = src.b;
		var _g1 = pos;
		var _g = pos + len;
		while(_g1 < _g) {
			var i = _g1++;
			this.b.push(b2[i]);
		}
	}
	,getBytes: function() {
		var bytes = new haxe.io.Bytes(this.b.length,this.b);
		this.b = null;
		return bytes;
	}
	,__class__: haxe.io.BytesBuffer
	,__properties__: {get_length:"get_length"}
};
haxe.io.Input = function() { };
$hxClasses["haxe.io.Input"] = haxe.io.Input;
haxe.io.Input.__name__ = ["haxe","io","Input"];
haxe.io.Input.prototype = {
	bigEndian: null
	,readByte: function() {
		throw "Not implemented";
	}
	,readBytes: function(s,pos,len) {
		var k = len;
		var b = s.b;
		if(pos < 0 || len < 0 || pos + len > s.length) throw haxe.io.Error.OutsideBounds;
		while(k > 0) {
			b[pos] = this.readByte();
			pos++;
			k--;
		}
		return len;
	}
	,close: function() {
	}
	,set_bigEndian: function(b) {
		this.bigEndian = b;
		return b;
	}
	,readAll: function(bufsize) {
		if(bufsize == null) bufsize = 16384;
		var buf = haxe.io.Bytes.alloc(bufsize);
		var total = new haxe.io.BytesBuffer();
		try {
			while(true) {
				var len = this.readBytes(buf,0,bufsize);
				if(len == 0) throw haxe.io.Error.Blocked;
				total.addBytes(buf,0,len);
			}
		} catch( e ) {
			if( js.Boot.__instanceof(e,haxe.io.Eof) ) {
			} else throw(e);
		}
		return total.getBytes();
	}
	,readFullBytes: function(s,pos,len) {
		while(len > 0) {
			var k = this.readBytes(s,pos,len);
			pos += k;
			len -= k;
		}
	}
	,read: function(nbytes) {
		var s = haxe.io.Bytes.alloc(nbytes);
		var p = 0;
		while(nbytes > 0) {
			var k = this.readBytes(s,p,nbytes);
			if(k == 0) throw haxe.io.Error.Blocked;
			p += k;
			nbytes -= k;
		}
		return s;
	}
	,readUntil: function(end) {
		var buf = new StringBuf();
		var last;
		while((last = this.readByte()) != end) buf.b += String.fromCharCode(last);
		return buf.b;
	}
	,readLine: function() {
		var buf = new StringBuf();
		var last;
		var s;
		try {
			while((last = this.readByte()) != 10) buf.b += String.fromCharCode(last);
			s = buf.b;
			if(HxOverrides.cca(s,s.length - 1) == 13) s = HxOverrides.substr(s,0,-1);
		} catch( e ) {
			if( js.Boot.__instanceof(e,haxe.io.Eof) ) {
				s = buf.b;
				if(s.length == 0) throw e;
			} else throw(e);
		}
		return s;
	}
	,readFloat: function() {
		var bytes = [];
		bytes.push(this.readByte());
		bytes.push(this.readByte());
		bytes.push(this.readByte());
		bytes.push(this.readByte());
		if(!this.bigEndian) bytes.reverse();
		var sign = 1 - (bytes[0] >> 7 << 1);
		var exp = (bytes[0] << 1 & 255 | bytes[1] >> 7) - 127;
		var sig = (bytes[1] & 127) << 16 | bytes[2] << 8 | bytes[3];
		if(sig == 0 && exp == -127) return 0.0;
		return sign * (1 + Math.pow(2,-23) * sig) * Math.pow(2,exp);
	}
	,readDouble: function() {
		var bytes = [];
		bytes.push(this.readByte());
		bytes.push(this.readByte());
		bytes.push(this.readByte());
		bytes.push(this.readByte());
		bytes.push(this.readByte());
		bytes.push(this.readByte());
		bytes.push(this.readByte());
		bytes.push(this.readByte());
		if(!this.bigEndian) bytes.reverse();
		var sign = 1 - (bytes[0] >> 7 << 1);
		var exp = (bytes[0] << 4 & 2047 | bytes[1] >> 4) - 1023;
		var sig = this.getDoubleSig(bytes);
		if(sig == 0 && exp == -1023) return 0.0;
		return sign * (1.0 + Math.pow(2,-52) * sig) * Math.pow(2,exp);
	}
	,readInt8: function() {
		var n = this.readByte();
		if(n >= 128) return n - 256;
		return n;
	}
	,readInt16: function() {
		var ch1 = this.readByte();
		var ch2 = this.readByte();
		var n;
		if(this.bigEndian) n = ch2 | ch1 << 8; else n = ch1 | ch2 << 8;
		if((n & 32768) != 0) return n - 65536;
		return n;
	}
	,readUInt16: function() {
		var ch1 = this.readByte();
		var ch2 = this.readByte();
		if(this.bigEndian) return ch2 | ch1 << 8; else return ch1 | ch2 << 8;
	}
	,readInt24: function() {
		var ch1 = this.readByte();
		var ch2 = this.readByte();
		var ch3 = this.readByte();
		var n;
		if(this.bigEndian) n = ch3 | ch2 << 8 | ch1 << 16; else n = ch1 | ch2 << 8 | ch3 << 16;
		if((n & 8388608) != 0) return n - 16777216;
		return n;
	}
	,readUInt24: function() {
		var ch1 = this.readByte();
		var ch2 = this.readByte();
		var ch3 = this.readByte();
		if(this.bigEndian) return ch3 | ch2 << 8 | ch1 << 16; else return ch1 | ch2 << 8 | ch3 << 16;
	}
	,readInt32: function() {
		var ch1 = this.readByte();
		var ch2 = this.readByte();
		var ch3 = this.readByte();
		var ch4 = this.readByte();
		if(this.bigEndian) return ch4 | ch3 << 8 | ch2 << 16 | ch1 << 24; else return ch1 | ch2 << 8 | ch3 << 16 | ch4 << 24;
	}
	,readString: function(len) {
		var b = haxe.io.Bytes.alloc(len);
		this.readFullBytes(b,0,len);
		return b.toString();
	}
	,getDoubleSig: function(bytes) {
		return ((bytes[1] & 15) << 16 | bytes[2] << 8 | bytes[3]) * 4294967296. + (bytes[4] >> 7) * 2147483648 + ((bytes[4] & 127) << 24 | bytes[5] << 16 | bytes[6] << 8 | bytes[7]);
	}
	,__class__: haxe.io.Input
	,__properties__: {set_bigEndian:"set_bigEndian"}
};
haxe.io.BytesInput = function(b,pos,len) {
	if(pos == null) pos = 0;
	if(len == null) len = b.length - pos;
	if(pos < 0 || len < 0 || pos + len > b.length) throw haxe.io.Error.OutsideBounds;
	this.b = b.b;
	this.pos = pos;
	this.len = len;
	this.totlen = len;
};
$hxClasses["haxe.io.BytesInput"] = haxe.io.BytesInput;
haxe.io.BytesInput.__name__ = ["haxe","io","BytesInput"];
haxe.io.BytesInput.__super__ = haxe.io.Input;
haxe.io.BytesInput.prototype = $extend(haxe.io.Input.prototype,{
	b: null
	,pos: null
	,len: null
	,totlen: null
	,get_position: function() {
		return this.pos;
	}
	,get_length: function() {
		return this.totlen;
	}
	,set_position: function(p) {
		if(p < 0) p = 0; else if(p > this.totlen) p = this.totlen;
		this.len = this.totlen - p;
		return this.pos = p;
	}
	,readByte: function() {
		if(this.len == 0) throw new haxe.io.Eof();
		this.len--;
		return this.b[this.pos++];
	}
	,readBytes: function(buf,pos,len) {
		if(pos < 0 || len < 0 || pos + len > buf.length) throw haxe.io.Error.OutsideBounds;
		if(this.len == 0 && len > 0) throw new haxe.io.Eof();
		if(this.len < len) len = this.len;
		var b1 = this.b;
		var b2 = buf.b;
		var _g = 0;
		while(_g < len) {
			var i = _g++;
			b2[pos + i] = b1[this.pos + i];
		}
		this.pos += len;
		this.len -= len;
		return len;
	}
	,__class__: haxe.io.BytesInput
	,__properties__: $extend(haxe.io.Input.prototype.__properties__,{get_length:"get_length",set_position:"set_position",get_position:"get_position"})
});
haxe.io.Output = function() { };
$hxClasses["haxe.io.Output"] = haxe.io.Output;
haxe.io.Output.__name__ = ["haxe","io","Output"];
haxe.io.Output.prototype = {
	bigEndian: null
	,writeByte: function(c) {
		throw "Not implemented";
	}
	,writeBytes: function(s,pos,len) {
		var k = len;
		var b = s.b;
		if(pos < 0 || len < 0 || pos + len > s.length) throw haxe.io.Error.OutsideBounds;
		while(k > 0) {
			this.writeByte(b[pos]);
			pos++;
			k--;
		}
		return len;
	}
	,flush: function() {
	}
	,close: function() {
	}
	,set_bigEndian: function(b) {
		this.bigEndian = b;
		return b;
	}
	,write: function(s) {
		var l = s.length;
		var p = 0;
		while(l > 0) {
			var k = this.writeBytes(s,p,l);
			if(k == 0) throw haxe.io.Error.Blocked;
			p += k;
			l -= k;
		}
	}
	,writeFullBytes: function(s,pos,len) {
		while(len > 0) {
			var k = this.writeBytes(s,pos,len);
			pos += k;
			len -= k;
		}
	}
	,writeFloat: function(x) {
		if(x == 0.0) {
			this.writeByte(0);
			this.writeByte(0);
			this.writeByte(0);
			this.writeByte(0);
			return;
		}
		var exp = Math.floor(Math.log(Math.abs(x)) / haxe.io.Output.LN2);
		var sig = Math.floor(Math.abs(x) / Math.pow(2,exp) * 8388608) & 8388607;
		var b4;
		b4 = exp + 127 >> 1 | (exp > 0?x < 0?128:64:x < 0?128:0);
		var b3 = exp + 127 << 7 & 255 | sig >> 16 & 127;
		var b2 = sig >> 8 & 255;
		var b1 = sig & 255;
		if(this.bigEndian) {
			this.writeByte(b4);
			this.writeByte(b3);
			this.writeByte(b2);
			this.writeByte(b1);
		} else {
			this.writeByte(b1);
			this.writeByte(b2);
			this.writeByte(b3);
			this.writeByte(b4);
		}
	}
	,writeDouble: function(x) {
		if(x == 0.0) {
			this.writeByte(0);
			this.writeByte(0);
			this.writeByte(0);
			this.writeByte(0);
			this.writeByte(0);
			this.writeByte(0);
			this.writeByte(0);
			this.writeByte(0);
			return;
		}
		var exp = Math.floor(Math.log(Math.abs(x)) / haxe.io.Output.LN2);
		var sig = Math.floor(Math.abs(x) / Math.pow(2,exp) * Math.pow(2,52));
		var sig_h = sig & 34359738367;
		var sig_l = Math.floor(sig / Math.pow(2,32));
		var b8;
		b8 = exp + 1023 >> 4 | (exp > 0?x < 0?128:64:x < 0?128:0);
		var b7 = exp + 1023 << 4 & 255 | sig_l >> 16 & 15;
		var b6 = sig_l >> 8 & 255;
		var b5 = sig_l & 255;
		var b4 = sig_h >> 24 & 255;
		var b3 = sig_h >> 16 & 255;
		var b2 = sig_h >> 8 & 255;
		var b1 = sig_h & 255;
		if(this.bigEndian) {
			this.writeByte(b8);
			this.writeByte(b7);
			this.writeByte(b6);
			this.writeByte(b5);
			this.writeByte(b4);
			this.writeByte(b3);
			this.writeByte(b2);
			this.writeByte(b1);
		} else {
			this.writeByte(b1);
			this.writeByte(b2);
			this.writeByte(b3);
			this.writeByte(b4);
			this.writeByte(b5);
			this.writeByte(b6);
			this.writeByte(b7);
			this.writeByte(b8);
		}
	}
	,writeInt8: function(x) {
		if(x < -128 || x >= 128) throw haxe.io.Error.Overflow;
		this.writeByte(x & 255);
	}
	,writeInt16: function(x) {
		if(x < -32768 || x >= 32768) throw haxe.io.Error.Overflow;
		this.writeUInt16(x & 65535);
	}
	,writeUInt16: function(x) {
		if(x < 0 || x >= 65536) throw haxe.io.Error.Overflow;
		if(this.bigEndian) {
			this.writeByte(x >> 8);
			this.writeByte(x & 255);
		} else {
			this.writeByte(x & 255);
			this.writeByte(x >> 8);
		}
	}
	,writeInt24: function(x) {
		if(x < -8388608 || x >= 8388608) throw haxe.io.Error.Overflow;
		this.writeUInt24(x & 16777215);
	}
	,writeUInt24: function(x) {
		if(x < 0 || x >= 16777216) throw haxe.io.Error.Overflow;
		if(this.bigEndian) {
			this.writeByte(x >> 16);
			this.writeByte(x >> 8 & 255);
			this.writeByte(x & 255);
		} else {
			this.writeByte(x & 255);
			this.writeByte(x >> 8 & 255);
			this.writeByte(x >> 16);
		}
	}
	,writeInt32: function(x) {
		if(this.bigEndian) {
			this.writeByte(x >>> 24);
			this.writeByte(x >> 16 & 255);
			this.writeByte(x >> 8 & 255);
			this.writeByte(x & 255);
		} else {
			this.writeByte(x & 255);
			this.writeByte(x >> 8 & 255);
			this.writeByte(x >> 16 & 255);
			this.writeByte(x >>> 24);
		}
	}
	,prepare: function(nbytes) {
	}
	,writeInput: function(i,bufsize) {
		if(bufsize == null) bufsize = 4096;
		var buf = haxe.io.Bytes.alloc(bufsize);
		try {
			while(true) {
				var len = i.readBytes(buf,0,bufsize);
				if(len == 0) throw haxe.io.Error.Blocked;
				var p = 0;
				while(len > 0) {
					var k = this.writeBytes(buf,p,len);
					if(k == 0) throw haxe.io.Error.Blocked;
					p += k;
					len -= k;
				}
			}
		} catch( e ) {
			if( js.Boot.__instanceof(e,haxe.io.Eof) ) {
			} else throw(e);
		}
	}
	,writeString: function(s) {
		var b = haxe.io.Bytes.ofString(s);
		this.writeFullBytes(b,0,b.length);
	}
	,__class__: haxe.io.Output
	,__properties__: {set_bigEndian:"set_bigEndian"}
};
haxe.io.BytesOutput = function() {
	this.b = new haxe.io.BytesBuffer();
};
$hxClasses["haxe.io.BytesOutput"] = haxe.io.BytesOutput;
haxe.io.BytesOutput.__name__ = ["haxe","io","BytesOutput"];
haxe.io.BytesOutput.__super__ = haxe.io.Output;
haxe.io.BytesOutput.prototype = $extend(haxe.io.Output.prototype,{
	b: null
	,get_length: function() {
		return this.b.b.length;
	}
	,writeByte: function(c) {
		this.b.b.push(c);
	}
	,writeBytes: function(buf,pos,len) {
		this.b.addBytes(buf,pos,len);
		return len;
	}
	,getBytes: function() {
		return this.b.getBytes();
	}
	,__class__: haxe.io.BytesOutput
	,__properties__: $extend(haxe.io.Output.prototype.__properties__,{get_length:"get_length"})
});
haxe.io.Eof = function() {
};
$hxClasses["haxe.io.Eof"] = haxe.io.Eof;
haxe.io.Eof.__name__ = ["haxe","io","Eof"];
haxe.io.Eof.prototype = {
	toString: function() {
		return "Eof";
	}
	,__class__: haxe.io.Eof
};
haxe.io.Error = $hxClasses["haxe.io.Error"] = { __ename__ : ["haxe","io","Error"], __constructs__ : ["Blocked","Overflow","OutsideBounds","Custom"] };
haxe.io.Error.Blocked = ["Blocked",0];
haxe.io.Error.Blocked.toString = $estr;
haxe.io.Error.Blocked.__enum__ = haxe.io.Error;
haxe.io.Error.Overflow = ["Overflow",1];
haxe.io.Error.Overflow.toString = $estr;
haxe.io.Error.Overflow.__enum__ = haxe.io.Error;
haxe.io.Error.OutsideBounds = ["OutsideBounds",2];
haxe.io.Error.OutsideBounds.toString = $estr;
haxe.io.Error.OutsideBounds.__enum__ = haxe.io.Error;
haxe.io.Error.Custom = function(e) { var $x = ["Custom",3,e]; $x.__enum__ = haxe.io.Error; $x.toString = $estr; return $x; };
haxe.io.Error.__empty_constructs__ = [haxe.io.Error.Blocked,haxe.io.Error.Overflow,haxe.io.Error.OutsideBounds];
haxe.io.Path = function(path) {
	var c1 = path.lastIndexOf("/");
	var c2 = path.lastIndexOf("\\");
	if(c1 < c2) {
		this.dir = HxOverrides.substr(path,0,c2);
		path = HxOverrides.substr(path,c2 + 1,null);
		this.backslash = true;
	} else if(c2 < c1) {
		this.dir = HxOverrides.substr(path,0,c1);
		path = HxOverrides.substr(path,c1 + 1,null);
	} else this.dir = null;
	var cp = path.lastIndexOf(".");
	if(cp != -1) {
		this.ext = HxOverrides.substr(path,cp + 1,null);
		this.file = HxOverrides.substr(path,0,cp);
	} else {
		this.ext = null;
		this.file = path;
	}
};
$hxClasses["haxe.io.Path"] = haxe.io.Path;
haxe.io.Path.__name__ = ["haxe","io","Path"];
haxe.io.Path.withoutExtension = function(path) {
	var s = new haxe.io.Path(path);
	s.ext = null;
	return s.toString();
};
haxe.io.Path.withoutDirectory = function(path) {
	var s = new haxe.io.Path(path);
	s.dir = null;
	return s.toString();
};
haxe.io.Path.directory = function(path) {
	var s = new haxe.io.Path(path);
	if(s.dir == null) return "";
	return s.dir;
};
haxe.io.Path.extension = function(path) {
	var s = new haxe.io.Path(path);
	if(s.ext == null) return "";
	return s.ext;
};
haxe.io.Path.withExtension = function(path,ext) {
	var s = new haxe.io.Path(path);
	s.ext = ext;
	return s.toString();
};
haxe.io.Path.join = function(paths) {
	var paths1 = paths.filter(function(s) {
		return s != null && s != "";
	});
	if(paths1.length == 0) return "";
	var path = paths1[0];
	var _g1 = 1;
	var _g = paths1.length;
	while(_g1 < _g) {
		var i = _g1++;
		path = haxe.io.Path.addTrailingSlash(path);
		path += paths1[i];
	}
	return haxe.io.Path.normalize(path);
};
haxe.io.Path.normalize = function(path) {
	var slash = "/";
	path = path.split("\\").join("/");
	if(path == null || path == slash) return slash;
	var target = [];
	var src;
	var parts;
	var token;
	src = path.split(slash);
	var _g1 = 0;
	var _g = src.length;
	while(_g1 < _g) {
		var i = _g1++;
		token = src[i];
		if(token == "..") target.pop(); else if(token != ".") target.push(token);
	}
	var tmp = target.join(slash);
	var regex = new EReg("([^:])/+","g");
	var result = regex.replace(tmp,"$1" + slash);
	return result;
};
haxe.io.Path.addTrailingSlash = function(path) {
	if(path.length == 0) return "/";
	var c1 = path.lastIndexOf("/");
	var c2 = path.lastIndexOf("\\");
	if(c1 < c2) {
		if(c2 != path.length - 1) return path + "\\"; else return path;
	} else if(c1 != path.length - 1) return path + "/"; else return path;
};
haxe.io.Path.removeTrailingSlashes = function(path) {
	try {
		while(true) {
			var _g = HxOverrides.cca(path,path.length - 1);
			switch(_g) {
			case 47:case 92:
				path = HxOverrides.substr(path,0,-1);
				break;
			default:
				throw "__break__";
			}
		}
	} catch( e ) { if( e != "__break__" ) throw e; }
	return path;
};
haxe.io.Path.prototype = {
	dir: null
	,file: null
	,ext: null
	,backslash: null
	,toString: function() {
		return (this.dir == null?"":this.dir + (this.backslash?"\\":"/")) + this.file + (this.ext == null?"":"." + this.ext);
	}
	,__class__: haxe.io.Path
};
haxe.macro = {};
haxe.macro.Compiler = function() { };
$hxClasses["haxe.macro.Compiler"] = haxe.macro.Compiler;
haxe.macro.Compiler.__name__ = ["haxe","macro","Compiler"];
haxe.macro.Context = function() { };
$hxClasses["haxe.macro.Context"] = haxe.macro.Context;
haxe.macro.Context.__name__ = ["haxe","macro","Context"];
haxe.macro.Constant = $hxClasses["haxe.macro.Constant"] = { __ename__ : ["haxe","macro","Constant"], __constructs__ : ["CInt","CFloat","CString","CIdent","CRegexp"] };
haxe.macro.Constant.CInt = function(v) { var $x = ["CInt",0,v]; $x.__enum__ = haxe.macro.Constant; $x.toString = $estr; return $x; };
haxe.macro.Constant.CFloat = function(f) { var $x = ["CFloat",1,f]; $x.__enum__ = haxe.macro.Constant; $x.toString = $estr; return $x; };
haxe.macro.Constant.CString = function(s) { var $x = ["CString",2,s]; $x.__enum__ = haxe.macro.Constant; $x.toString = $estr; return $x; };
haxe.macro.Constant.CIdent = function(s) { var $x = ["CIdent",3,s]; $x.__enum__ = haxe.macro.Constant; $x.toString = $estr; return $x; };
haxe.macro.Constant.CRegexp = function(r,opt) { var $x = ["CRegexp",4,r,opt]; $x.__enum__ = haxe.macro.Constant; $x.toString = $estr; return $x; };
haxe.macro.Constant.__empty_constructs__ = [];
haxe.macro.Binop = $hxClasses["haxe.macro.Binop"] = { __ename__ : ["haxe","macro","Binop"], __constructs__ : ["OpAdd","OpMult","OpDiv","OpSub","OpAssign","OpEq","OpNotEq","OpGt","OpGte","OpLt","OpLte","OpAnd","OpOr","OpXor","OpBoolAnd","OpBoolOr","OpShl","OpShr","OpUShr","OpMod","OpAssignOp","OpInterval","OpArrow"] };
haxe.macro.Binop.OpAdd = ["OpAdd",0];
haxe.macro.Binop.OpAdd.toString = $estr;
haxe.macro.Binop.OpAdd.__enum__ = haxe.macro.Binop;
haxe.macro.Binop.OpMult = ["OpMult",1];
haxe.macro.Binop.OpMult.toString = $estr;
haxe.macro.Binop.OpMult.__enum__ = haxe.macro.Binop;
haxe.macro.Binop.OpDiv = ["OpDiv",2];
haxe.macro.Binop.OpDiv.toString = $estr;
haxe.macro.Binop.OpDiv.__enum__ = haxe.macro.Binop;
haxe.macro.Binop.OpSub = ["OpSub",3];
haxe.macro.Binop.OpSub.toString = $estr;
haxe.macro.Binop.OpSub.__enum__ = haxe.macro.Binop;
haxe.macro.Binop.OpAssign = ["OpAssign",4];
haxe.macro.Binop.OpAssign.toString = $estr;
haxe.macro.Binop.OpAssign.__enum__ = haxe.macro.Binop;
haxe.macro.Binop.OpEq = ["OpEq",5];
haxe.macro.Binop.OpEq.toString = $estr;
haxe.macro.Binop.OpEq.__enum__ = haxe.macro.Binop;
haxe.macro.Binop.OpNotEq = ["OpNotEq",6];
haxe.macro.Binop.OpNotEq.toString = $estr;
haxe.macro.Binop.OpNotEq.__enum__ = haxe.macro.Binop;
haxe.macro.Binop.OpGt = ["OpGt",7];
haxe.macro.Binop.OpGt.toString = $estr;
haxe.macro.Binop.OpGt.__enum__ = haxe.macro.Binop;
haxe.macro.Binop.OpGte = ["OpGte",8];
haxe.macro.Binop.OpGte.toString = $estr;
haxe.macro.Binop.OpGte.__enum__ = haxe.macro.Binop;
haxe.macro.Binop.OpLt = ["OpLt",9];
haxe.macro.Binop.OpLt.toString = $estr;
haxe.macro.Binop.OpLt.__enum__ = haxe.macro.Binop;
haxe.macro.Binop.OpLte = ["OpLte",10];
haxe.macro.Binop.OpLte.toString = $estr;
haxe.macro.Binop.OpLte.__enum__ = haxe.macro.Binop;
haxe.macro.Binop.OpAnd = ["OpAnd",11];
haxe.macro.Binop.OpAnd.toString = $estr;
haxe.macro.Binop.OpAnd.__enum__ = haxe.macro.Binop;
haxe.macro.Binop.OpOr = ["OpOr",12];
haxe.macro.Binop.OpOr.toString = $estr;
haxe.macro.Binop.OpOr.__enum__ = haxe.macro.Binop;
haxe.macro.Binop.OpXor = ["OpXor",13];
haxe.macro.Binop.OpXor.toString = $estr;
haxe.macro.Binop.OpXor.__enum__ = haxe.macro.Binop;
haxe.macro.Binop.OpBoolAnd = ["OpBoolAnd",14];
haxe.macro.Binop.OpBoolAnd.toString = $estr;
haxe.macro.Binop.OpBoolAnd.__enum__ = haxe.macro.Binop;
haxe.macro.Binop.OpBoolOr = ["OpBoolOr",15];
haxe.macro.Binop.OpBoolOr.toString = $estr;
haxe.macro.Binop.OpBoolOr.__enum__ = haxe.macro.Binop;
haxe.macro.Binop.OpShl = ["OpShl",16];
haxe.macro.Binop.OpShl.toString = $estr;
haxe.macro.Binop.OpShl.__enum__ = haxe.macro.Binop;
haxe.macro.Binop.OpShr = ["OpShr",17];
haxe.macro.Binop.OpShr.toString = $estr;
haxe.macro.Binop.OpShr.__enum__ = haxe.macro.Binop;
haxe.macro.Binop.OpUShr = ["OpUShr",18];
haxe.macro.Binop.OpUShr.toString = $estr;
haxe.macro.Binop.OpUShr.__enum__ = haxe.macro.Binop;
haxe.macro.Binop.OpMod = ["OpMod",19];
haxe.macro.Binop.OpMod.toString = $estr;
haxe.macro.Binop.OpMod.__enum__ = haxe.macro.Binop;
haxe.macro.Binop.OpAssignOp = function(op) { var $x = ["OpAssignOp",20,op]; $x.__enum__ = haxe.macro.Binop; $x.toString = $estr; return $x; };
haxe.macro.Binop.OpInterval = ["OpInterval",21];
haxe.macro.Binop.OpInterval.toString = $estr;
haxe.macro.Binop.OpInterval.__enum__ = haxe.macro.Binop;
haxe.macro.Binop.OpArrow = ["OpArrow",22];
haxe.macro.Binop.OpArrow.toString = $estr;
haxe.macro.Binop.OpArrow.__enum__ = haxe.macro.Binop;
haxe.macro.Binop.__empty_constructs__ = [haxe.macro.Binop.OpAdd,haxe.macro.Binop.OpMult,haxe.macro.Binop.OpDiv,haxe.macro.Binop.OpSub,haxe.macro.Binop.OpAssign,haxe.macro.Binop.OpEq,haxe.macro.Binop.OpNotEq,haxe.macro.Binop.OpGt,haxe.macro.Binop.OpGte,haxe.macro.Binop.OpLt,haxe.macro.Binop.OpLte,haxe.macro.Binop.OpAnd,haxe.macro.Binop.OpOr,haxe.macro.Binop.OpXor,haxe.macro.Binop.OpBoolAnd,haxe.macro.Binop.OpBoolOr,haxe.macro.Binop.OpShl,haxe.macro.Binop.OpShr,haxe.macro.Binop.OpUShr,haxe.macro.Binop.OpMod,haxe.macro.Binop.OpInterval,haxe.macro.Binop.OpArrow];
haxe.macro.Unop = $hxClasses["haxe.macro.Unop"] = { __ename__ : ["haxe","macro","Unop"], __constructs__ : ["OpIncrement","OpDecrement","OpNot","OpNeg","OpNegBits"] };
haxe.macro.Unop.OpIncrement = ["OpIncrement",0];
haxe.macro.Unop.OpIncrement.toString = $estr;
haxe.macro.Unop.OpIncrement.__enum__ = haxe.macro.Unop;
haxe.macro.Unop.OpDecrement = ["OpDecrement",1];
haxe.macro.Unop.OpDecrement.toString = $estr;
haxe.macro.Unop.OpDecrement.__enum__ = haxe.macro.Unop;
haxe.macro.Unop.OpNot = ["OpNot",2];
haxe.macro.Unop.OpNot.toString = $estr;
haxe.macro.Unop.OpNot.__enum__ = haxe.macro.Unop;
haxe.macro.Unop.OpNeg = ["OpNeg",3];
haxe.macro.Unop.OpNeg.toString = $estr;
haxe.macro.Unop.OpNeg.__enum__ = haxe.macro.Unop;
haxe.macro.Unop.OpNegBits = ["OpNegBits",4];
haxe.macro.Unop.OpNegBits.toString = $estr;
haxe.macro.Unop.OpNegBits.__enum__ = haxe.macro.Unop;
haxe.macro.Unop.__empty_constructs__ = [haxe.macro.Unop.OpIncrement,haxe.macro.Unop.OpDecrement,haxe.macro.Unop.OpNot,haxe.macro.Unop.OpNeg,haxe.macro.Unop.OpNegBits];
haxe.macro.ExprDef = $hxClasses["haxe.macro.ExprDef"] = { __ename__ : ["haxe","macro","ExprDef"], __constructs__ : ["EConst","EArray","EBinop","EField","EParenthesis","EObjectDecl","EArrayDecl","ECall","ENew","EUnop","EVars","EFunction","EBlock","EFor","EIn","EIf","EWhile","ESwitch","ETry","EReturn","EBreak","EContinue","EUntyped","EThrow","ECast","EDisplay","EDisplayNew","ETernary","ECheckType","EMeta"] };
haxe.macro.ExprDef.EConst = function(c) { var $x = ["EConst",0,c]; $x.__enum__ = haxe.macro.ExprDef; $x.toString = $estr; return $x; };
haxe.macro.ExprDef.EArray = function(e1,e2) { var $x = ["EArray",1,e1,e2]; $x.__enum__ = haxe.macro.ExprDef; $x.toString = $estr; return $x; };
haxe.macro.ExprDef.EBinop = function(op,e1,e2) { var $x = ["EBinop",2,op,e1,e2]; $x.__enum__ = haxe.macro.ExprDef; $x.toString = $estr; return $x; };
haxe.macro.ExprDef.EField = function(e,field) { var $x = ["EField",3,e,field]; $x.__enum__ = haxe.macro.ExprDef; $x.toString = $estr; return $x; };
haxe.macro.ExprDef.EParenthesis = function(e) { var $x = ["EParenthesis",4,e]; $x.__enum__ = haxe.macro.ExprDef; $x.toString = $estr; return $x; };
haxe.macro.ExprDef.EObjectDecl = function(fields) { var $x = ["EObjectDecl",5,fields]; $x.__enum__ = haxe.macro.ExprDef; $x.toString = $estr; return $x; };
haxe.macro.ExprDef.EArrayDecl = function(values) { var $x = ["EArrayDecl",6,values]; $x.__enum__ = haxe.macro.ExprDef; $x.toString = $estr; return $x; };
haxe.macro.ExprDef.ECall = function(e,params) { var $x = ["ECall",7,e,params]; $x.__enum__ = haxe.macro.ExprDef; $x.toString = $estr; return $x; };
haxe.macro.ExprDef.ENew = function(t,params) { var $x = ["ENew",8,t,params]; $x.__enum__ = haxe.macro.ExprDef; $x.toString = $estr; return $x; };
haxe.macro.ExprDef.EUnop = function(op,postFix,e) { var $x = ["EUnop",9,op,postFix,e]; $x.__enum__ = haxe.macro.ExprDef; $x.toString = $estr; return $x; };
haxe.macro.ExprDef.EVars = function(vars) { var $x = ["EVars",10,vars]; $x.__enum__ = haxe.macro.ExprDef; $x.toString = $estr; return $x; };
haxe.macro.ExprDef.EFunction = function(name,f) { var $x = ["EFunction",11,name,f]; $x.__enum__ = haxe.macro.ExprDef; $x.toString = $estr; return $x; };
haxe.macro.ExprDef.EBlock = function(exprs) { var $x = ["EBlock",12,exprs]; $x.__enum__ = haxe.macro.ExprDef; $x.toString = $estr; return $x; };
haxe.macro.ExprDef.EFor = function(it,expr) { var $x = ["EFor",13,it,expr]; $x.__enum__ = haxe.macro.ExprDef; $x.toString = $estr; return $x; };
haxe.macro.ExprDef.EIn = function(e1,e2) { var $x = ["EIn",14,e1,e2]; $x.__enum__ = haxe.macro.ExprDef; $x.toString = $estr; return $x; };
haxe.macro.ExprDef.EIf = function(econd,eif,eelse) { var $x = ["EIf",15,econd,eif,eelse]; $x.__enum__ = haxe.macro.ExprDef; $x.toString = $estr; return $x; };
haxe.macro.ExprDef.EWhile = function(econd,e,normalWhile) { var $x = ["EWhile",16,econd,e,normalWhile]; $x.__enum__ = haxe.macro.ExprDef; $x.toString = $estr; return $x; };
haxe.macro.ExprDef.ESwitch = function(e,cases,edef) { var $x = ["ESwitch",17,e,cases,edef]; $x.__enum__ = haxe.macro.ExprDef; $x.toString = $estr; return $x; };
haxe.macro.ExprDef.ETry = function(e,catches) { var $x = ["ETry",18,e,catches]; $x.__enum__ = haxe.macro.ExprDef; $x.toString = $estr; return $x; };
haxe.macro.ExprDef.EReturn = function(e) { var $x = ["EReturn",19,e]; $x.__enum__ = haxe.macro.ExprDef; $x.toString = $estr; return $x; };
haxe.macro.ExprDef.EBreak = ["EBreak",20];
haxe.macro.ExprDef.EBreak.toString = $estr;
haxe.macro.ExprDef.EBreak.__enum__ = haxe.macro.ExprDef;
haxe.macro.ExprDef.EContinue = ["EContinue",21];
haxe.macro.ExprDef.EContinue.toString = $estr;
haxe.macro.ExprDef.EContinue.__enum__ = haxe.macro.ExprDef;
haxe.macro.ExprDef.EUntyped = function(e) { var $x = ["EUntyped",22,e]; $x.__enum__ = haxe.macro.ExprDef; $x.toString = $estr; return $x; };
haxe.macro.ExprDef.EThrow = function(e) { var $x = ["EThrow",23,e]; $x.__enum__ = haxe.macro.ExprDef; $x.toString = $estr; return $x; };
haxe.macro.ExprDef.ECast = function(e,t) { var $x = ["ECast",24,e,t]; $x.__enum__ = haxe.macro.ExprDef; $x.toString = $estr; return $x; };
haxe.macro.ExprDef.EDisplay = function(e,isCall) { var $x = ["EDisplay",25,e,isCall]; $x.__enum__ = haxe.macro.ExprDef; $x.toString = $estr; return $x; };
haxe.macro.ExprDef.EDisplayNew = function(t) { var $x = ["EDisplayNew",26,t]; $x.__enum__ = haxe.macro.ExprDef; $x.toString = $estr; return $x; };
haxe.macro.ExprDef.ETernary = function(econd,eif,eelse) { var $x = ["ETernary",27,econd,eif,eelse]; $x.__enum__ = haxe.macro.ExprDef; $x.toString = $estr; return $x; };
haxe.macro.ExprDef.ECheckType = function(e,t) { var $x = ["ECheckType",28,e,t]; $x.__enum__ = haxe.macro.ExprDef; $x.toString = $estr; return $x; };
haxe.macro.ExprDef.EMeta = function(s,e) { var $x = ["EMeta",29,s,e]; $x.__enum__ = haxe.macro.ExprDef; $x.toString = $estr; return $x; };
haxe.macro.ExprDef.__empty_constructs__ = [haxe.macro.ExprDef.EBreak,haxe.macro.ExprDef.EContinue];
haxe.macro.ComplexType = $hxClasses["haxe.macro.ComplexType"] = { __ename__ : ["haxe","macro","ComplexType"], __constructs__ : ["TPath","TFunction","TAnonymous","TParent","TExtend","TOptional"] };
haxe.macro.ComplexType.TPath = function(p) { var $x = ["TPath",0,p]; $x.__enum__ = haxe.macro.ComplexType; $x.toString = $estr; return $x; };
haxe.macro.ComplexType.TFunction = function(args,ret) { var $x = ["TFunction",1,args,ret]; $x.__enum__ = haxe.macro.ComplexType; $x.toString = $estr; return $x; };
haxe.macro.ComplexType.TAnonymous = function(fields) { var $x = ["TAnonymous",2,fields]; $x.__enum__ = haxe.macro.ComplexType; $x.toString = $estr; return $x; };
haxe.macro.ComplexType.TParent = function(t) { var $x = ["TParent",3,t]; $x.__enum__ = haxe.macro.ComplexType; $x.toString = $estr; return $x; };
haxe.macro.ComplexType.TExtend = function(p,fields) { var $x = ["TExtend",4,p,fields]; $x.__enum__ = haxe.macro.ComplexType; $x.toString = $estr; return $x; };
haxe.macro.ComplexType.TOptional = function(t) { var $x = ["TOptional",5,t]; $x.__enum__ = haxe.macro.ComplexType; $x.toString = $estr; return $x; };
haxe.macro.ComplexType.__empty_constructs__ = [];
haxe.macro.TypeParam = $hxClasses["haxe.macro.TypeParam"] = { __ename__ : ["haxe","macro","TypeParam"], __constructs__ : ["TPType","TPExpr"] };
haxe.macro.TypeParam.TPType = function(t) { var $x = ["TPType",0,t]; $x.__enum__ = haxe.macro.TypeParam; $x.toString = $estr; return $x; };
haxe.macro.TypeParam.TPExpr = function(e) { var $x = ["TPExpr",1,e]; $x.__enum__ = haxe.macro.TypeParam; $x.toString = $estr; return $x; };
haxe.macro.TypeParam.__empty_constructs__ = [];
haxe.macro.Access = $hxClasses["haxe.macro.Access"] = { __ename__ : ["haxe","macro","Access"], __constructs__ : ["APublic","APrivate","AStatic","AOverride","ADynamic","AInline","AMacro"] };
haxe.macro.Access.APublic = ["APublic",0];
haxe.macro.Access.APublic.toString = $estr;
haxe.macro.Access.APublic.__enum__ = haxe.macro.Access;
haxe.macro.Access.APrivate = ["APrivate",1];
haxe.macro.Access.APrivate.toString = $estr;
haxe.macro.Access.APrivate.__enum__ = haxe.macro.Access;
haxe.macro.Access.AStatic = ["AStatic",2];
haxe.macro.Access.AStatic.toString = $estr;
haxe.macro.Access.AStatic.__enum__ = haxe.macro.Access;
haxe.macro.Access.AOverride = ["AOverride",3];
haxe.macro.Access.AOverride.toString = $estr;
haxe.macro.Access.AOverride.__enum__ = haxe.macro.Access;
haxe.macro.Access.ADynamic = ["ADynamic",4];
haxe.macro.Access.ADynamic.toString = $estr;
haxe.macro.Access.ADynamic.__enum__ = haxe.macro.Access;
haxe.macro.Access.AInline = ["AInline",5];
haxe.macro.Access.AInline.toString = $estr;
haxe.macro.Access.AInline.__enum__ = haxe.macro.Access;
haxe.macro.Access.AMacro = ["AMacro",6];
haxe.macro.Access.AMacro.toString = $estr;
haxe.macro.Access.AMacro.__enum__ = haxe.macro.Access;
haxe.macro.Access.__empty_constructs__ = [haxe.macro.Access.APublic,haxe.macro.Access.APrivate,haxe.macro.Access.AStatic,haxe.macro.Access.AOverride,haxe.macro.Access.ADynamic,haxe.macro.Access.AInline,haxe.macro.Access.AMacro];
haxe.macro.FieldType = $hxClasses["haxe.macro.FieldType"] = { __ename__ : ["haxe","macro","FieldType"], __constructs__ : ["FVar","FFun","FProp"] };
haxe.macro.FieldType.FVar = function(t,e) { var $x = ["FVar",0,t,e]; $x.__enum__ = haxe.macro.FieldType; $x.toString = $estr; return $x; };
haxe.macro.FieldType.FFun = function(f) { var $x = ["FFun",1,f]; $x.__enum__ = haxe.macro.FieldType; $x.toString = $estr; return $x; };
haxe.macro.FieldType.FProp = function(get,set,t,e) { var $x = ["FProp",2,get,set,t,e]; $x.__enum__ = haxe.macro.FieldType; $x.toString = $estr; return $x; };
haxe.macro.FieldType.__empty_constructs__ = [];
haxe.macro.TypeDefKind = $hxClasses["haxe.macro.TypeDefKind"] = { __ename__ : ["haxe","macro","TypeDefKind"], __constructs__ : ["TDEnum","TDStructure","TDClass","TDAlias","TDAbstract"] };
haxe.macro.TypeDefKind.TDEnum = ["TDEnum",0];
haxe.macro.TypeDefKind.TDEnum.toString = $estr;
haxe.macro.TypeDefKind.TDEnum.__enum__ = haxe.macro.TypeDefKind;
haxe.macro.TypeDefKind.TDStructure = ["TDStructure",1];
haxe.macro.TypeDefKind.TDStructure.toString = $estr;
haxe.macro.TypeDefKind.TDStructure.__enum__ = haxe.macro.TypeDefKind;
haxe.macro.TypeDefKind.TDClass = function(superClass,interfaces,isInterface) { var $x = ["TDClass",2,superClass,interfaces,isInterface]; $x.__enum__ = haxe.macro.TypeDefKind; $x.toString = $estr; return $x; };
haxe.macro.TypeDefKind.TDAlias = function(t) { var $x = ["TDAlias",3,t]; $x.__enum__ = haxe.macro.TypeDefKind; $x.toString = $estr; return $x; };
haxe.macro.TypeDefKind.TDAbstract = function(tthis,from,to) { var $x = ["TDAbstract",4,tthis,from,to]; $x.__enum__ = haxe.macro.TypeDefKind; $x.toString = $estr; return $x; };
haxe.macro.TypeDefKind.__empty_constructs__ = [haxe.macro.TypeDefKind.TDEnum,haxe.macro.TypeDefKind.TDStructure];
haxe.macro.Error = function(m,p) {
	this.message = m;
	this.pos = p;
};
$hxClasses["haxe.macro.Error"] = haxe.macro.Error;
haxe.macro.Error.__name__ = ["haxe","macro","Error"];
haxe.macro.Error.prototype = {
	message: null
	,pos: null
	,toString: function() {
		return this.message;
	}
	,__class__: haxe.macro.Error
};
haxe.macro.Type = $hxClasses["haxe.macro.Type"] = { __ename__ : ["haxe","macro","Type"], __constructs__ : ["TMono","TEnum","TInst","TType","TFun","TAnonymous","TDynamic","TLazy","TAbstract"] };
haxe.macro.Type.TMono = function(t) { var $x = ["TMono",0,t]; $x.__enum__ = haxe.macro.Type; $x.toString = $estr; return $x; };
haxe.macro.Type.TEnum = function(t,params) { var $x = ["TEnum",1,t,params]; $x.__enum__ = haxe.macro.Type; $x.toString = $estr; return $x; };
haxe.macro.Type.TInst = function(t,params) { var $x = ["TInst",2,t,params]; $x.__enum__ = haxe.macro.Type; $x.toString = $estr; return $x; };
haxe.macro.Type.TType = function(t,params) { var $x = ["TType",3,t,params]; $x.__enum__ = haxe.macro.Type; $x.toString = $estr; return $x; };
haxe.macro.Type.TFun = function(args,ret) { var $x = ["TFun",4,args,ret]; $x.__enum__ = haxe.macro.Type; $x.toString = $estr; return $x; };
haxe.macro.Type.TAnonymous = function(a) { var $x = ["TAnonymous",5,a]; $x.__enum__ = haxe.macro.Type; $x.toString = $estr; return $x; };
haxe.macro.Type.TDynamic = function(t) { var $x = ["TDynamic",6,t]; $x.__enum__ = haxe.macro.Type; $x.toString = $estr; return $x; };
haxe.macro.Type.TLazy = function(f) { var $x = ["TLazy",7,f]; $x.__enum__ = haxe.macro.Type; $x.toString = $estr; return $x; };
haxe.macro.Type.TAbstract = function(t,params) { var $x = ["TAbstract",8,t,params]; $x.__enum__ = haxe.macro.Type; $x.toString = $estr; return $x; };
haxe.macro.Type.__empty_constructs__ = [];
haxe.macro.AnonStatus = $hxClasses["haxe.macro.AnonStatus"] = { __ename__ : ["haxe","macro","AnonStatus"], __constructs__ : ["AClosed","AOpened","AConst","AClassStatics","AEnumStatics","AAbstractStatics"] };
haxe.macro.AnonStatus.AClosed = ["AClosed",0];
haxe.macro.AnonStatus.AClosed.toString = $estr;
haxe.macro.AnonStatus.AClosed.__enum__ = haxe.macro.AnonStatus;
haxe.macro.AnonStatus.AOpened = ["AOpened",1];
haxe.macro.AnonStatus.AOpened.toString = $estr;
haxe.macro.AnonStatus.AOpened.__enum__ = haxe.macro.AnonStatus;
haxe.macro.AnonStatus.AConst = ["AConst",2];
haxe.macro.AnonStatus.AConst.toString = $estr;
haxe.macro.AnonStatus.AConst.__enum__ = haxe.macro.AnonStatus;
haxe.macro.AnonStatus.AClassStatics = function(t) { var $x = ["AClassStatics",3,t]; $x.__enum__ = haxe.macro.AnonStatus; $x.toString = $estr; return $x; };
haxe.macro.AnonStatus.AEnumStatics = function(t) { var $x = ["AEnumStatics",4,t]; $x.__enum__ = haxe.macro.AnonStatus; $x.toString = $estr; return $x; };
haxe.macro.AnonStatus.AAbstractStatics = function(t) { var $x = ["AAbstractStatics",5,t]; $x.__enum__ = haxe.macro.AnonStatus; $x.toString = $estr; return $x; };
haxe.macro.AnonStatus.__empty_constructs__ = [haxe.macro.AnonStatus.AClosed,haxe.macro.AnonStatus.AOpened,haxe.macro.AnonStatus.AConst];
haxe.macro.ClassKind = $hxClasses["haxe.macro.ClassKind"] = { __ename__ : ["haxe","macro","ClassKind"], __constructs__ : ["KNormal","KTypeParameter","KExtension","KExpr","KGeneric","KGenericInstance","KMacroType","KAbstractImpl","KGenericBuild"] };
haxe.macro.ClassKind.KNormal = ["KNormal",0];
haxe.macro.ClassKind.KNormal.toString = $estr;
haxe.macro.ClassKind.KNormal.__enum__ = haxe.macro.ClassKind;
haxe.macro.ClassKind.KTypeParameter = function(constraints) { var $x = ["KTypeParameter",1,constraints]; $x.__enum__ = haxe.macro.ClassKind; $x.toString = $estr; return $x; };
haxe.macro.ClassKind.KExtension = function(cl,params) { var $x = ["KExtension",2,cl,params]; $x.__enum__ = haxe.macro.ClassKind; $x.toString = $estr; return $x; };
haxe.macro.ClassKind.KExpr = function(expr) { var $x = ["KExpr",3,expr]; $x.__enum__ = haxe.macro.ClassKind; $x.toString = $estr; return $x; };
haxe.macro.ClassKind.KGeneric = ["KGeneric",4];
haxe.macro.ClassKind.KGeneric.toString = $estr;
haxe.macro.ClassKind.KGeneric.__enum__ = haxe.macro.ClassKind;
haxe.macro.ClassKind.KGenericInstance = function(cl,params) { var $x = ["KGenericInstance",5,cl,params]; $x.__enum__ = haxe.macro.ClassKind; $x.toString = $estr; return $x; };
haxe.macro.ClassKind.KMacroType = ["KMacroType",6];
haxe.macro.ClassKind.KMacroType.toString = $estr;
haxe.macro.ClassKind.KMacroType.__enum__ = haxe.macro.ClassKind;
haxe.macro.ClassKind.KAbstractImpl = function(a) { var $x = ["KAbstractImpl",7,a]; $x.__enum__ = haxe.macro.ClassKind; $x.toString = $estr; return $x; };
haxe.macro.ClassKind.KGenericBuild = ["KGenericBuild",8];
haxe.macro.ClassKind.KGenericBuild.toString = $estr;
haxe.macro.ClassKind.KGenericBuild.__enum__ = haxe.macro.ClassKind;
haxe.macro.ClassKind.__empty_constructs__ = [haxe.macro.ClassKind.KNormal,haxe.macro.ClassKind.KGeneric,haxe.macro.ClassKind.KMacroType,haxe.macro.ClassKind.KGenericBuild];
haxe.macro.FieldKind = $hxClasses["haxe.macro.FieldKind"] = { __ename__ : ["haxe","macro","FieldKind"], __constructs__ : ["FVar","FMethod"] };
haxe.macro.FieldKind.FVar = function(read,write) { var $x = ["FVar",0,read,write]; $x.__enum__ = haxe.macro.FieldKind; $x.toString = $estr; return $x; };
haxe.macro.FieldKind.FMethod = function(k) { var $x = ["FMethod",1,k]; $x.__enum__ = haxe.macro.FieldKind; $x.toString = $estr; return $x; };
haxe.macro.FieldKind.__empty_constructs__ = [];
haxe.macro.VarAccess = $hxClasses["haxe.macro.VarAccess"] = { __ename__ : ["haxe","macro","VarAccess"], __constructs__ : ["AccNormal","AccNo","AccNever","AccResolve","AccCall","AccInline","AccRequire"] };
haxe.macro.VarAccess.AccNormal = ["AccNormal",0];
haxe.macro.VarAccess.AccNormal.toString = $estr;
haxe.macro.VarAccess.AccNormal.__enum__ = haxe.macro.VarAccess;
haxe.macro.VarAccess.AccNo = ["AccNo",1];
haxe.macro.VarAccess.AccNo.toString = $estr;
haxe.macro.VarAccess.AccNo.__enum__ = haxe.macro.VarAccess;
haxe.macro.VarAccess.AccNever = ["AccNever",2];
haxe.macro.VarAccess.AccNever.toString = $estr;
haxe.macro.VarAccess.AccNever.__enum__ = haxe.macro.VarAccess;
haxe.macro.VarAccess.AccResolve = ["AccResolve",3];
haxe.macro.VarAccess.AccResolve.toString = $estr;
haxe.macro.VarAccess.AccResolve.__enum__ = haxe.macro.VarAccess;
haxe.macro.VarAccess.AccCall = ["AccCall",4];
haxe.macro.VarAccess.AccCall.toString = $estr;
haxe.macro.VarAccess.AccCall.__enum__ = haxe.macro.VarAccess;
haxe.macro.VarAccess.AccInline = ["AccInline",5];
haxe.macro.VarAccess.AccInline.toString = $estr;
haxe.macro.VarAccess.AccInline.__enum__ = haxe.macro.VarAccess;
haxe.macro.VarAccess.AccRequire = function(r,msg) { var $x = ["AccRequire",6,r,msg]; $x.__enum__ = haxe.macro.VarAccess; $x.toString = $estr; return $x; };
haxe.macro.VarAccess.__empty_constructs__ = [haxe.macro.VarAccess.AccNormal,haxe.macro.VarAccess.AccNo,haxe.macro.VarAccess.AccNever,haxe.macro.VarAccess.AccResolve,haxe.macro.VarAccess.AccCall,haxe.macro.VarAccess.AccInline];
haxe.macro.MethodKind = $hxClasses["haxe.macro.MethodKind"] = { __ename__ : ["haxe","macro","MethodKind"], __constructs__ : ["MethNormal","MethInline","MethDynamic","MethMacro"] };
haxe.macro.MethodKind.MethNormal = ["MethNormal",0];
haxe.macro.MethodKind.MethNormal.toString = $estr;
haxe.macro.MethodKind.MethNormal.__enum__ = haxe.macro.MethodKind;
haxe.macro.MethodKind.MethInline = ["MethInline",1];
haxe.macro.MethodKind.MethInline.toString = $estr;
haxe.macro.MethodKind.MethInline.__enum__ = haxe.macro.MethodKind;
haxe.macro.MethodKind.MethDynamic = ["MethDynamic",2];
haxe.macro.MethodKind.MethDynamic.toString = $estr;
haxe.macro.MethodKind.MethDynamic.__enum__ = haxe.macro.MethodKind;
haxe.macro.MethodKind.MethMacro = ["MethMacro",3];
haxe.macro.MethodKind.MethMacro.toString = $estr;
haxe.macro.MethodKind.MethMacro.__enum__ = haxe.macro.MethodKind;
haxe.macro.MethodKind.__empty_constructs__ = [haxe.macro.MethodKind.MethNormal,haxe.macro.MethodKind.MethInline,haxe.macro.MethodKind.MethDynamic,haxe.macro.MethodKind.MethMacro];
haxe.macro.TConstant = $hxClasses["haxe.macro.TConstant"] = { __ename__ : ["haxe","macro","TConstant"], __constructs__ : ["TInt","TFloat","TString","TBool","TNull","TThis","TSuper"] };
haxe.macro.TConstant.TInt = function(i) { var $x = ["TInt",0,i]; $x.__enum__ = haxe.macro.TConstant; $x.toString = $estr; return $x; };
haxe.macro.TConstant.TFloat = function(s) { var $x = ["TFloat",1,s]; $x.__enum__ = haxe.macro.TConstant; $x.toString = $estr; return $x; };
haxe.macro.TConstant.TString = function(s) { var $x = ["TString",2,s]; $x.__enum__ = haxe.macro.TConstant; $x.toString = $estr; return $x; };
haxe.macro.TConstant.TBool = function(b) { var $x = ["TBool",3,b]; $x.__enum__ = haxe.macro.TConstant; $x.toString = $estr; return $x; };
haxe.macro.TConstant.TNull = ["TNull",4];
haxe.macro.TConstant.TNull.toString = $estr;
haxe.macro.TConstant.TNull.__enum__ = haxe.macro.TConstant;
haxe.macro.TConstant.TThis = ["TThis",5];
haxe.macro.TConstant.TThis.toString = $estr;
haxe.macro.TConstant.TThis.__enum__ = haxe.macro.TConstant;
haxe.macro.TConstant.TSuper = ["TSuper",6];
haxe.macro.TConstant.TSuper.toString = $estr;
haxe.macro.TConstant.TSuper.__enum__ = haxe.macro.TConstant;
haxe.macro.TConstant.__empty_constructs__ = [haxe.macro.TConstant.TNull,haxe.macro.TConstant.TThis,haxe.macro.TConstant.TSuper];
haxe.macro.ModuleType = $hxClasses["haxe.macro.ModuleType"] = { __ename__ : ["haxe","macro","ModuleType"], __constructs__ : ["TClassDecl","TEnumDecl","TTypeDecl","TAbstract"] };
haxe.macro.ModuleType.TClassDecl = function(c) { var $x = ["TClassDecl",0,c]; $x.__enum__ = haxe.macro.ModuleType; $x.toString = $estr; return $x; };
haxe.macro.ModuleType.TEnumDecl = function(e) { var $x = ["TEnumDecl",1,e]; $x.__enum__ = haxe.macro.ModuleType; $x.toString = $estr; return $x; };
haxe.macro.ModuleType.TTypeDecl = function(t) { var $x = ["TTypeDecl",2,t]; $x.__enum__ = haxe.macro.ModuleType; $x.toString = $estr; return $x; };
haxe.macro.ModuleType.TAbstract = function(a) { var $x = ["TAbstract",3,a]; $x.__enum__ = haxe.macro.ModuleType; $x.toString = $estr; return $x; };
haxe.macro.ModuleType.__empty_constructs__ = [];
haxe.macro.FieldAccess = $hxClasses["haxe.macro.FieldAccess"] = { __ename__ : ["haxe","macro","FieldAccess"], __constructs__ : ["FInstance","FStatic","FAnon","FDynamic","FClosure","FEnum"] };
haxe.macro.FieldAccess.FInstance = function(c,cf) { var $x = ["FInstance",0,c,cf]; $x.__enum__ = haxe.macro.FieldAccess; $x.toString = $estr; return $x; };
haxe.macro.FieldAccess.FStatic = function(c,cf) { var $x = ["FStatic",1,c,cf]; $x.__enum__ = haxe.macro.FieldAccess; $x.toString = $estr; return $x; };
haxe.macro.FieldAccess.FAnon = function(cf) { var $x = ["FAnon",2,cf]; $x.__enum__ = haxe.macro.FieldAccess; $x.toString = $estr; return $x; };
haxe.macro.FieldAccess.FDynamic = function(s) { var $x = ["FDynamic",3,s]; $x.__enum__ = haxe.macro.FieldAccess; $x.toString = $estr; return $x; };
haxe.macro.FieldAccess.FClosure = function(c,cf) { var $x = ["FClosure",4,c,cf]; $x.__enum__ = haxe.macro.FieldAccess; $x.toString = $estr; return $x; };
haxe.macro.FieldAccess.FEnum = function(e,ef) { var $x = ["FEnum",5,e,ef]; $x.__enum__ = haxe.macro.FieldAccess; $x.toString = $estr; return $x; };
haxe.macro.FieldAccess.__empty_constructs__ = [];
haxe.macro.TypedExprDef = $hxClasses["haxe.macro.TypedExprDef"] = { __ename__ : ["haxe","macro","TypedExprDef"], __constructs__ : ["TConst","TLocal","TArray","TBinop","TField","TTypeExpr","TParenthesis","TObjectDecl","TArrayDecl","TCall","TNew","TUnop","TFunction","TVar","TBlock","TFor","TIf","TWhile","TSwitch","TPatMatch","TTry","TReturn","TBreak","TContinue","TThrow","TCast","TMeta","TEnumParameter"] };
haxe.macro.TypedExprDef.TConst = function(c) { var $x = ["TConst",0,c]; $x.__enum__ = haxe.macro.TypedExprDef; $x.toString = $estr; return $x; };
haxe.macro.TypedExprDef.TLocal = function(v) { var $x = ["TLocal",1,v]; $x.__enum__ = haxe.macro.TypedExprDef; $x.toString = $estr; return $x; };
haxe.macro.TypedExprDef.TArray = function(e1,e2) { var $x = ["TArray",2,e1,e2]; $x.__enum__ = haxe.macro.TypedExprDef; $x.toString = $estr; return $x; };
haxe.macro.TypedExprDef.TBinop = function(op,e1,e2) { var $x = ["TBinop",3,op,e1,e2]; $x.__enum__ = haxe.macro.TypedExprDef; $x.toString = $estr; return $x; };
haxe.macro.TypedExprDef.TField = function(e,fa) { var $x = ["TField",4,e,fa]; $x.__enum__ = haxe.macro.TypedExprDef; $x.toString = $estr; return $x; };
haxe.macro.TypedExprDef.TTypeExpr = function(m) { var $x = ["TTypeExpr",5,m]; $x.__enum__ = haxe.macro.TypedExprDef; $x.toString = $estr; return $x; };
haxe.macro.TypedExprDef.TParenthesis = function(e) { var $x = ["TParenthesis",6,e]; $x.__enum__ = haxe.macro.TypedExprDef; $x.toString = $estr; return $x; };
haxe.macro.TypedExprDef.TObjectDecl = function(fields) { var $x = ["TObjectDecl",7,fields]; $x.__enum__ = haxe.macro.TypedExprDef; $x.toString = $estr; return $x; };
haxe.macro.TypedExprDef.TArrayDecl = function(el) { var $x = ["TArrayDecl",8,el]; $x.__enum__ = haxe.macro.TypedExprDef; $x.toString = $estr; return $x; };
haxe.macro.TypedExprDef.TCall = function(e,el) { var $x = ["TCall",9,e,el]; $x.__enum__ = haxe.macro.TypedExprDef; $x.toString = $estr; return $x; };
haxe.macro.TypedExprDef.TNew = function(c,params,el) { var $x = ["TNew",10,c,params,el]; $x.__enum__ = haxe.macro.TypedExprDef; $x.toString = $estr; return $x; };
haxe.macro.TypedExprDef.TUnop = function(op,postFix,e) { var $x = ["TUnop",11,op,postFix,e]; $x.__enum__ = haxe.macro.TypedExprDef; $x.toString = $estr; return $x; };
haxe.macro.TypedExprDef.TFunction = function(tfunc) { var $x = ["TFunction",12,tfunc]; $x.__enum__ = haxe.macro.TypedExprDef; $x.toString = $estr; return $x; };
haxe.macro.TypedExprDef.TVar = function(v,expr) { var $x = ["TVar",13,v,expr]; $x.__enum__ = haxe.macro.TypedExprDef; $x.toString = $estr; return $x; };
haxe.macro.TypedExprDef.TBlock = function(el) { var $x = ["TBlock",14,el]; $x.__enum__ = haxe.macro.TypedExprDef; $x.toString = $estr; return $x; };
haxe.macro.TypedExprDef.TFor = function(v,e1,e2) { var $x = ["TFor",15,v,e1,e2]; $x.__enum__ = haxe.macro.TypedExprDef; $x.toString = $estr; return $x; };
haxe.macro.TypedExprDef.TIf = function(econd,eif,eelse) { var $x = ["TIf",16,econd,eif,eelse]; $x.__enum__ = haxe.macro.TypedExprDef; $x.toString = $estr; return $x; };
haxe.macro.TypedExprDef.TWhile = function(econd,e,normalWhile) { var $x = ["TWhile",17,econd,e,normalWhile]; $x.__enum__ = haxe.macro.TypedExprDef; $x.toString = $estr; return $x; };
haxe.macro.TypedExprDef.TSwitch = function(e,cases,edef) { var $x = ["TSwitch",18,e,cases,edef]; $x.__enum__ = haxe.macro.TypedExprDef; $x.toString = $estr; return $x; };
haxe.macro.TypedExprDef.TPatMatch = ["TPatMatch",19];
haxe.macro.TypedExprDef.TPatMatch.toString = $estr;
haxe.macro.TypedExprDef.TPatMatch.__enum__ = haxe.macro.TypedExprDef;
haxe.macro.TypedExprDef.TTry = function(e,catches) { var $x = ["TTry",20,e,catches]; $x.__enum__ = haxe.macro.TypedExprDef; $x.toString = $estr; return $x; };
haxe.macro.TypedExprDef.TReturn = function(e) { var $x = ["TReturn",21,e]; $x.__enum__ = haxe.macro.TypedExprDef; $x.toString = $estr; return $x; };
haxe.macro.TypedExprDef.TBreak = ["TBreak",22];
haxe.macro.TypedExprDef.TBreak.toString = $estr;
haxe.macro.TypedExprDef.TBreak.__enum__ = haxe.macro.TypedExprDef;
haxe.macro.TypedExprDef.TContinue = ["TContinue",23];
haxe.macro.TypedExprDef.TContinue.toString = $estr;
haxe.macro.TypedExprDef.TContinue.__enum__ = haxe.macro.TypedExprDef;
haxe.macro.TypedExprDef.TThrow = function(e) { var $x = ["TThrow",24,e]; $x.__enum__ = haxe.macro.TypedExprDef; $x.toString = $estr; return $x; };
haxe.macro.TypedExprDef.TCast = function(e,m) { var $x = ["TCast",25,e,m]; $x.__enum__ = haxe.macro.TypedExprDef; $x.toString = $estr; return $x; };
haxe.macro.TypedExprDef.TMeta = function(m,e1) { var $x = ["TMeta",26,m,e1]; $x.__enum__ = haxe.macro.TypedExprDef; $x.toString = $estr; return $x; };
haxe.macro.TypedExprDef.TEnumParameter = function(e1,ef,index) { var $x = ["TEnumParameter",27,e1,ef,index]; $x.__enum__ = haxe.macro.TypedExprDef; $x.toString = $estr; return $x; };
haxe.macro.TypedExprDef.__empty_constructs__ = [haxe.macro.TypedExprDef.TPatMatch,haxe.macro.TypedExprDef.TBreak,haxe.macro.TypedExprDef.TContinue];
haxe.xml = {};
haxe.xml._Fast = {};
haxe.xml._Fast.NodeAccess = function(x) {
	this.__x = x;
};
$hxClasses["haxe.xml._Fast.NodeAccess"] = haxe.xml._Fast.NodeAccess;
haxe.xml._Fast.NodeAccess.__name__ = ["haxe","xml","_Fast","NodeAccess"];
haxe.xml._Fast.NodeAccess.prototype = {
	__x: null
	,resolve: function(name) {
		var x = this.__x.elementsNamed(name).next();
		if(x == null) {
			var xname;
			if(this.__x.nodeType == Xml.Document) xname = "Document"; else xname = this.__x.get_nodeName();
			throw xname + " is missing element " + name;
		}
		return new haxe.xml.Fast(x);
	}
	,__class__: haxe.xml._Fast.NodeAccess
};
haxe.xml._Fast.AttribAccess = function(x) {
	this.__x = x;
};
$hxClasses["haxe.xml._Fast.AttribAccess"] = haxe.xml._Fast.AttribAccess;
haxe.xml._Fast.AttribAccess.__name__ = ["haxe","xml","_Fast","AttribAccess"];
haxe.xml._Fast.AttribAccess.prototype = {
	__x: null
	,resolve: function(name) {
		if(this.__x.nodeType == Xml.Document) throw "Cannot access document attribute " + name;
		var v = this.__x.get(name);
		if(v == null) throw this.__x.get_nodeName() + " is missing attribute " + name;
		return v;
	}
	,__class__: haxe.xml._Fast.AttribAccess
};
haxe.xml._Fast.HasAttribAccess = function(x) {
	this.__x = x;
};
$hxClasses["haxe.xml._Fast.HasAttribAccess"] = haxe.xml._Fast.HasAttribAccess;
haxe.xml._Fast.HasAttribAccess.__name__ = ["haxe","xml","_Fast","HasAttribAccess"];
haxe.xml._Fast.HasAttribAccess.prototype = {
	__x: null
	,resolve: function(name) {
		if(this.__x.nodeType == Xml.Document) throw "Cannot access document attribute " + name;
		return this.__x.exists(name);
	}
	,__class__: haxe.xml._Fast.HasAttribAccess
};
haxe.xml._Fast.HasNodeAccess = function(x) {
	this.__x = x;
};
$hxClasses["haxe.xml._Fast.HasNodeAccess"] = haxe.xml._Fast.HasNodeAccess;
haxe.xml._Fast.HasNodeAccess.__name__ = ["haxe","xml","_Fast","HasNodeAccess"];
haxe.xml._Fast.HasNodeAccess.prototype = {
	__x: null
	,resolve: function(name) {
		return this.__x.elementsNamed(name).hasNext();
	}
	,__class__: haxe.xml._Fast.HasNodeAccess
};
haxe.xml._Fast.NodeListAccess = function(x) {
	this.__x = x;
};
$hxClasses["haxe.xml._Fast.NodeListAccess"] = haxe.xml._Fast.NodeListAccess;
haxe.xml._Fast.NodeListAccess.__name__ = ["haxe","xml","_Fast","NodeListAccess"];
haxe.xml._Fast.NodeListAccess.prototype = {
	__x: null
	,resolve: function(name) {
		var l = new List();
		var $it0 = this.__x.elementsNamed(name);
		while( $it0.hasNext() ) {
			var x = $it0.next();
			l.add(new haxe.xml.Fast(x));
		}
		return l;
	}
	,__class__: haxe.xml._Fast.NodeListAccess
};
haxe.xml.Fast = function(x) {
	if(x.nodeType != Xml.Document && x.nodeType != Xml.Element) throw "Invalid nodeType " + Std.string(x.nodeType);
	this.x = x;
	this.node = new haxe.xml._Fast.NodeAccess(x);
	this.nodes = new haxe.xml._Fast.NodeListAccess(x);
	this.att = new haxe.xml._Fast.AttribAccess(x);
	this.has = new haxe.xml._Fast.HasAttribAccess(x);
	this.hasNode = new haxe.xml._Fast.HasNodeAccess(x);
};
$hxClasses["haxe.xml.Fast"] = haxe.xml.Fast;
haxe.xml.Fast.__name__ = ["haxe","xml","Fast"];
haxe.xml.Fast.prototype = {
	x: null
	,name: null
	,innerData: null
	,innerHTML: null
	,node: null
	,nodes: null
	,att: null
	,has: null
	,hasNode: null
	,elements: null
	,get_name: function() {
		if(this.x.nodeType == Xml.Document) return "Document"; else return this.x.get_nodeName();
	}
	,get_innerData: function() {
		var it = this.x.iterator();
		if(!it.hasNext()) throw this.get_name() + " does not have data";
		var v = it.next();
		var n = it.next();
		if(n != null) {
			if(v.nodeType == Xml.PCData && n.nodeType == Xml.CData && StringTools.trim(v.get_nodeValue()) == "") {
				var n2 = it.next();
				if(n2 == null || n2.nodeType == Xml.PCData && StringTools.trim(n2.get_nodeValue()) == "" && it.next() == null) return n.get_nodeValue();
			}
			throw this.get_name() + " does not only have data";
		}
		if(v.nodeType != Xml.PCData && v.nodeType != Xml.CData) throw this.get_name() + " does not have data";
		return v.get_nodeValue();
	}
	,get_innerHTML: function() {
		var s = new StringBuf();
		var $it0 = this.x.iterator();
		while( $it0.hasNext() ) {
			var x = $it0.next();
			s.add(x.toString());
		}
		return s.b;
	}
	,get_elements: function() {
		var it = this.x.elements();
		return { hasNext : $bind(it,it.hasNext), next : function() {
			var x = it.next();
			if(x == null) return null;
			return new haxe.xml.Fast(x);
		}};
	}
	,__class__: haxe.xml.Fast
	,__properties__: {get_elements:"get_elements",get_innerHTML:"get_innerHTML",get_innerData:"get_innerData",get_name:"get_name"}
};
haxe.xml.Parser = function() { };
$hxClasses["haxe.xml.Parser"] = haxe.xml.Parser;
haxe.xml.Parser.__name__ = ["haxe","xml","Parser"];
haxe.xml.Parser.parse = function(str) {
	var doc = Xml.createDocument();
	haxe.xml.Parser.doParse(str,0,doc);
	return doc;
};
haxe.xml.Parser.doParse = function(str,p,parent) {
	if(p == null) p = 0;
	var xml = null;
	var state = 1;
	var next = 1;
	var aname = null;
	var start = 0;
	var nsubs = 0;
	var nbrackets = 0;
	var c = str.charCodeAt(p);
	var buf = new StringBuf();
	while(!(c != c)) {
		switch(state) {
		case 0:
			switch(c) {
			case 10:case 13:case 9:case 32:
				break;
			default:
				state = next;
				continue;
			}
			break;
		case 1:
			switch(c) {
			case 60:
				state = 0;
				next = 2;
				break;
			default:
				start = p;
				state = 13;
				continue;
			}
			break;
		case 13:
			if(c == 60) {
				var child = Xml.createPCData(buf.b + HxOverrides.substr(str,start,p - start));
				buf = new StringBuf();
				parent.addChild(child);
				nsubs++;
				state = 0;
				next = 2;
			} else if(c == 38) {
				buf.addSub(str,start,p - start);
				state = 18;
				next = 13;
				start = p + 1;
			}
			break;
		case 17:
			if(c == 93 && str.charCodeAt(p + 1) == 93 && str.charCodeAt(p + 2) == 62) {
				var child1 = Xml.createCData(HxOverrides.substr(str,start,p - start));
				parent.addChild(child1);
				nsubs++;
				p += 2;
				state = 1;
			}
			break;
		case 2:
			switch(c) {
			case 33:
				if(str.charCodeAt(p + 1) == 91) {
					p += 2;
					if(HxOverrides.substr(str,p,6).toUpperCase() != "CDATA[") throw "Expected <![CDATA[";
					p += 5;
					state = 17;
					start = p + 1;
				} else if(str.charCodeAt(p + 1) == 68 || str.charCodeAt(p + 1) == 100) {
					if(HxOverrides.substr(str,p + 2,6).toUpperCase() != "OCTYPE") throw "Expected <!DOCTYPE";
					p += 8;
					state = 16;
					start = p + 1;
				} else if(str.charCodeAt(p + 1) != 45 || str.charCodeAt(p + 2) != 45) throw "Expected <!--"; else {
					p += 2;
					state = 15;
					start = p + 1;
				}
				break;
			case 63:
				state = 14;
				start = p;
				break;
			case 47:
				if(parent == null) throw "Expected node name";
				start = p + 1;
				state = 0;
				next = 10;
				break;
			default:
				state = 3;
				start = p;
				continue;
			}
			break;
		case 3:
			if(!(c >= 97 && c <= 122 || c >= 65 && c <= 90 || c >= 48 && c <= 57 || c == 58 || c == 46 || c == 95 || c == 45)) {
				if(p == start) throw "Expected node name";
				xml = Xml.createElement(HxOverrides.substr(str,start,p - start));
				parent.addChild(xml);
				state = 0;
				next = 4;
				continue;
			}
			break;
		case 4:
			switch(c) {
			case 47:
				state = 11;
				nsubs++;
				break;
			case 62:
				state = 9;
				nsubs++;
				break;
			default:
				state = 5;
				start = p;
				continue;
			}
			break;
		case 5:
			if(!(c >= 97 && c <= 122 || c >= 65 && c <= 90 || c >= 48 && c <= 57 || c == 58 || c == 46 || c == 95 || c == 45)) {
				var tmp;
				if(start == p) throw "Expected attribute name";
				tmp = HxOverrides.substr(str,start,p - start);
				aname = tmp;
				if(xml.exists(aname)) throw "Duplicate attribute";
				state = 0;
				next = 6;
				continue;
			}
			break;
		case 6:
			switch(c) {
			case 61:
				state = 0;
				next = 7;
				break;
			default:
				throw "Expected =";
			}
			break;
		case 7:
			switch(c) {
			case 34:case 39:
				state = 8;
				start = p;
				break;
			default:
				throw "Expected \"";
			}
			break;
		case 8:
			if(c == str.charCodeAt(start)) {
				var val = HxOverrides.substr(str,start + 1,p - start - 1);
				xml.set(aname,val);
				state = 0;
				next = 4;
			}
			break;
		case 9:
			p = haxe.xml.Parser.doParse(str,p,xml);
			start = p;
			state = 1;
			break;
		case 11:
			switch(c) {
			case 62:
				state = 1;
				break;
			default:
				throw "Expected >";
			}
			break;
		case 12:
			switch(c) {
			case 62:
				if(nsubs == 0) parent.addChild(Xml.createPCData(""));
				return p;
			default:
				throw "Expected >";
			}
			break;
		case 10:
			if(!(c >= 97 && c <= 122 || c >= 65 && c <= 90 || c >= 48 && c <= 57 || c == 58 || c == 46 || c == 95 || c == 45)) {
				if(start == p) throw "Expected node name";
				var v = HxOverrides.substr(str,start,p - start);
				if(v != parent.get_nodeName()) throw "Expected </" + parent.get_nodeName() + ">";
				state = 0;
				next = 12;
				continue;
			}
			break;
		case 15:
			if(c == 45 && str.charCodeAt(p + 1) == 45 && str.charCodeAt(p + 2) == 62) {
				parent.addChild(Xml.createComment(HxOverrides.substr(str,start,p - start)));
				p += 2;
				state = 1;
			}
			break;
		case 16:
			if(c == 91) nbrackets++; else if(c == 93) nbrackets--; else if(c == 62 && nbrackets == 0) {
				parent.addChild(Xml.createDocType(HxOverrides.substr(str,start,p - start)));
				state = 1;
			}
			break;
		case 14:
			if(c == 63 && str.charCodeAt(p + 1) == 62) {
				p++;
				var str1 = HxOverrides.substr(str,start + 1,p - start - 2);
				parent.addChild(Xml.createProcessingInstruction(str1));
				state = 1;
			}
			break;
		case 18:
			if(c == 59) {
				var s = HxOverrides.substr(str,start,p - start);
				if(s.charCodeAt(0) == 35) {
					var i;
					if(s.charCodeAt(1) == 120) i = Std.parseInt("0" + HxOverrides.substr(s,1,s.length - 1)); else i = Std.parseInt(HxOverrides.substr(s,1,s.length - 1));
					buf.add(String.fromCharCode(i));
				} else if(!haxe.xml.Parser.escapes.exists(s)) buf.b += Std.string("&" + s + ";"); else buf.add(haxe.xml.Parser.escapes.get(s));
				start = p + 1;
				state = next;
			}
			break;
		}
		c = StringTools.fastCodeAt(str,++p);
	}
	if(state == 1) {
		start = p;
		state = 13;
	}
	if(state == 13) {
		if(p != start || nsubs == 0) parent.addChild(Xml.createPCData(buf.b + HxOverrides.substr(str,start,p - start)));
		return p;
	}
	throw "Unexpected end";
};
haxe.xml.Parser.isValidChar = function(c) {
	return c >= 97 && c <= 122 || c >= 65 && c <= 90 || c >= 48 && c <= 57 || c == 58 || c == 46 || c == 95 || c == 45;
};
haxe.zip = {};
haxe.zip.Compress = function(level) {
	throw "Not implemented for this platform";
};
$hxClasses["haxe.zip.Compress"] = haxe.zip.Compress;
haxe.zip.Compress.__name__ = ["haxe","zip","Compress"];
haxe.zip.Compress.run = function(s,level) {
	throw "Not implemented for this platform";
	return null;
};
haxe.zip.Compress.prototype = {
	execute: function(src,srcPos,dst,dstPos) {
		return null;
	}
	,setFlushMode: function(f) {
	}
	,close: function() {
	}
	,__class__: haxe.zip.Compress
};
haxe.zip.FlushMode = $hxClasses["haxe.zip.FlushMode"] = { __ename__ : ["haxe","zip","FlushMode"], __constructs__ : ["NO","SYNC","FULL","FINISH","BLOCK"] };
haxe.zip.FlushMode.NO = ["NO",0];
haxe.zip.FlushMode.NO.toString = $estr;
haxe.zip.FlushMode.NO.__enum__ = haxe.zip.FlushMode;
haxe.zip.FlushMode.SYNC = ["SYNC",1];
haxe.zip.FlushMode.SYNC.toString = $estr;
haxe.zip.FlushMode.SYNC.__enum__ = haxe.zip.FlushMode;
haxe.zip.FlushMode.FULL = ["FULL",2];
haxe.zip.FlushMode.FULL.toString = $estr;
haxe.zip.FlushMode.FULL.__enum__ = haxe.zip.FlushMode;
haxe.zip.FlushMode.FINISH = ["FINISH",3];
haxe.zip.FlushMode.FINISH.toString = $estr;
haxe.zip.FlushMode.FINISH.__enum__ = haxe.zip.FlushMode;
haxe.zip.FlushMode.BLOCK = ["BLOCK",4];
haxe.zip.FlushMode.BLOCK.toString = $estr;
haxe.zip.FlushMode.BLOCK.__enum__ = haxe.zip.FlushMode;
haxe.zip.FlushMode.__empty_constructs__ = [haxe.zip.FlushMode.NO,haxe.zip.FlushMode.SYNC,haxe.zip.FlushMode.FULL,haxe.zip.FlushMode.FINISH,haxe.zip.FlushMode.BLOCK];
haxe.zip.Huffman = $hxClasses["haxe.zip.Huffman"] = { __ename__ : ["haxe","zip","Huffman"], __constructs__ : ["Found","NeedBit","NeedBits"] };
haxe.zip.Huffman.Found = function(i) { var $x = ["Found",0,i]; $x.__enum__ = haxe.zip.Huffman; $x.toString = $estr; return $x; };
haxe.zip.Huffman.NeedBit = function(left,right) { var $x = ["NeedBit",1,left,right]; $x.__enum__ = haxe.zip.Huffman; $x.toString = $estr; return $x; };
haxe.zip.Huffman.NeedBits = function(n,table) { var $x = ["NeedBits",2,n,table]; $x.__enum__ = haxe.zip.Huffman; $x.toString = $estr; return $x; };
haxe.zip.Huffman.__empty_constructs__ = [];
haxe.zip.HuffTools = function() {
};
$hxClasses["haxe.zip.HuffTools"] = haxe.zip.HuffTools;
haxe.zip.HuffTools.__name__ = ["haxe","zip","HuffTools"];
haxe.zip.HuffTools.prototype = {
	treeDepth: function(t) {
		switch(t[1]) {
		case 0:
			return 0;
		case 2:
			throw "assert";
			break;
		case 1:
			var b = t[3];
			var a = t[2];
			var da = this.treeDepth(a);
			var db = this.treeDepth(b);
			return 1 + (da < db?da:db);
		}
	}
	,treeCompress: function(t) {
		var d = this.treeDepth(t);
		if(d == 0) return t;
		if(d == 1) switch(t[1]) {
		case 1:
			var b = t[3];
			var a = t[2];
			return haxe.zip.Huffman.NeedBit(this.treeCompress(a),this.treeCompress(b));
		default:
			throw "assert";
		}
		var size = 1 << d;
		var table = new Array();
		var _g = 0;
		while(_g < size) {
			var i = _g++;
			table.push(haxe.zip.Huffman.Found(-1));
		}
		this.treeWalk(table,0,0,d,t);
		return haxe.zip.Huffman.NeedBits(d,table);
	}
	,treeWalk: function(table,p,cd,d,t) {
		switch(t[1]) {
		case 1:
			var b = t[3];
			var a = t[2];
			if(d > 0) {
				this.treeWalk(table,p,cd + 1,d - 1,a);
				this.treeWalk(table,p | 1 << cd,cd + 1,d - 1,b);
			} else table[p] = this.treeCompress(t);
			break;
		default:
			table[p] = this.treeCompress(t);
		}
	}
	,treeMake: function(bits,maxbits,v,len) {
		if(len > maxbits) throw "Invalid huffman";
		var idx = v << 5 | len;
		if(bits.exists(idx)) return haxe.zip.Huffman.Found(bits.get(idx));
		v <<= 1;
		len += 1;
		return haxe.zip.Huffman.NeedBit(this.treeMake(bits,maxbits,v,len),this.treeMake(bits,maxbits,v | 1,len));
	}
	,make: function(lengths,pos,nlengths,maxbits) {
		var counts = new Array();
		var tmp = new Array();
		if(maxbits > 32) throw "Invalid huffman";
		var _g = 0;
		while(_g < maxbits) {
			var i = _g++;
			counts.push(0);
			tmp.push(0);
		}
		var _g1 = 0;
		while(_g1 < nlengths) {
			var i1 = _g1++;
			var p = lengths[i1 + pos];
			if(p >= maxbits) throw "Invalid huffman";
			counts[p]++;
		}
		var code = 0;
		var _g11 = 1;
		var _g2 = maxbits - 1;
		while(_g11 < _g2) {
			var i2 = _g11++;
			code = code + counts[i2] << 1;
			tmp[i2] = code;
		}
		var bits = new haxe.ds.IntMap();
		var _g3 = 0;
		while(_g3 < nlengths) {
			var i3 = _g3++;
			var l = lengths[i3 + pos];
			if(l != 0) {
				var n = tmp[l - 1];
				tmp[l - 1] = n + 1;
				bits.set(n << 5 | l,i3);
			}
		}
		return this.treeCompress(haxe.zip.Huffman.NeedBit(this.treeMake(bits,maxbits,0,1),this.treeMake(bits,maxbits,1,1)));
	}
	,__class__: haxe.zip.HuffTools
};
haxe.zip._InflateImpl = {};
haxe.zip._InflateImpl.Window = function(hasCrc) {
	this.buffer = haxe.io.Bytes.alloc(65536);
	this.pos = 0;
	if(hasCrc) this.crc = new haxe.crypto.Adler32();
};
$hxClasses["haxe.zip._InflateImpl.Window"] = haxe.zip._InflateImpl.Window;
haxe.zip._InflateImpl.Window.__name__ = ["haxe","zip","_InflateImpl","Window"];
haxe.zip._InflateImpl.Window.prototype = {
	buffer: null
	,pos: null
	,crc: null
	,slide: function() {
		if(this.crc != null) this.crc.update(this.buffer,0,32768);
		var b = haxe.io.Bytes.alloc(65536);
		this.pos -= 32768;
		b.blit(0,this.buffer,32768,this.pos);
		this.buffer = b;
	}
	,addBytes: function(b,p,len) {
		if(this.pos + len > 65536) this.slide();
		this.buffer.blit(this.pos,b,p,len);
		this.pos += len;
	}
	,addByte: function(c) {
		if(this.pos == 65536) this.slide();
		this.buffer.b[this.pos] = c & 255;
		this.pos++;
	}
	,getLastChar: function() {
		return this.buffer.b[this.pos - 1];
	}
	,available: function() {
		return this.pos;
	}
	,checksum: function() {
		if(this.crc != null) this.crc.update(this.buffer,0,this.pos);
		return this.crc;
	}
	,__class__: haxe.zip._InflateImpl.Window
};
haxe.zip._InflateImpl.State = $hxClasses["haxe.zip._InflateImpl.State"] = { __ename__ : ["haxe","zip","_InflateImpl","State"], __constructs__ : ["Head","Block","CData","Flat","Crc","Dist","DistOne","Done"] };
haxe.zip._InflateImpl.State.Head = ["Head",0];
haxe.zip._InflateImpl.State.Head.toString = $estr;
haxe.zip._InflateImpl.State.Head.__enum__ = haxe.zip._InflateImpl.State;
haxe.zip._InflateImpl.State.Block = ["Block",1];
haxe.zip._InflateImpl.State.Block.toString = $estr;
haxe.zip._InflateImpl.State.Block.__enum__ = haxe.zip._InflateImpl.State;
haxe.zip._InflateImpl.State.CData = ["CData",2];
haxe.zip._InflateImpl.State.CData.toString = $estr;
haxe.zip._InflateImpl.State.CData.__enum__ = haxe.zip._InflateImpl.State;
haxe.zip._InflateImpl.State.Flat = ["Flat",3];
haxe.zip._InflateImpl.State.Flat.toString = $estr;
haxe.zip._InflateImpl.State.Flat.__enum__ = haxe.zip._InflateImpl.State;
haxe.zip._InflateImpl.State.Crc = ["Crc",4];
haxe.zip._InflateImpl.State.Crc.toString = $estr;
haxe.zip._InflateImpl.State.Crc.__enum__ = haxe.zip._InflateImpl.State;
haxe.zip._InflateImpl.State.Dist = ["Dist",5];
haxe.zip._InflateImpl.State.Dist.toString = $estr;
haxe.zip._InflateImpl.State.Dist.__enum__ = haxe.zip._InflateImpl.State;
haxe.zip._InflateImpl.State.DistOne = ["DistOne",6];
haxe.zip._InflateImpl.State.DistOne.toString = $estr;
haxe.zip._InflateImpl.State.DistOne.__enum__ = haxe.zip._InflateImpl.State;
haxe.zip._InflateImpl.State.Done = ["Done",7];
haxe.zip._InflateImpl.State.Done.toString = $estr;
haxe.zip._InflateImpl.State.Done.__enum__ = haxe.zip._InflateImpl.State;
haxe.zip._InflateImpl.State.__empty_constructs__ = [haxe.zip._InflateImpl.State.Head,haxe.zip._InflateImpl.State.Block,haxe.zip._InflateImpl.State.CData,haxe.zip._InflateImpl.State.Flat,haxe.zip._InflateImpl.State.Crc,haxe.zip._InflateImpl.State.Dist,haxe.zip._InflateImpl.State.DistOne,haxe.zip._InflateImpl.State.Done];
haxe.zip.InflateImpl = function(i,header,crc) {
	if(crc == null) crc = true;
	if(header == null) header = true;
	this["final"] = false;
	this.htools = new haxe.zip.HuffTools();
	this.huffman = this.buildFixedHuffman();
	this.huffdist = null;
	this.len = 0;
	this.dist = 0;
	if(header) this.state = haxe.zip._InflateImpl.State.Head; else this.state = haxe.zip._InflateImpl.State.Block;
	this.input = i;
	this.bits = 0;
	this.nbits = 0;
	this.needed = 0;
	this.output = null;
	this.outpos = 0;
	this.lengths = new Array();
	var _g = 0;
	while(_g < 19) {
		var i1 = _g++;
		this.lengths.push(-1);
	}
	this.window = new haxe.zip._InflateImpl.Window(crc);
};
$hxClasses["haxe.zip.InflateImpl"] = haxe.zip.InflateImpl;
haxe.zip.InflateImpl.__name__ = ["haxe","zip","InflateImpl"];
haxe.zip.InflateImpl.run = function(i,bufsize) {
	if(bufsize == null) bufsize = 65536;
	var buf = haxe.io.Bytes.alloc(bufsize);
	var output = new haxe.io.BytesBuffer();
	var inflate = new haxe.zip.InflateImpl(i);
	while(true) {
		var len = inflate.readBytes(buf,0,bufsize);
		output.addBytes(buf,0,len);
		if(len < bufsize) break;
	}
	return output.getBytes();
};
haxe.zip.InflateImpl.prototype = {
	nbits: null
	,bits: null
	,state: null
	,'final': null
	,huffman: null
	,huffdist: null
	,htools: null
	,len: null
	,dist: null
	,needed: null
	,output: null
	,outpos: null
	,input: null
	,lengths: null
	,window: null
	,buildFixedHuffman: function() {
		if(haxe.zip.InflateImpl.FIXED_HUFFMAN != null) return haxe.zip.InflateImpl.FIXED_HUFFMAN;
		var a = new Array();
		var _g = 0;
		while(_g < 288) {
			var n = _g++;
			a.push(n <= 143?8:n <= 255?9:n <= 279?7:8);
		}
		haxe.zip.InflateImpl.FIXED_HUFFMAN = this.htools.make(a,0,288,10);
		return haxe.zip.InflateImpl.FIXED_HUFFMAN;
	}
	,readBytes: function(b,pos,len) {
		this.needed = len;
		this.outpos = pos;
		this.output = b;
		if(len > 0) while(this.inflateLoop()) {
		}
		return len - this.needed;
	}
	,getBits: function(n) {
		while(this.nbits < n) {
			this.bits |= this.input.readByte() << this.nbits;
			this.nbits += 8;
		}
		var b = this.bits & (1 << n) - 1;
		this.nbits -= n;
		this.bits >>= n;
		return b;
	}
	,getBit: function() {
		if(this.nbits == 0) {
			this.nbits = 8;
			this.bits = this.input.readByte();
		}
		var b = (this.bits & 1) == 1;
		this.nbits--;
		this.bits >>= 1;
		return b;
	}
	,getRevBits: function(n) {
		if(n == 0) return 0; else if(this.getBit()) return 1 << n - 1 | this.getRevBits(n - 1); else return this.getRevBits(n - 1);
	}
	,resetBits: function() {
		this.bits = 0;
		this.nbits = 0;
	}
	,addBytes: function(b,p,len) {
		this.window.addBytes(b,p,len);
		this.output.blit(this.outpos,b,p,len);
		this.needed -= len;
		this.outpos += len;
	}
	,addByte: function(b) {
		this.window.addByte(b);
		this.output.b[this.outpos] = b & 255;
		this.needed--;
		this.outpos++;
	}
	,addDistOne: function(n) {
		var c = this.window.getLastChar();
		var _g = 0;
		while(_g < n) {
			var i = _g++;
			this.addByte(c);
		}
	}
	,addDist: function(d,len) {
		this.addBytes(this.window.buffer,this.window.pos - d,len);
	}
	,applyHuffman: function(h) {
		switch(h[1]) {
		case 0:
			var n = h[2];
			return n;
		case 1:
			var b = h[3];
			var a = h[2];
			return this.applyHuffman(this.getBit()?b:a);
		case 2:
			var tbl = h[3];
			var n1 = h[2];
			return this.applyHuffman(tbl[this.getBits(n1)]);
		}
	}
	,inflateLengths: function(a,max) {
		var i = 0;
		var prev = 0;
		while(i < max) {
			var n = this.applyHuffman(this.huffman);
			switch(n) {
			case 0:case 1:case 2:case 3:case 4:case 5:case 6:case 7:case 8:case 9:case 10:case 11:case 12:case 13:case 14:case 15:
				prev = n;
				a[i] = n;
				i++;
				break;
			case 16:
				var end = i + 3 + this.getBits(2);
				if(end > max) throw "Invalid data";
				while(i < end) {
					a[i] = prev;
					i++;
				}
				break;
			case 17:
				i += 3 + this.getBits(3);
				if(i > max) throw "Invalid data";
				break;
			case 18:
				i += 11 + this.getBits(7);
				if(i > max) throw "Invalid data";
				break;
			default:
				throw "Invalid data";
			}
		}
	}
	,inflateLoop: function() {
		var _g = this.state;
		switch(_g[1]) {
		case 0:
			var cmf = this.input.readByte();
			var cm = cmf & 15;
			var cinfo = cmf >> 4;
			if(cm != 8 || cinfo != 7) throw "Invalid data";
			var flg = this.input.readByte();
			var fdict = (flg & 32) != 0;
			if(((cmf << 8) + flg) % 31 != 0) throw "Invalid data";
			if(fdict) throw "Unsupported dictionary";
			this.state = haxe.zip._InflateImpl.State.Block;
			return true;
		case 4:
			var calc = this.window.checksum();
			if(calc == null) {
				this.state = haxe.zip._InflateImpl.State.Done;
				return true;
			}
			var crc = haxe.crypto.Adler32.read(this.input);
			if(!calc.equals(crc)) throw "Invalid CRC";
			this.state = haxe.zip._InflateImpl.State.Done;
			return true;
		case 7:
			return false;
		case 1:
			this["final"] = this.getBit();
			var _g1 = this.getBits(2);
			switch(_g1) {
			case 0:
				this.len = this.input.readUInt16();
				var nlen = this.input.readUInt16();
				if(nlen != 65535 - this.len) throw "Invalid data";
				this.state = haxe.zip._InflateImpl.State.Flat;
				var r = this.inflateLoop();
				this.resetBits();
				return r;
			case 1:
				this.huffman = this.buildFixedHuffman();
				this.huffdist = null;
				this.state = haxe.zip._InflateImpl.State.CData;
				return true;
			case 2:
				var hlit = this.getBits(5) + 257;
				var hdist = this.getBits(5) + 1;
				var hclen = this.getBits(4) + 4;
				var _g2 = 0;
				while(_g2 < hclen) {
					var i = _g2++;
					this.lengths[haxe.zip.InflateImpl.CODE_LENGTHS_POS[i]] = this.getBits(3);
				}
				var _g21 = hclen;
				while(_g21 < 19) {
					var i1 = _g21++;
					this.lengths[haxe.zip.InflateImpl.CODE_LENGTHS_POS[i1]] = 0;
				}
				this.huffman = this.htools.make(this.lengths,0,19,8);
				var lengths = new Array();
				var _g3 = 0;
				var _g22 = hlit + hdist;
				while(_g3 < _g22) {
					var i2 = _g3++;
					lengths.push(0);
				}
				this.inflateLengths(lengths,hlit + hdist);
				this.huffdist = this.htools.make(lengths,hlit,hdist,16);
				this.huffman = this.htools.make(lengths,0,hlit,16);
				this.state = haxe.zip._InflateImpl.State.CData;
				return true;
			default:
				throw "Invalid data";
			}
			break;
		case 3:
			var rlen;
			if(this.len < this.needed) rlen = this.len; else rlen = this.needed;
			var bytes = this.input.read(rlen);
			this.len -= rlen;
			this.addBytes(bytes,0,rlen);
			if(this.len == 0) if(this["final"]) this.state = haxe.zip._InflateImpl.State.Crc; else this.state = haxe.zip._InflateImpl.State.Block;
			return this.needed > 0;
		case 6:
			var rlen1;
			if(this.len < this.needed) rlen1 = this.len; else rlen1 = this.needed;
			this.addDistOne(rlen1);
			this.len -= rlen1;
			if(this.len == 0) this.state = haxe.zip._InflateImpl.State.CData;
			return this.needed > 0;
		case 5:
			while(this.len > 0 && this.needed > 0) {
				var rdist;
				if(this.len < this.dist) rdist = this.len; else rdist = this.dist;
				var rlen2;
				if(this.needed < rdist) rlen2 = this.needed; else rlen2 = rdist;
				this.addDist(this.dist,rlen2);
				this.len -= rlen2;
			}
			if(this.len == 0) this.state = haxe.zip._InflateImpl.State.CData;
			return this.needed > 0;
		case 2:
			var n = this.applyHuffman(this.huffman);
			if(n < 256) {
				this.addByte(n);
				return this.needed > 0;
			} else if(n == 256) {
				if(this["final"]) this.state = haxe.zip._InflateImpl.State.Crc; else this.state = haxe.zip._InflateImpl.State.Block;
				return true;
			} else {
				n -= 257;
				var extra_bits = haxe.zip.InflateImpl.LEN_EXTRA_BITS_TBL[n];
				if(extra_bits == -1) throw "Invalid data";
				this.len = haxe.zip.InflateImpl.LEN_BASE_VAL_TBL[n] + this.getBits(extra_bits);
				var dist_code;
				if(this.huffdist == null) dist_code = this.getRevBits(5); else dist_code = this.applyHuffman(this.huffdist);
				extra_bits = haxe.zip.InflateImpl.DIST_EXTRA_BITS_TBL[dist_code];
				if(extra_bits == -1) throw "Invalid data";
				this.dist = haxe.zip.InflateImpl.DIST_BASE_VAL_TBL[dist_code] + this.getBits(extra_bits);
				if(this.dist > this.window.available()) throw "Invalid data";
				if(this.dist == 1) this.state = haxe.zip._InflateImpl.State.DistOne; else this.state = haxe.zip._InflateImpl.State.Dist;
				return true;
			}
			break;
		}
	}
	,__class__: haxe.zip.InflateImpl
};
haxe.zip.Uncompress = function(windowBits) {
	throw "Not implemented for this platform";
};
$hxClasses["haxe.zip.Uncompress"] = haxe.zip.Uncompress;
haxe.zip.Uncompress.__name__ = ["haxe","zip","Uncompress"];
haxe.zip.Uncompress.run = function(src,bufsize) {
	return haxe.zip.InflateImpl.run(new haxe.io.BytesInput(src),bufsize);
};
haxe.zip.Uncompress.prototype = {
	execute: function(src,srcPos,dst,dstPos) {
		return null;
	}
	,setFlushMode: function(f) {
	}
	,close: function() {
	}
	,__class__: haxe.zip.Uncompress
};
var js = {};
js._Boot = {};
js._Boot.HaxeError = function(val) {
	Error.call(this);
	this.val = val;
	if(Error.captureStackTrace) Error.captureStackTrace(this,js._Boot.HaxeError);
};
$hxClasses["js._Boot.HaxeError"] = js._Boot.HaxeError;
js._Boot.HaxeError.__name__ = ["js","_Boot","HaxeError"];
js._Boot.HaxeError.__super__ = Error;
js._Boot.HaxeError.prototype = $extend(Error.prototype,{
	val: null
	,__class__: js._Boot.HaxeError
});
js.Boot = function() { };
$hxClasses["js.Boot"] = js.Boot;
js.Boot.__name__ = ["js","Boot"];
js.Boot.__unhtml = function(s) {
	return s.split("&").join("&amp;").split("<").join("&lt;").split(">").join("&gt;");
};
js.Boot.__trace = function(v,i) {
	var msg;
	if(i != null) msg = i.fileName + ":" + i.lineNumber + ": "; else msg = "";
	msg += js.Boot.__string_rec(v,"");
	if(i != null && i.customParams != null) {
		var _g = 0;
		var _g1 = i.customParams;
		while(_g < _g1.length) {
			var v1 = _g1[_g];
			++_g;
			msg += "," + js.Boot.__string_rec(v1,"");
		}
	}
	var d;
	if(typeof(document) != "undefined" && (d = document.getElementById("haxe:trace")) != null) d.innerHTML += js.Boot.__unhtml(msg) + "<br/>"; else if(typeof console != "undefined" && console.log != null) console.log(msg);
};
js.Boot.__clear_trace = function() {
	var d = document.getElementById("haxe:trace");
	if(d != null) d.innerHTML = "";
};
js.Boot.isClass = function(o) {
	return o.__name__;
};
js.Boot.isEnum = function(e) {
	return e.__ename__;
};
js.Boot.getClass = function(o) {
	if((o instanceof Array) && o.__enum__ == null) return Array; else {
		var cl = o.__class__;
		if(cl != null) return cl;
		var name = js.Boot.__nativeClassName(o);
		if(name != null) return js.Boot.__resolveNativeClass(name);
		return null;
	}
};
js.Boot.__string_rec = function(o,s) {
	if(o == null) return "null";
	if(s.length >= 5) return "<...>";
	var t = typeof(o);
	if(t == "function" && (o.__name__ || o.__ename__)) t = "object";
	switch(t) {
	case "object":
		if(o instanceof Array) {
			if(o.__enum__) {
				if(o.length == 2) return o[0];
				var str = o[0] + "(";
				s += "\t";
				var _g1 = 2;
				var _g = o.length;
				while(_g1 < _g) {
					var i = _g1++;
					if(i != 2) str += "," + js.Boot.__string_rec(o[i],s); else str += js.Boot.__string_rec(o[i],s);
				}
				return str + ")";
			}
			var l = o.length;
			var i1;
			var str1 = "[";
			s += "\t";
			var _g2 = 0;
			while(_g2 < l) {
				var i2 = _g2++;
				str1 += (i2 > 0?",":"") + js.Boot.__string_rec(o[i2],s);
			}
			str1 += "]";
			return str1;
		}
		var tostr;
		try {
			tostr = o.toString;
		} catch( e ) {
			return "???";
		}
		if(tostr != null && tostr != Object.toString && typeof(tostr) == "function") {
			var s2 = o.toString();
			if(s2 != "[object Object]") return s2;
		}
		var k = null;
		var str2 = "{\n";
		s += "\t";
		var hasp = o.hasOwnProperty != null;
		for( var k in o ) {
		if(hasp && !o.hasOwnProperty(k)) {
			continue;
		}
		if(k == "prototype" || k == "__class__" || k == "__super__" || k == "__interfaces__" || k == "__properties__") {
			continue;
		}
		if(str2.length != 2) str2 += ", \n";
		str2 += s + k + " : " + js.Boot.__string_rec(o[k],s);
		}
		s = s.substring(1);
		str2 += "\n" + s + "}";
		return str2;
	case "function":
		return "<function>";
	case "string":
		return o;
	default:
		return String(o);
	}
};
js.Boot.__interfLoop = function(cc,cl) {
	if(cc == null) return false;
	if(cc == cl) return true;
	var intf = cc.__interfaces__;
	if(intf != null) {
		var _g1 = 0;
		var _g = intf.length;
		while(_g1 < _g) {
			var i = _g1++;
			var i1 = intf[i];
			if(i1 == cl || js.Boot.__interfLoop(i1,cl)) return true;
		}
	}
	return js.Boot.__interfLoop(cc.__super__,cl);
};
js.Boot.__instanceof = function(o,cl) {
	if(cl == null) return false;
	switch(cl) {
	case Int:
		return (o|0) === o;
	case Float:
		return typeof(o) == "number";
	case Bool:
		return typeof(o) == "boolean";
	case String:
		return typeof(o) == "string";
	case Array:
		return (o instanceof Array) && o.__enum__ == null;
	case Dynamic:
		return true;
	default:
		if(o != null) {
			if(typeof(cl) == "function") {
				if(o instanceof cl) return true;
				if(js.Boot.__interfLoop(js.Boot.getClass(o),cl)) return true;
			} else if(typeof(cl) == "object" && js.Boot.__isNativeObj(cl)) {
				if(o instanceof cl) return true;
			}
		} else return false;
		if(cl == Class && o.__name__ != null) return true;
		if(cl == Enum && o.__ename__ != null) return true;
		return o.__enum__ == cl;
	}
};
js.Boot.__cast = function(o,t) {
	if(js.Boot.__instanceof(o,t)) return o; else throw "Cannot cast " + Std.string(o) + " to " + Std.string(t);
};
js.Boot.__nativeClassName = function(o) {
	var name = js.Boot.__toStr.call(o).slice(8,-1);
	if(name == "Object" || name == "Function" || name == "Math" || name == "JSON") return null;
	return name;
};
js.Boot.__isNativeObj = function(o) {
	return js.Boot.__nativeClassName(o) != null;
};
js.Boot.__resolveNativeClass = function(name) {
	if(typeof window != "undefined") return window[name]; else return global[name];
};
js.Browser = function() { };
$hxClasses["js.Browser"] = js.Browser;
js.Browser.__name__ = ["js","Browser"];
js.Browser.__properties__ = {get_supported:"get_supported",get_navigator:"get_navigator",get_location:"get_location",get_document:"get_document",get_window:"get_window"}
js.Browser.get_window = function() {
	return window;
};
js.Browser.get_document = function() {
	return window.document;
};
js.Browser.get_location = function() {
	return window.location;
};
js.Browser.get_navigator = function() {
	return window.navigator;
};
js.Browser.get_supported = function() {
	return typeof window != "undefined";
};
js.Browser.getLocalStorage = function() {
	try {
		var s = window.localStorage;
		s.getItem("");
		return s;
	} catch( e ) {
		return null;
	}
};
js.Browser.getSessionStorage = function() {
	try {
		var s = window.sessionStorage;
		s.getItem("");
		return s;
	} catch( e ) {
		return null;
	}
};
js.Browser.createXMLHttpRequest = function() {
	if(typeof XMLHttpRequest != "undefined") return new XMLHttpRequest();
	if(typeof ActiveXObject != "undefined") return new ActiveXObject("Microsoft.XMLHTTP");
	throw "Unable to create XMLHttpRequest object.";
};
js.Lib = function() { };
$hxClasses["js.Lib"] = js.Lib;
js.Lib.__name__ = ["js","Lib"];
js.Lib.debug = function() {
	debugger;
};
js.Lib.alert = function(v) {
	alert(js.Boot.__string_rec(v,""));
};
js.Lib["eval"] = function(code) {
	return eval(code);
};
js.html = {};
js.html._CanvasElement = {};
js.html._CanvasElement.CanvasUtil = function() { };
$hxClasses["js.html._CanvasElement.CanvasUtil"] = js.html._CanvasElement.CanvasUtil;
js.html._CanvasElement.CanvasUtil.__name__ = ["js","html","_CanvasElement","CanvasUtil"];
js.html._CanvasElement.CanvasUtil.getContextWebGL = function(canvas,attribs) {
	var _g = 0;
	var _g1 = ["webgl","experimental-webgl"];
	while(_g < _g1.length) {
		var name = _g1[_g];
		++_g;
		var ctx = canvas.getContext(name,attribs);
		if(ctx != null) return ctx;
	}
	return null;
};
lime.AssetCache = function() {
	this.enabled = true;
	this.audio = new haxe.ds.StringMap();
	this.font = new haxe.ds.StringMap();
	this.image = new haxe.ds.StringMap();
};
$hxClasses["lime.AssetCache"] = lime.AssetCache;
lime.AssetCache.__name__ = ["lime","AssetCache"];
lime.AssetCache.prototype = {
	audio: null
	,enabled: null
	,image: null
	,font: null
	,clear: function(prefix) {
		if(prefix == null) {
			this.audio = new haxe.ds.StringMap();
			this.font = new haxe.ds.StringMap();
			this.image = new haxe.ds.StringMap();
		} else {
			var keys = this.audio.keys();
			while( keys.hasNext() ) {
				var key = keys.next();
				if(StringTools.startsWith(key,prefix)) this.audio.remove(key);
			}
			var keys1 = this.font.keys();
			while( keys1.hasNext() ) {
				var key1 = keys1.next();
				if(StringTools.startsWith(key1,prefix)) this.font.remove(key1);
			}
			var keys2 = this.image.keys();
			while( keys2.hasNext() ) {
				var key2 = keys2.next();
				if(StringTools.startsWith(key2,prefix)) this.image.remove(key2);
			}
		}
	}
	,__class__: lime.AssetCache
};
lime.Assets = function() { };
$hxClasses["lime.Assets"] = lime.Assets;
lime.Assets.__name__ = ["lime","Assets"];
lime.Assets.exists = function(id,type) {
	lime.Assets.initialize();
	if(type == null) type = "BINARY";
	var libraryName = id.substring(0,id.indexOf(":"));
	var symbolName;
	var pos = id.indexOf(":") + 1;
	symbolName = HxOverrides.substr(id,pos,null);
	var library = lime.Assets.getLibrary(libraryName);
	if(library != null) return library.exists(symbolName,type);
	return false;
};
lime.Assets.getAudioBuffer = function(id,useCache) {
	if(useCache == null) useCache = true;
	lime.Assets.initialize();
	if(useCache && lime.Assets.cache.enabled && lime.Assets.cache.audio.exists(id)) {
		var audio = lime.Assets.cache.audio.get(id);
		if(lime.Assets.isValidAudio(audio)) return audio;
	}
	var libraryName = id.substring(0,id.indexOf(":"));
	var symbolName;
	var pos = id.indexOf(":") + 1;
	symbolName = HxOverrides.substr(id,pos,null);
	var library = lime.Assets.getLibrary(libraryName);
	if(library != null) {
		if(library.exists(symbolName,"SOUND")) {
			if(library.isLocal(symbolName,"SOUND")) {
				var audio1 = library.getAudioBuffer(symbolName);
				if(useCache && lime.Assets.cache.enabled) lime.Assets.cache.audio.set(id,audio1);
				return audio1;
			} else haxe.Log.trace("[Assets] Audio asset \"" + id + "\" exists, but only asynchronously",{ fileName : "Assets.hx", lineNumber : 115, className : "lime.Assets", methodName : "getAudioBuffer"});
		} else haxe.Log.trace("[Assets] There is no audio asset with an ID of \"" + id + "\"",{ fileName : "Assets.hx", lineNumber : 121, className : "lime.Assets", methodName : "getAudioBuffer"});
	} else haxe.Log.trace("[Assets] There is no asset library named \"" + libraryName + "\"",{ fileName : "Assets.hx", lineNumber : 127, className : "lime.Assets", methodName : "getAudioBuffer"});
	return null;
};
lime.Assets.getBytes = function(id) {
	lime.Assets.initialize();
	var libraryName = id.substring(0,id.indexOf(":"));
	var symbolName;
	var pos = id.indexOf(":") + 1;
	symbolName = HxOverrides.substr(id,pos,null);
	var library = lime.Assets.getLibrary(libraryName);
	if(library != null) {
		if(library.exists(symbolName,"BINARY")) {
			if(library.isLocal(symbolName,"BINARY")) return library.getBytes(symbolName); else haxe.Log.trace("[Assets] String or ByteArray asset \"" + id + "\" exists, but only asynchronously",{ fileName : "Assets.hx", lineNumber : 164, className : "lime.Assets", methodName : "getBytes"});
		} else haxe.Log.trace("[Assets] There is no String or ByteArray asset with an ID of \"" + id + "\"",{ fileName : "Assets.hx", lineNumber : 170, className : "lime.Assets", methodName : "getBytes"});
	} else haxe.Log.trace("[Assets] There is no asset library named \"" + libraryName + "\"",{ fileName : "Assets.hx", lineNumber : 176, className : "lime.Assets", methodName : "getBytes"});
	return null;
};
lime.Assets.getFont = function(id,useCache) {
	if(useCache == null) useCache = true;
	lime.Assets.initialize();
	if(useCache && lime.Assets.cache.enabled && lime.Assets.cache.font.exists(id)) return lime.Assets.cache.font.get(id);
	var libraryName = id.substring(0,id.indexOf(":"));
	var symbolName;
	var pos = id.indexOf(":") + 1;
	symbolName = HxOverrides.substr(id,pos,null);
	var library = lime.Assets.getLibrary(libraryName);
	if(library != null) {
		if(library.exists(symbolName,"FONT")) {
			if(library.isLocal(symbolName,"FONT")) {
				var font = library.getFont(symbolName);
				if(useCache && lime.Assets.cache.enabled) lime.Assets.cache.font.set(id,font);
				return font;
			} else haxe.Log.trace("[Assets] Font asset \"" + id + "\" exists, but only asynchronously",{ fileName : "Assets.hx", lineNumber : 227, className : "lime.Assets", methodName : "getFont"});
		} else haxe.Log.trace("[Assets] There is no Font asset with an ID of \"" + id + "\"",{ fileName : "Assets.hx", lineNumber : 233, className : "lime.Assets", methodName : "getFont"});
	} else haxe.Log.trace("[Assets] There is no asset library named \"" + libraryName + "\"",{ fileName : "Assets.hx", lineNumber : 239, className : "lime.Assets", methodName : "getFont"});
	return null;
};
lime.Assets.getImage = function(id,useCache) {
	if(useCache == null) useCache = true;
	lime.Assets.initialize();
	if(useCache && lime.Assets.cache.enabled && lime.Assets.cache.image.exists(id)) {
		var image = lime.Assets.cache.image.get(id);
		if(lime.Assets.isValidImage(image)) return image;
	}
	var libraryName = id.substring(0,id.indexOf(":"));
	var symbolName;
	var pos = id.indexOf(":") + 1;
	symbolName = HxOverrides.substr(id,pos,null);
	var library = lime.Assets.getLibrary(libraryName);
	if(library != null) {
		if(library.exists(symbolName,"IMAGE")) {
			if(library.isLocal(symbolName,"IMAGE")) {
				var image1 = library.getImage(symbolName);
				if(useCache && lime.Assets.cache.enabled) lime.Assets.cache.image.set(id,image1);
				return image1;
			} else haxe.Log.trace("[Assets] Image asset \"" + id + "\" exists, but only asynchronously",{ fileName : "Assets.hx", lineNumber : 297, className : "lime.Assets", methodName : "getImage"});
		} else haxe.Log.trace("[Assets] There is no Image asset with an ID of \"" + id + "\"",{ fileName : "Assets.hx", lineNumber : 303, className : "lime.Assets", methodName : "getImage"});
	} else haxe.Log.trace("[Assets] There is no asset library named \"" + libraryName + "\"",{ fileName : "Assets.hx", lineNumber : 309, className : "lime.Assets", methodName : "getImage"});
	return null;
};
lime.Assets.getLibrary = function(name) {
	if(name == null || name == "") name = "default";
	return lime.Assets.libraries.get(name);
};
lime.Assets.getPath = function(id) {
	lime.Assets.initialize();
	var libraryName = id.substring(0,id.indexOf(":"));
	var symbolName;
	var pos = id.indexOf(":") + 1;
	symbolName = HxOverrides.substr(id,pos,null);
	var library = lime.Assets.getLibrary(libraryName);
	if(library != null) {
		if(library.exists(symbolName,null)) return library.getPath(symbolName); else haxe.Log.trace("[Assets] There is no asset with an ID of \"" + id + "\"",{ fileName : "Assets.hx", lineNumber : 426, className : "lime.Assets", methodName : "getPath"});
	} else haxe.Log.trace("[Assets] There is no asset library named \"" + libraryName + "\"",{ fileName : "Assets.hx", lineNumber : 432, className : "lime.Assets", methodName : "getPath"});
	return null;
};
lime.Assets.getText = function(id) {
	lime.Assets.initialize();
	var libraryName = id.substring(0,id.indexOf(":"));
	var symbolName;
	var pos = id.indexOf(":") + 1;
	symbolName = HxOverrides.substr(id,pos,null);
	var library = lime.Assets.getLibrary(libraryName);
	if(library != null) {
		if(library.exists(symbolName,"TEXT")) {
			if(library.isLocal(symbolName,"TEXT")) return library.getText(symbolName); else haxe.Log.trace("[Assets] String asset \"" + id + "\" exists, but only asynchronously",{ fileName : "Assets.hx", lineNumber : 469, className : "lime.Assets", methodName : "getText"});
		} else haxe.Log.trace("[Assets] There is no String asset with an ID of \"" + id + "\"",{ fileName : "Assets.hx", lineNumber : 475, className : "lime.Assets", methodName : "getText"});
	} else haxe.Log.trace("[Assets] There is no asset library named \"" + libraryName + "\"",{ fileName : "Assets.hx", lineNumber : 481, className : "lime.Assets", methodName : "getText"});
	return null;
};
lime.Assets.initialize = function() {
	if(!lime.Assets.initialized) {
		lime.Assets.registerLibrary("default",new DefaultAssetLibrary());
		lime.Assets.initialized = true;
	}
};
lime.Assets.isLocal = function(id,type,useCache) {
	if(useCache == null) useCache = true;
	lime.Assets.initialize();
	if(useCache && lime.Assets.cache.enabled) {
		if(type == "IMAGE" || type == null) {
			if(lime.Assets.cache.image.exists(id)) return true;
		}
		if(type == "FONT" || type == null) {
			if(lime.Assets.cache.font.exists(id)) return true;
		}
		if(type == "SOUND" || type == "MUSIC" || type == null) {
			if(lime.Assets.cache.audio.exists(id)) return true;
		}
	}
	var libraryName = id.substring(0,id.indexOf(":"));
	var symbolName;
	var pos = id.indexOf(":") + 1;
	symbolName = HxOverrides.substr(id,pos,null);
	var library = lime.Assets.getLibrary(libraryName);
	if(library != null) return library.isLocal(symbolName,type);
	return false;
};
lime.Assets.isValidAudio = function(buffer) {
	return buffer != null;
	return true;
};
lime.Assets.isValidImage = function(buffer) {
	return true;
};
lime.Assets.list = function(type) {
	lime.Assets.initialize();
	var items = [];
	var $it0 = lime.Assets.libraries.iterator();
	while( $it0.hasNext() ) {
		var library = $it0.next();
		var libraryItems = library.list(type);
		if(libraryItems != null) items = items.concat(libraryItems);
	}
	return items;
};
lime.Assets.loadAudioBuffer = function(id,handler,useCache) {
	if(useCache == null) useCache = true;
	lime.Assets.initialize();
	if(useCache && lime.Assets.cache.enabled && lime.Assets.cache.audio.exists(id)) {
		var audio = lime.Assets.cache.audio.get(id);
		if(lime.Assets.isValidAudio(audio)) {
			handler(audio);
			return;
		}
	}
	var libraryName = id.substring(0,id.indexOf(":"));
	var symbolName;
	var pos = id.indexOf(":") + 1;
	symbolName = HxOverrides.substr(id,pos,null);
	var library = lime.Assets.getLibrary(libraryName);
	if(library != null) {
		if(library.exists(symbolName,"SOUND")) {
			if(useCache && lime.Assets.cache.enabled) library.loadAudioBuffer(symbolName,function(audio1) {
				var value = audio1;
				lime.Assets.cache.audio.set(id,value);
				handler(audio1);
			}); else library.loadAudioBuffer(symbolName,handler);
			return;
		} else haxe.Log.trace("[Assets] There is no audio asset with an ID of \"" + id + "\"",{ fileName : "Assets.hx", lineNumber : 666, className : "lime.Assets", methodName : "loadAudioBuffer"});
	} else haxe.Log.trace("[Assets] There is no asset library named \"" + libraryName + "\"",{ fileName : "Assets.hx", lineNumber : 672, className : "lime.Assets", methodName : "loadAudioBuffer"});
	handler(null);
};
lime.Assets.loadBytes = function(id,handler) {
	lime.Assets.initialize();
	var libraryName = id.substring(0,id.indexOf(":"));
	var symbolName;
	var pos = id.indexOf(":") + 1;
	symbolName = HxOverrides.substr(id,pos,null);
	var library = lime.Assets.getLibrary(libraryName);
	if(library != null) {
		if(library.exists(symbolName,"BINARY")) {
			library.loadBytes(symbolName,handler);
			return;
		} else haxe.Log.trace("[Assets] There is no String or ByteArray asset with an ID of \"" + id + "\"",{ fileName : "Assets.hx", lineNumber : 702, className : "lime.Assets", methodName : "loadBytes"});
	} else haxe.Log.trace("[Assets] There is no asset library named \"" + libraryName + "\"",{ fileName : "Assets.hx", lineNumber : 708, className : "lime.Assets", methodName : "loadBytes"});
	handler(null);
};
lime.Assets.loadImage = function(id,handler,useCache) {
	if(useCache == null) useCache = true;
	lime.Assets.initialize();
	if(useCache && lime.Assets.cache.enabled && lime.Assets.cache.image.exists(id)) {
		var image = lime.Assets.cache.image.get(id);
		if(lime.Assets.isValidImage(image)) {
			handler(image);
			return;
		}
	}
	var libraryName = id.substring(0,id.indexOf(":"));
	var symbolName;
	var pos = id.indexOf(":") + 1;
	symbolName = HxOverrides.substr(id,pos,null);
	var library = lime.Assets.getLibrary(libraryName);
	if(library != null) {
		if(library.exists(symbolName,"IMAGE")) {
			if(useCache && lime.Assets.cache.enabled) library.loadImage(symbolName,function(image1) {
				lime.Assets.cache.image.set(id,image1);
				handler(image1);
			}); else library.loadImage(symbolName,handler);
			return;
		} else haxe.Log.trace("[Assets] There is no Image asset with an ID of \"" + id + "\"",{ fileName : "Assets.hx", lineNumber : 765, className : "lime.Assets", methodName : "loadImage"});
	} else haxe.Log.trace("[Assets] There is no asset library named \"" + libraryName + "\"",{ fileName : "Assets.hx", lineNumber : 771, className : "lime.Assets", methodName : "loadImage"});
	handler(null);
};
lime.Assets.loadLibrary = function(name,handler) {
	lime.Assets.initialize();
	var data = lime.Assets.getText("libraries/" + name + ".json");
	if(data != null && data != "") {
		var info = JSON.parse(data);
		var library = Type.createInstance(Type.resolveClass(info.type),info.args);
		lime.Assets.libraries.set(name,library);
		library.eventCallback = lime.Assets.library_onEvent;
		library.load(handler);
	} else haxe.Log.trace("[Assets] There is no asset library named \"" + name + "\"",{ fileName : "Assets.hx", lineNumber : 800, className : "lime.Assets", methodName : "loadLibrary"});
};
lime.Assets.loadText = function(id,handler) {
	lime.Assets.initialize();
	var libraryName = id.substring(0,id.indexOf(":"));
	var symbolName;
	var pos = id.indexOf(":") + 1;
	symbolName = HxOverrides.substr(id,pos,null);
	var library = lime.Assets.getLibrary(libraryName);
	if(library != null) {
		if(library.exists(symbolName,"TEXT")) {
			library.loadText(symbolName,handler);
			return;
		} else haxe.Log.trace("[Assets] There is no String asset with an ID of \"" + id + "\"",{ fileName : "Assets.hx", lineNumber : 891, className : "lime.Assets", methodName : "loadText"});
	} else haxe.Log.trace("[Assets] There is no asset library named \"" + libraryName + "\"",{ fileName : "Assets.hx", lineNumber : 897, className : "lime.Assets", methodName : "loadText"});
	handler(null);
};
lime.Assets.registerLibrary = function(name,library) {
	if(lime.Assets.libraries.exists(name)) lime.Assets.unloadLibrary(name);
	if(library != null) library.eventCallback = lime.Assets.library_onEvent;
	lime.Assets.libraries.set(name,library);
};
lime.Assets.unloadLibrary = function(name) {
	lime.Assets.initialize();
	var library = lime.Assets.libraries.get(name);
	if(library != null) {
		lime.Assets.cache.clear(name + ":");
		library.eventCallback = null;
	}
	lime.Assets.libraries.remove(name);
};
lime.Assets.library_onEvent = function(library,type) {
	if(type == "change") lime.Assets.cache.clear();
};
lime._Assets = {};
lime._Assets.AssetType_Impl_ = function() { };
$hxClasses["lime._Assets.AssetType_Impl_"] = lime._Assets.AssetType_Impl_;
lime._Assets.AssetType_Impl_.__name__ = ["lime","_Assets","AssetType_Impl_"];
lime._backend = {};
lime._backend.html5 = {};
lime._backend.html5.HTML5Application = function(parent) {
	this.parent = parent;
	lime.audio.AudioManager.init();
};
$hxClasses["lime._backend.html5.HTML5Application"] = lime._backend.html5.HTML5Application;
lime._backend.html5.HTML5Application.__name__ = ["lime","_backend","html5","HTML5Application"];
lime._backend.html5.HTML5Application.prototype = {
	cacheTime: null
	,parent: null
	,convertKeyCode: function(keyCode) {
		if(keyCode >= 65 && keyCode <= 90) return keyCode + 32;
		switch(keyCode) {
		case 16:
			return 1073742049;
		case 17:
			return 1073742048;
		case 18:
			return 1073742050;
		case 20:
			return 1073741881;
		case 144:
			return 1073741907;
		case 37:
			return 1073741904;
		case 38:
			return 1073741906;
		case 39:
			return 1073741903;
		case 40:
			return 1073741905;
		case 45:
			return 1073741897;
		case 46:
			return 127;
		case 36:
			return 1073741898;
		case 35:
			return 1073741901;
		case 33:
			return 1073741899;
		case 34:
			return 1073741902;
		case 112:
			return 1073741882;
		case 113:
			return 1073741883;
		case 114:
			return 1073741884;
		case 115:
			return 1073741885;
		case 116:
			return 1073741886;
		case 117:
			return 1073741887;
		case 118:
			return 1073741888;
		case 119:
			return 1073741889;
		case 120:
			return 1073741890;
		case 121:
			return 1073741891;
		case 122:
			return 1073741892;
		case 123:
			return 1073741893;
		}
		return keyCode;
	}
	,create: function(config) {
		this.parent.config = config;
		if(config != null) {
			var $window = new lime.ui.Window(config);
			var renderer = new lime.graphics.Renderer($window);
			this.parent.addWindow($window);
			this.parent.addRenderer(renderer);
			this.parent.init(renderer.context);
		}
	}
	,exec: function() {
		window.addEventListener("keydown",$bind(this,this.handleKeyEvent),false);
		window.addEventListener("keyup",$bind(this,this.handleKeyEvent),false);
		window.addEventListener("focus",$bind(this,this.handleWindowEvent),false);
		window.addEventListener("blur",$bind(this,this.handleWindowEvent),false);
		window.addEventListener("resize",$bind(this,this.handleWindowEvent),false);
		window.addEventListener("beforeunload",$bind(this,this.handleWindowEvent),false);
		
			var lastTime = 0;
			var vendors = ['ms', 'moz', 'webkit', 'o'];
			for(var x = 0; x < vendors.length && !window.requestAnimationFrame; ++x) {
				window.requestAnimationFrame = window[vendors[x]+'RequestAnimationFrame'];
				window.cancelAnimationFrame = window[vendors[x]+'CancelAnimationFrame'] 
										   || window[vendors[x]+'CancelRequestAnimationFrame'];
			}
			
			if (!window.requestAnimationFrame)
				window.requestAnimationFrame = function(callback, element) {
					var currTime = new Date().getTime();
					var timeToCall = Math.max(0, 16 - (currTime - lastTime));
					var id = window.setTimeout(function() { callback(currTime + timeToCall); }, 
					  timeToCall);
					lastTime = currTime + timeToCall;
					return id;
				};
			
			if (!window.cancelAnimationFrame)
				window.cancelAnimationFrame = function(id) {
					clearTimeout(id);
				};
			
			window.requestAnimFrame = window.requestAnimationFrame;
		;
		this.cacheTime = new Date().getTime();
		this.handleUpdateEvent();
		return 0;
	}
	,handleKeyEvent: function(event) {
		if(this.parent.windows[0] != null) {
			var _g = event.keyCode;
			switch(_g) {
			case 32:case 37:case 38:case 39:case 40:
				event.preventDefault();
				break;
			}
			var keyCode = this.convertKeyCode(event.keyCode != null?event.keyCode:event.which);
			var modifier;
			modifier = (event.shiftKey?3:0) | (event.ctrlKey?192:0) | (event.altKey?768:0) | (event.metaKey?3072:0);
			if(event.type == "keydown") {
				var listeners = this.parent.windows[0].onKeyDown.listeners;
				var repeat = this.parent.windows[0].onKeyDown.repeat;
				var length = listeners.length;
				var i = 0;
				while(i < length) {
					listeners[i](keyCode,modifier);
					if(!repeat[i]) {
						this.parent.windows[0].onKeyDown.remove(listeners[i]);
						length--;
					} else i++;
				}
			} else {
				var listeners1 = this.parent.windows[0].onKeyUp.listeners;
				var repeat1 = this.parent.windows[0].onKeyUp.repeat;
				var length1 = listeners1.length;
				var i1 = 0;
				while(i1 < length1) {
					listeners1[i1](keyCode,modifier);
					if(!repeat1[i1]) {
						this.parent.windows[0].onKeyUp.remove(listeners1[i1]);
						length1--;
					} else i1++;
				}
			}
		}
	}
	,handleUpdateEvent: function(__) {
		var currentTime = new Date().getTime();
		var deltaTime = currentTime - this.cacheTime;
		this.cacheTime = currentTime;
		var listeners = this.parent.onUpdate.listeners;
		var repeat = this.parent.onUpdate.repeat;
		var length = listeners.length;
		var i = 0;
		while(i < length) {
			listeners[i](deltaTime | 0);
			if(!repeat[i]) {
				this.parent.onUpdate.remove(listeners[i]);
				length--;
			} else i++;
		}
		if(this.parent.renderers[0] != null) {
			var listeners1 = this.parent.renderers[0].onRender.listeners;
			var repeat1 = this.parent.renderers[0].onRender.repeat;
			var length1 = listeners1.length;
			var i1 = 0;
			while(i1 < length1) {
				listeners1[i1](this.parent.renderers[0].context);
				if(!repeat1[i1]) {
					this.parent.renderers[0].onRender.remove(listeners1[i1]);
					length1--;
				} else i1++;
			}
			this.parent.renderers[0].flip();
		}
		window.requestAnimationFrame($bind(this,this.handleUpdateEvent));
	}
	,handleWindowEvent: function(event) {
		if(this.parent.windows[0] != null) {
			var _g = event.type;
			switch(_g) {
			case "focus":
				var listeners = this.parent.windows[0].onWindowFocusIn.listeners;
				var repeat = this.parent.windows[0].onWindowFocusIn.repeat;
				var length = listeners.length;
				var i = 0;
				while(i < length) {
					listeners[i]();
					if(!repeat[i]) {
						this.parent.windows[0].onWindowFocusIn.remove(listeners[i]);
						length--;
					} else i++;
				}
				var listeners1 = this.parent.windows[0].onWindowActivate.listeners;
				var repeat1 = this.parent.windows[0].onWindowActivate.repeat;
				var length1 = listeners1.length;
				var i1 = 0;
				while(i1 < length1) {
					listeners1[i1]();
					if(!repeat1[i1]) {
						this.parent.windows[0].onWindowActivate.remove(listeners1[i1]);
						length1--;
					} else i1++;
				}
				break;
			case "blur":
				var listeners2 = this.parent.windows[0].onWindowFocusOut.listeners;
				var repeat2 = this.parent.windows[0].onWindowFocusOut.repeat;
				var length2 = listeners2.length;
				var i2 = 0;
				while(i2 < length2) {
					listeners2[i2]();
					if(!repeat2[i2]) {
						this.parent.windows[0].onWindowFocusOut.remove(listeners2[i2]);
						length2--;
					} else i2++;
				}
				var listeners3 = this.parent.windows[0].onWindowDeactivate.listeners;
				var repeat3 = this.parent.windows[0].onWindowDeactivate.repeat;
				var length3 = listeners3.length;
				var i3 = 0;
				while(i3 < length3) {
					listeners3[i3]();
					if(!repeat3[i3]) {
						this.parent.windows[0].onWindowDeactivate.remove(listeners3[i3]);
						length3--;
					} else i3++;
				}
				break;
			case "resize":
				var cacheWidth = this.parent.windows[0].__width;
				var cacheHeight = this.parent.windows[0].__height;
				this.parent.windows[0].backend.handleResize();
				if(this.parent.windows[0].__width != cacheWidth || this.parent.windows[0].__height != cacheHeight) {
					var listeners4 = this.parent.windows[0].onWindowResize.listeners;
					var repeat4 = this.parent.windows[0].onWindowResize.repeat;
					var length4 = listeners4.length;
					var i4 = 0;
					while(i4 < length4) {
						listeners4[i4](this.parent.windows[0].__width,this.parent.windows[0].__height);
						if(!repeat4[i4]) {
							this.parent.windows[0].onWindowResize.remove(listeners4[i4]);
							length4--;
						} else i4++;
					}
				}
				break;
			case "beforeunload":
				var listeners5 = this.parent.windows[0].onWindowClose.listeners;
				var repeat5 = this.parent.windows[0].onWindowClose.repeat;
				var length5 = listeners5.length;
				var i5 = 0;
				while(i5 < length5) {
					listeners5[i5]();
					if(!repeat5[i5]) {
						this.parent.windows[0].onWindowClose.remove(listeners5[i5]);
						length5--;
					} else i5++;
				}
				break;
			}
		}
	}
	,__class__: lime._backend.html5.HTML5Application
};
lime._backend.html5.HTML5Mouse = function() { };
$hxClasses["lime._backend.html5.HTML5Mouse"] = lime._backend.html5.HTML5Mouse;
lime._backend.html5.HTML5Mouse.__name__ = ["lime","_backend","html5","HTML5Mouse"];
lime._backend.html5.HTML5Mouse.__cursor = null;
lime._backend.html5.HTML5Mouse.__hidden = null;
lime._backend.html5.HTML5Mouse.hide = function() {
	if(!lime._backend.html5.HTML5Mouse.__hidden) {
		lime._backend.html5.HTML5Mouse.__hidden = true;
		var _g = 0;
		var _g1 = lime.app.Application.current.windows;
		while(_g < _g1.length) {
			var $window = _g1[_g];
			++_g;
			$window.backend.element.style.cursor = "none";
		}
	}
};
lime._backend.html5.HTML5Mouse.show = function() {
	if(lime._backend.html5.HTML5Mouse.__hidden) {
		lime._backend.html5.HTML5Mouse.__hidden = false;
		var cacheValue = lime._backend.html5.HTML5Mouse.__cursor;
		lime._backend.html5.HTML5Mouse.__cursor = null;
		lime._backend.html5.HTML5Mouse.set_cursor(cacheValue);
	}
};
lime._backend.html5.HTML5Mouse.warp = function(x,y,window) {
};
lime._backend.html5.HTML5Mouse.get_cursor = function() {
	if(lime._backend.html5.HTML5Mouse.__cursor == null) return lime.ui.MouseCursor.DEFAULT;
	return lime._backend.html5.HTML5Mouse.__cursor;
};
lime._backend.html5.HTML5Mouse.set_cursor = function(value) {
	if(lime._backend.html5.HTML5Mouse.__cursor != value) {
		if(!lime._backend.html5.HTML5Mouse.__hidden) {
			var _g = 0;
			var _g1 = lime.app.Application.current.windows;
			while(_g < _g1.length) {
				var $window = _g1[_g];
				++_g;
				switch(value[1]) {
				case 0:
					$window.backend.element.style.cursor = "default";
					break;
				case 1:
					$window.backend.element.style.cursor = "crosshair";
					break;
				case 3:
					$window.backend.element.style.cursor = "move";
					break;
				case 4:
					$window.backend.element.style.cursor = "pointer";
					break;
				case 5:
					$window.backend.element.style.cursor = "nesw-resize";
					break;
				case 6:
					$window.backend.element.style.cursor = "ns-resize";
					break;
				case 7:
					$window.backend.element.style.cursor = "nwse-resize";
					break;
				case 8:
					$window.backend.element.style.cursor = "ew-resize";
					break;
				case 9:
					$window.backend.element.style.cursor = "text";
					break;
				case 10:
					$window.backend.element.style.cursor = "wait";
					break;
				case 11:
					$window.backend.element.style.cursor = "wait";
					break;
				default:
					$window.backend.element.style.cursor = "auto";
				}
			}
		}
		lime._backend.html5.HTML5Mouse.__cursor = value;
	}
	return lime._backend.html5.HTML5Mouse.__cursor;
};
lime._backend.html5.HTML5Mouse.get_lock = function() {
	return false;
};
lime._backend.html5.HTML5Mouse.set_lock = function(value) {
	return value;
};
lime._backend.html5.HTML5Renderer = function(parent) {
	this.parent = parent;
};
$hxClasses["lime._backend.html5.HTML5Renderer"] = lime._backend.html5.HTML5Renderer;
lime._backend.html5.HTML5Renderer.__name__ = ["lime","_backend","html5","HTML5Renderer"];
lime._backend.html5.HTML5Renderer.prototype = {
	parent: null
	,create: function() {
		this.createContext();
		{
			var _g = this.parent.context;
			switch(_g[1]) {
			case 0:
				this.parent.window.backend.canvas.addEventListener("webglcontextlost",$bind(this,this.handleEvent),false);
				this.parent.window.backend.canvas.addEventListener("webglcontextrestored",$bind(this,this.handleEvent),false);
				break;
			default:
			}
		}
	}
	,createContext: function() {
		if(this.parent.window.backend.div != null) this.parent.context = lime.graphics.RenderContext.DOM(this.parent.window.backend.div); else if(this.parent.window.backend.canvas != null) {
			var webgl = null;
			if(webgl == null) this.parent.context = lime.graphics.RenderContext.CANVAS(this.parent.window.backend.canvas.getContext("2d")); else {
				lime.graphics.opengl.GL.context = webgl;
				this.parent.context = lime.graphics.RenderContext.OPENGL(lime.graphics.opengl.GL.context);
			}
		}
	}
	,flip: function() {
	}
	,handleEvent: function(event) {
		var _g = event.type;
		switch(_g) {
		case "webglcontextlost":
			event.preventDefault();
			this.parent.context = null;
			var listeners = this.parent.onRenderContextLost.listeners;
			var repeat = this.parent.onRenderContextLost.repeat;
			var length = listeners.length;
			var i = 0;
			while(i < length) {
				listeners[i]();
				if(!repeat[i]) {
					this.parent.onRenderContextLost.remove(listeners[i]);
					length--;
				} else i++;
			}
			break;
		case "webglcontextrestored":
			this.createContext();
			var listeners1 = this.parent.onRenderContextRestored.listeners;
			var repeat1 = this.parent.onRenderContextRestored.repeat;
			var length1 = listeners1.length;
			var i1 = 0;
			while(i1 < length1) {
				listeners1[i1](this.parent.context);
				if(!repeat1[i1]) {
					this.parent.onRenderContextRestored.remove(listeners1[i1]);
					length1--;
				} else i1++;
			}
			break;
		default:
		}
	}
	,render: function() {
	}
	,__class__: lime._backend.html5.HTML5Renderer
};
lime._backend.html5.HTML5Window = function(parent) {
	this.parent = parent;
	if(parent.config != null && Object.prototype.hasOwnProperty.call(parent.config,"element")) this.element = parent.config.element;
};
$hxClasses["lime._backend.html5.HTML5Window"] = lime._backend.html5.HTML5Window;
lime._backend.html5.HTML5Window.__name__ = ["lime","_backend","html5","HTML5Window"];
lime._backend.html5.HTML5Window.prototype = {
	canvas: null
	,div: null
	,element: null
	,parent: null
	,setHeight: null
	,setWidth: null
	,close: function() {
	}
	,create: function(application) {
		this.setWidth = this.parent.__width;
		this.setHeight = this.parent.__height;
		if(js.Boot.__instanceof(this.element,HTMLCanvasElement)) this.canvas = this.element; else this.div = window.document.createElement("div");
		if(this.canvas != null) {
			var style = this.canvas.style;
			style.setProperty("-webkit-transform","translateZ(0)",null);
			style.setProperty("transform","translateZ(0)",null);
		} else if(this.div != null) {
			var style1 = this.div.style;
			style1.setProperty("-webkit-transform","translate3D(0,0,0)",null);
			style1.setProperty("transform","translate3D(0,0,0)",null);
			style1.position = "relative";
			style1.overflow = "hidden";
			style1.setProperty("-webkit-user-select","none",null);
			style1.setProperty("-moz-user-select","none",null);
			style1.setProperty("-ms-user-select","none",null);
			style1.setProperty("-o-user-select","none",null);
		}
		if(this.parent.__width == 0 && this.parent.__height == 0) {
			if(this.element != null) {
				this.parent.set_width(this.element.clientWidth);
				this.parent.set_height(this.element.clientHeight);
			} else {
				this.parent.set_width(window.innerWidth);
				this.parent.set_height(window.innerHeight);
			}
			this.parent.set_fullscreen(true);
		}
		if(this.canvas != null) {
			this.canvas.width = this.parent.__width;
			this.canvas.height = this.parent.__height;
		} else {
			this.div.style.width = this.parent.__width + "px";
			this.div.style.height = this.parent.__height + "px";
		}
		this.handleResize();
		if(this.element != null) {
			if(this.canvas != null) {
				if(this.element != this.canvas) this.element.appendChild(this.canvas);
			} else this.element.appendChild(this.div);
			var events = ["mousedown","mousemove","mouseup","wheel"];
			var _g = 0;
			while(_g < events.length) {
				var event = events[_g];
				++_g;
				this.element.addEventListener(event,$bind(this,this.handleMouseEvent),true);
			}
			window.document.addEventListener("dragstart",function(e) {
				if(e.target.nodeName.toLowerCase() == "img") {
					e.preventDefault();
					return false;
				}
				return true;
			},false);
			this.element.addEventListener("touchstart",$bind(this,this.handleTouchEvent),true);
			this.element.addEventListener("touchmove",$bind(this,this.handleTouchEvent),true);
			this.element.addEventListener("touchend",$bind(this,this.handleTouchEvent),true);
		}
	}
	,handleMouseEvent: function(event) {
		var x = 0.0;
		var y = 0.0;
		if(event.type != "wheel") {
			if(this.element != null) {
				if(this.canvas != null) {
					var rect = this.canvas.getBoundingClientRect();
					x = (event.clientX - rect.left) * (this.parent.__width / rect.width);
					y = (event.clientY - rect.top) * (this.parent.__height / rect.height);
				} else if(this.div != null) {
					var rect1 = this.div.getBoundingClientRect();
					x = event.clientX - rect1.left;
					y = event.clientY - rect1.top;
				} else {
					var rect2 = this.element.getBoundingClientRect();
					x = (event.clientX - rect2.left) * (this.parent.__width / rect2.width);
					y = (event.clientY - rect2.top) * (this.parent.__height / rect2.height);
				}
			} else {
				x = event.clientX;
				y = event.clientY;
			}
			var _g = event.type;
			switch(_g) {
			case "mousedown":
				var listeners = this.parent.onMouseDown.listeners;
				var repeat = this.parent.onMouseDown.repeat;
				var length = listeners.length;
				var i = 0;
				while(i < length) {
					listeners[i](x,y,event.button);
					if(!repeat[i]) {
						this.parent.onMouseDown.remove(listeners[i]);
						length--;
					} else i++;
				}
				break;
			case "mouseup":
				var listeners1 = this.parent.onMouseUp.listeners;
				var repeat1 = this.parent.onMouseUp.repeat;
				var length1 = listeners1.length;
				var i1 = 0;
				while(i1 < length1) {
					listeners1[i1](x,y,event.button);
					if(!repeat1[i1]) {
						this.parent.onMouseUp.remove(listeners1[i1]);
						length1--;
					} else i1++;
				}
				break;
			case "mousemove":
				var listeners2 = this.parent.onMouseMove.listeners;
				var repeat2 = this.parent.onMouseMove.repeat;
				var length2 = listeners2.length;
				var i2 = 0;
				while(i2 < length2) {
					listeners2[i2](x,y);
					if(!repeat2[i2]) {
						this.parent.onMouseMove.remove(listeners2[i2]);
						length2--;
					} else i2++;
				}
				break;
			default:
			}
		} else {
			var listeners3 = this.parent.onMouseWheel.listeners;
			var repeat3 = this.parent.onMouseWheel.repeat;
			var length3 = listeners3.length;
			var i3 = 0;
			while(i3 < length3) {
				listeners3[i3](event.deltaX,-event.deltaY);
				if(!repeat3[i3]) {
					this.parent.onMouseWheel.remove(listeners3[i3]);
					length3--;
				} else i3++;
			}
		}
	}
	,handleResize: function() {
		var stretch = this.parent.__fullscreen || this.setWidth == 0 && this.setHeight == 0;
		if(this.element != null && (this.div == null || this.div != null && stretch)) {
			if(stretch) {
				if(this.parent.__width != this.element.clientWidth || this.parent.__height != this.element.clientHeight) {
					this.parent.set_width(this.element.clientWidth);
					this.parent.set_height(this.element.clientHeight);
					if(this.canvas != null) {
						if(this.element != this.canvas) {
							this.canvas.width = this.element.clientWidth;
							this.canvas.height = this.element.clientHeight;
						}
					} else {
						this.div.style.width = this.element.clientWidth + "px";
						this.div.style.height = this.element.clientHeight + "px";
					}
				}
			} else {
				var scaleX = this.element.clientWidth / this.setWidth;
				var scaleY = this.element.clientHeight / this.setHeight;
				var currentRatio = scaleX / scaleY;
				var targetRatio = Math.min(scaleX,scaleY);
				if(this.canvas != null) {
					if(this.element != this.canvas) {
						this.canvas.style.width = this.setWidth * targetRatio + "px";
						this.canvas.style.height = this.setHeight * targetRatio + "px";
						this.canvas.style.marginLeft = (this.element.clientWidth - this.setWidth * targetRatio) / 2 + "px";
						this.canvas.style.marginTop = (this.element.clientHeight - this.setHeight * targetRatio) / 2 + "px";
					}
				} else {
					this.div.style.width = this.setWidth * targetRatio + "px";
					this.div.style.height = this.setHeight * targetRatio + "px";
					this.div.style.marginLeft = (this.element.clientWidth - this.setWidth * targetRatio) / 2 + "px";
					this.div.style.marginTop = (this.element.clientHeight - this.setHeight * targetRatio) / 2 + "px";
				}
			}
		}
	}
	,handleTouchEvent: function(event) {
		event.preventDefault();
		var touch = event.changedTouches[0];
		var id = touch.identifier;
		var x = 0.0;
		var y = 0.0;
		if(this.element != null) {
			if(this.canvas != null) {
				var rect = this.canvas.getBoundingClientRect();
				x = (touch.clientX - rect.left) * (this.parent.__width / rect.width);
				y = (touch.clientY - rect.top) * (this.parent.__height / rect.height);
			} else if(this.div != null) {
				var rect1 = this.div.getBoundingClientRect();
				x = touch.clientX - rect1.left;
				y = touch.clientY - rect1.top;
			} else {
				var rect2 = this.element.getBoundingClientRect();
				x = (touch.clientX - rect2.left) * (this.parent.__width / rect2.width);
				y = (touch.clientY - rect2.top) * (this.parent.__height / rect2.height);
			}
		} else {
			x = touch.clientX;
			y = touch.clientY;
		}
		var _g = event.type;
		switch(_g) {
		case "touchstart":
			var listeners = this.parent.onTouchStart.listeners;
			var repeat = this.parent.onTouchStart.repeat;
			var length = listeners.length;
			var i = 0;
			while(i < length) {
				listeners[i](x,y,id);
				if(!repeat[i]) {
					this.parent.onTouchStart.remove(listeners[i]);
					length--;
				} else i++;
			}
			break;
		case "touchmove":
			var listeners1 = this.parent.onTouchMove.listeners;
			var repeat1 = this.parent.onTouchMove.repeat;
			var length1 = listeners1.length;
			var i1 = 0;
			while(i1 < length1) {
				listeners1[i1](x,y,id);
				if(!repeat1[i1]) {
					this.parent.onTouchMove.remove(listeners1[i1]);
					length1--;
				} else i1++;
			}
			break;
		case "touchend":
			var listeners2 = this.parent.onTouchEnd.listeners;
			var repeat2 = this.parent.onTouchEnd.repeat;
			var length2 = listeners2.length;
			var i2 = 0;
			while(i2 < length2) {
				listeners2[i2](x,y,id);
				if(!repeat2[i2]) {
					this.parent.onTouchEnd.remove(listeners2[i2]);
					length2--;
				} else i2++;
			}
			break;
		default:
		}
	}
	,move: function(x,y) {
	}
	,resize: function(width,height) {
	}
	,setFullscreen: function(value) {
		return false;
	}
	,setIcon: function(image) {
	}
	,setMinimized: function(value) {
		return false;
	}
	,__class__: lime._backend.html5.HTML5Window
};
lime.app = {};
lime.app.IModule = function() { };
$hxClasses["lime.app.IModule"] = lime.app.IModule;
lime.app.IModule.__name__ = ["lime","app","IModule"];
lime.app.IModule.prototype = {
	init: null
	,onGamepadAxisMove: null
	,onGamepadButtonDown: null
	,onGamepadButtonUp: null
	,onGamepadConnect: null
	,onGamepadDisconnect: null
	,onKeyDown: null
	,onKeyUp: null
	,onMouseDown: null
	,onMouseMove: null
	,onMouseMoveRelative: null
	,onMouseUp: null
	,onMouseWheel: null
	,onRenderContextLost: null
	,onRenderContextRestored: null
	,onTouchEnd: null
	,onTouchMove: null
	,onTouchStart: null
	,onWindowActivate: null
	,onWindowClose: null
	,onWindowDeactivate: null
	,onWindowFocusIn: null
	,onWindowFocusOut: null
	,onWindowFullscreen: null
	,onWindowMove: null
	,onWindowMinimize: null
	,onWindowResize: null
	,onWindowRestore: null
	,render: null
	,update: null
	,__class__: lime.app.IModule
};
lime.app.Module = function() {
};
$hxClasses["lime.app.Module"] = lime.app.Module;
lime.app.Module.__name__ = ["lime","app","Module"];
lime.app.Module.__interfaces__ = [lime.app.IModule];
lime.app.Module.prototype = {
	init: function(context) {
	}
	,onGamepadAxisMove: function(gamepad,axis,value) {
	}
	,onGamepadButtonDown: function(gamepad,button) {
	}
	,onGamepadButtonUp: function(gamepad,button) {
	}
	,onGamepadConnect: function(gamepad) {
	}
	,onGamepadDisconnect: function(gamepad) {
	}
	,onKeyDown: function(keyCode,modifier) {
	}
	,onKeyUp: function(keyCode,modifier) {
	}
	,onMouseDown: function(x,y,button) {
	}
	,onMouseMove: function(x,y) {
	}
	,onMouseMoveRelative: function(x,y) {
	}
	,onMouseUp: function(x,y,button) {
	}
	,onMouseWheel: function(deltaX,deltaY) {
	}
	,onRenderContextLost: function() {
	}
	,onRenderContextRestored: function(context) {
	}
	,onTouchEnd: function(x,y,id) {
	}
	,onTouchMove: function(x,y,id) {
	}
	,onTouchStart: function(x,y,id) {
	}
	,onWindowActivate: function() {
	}
	,onWindowClose: function() {
	}
	,onWindowDeactivate: function() {
	}
	,onWindowFocusIn: function() {
	}
	,onWindowFocusOut: function() {
	}
	,onWindowFullscreen: function() {
	}
	,onWindowMinimize: function() {
	}
	,onWindowMove: function(x,y) {
	}
	,onWindowResize: function(width,height) {
	}
	,onWindowRestore: function() {
	}
	,render: function(context) {
	}
	,update: function(deltaTime) {
	}
	,__class__: lime.app.Module
};
lime.app.Application = function() {
	this.onUpdate = new lime.app.Event();
	lime.app.Module.call(this);
	if(lime.app.Application.current == null) lime.app.Application.current = this;
	this.modules = new Array();
	this.renderers = new Array();
	this.windows = new Array();
	this.backend = new lime._backend.html5.HTML5Application(this);
	this.onUpdate.add($bind(this,this.update));
};
$hxClasses["lime.app.Application"] = lime.app.Application;
lime.app.Application.__name__ = ["lime","app","Application"];
lime.app.Application.current = null;
lime.app.Application.__super__ = lime.app.Module;
lime.app.Application.prototype = $extend(lime.app.Module.prototype,{
	config: null
	,modules: null
	,onUpdate: null
	,renderer: null
	,renderers: null
	,window: null
	,windows: null
	,backend: null
	,initialized: null
	,addModule: function(module) {
		this.modules.push(module);
		if(this.initialized && this.renderers[0] != null) module.init(this.renderers[0].context);
	}
	,addRenderer: function(renderer) {
		renderer.onRender.add($bind(this,this.render));
		renderer.onRenderContextLost.add($bind(this,this.onRenderContextLost));
		renderer.onRenderContextRestored.add($bind(this,this.onRenderContextRestored));
		this.renderers.push(renderer);
	}
	,addWindow: function(window) {
		this.windows.push(window);
		window.onGamepadAxisMove.add($bind(this,this.onGamepadAxisMove));
		window.onGamepadButtonDown.add($bind(this,this.onGamepadButtonDown));
		window.onGamepadButtonUp.add($bind(this,this.onGamepadButtonUp));
		window.onGamepadConnect.add($bind(this,this.onGamepadConnect));
		window.onGamepadDisconnect.add($bind(this,this.onGamepadDisconnect));
		window.onKeyDown.add($bind(this,this.onKeyDown));
		window.onKeyUp.add($bind(this,this.onKeyUp));
		window.onMouseDown.add($bind(this,this.onMouseDown));
		window.onMouseMove.add($bind(this,this.onMouseMove));
		window.onMouseMoveRelative.add($bind(this,this.onMouseMoveRelative));
		window.onMouseUp.add($bind(this,this.onMouseUp));
		window.onMouseWheel.add($bind(this,this.onMouseWheel));
		window.onTouchStart.add($bind(this,this.onTouchStart));
		window.onTouchMove.add($bind(this,this.onTouchMove));
		window.onTouchEnd.add($bind(this,this.onTouchEnd));
		window.onWindowActivate.add($bind(this,this.onWindowActivate));
		window.onWindowClose.add($bind(this,this.onWindowClose));
		window.onWindowDeactivate.add($bind(this,this.onWindowDeactivate));
		window.onWindowFocusIn.add($bind(this,this.onWindowFocusIn));
		window.onWindowFocusOut.add($bind(this,this.onWindowFocusOut));
		window.onWindowFullscreen.add($bind(this,this.onWindowFullscreen));
		window.onWindowMinimize.add($bind(this,this.onWindowMinimize));
		window.onWindowMove.add($bind(this,this.onWindowMove));
		window.onWindowResize.add($bind(this,this.onWindowResize));
		window.onWindowRestore.add($bind(this,this.onWindowRestore));
		window.create(this);
	}
	,create: function(config) {
		this.backend.create(config);
	}
	,exec: function() {
		lime.app.Application.current = this;
		return this.backend.exec();
	}
	,init: function(context) {
		var _g = 0;
		var _g1 = this.modules;
		while(_g < _g1.length) {
			var module = _g1[_g];
			++_g;
			module.init(context);
		}
		this.initialized = true;
	}
	,onGamepadAxisMove: function(gamepad,axis,value) {
		var _g = 0;
		var _g1 = this.modules;
		while(_g < _g1.length) {
			var module = _g1[_g];
			++_g;
			module.onGamepadAxisMove(gamepad,axis,value);
		}
	}
	,onGamepadButtonDown: function(gamepad,button) {
		var _g = 0;
		var _g1 = this.modules;
		while(_g < _g1.length) {
			var module = _g1[_g];
			++_g;
			module.onGamepadButtonDown(gamepad,button);
		}
	}
	,onGamepadButtonUp: function(gamepad,button) {
		var _g = 0;
		var _g1 = this.modules;
		while(_g < _g1.length) {
			var module = _g1[_g];
			++_g;
			module.onGamepadButtonUp(gamepad,button);
		}
	}
	,onGamepadConnect: function(gamepad) {
		var _g = 0;
		var _g1 = this.modules;
		while(_g < _g1.length) {
			var module = _g1[_g];
			++_g;
			module.onGamepadConnect(gamepad);
		}
	}
	,onGamepadDisconnect: function(gamepad) {
		var _g = 0;
		var _g1 = this.modules;
		while(_g < _g1.length) {
			var module = _g1[_g];
			++_g;
			module.onGamepadDisconnect(gamepad);
		}
	}
	,onKeyDown: function(keyCode,modifier) {
		var _g = 0;
		var _g1 = this.modules;
		while(_g < _g1.length) {
			var module = _g1[_g];
			++_g;
			module.onKeyDown(keyCode,modifier);
		}
	}
	,onKeyUp: function(keyCode,modifier) {
		var _g = 0;
		var _g1 = this.modules;
		while(_g < _g1.length) {
			var module = _g1[_g];
			++_g;
			module.onKeyUp(keyCode,modifier);
		}
	}
	,onMouseDown: function(x,y,button) {
		var _g = 0;
		var _g1 = this.modules;
		while(_g < _g1.length) {
			var module = _g1[_g];
			++_g;
			module.onMouseDown(x,y,button);
		}
	}
	,onMouseMove: function(x,y) {
		var _g = 0;
		var _g1 = this.modules;
		while(_g < _g1.length) {
			var module = _g1[_g];
			++_g;
			module.onMouseMove(x,y);
		}
	}
	,onMouseMoveRelative: function(x,y) {
		var _g = 0;
		var _g1 = this.modules;
		while(_g < _g1.length) {
			var module = _g1[_g];
			++_g;
			module.onMouseMoveRelative(x,y);
		}
	}
	,onMouseUp: function(x,y,button) {
		var _g = 0;
		var _g1 = this.modules;
		while(_g < _g1.length) {
			var module = _g1[_g];
			++_g;
			module.onMouseUp(x,y,button);
		}
	}
	,onMouseWheel: function(deltaX,deltaY) {
		var _g = 0;
		var _g1 = this.modules;
		while(_g < _g1.length) {
			var module = _g1[_g];
			++_g;
			module.onMouseWheel(deltaX,deltaY);
		}
	}
	,onRenderContextLost: function() {
		var _g = 0;
		var _g1 = this.modules;
		while(_g < _g1.length) {
			var module = _g1[_g];
			++_g;
			module.onRenderContextLost();
		}
	}
	,onRenderContextRestored: function(context) {
		var _g = 0;
		var _g1 = this.modules;
		while(_g < _g1.length) {
			var module = _g1[_g];
			++_g;
			module.onRenderContextRestored(context);
		}
	}
	,onTouchEnd: function(x,y,id) {
		var _g = 0;
		var _g1 = this.modules;
		while(_g < _g1.length) {
			var module = _g1[_g];
			++_g;
			module.onTouchEnd(x,y,id);
		}
	}
	,onTouchMove: function(x,y,id) {
		var _g = 0;
		var _g1 = this.modules;
		while(_g < _g1.length) {
			var module = _g1[_g];
			++_g;
			module.onTouchMove(x,y,id);
		}
	}
	,onTouchStart: function(x,y,id) {
		var _g = 0;
		var _g1 = this.modules;
		while(_g < _g1.length) {
			var module = _g1[_g];
			++_g;
			module.onTouchStart(x,y,id);
		}
	}
	,onWindowActivate: function() {
		var _g = 0;
		var _g1 = this.modules;
		while(_g < _g1.length) {
			var module = _g1[_g];
			++_g;
			module.onWindowActivate();
		}
	}
	,onWindowClose: function() {
		var _g = 0;
		var _g1 = this.modules;
		while(_g < _g1.length) {
			var module = _g1[_g];
			++_g;
			module.onWindowClose();
		}
	}
	,onWindowDeactivate: function() {
		var _g = 0;
		var _g1 = this.modules;
		while(_g < _g1.length) {
			var module = _g1[_g];
			++_g;
			module.onWindowDeactivate();
		}
	}
	,onWindowFocusIn: function() {
		var _g = 0;
		var _g1 = this.modules;
		while(_g < _g1.length) {
			var module = _g1[_g];
			++_g;
			module.onWindowFocusIn();
		}
	}
	,onWindowFocusOut: function() {
		var _g = 0;
		var _g1 = this.modules;
		while(_g < _g1.length) {
			var module = _g1[_g];
			++_g;
			module.onWindowFocusOut();
		}
	}
	,onWindowFullscreen: function() {
		var _g = 0;
		var _g1 = this.modules;
		while(_g < _g1.length) {
			var module = _g1[_g];
			++_g;
			module.onWindowFullscreen();
		}
	}
	,onWindowMinimize: function() {
		var _g = 0;
		var _g1 = this.modules;
		while(_g < _g1.length) {
			var module = _g1[_g];
			++_g;
			module.onWindowMinimize();
		}
	}
	,onWindowMove: function(x,y) {
		var _g = 0;
		var _g1 = this.modules;
		while(_g < _g1.length) {
			var module = _g1[_g];
			++_g;
			module.onWindowMove(x,y);
		}
	}
	,onWindowResize: function(width,height) {
		var _g = 0;
		var _g1 = this.modules;
		while(_g < _g1.length) {
			var module = _g1[_g];
			++_g;
			module.onWindowResize(width,height);
		}
	}
	,onWindowRestore: function() {
		var _g = 0;
		var _g1 = this.modules;
		while(_g < _g1.length) {
			var module = _g1[_g];
			++_g;
			module.onWindowRestore();
		}
	}
	,removeModule: function(module) {
		HxOverrides.remove(this.modules,module);
	}
	,removeRenderer: function(renderer) {
		if(renderer != null && HxOverrides.indexOf(this.renderers,renderer,0) > -1) HxOverrides.remove(this.renderers,renderer);
	}
	,removeWindow: function(window) {
		if(window != null && HxOverrides.indexOf(this.windows,window,0) > -1) {
			window.close();
			HxOverrides.remove(this.windows,window);
		}
	}
	,render: function(context) {
		var _g = 0;
		var _g1 = this.modules;
		while(_g < _g1.length) {
			var module = _g1[_g];
			++_g;
			module.render(context);
		}
	}
	,update: function(deltaTime) {
		var _g = 0;
		var _g1 = this.modules;
		while(_g < _g1.length) {
			var module = _g1[_g];
			++_g;
			module.update(deltaTime);
		}
	}
	,get_renderer: function() {
		return this.renderers[0];
	}
	,get_window: function() {
		return this.windows[0];
	}
	,__class__: lime.app.Application
	,__properties__: {get_window:"get_window",get_renderer:"get_renderer"}
});
lime.app.Event = function() {
	this.listeners = new Array();
	this.priorities = new Array();
	this.repeat = new Array();
};
$hxClasses["lime.app.Event"] = lime.app.Event;
lime.app.Event.__name__ = ["lime","app","Event"];
lime.app.Event.prototype = {
	listeners: null
	,repeat: null
	,priorities: null
	,add: function(listener,once,priority) {
		if(priority == null) priority = 0;
		if(once == null) once = false;
		var _g1 = 0;
		var _g = this.priorities.length;
		while(_g1 < _g) {
			var i = _g1++;
			if(priority > this.priorities[i]) {
				this.listeners.splice(i,0,listener);
				this.priorities.splice(i,0,priority);
				this.repeat.splice(i,0,!once);
				return;
			}
		}
		this.listeners.push(listener);
		this.priorities.push(priority);
		this.repeat.push(!once);
	}
	,remove: function(listener) {
		var index = HxOverrides.indexOf(this.listeners,listener,0);
		if(index > -1) {
			this.listeners.splice(index,1);
			this.priorities.splice(index,1);
			this.repeat.splice(index,1);
		}
	}
	,__class__: lime.app.Event
};
lime.app.Preloader = function() {
	this.total = 0;
	this.loaded = 0;
};
$hxClasses["lime.app.Preloader"] = lime.app.Preloader;
lime.app.Preloader.__name__ = ["lime","app","Preloader"];
lime.app.Preloader.prototype = {
	complete: null
	,onComplete: null
	,loaded: null
	,total: null
	,create: function(config) {
	}
	,load: function(urls,types) {
		var url = null;
		var _g1 = 0;
		var _g = urls.length;
		while(_g1 < _g) {
			var i = _g1++;
			url = urls[i];
			var _g2 = types[i];
			switch(_g2) {
			case "IMAGE":
				var image = new Image();
				lime.app.Preloader.images.set(url,image);
				image.onload = $bind(this,this.image_onLoad);
				image.src = url;
				this.total++;
				break;
			case "BINARY":
				var loader = new lime.net.URLLoader();
				loader.set_dataFormat(lime.net.URLLoaderDataFormat.BINARY);
				lime.app.Preloader.loaders.set(url,loader);
				this.total++;
				break;
			case "TEXT":
				var loader1 = new lime.net.URLLoader();
				lime.app.Preloader.loaders.set(url,loader1);
				this.total++;
				break;
			case "FONT":
				this.total++;
				this.loadFont(url);
				break;
			default:
			}
		}
		var $it0 = lime.app.Preloader.loaders.keys();
		while( $it0.hasNext() ) {
			var url1 = $it0.next();
			var loader2 = lime.app.Preloader.loaders.get(url1);
			loader2.onComplete.add($bind(this,this.loader_onComplete));
			loader2.load(new lime.net.URLRequest(url1));
		}
		if(this.total == 0) this.start();
	}
	,loadFont: function(font) {
		var _g = this;
		if(window.document.fonts && window.document.fonts.load) window.document.fonts.load("1em '" + font + "'").then(function(_) {
			_g.loaded++;
			_g.update(_g.loaded,_g.total);
			if(_g.loaded == _g.total) _g.start();
		}); else {
			var node = window.document.createElement("span");
			node.innerHTML = "giItT1WQy@!-/#";
			var style = node.style;
			style.position = "absolute";
			style.left = "-10000px";
			style.top = "-10000px";
			style.fontSize = "300px";
			style.fontFamily = "sans-serif";
			style.fontVariant = "normal";
			style.fontStyle = "normal";
			style.fontWeight = "normal";
			style.letterSpacing = "0";
			window.document.body.appendChild(node);
			var width = node.offsetWidth;
			style.fontFamily = "'" + font + "', sans-serif";
			var interval = null;
			var found = false;
			var checkFont = function() {
				if(node.offsetWidth != width) {
					if(!found) {
						found = true;
						return false;
					}
					_g.loaded++;
					if(interval != null) window.clearInterval(interval);
					node.parentNode.removeChild(node);
					node = null;
					_g.update(_g.loaded,_g.total);
					if(_g.loaded == _g.total) _g.start();
					return true;
				}
				return false;
			};
			if(!checkFont()) interval = window.setInterval(checkFont,50);
		}
	}
	,start: function() {
		if(this.onComplete != null) this.onComplete();
	}
	,update: function(loaded,total) {
	}
	,image_onLoad: function(_) {
		this.loaded++;
		this.update(this.loaded,this.total);
		if(this.loaded == this.total) this.start();
	}
	,loader_onComplete: function(loader) {
		this.loaded++;
		this.update(this.loaded,this.total);
		if(this.loaded == this.total) this.start();
	}
	,__class__: lime.app.Preloader
};
lime.audio = {};
lime.audio.ALAudioContext = function() {
	this.EXPONENT_DISTANCE_CLAMPED = 53254;
	this.EXPONENT_DISTANCE = 53253;
	this.LINEAR_DISTANCE_CLAMPED = 53252;
	this.LINEAR_DISTANCE = 53251;
	this.INVERSE_DISTANCE_CLAMPED = 53250;
	this.INVERSE_DISTANCE = 53249;
	this.DISTANCE_MODEL = 53248;
	this.DOPPLER_VELOCITY = 49153;
	this.SPEED_OF_SOUND = 49155;
	this.DOPPLER_FACTOR = 49152;
	this.EXTENSIONS = 45060;
	this.RENDERER = 45059;
	this.VERSION = 45058;
	this.VENDOR = 45057;
	this.OUT_OF_MEMORY = 40965;
	this.INVALID_OPERATION = 40964;
	this.INVALID_VALUE = 40963;
	this.INVALID_ENUM = 40962;
	this.INVALID_NAME = 40961;
	this.NO_ERROR = 0;
	this.SIZE = 8196;
	this.CHANNELS = 8195;
	this.BITS = 8194;
	this.FREQUENCY = 8193;
	this.FORMAT_STEREO16 = 4355;
	this.FORMAT_STEREO8 = 4354;
	this.FORMAT_MONO16 = 4353;
	this.FORMAT_MONO8 = 4352;
	this.UNDETERMINED = 4144;
	this.STREAMING = 4137;
	this.STATIC = 4136;
	this.SOURCE_TYPE = 4135;
	this.BYTE_OFFSET = 4134;
	this.SAMPLE_OFFSET = 4133;
	this.SEC_OFFSET = 4132;
	this.MAX_DISTANCE = 4131;
	this.CONE_OUTER_GAIN = 4130;
	this.ROLLOFF_FACTOR = 4129;
	this.REFERENCE_DISTANCE = 4128;
	this.BUFFERS_PROCESSED = 4118;
	this.BUFFERS_QUEUED = 4117;
	this.STOPPED = 4116;
	this.PAUSED = 4115;
	this.PLAYING = 4114;
	this.INITIAL = 4113;
	this.SOURCE_STATE = 4112;
	this.ORIENTATION = 4111;
	this.MAX_GAIN = 4110;
	this.MIN_GAIN = 4109;
	this.GAIN = 4106;
	this.BUFFER = 4105;
	this.LOOPING = 4103;
	this.VELOCITY = 4102;
	this.DIRECTION = 4101;
	this.POSITION = 4100;
	this.PITCH = 4099;
	this.CONE_OUTER_ANGLE = 4098;
	this.CONE_INNER_ANGLE = 4097;
	this.SOURCE_RELATIVE = 514;
	this.TRUE = 1;
	this.FALSE = 0;
	this.NONE = 0;
};
$hxClasses["lime.audio.ALAudioContext"] = lime.audio.ALAudioContext;
lime.audio.ALAudioContext.__name__ = ["lime","audio","ALAudioContext"];
lime.audio.ALAudioContext.prototype = {
	NONE: null
	,FALSE: null
	,TRUE: null
	,SOURCE_RELATIVE: null
	,CONE_INNER_ANGLE: null
	,CONE_OUTER_ANGLE: null
	,PITCH: null
	,POSITION: null
	,DIRECTION: null
	,VELOCITY: null
	,LOOPING: null
	,BUFFER: null
	,GAIN: null
	,MIN_GAIN: null
	,MAX_GAIN: null
	,ORIENTATION: null
	,SOURCE_STATE: null
	,INITIAL: null
	,PLAYING: null
	,PAUSED: null
	,STOPPED: null
	,BUFFERS_QUEUED: null
	,BUFFERS_PROCESSED: null
	,REFERENCE_DISTANCE: null
	,ROLLOFF_FACTOR: null
	,CONE_OUTER_GAIN: null
	,MAX_DISTANCE: null
	,SEC_OFFSET: null
	,SAMPLE_OFFSET: null
	,BYTE_OFFSET: null
	,SOURCE_TYPE: null
	,STATIC: null
	,STREAMING: null
	,UNDETERMINED: null
	,FORMAT_MONO8: null
	,FORMAT_MONO16: null
	,FORMAT_STEREO8: null
	,FORMAT_STEREO16: null
	,FREQUENCY: null
	,BITS: null
	,CHANNELS: null
	,SIZE: null
	,NO_ERROR: null
	,INVALID_NAME: null
	,INVALID_ENUM: null
	,INVALID_VALUE: null
	,INVALID_OPERATION: null
	,OUT_OF_MEMORY: null
	,VENDOR: null
	,VERSION: null
	,RENDERER: null
	,EXTENSIONS: null
	,DOPPLER_FACTOR: null
	,SPEED_OF_SOUND: null
	,DOPPLER_VELOCITY: null
	,DISTANCE_MODEL: null
	,INVERSE_DISTANCE: null
	,INVERSE_DISTANCE_CLAMPED: null
	,LINEAR_DISTANCE: null
	,LINEAR_DISTANCE_CLAMPED: null
	,EXPONENT_DISTANCE: null
	,EXPONENT_DISTANCE_CLAMPED: null
	,bufferData: function(buffer,format,data,size,freq) {
		lime.audio.openal.AL.bufferData(buffer,format,data,size,freq);
	}
	,buffer3f: function(buffer,param,value1,value2,value3) {
		lime.audio.openal.AL.buffer3f(buffer,param,value1,value2,value3);
	}
	,buffer3i: function(buffer,param,value1,value2,value3) {
		lime.audio.openal.AL.buffer3i(buffer,param,value1,value2,value3);
	}
	,bufferf: function(buffer,param,value) {
		lime.audio.openal.AL.bufferf(buffer,param,value);
	}
	,bufferfv: function(buffer,param,values) {
		lime.audio.openal.AL.bufferfv(buffer,param,values);
	}
	,bufferi: function(buffer,param,value) {
		lime.audio.openal.AL.bufferi(buffer,param,value);
	}
	,bufferiv: function(buffer,param,values) {
		lime.audio.openal.AL.bufferiv(buffer,param,values);
	}
	,deleteBuffer: function(buffer) {
		lime.audio.openal.AL.deleteBuffer(buffer);
	}
	,deleteBuffers: function(buffers) {
		lime.audio.openal.AL.deleteBuffers(buffers);
	}
	,deleteSource: function(source) {
		lime.audio.openal.AL.deleteSource(source);
	}
	,deleteSources: function(sources) {
		lime.audio.openal.AL.deleteSources(sources);
	}
	,disable: function(capability) {
		lime.audio.openal.AL.disable(capability);
	}
	,distanceModel: function(distanceModel) {
		lime.audio.openal.AL.distanceModel(distanceModel);
	}
	,dopplerFactor: function(value) {
		lime.audio.openal.AL.dopplerFactor(value);
	}
	,dopplerVelocity: function(value) {
		lime.audio.openal.AL.dopplerVelocity(value);
	}
	,enable: function(capability) {
		lime.audio.openal.AL.enable(capability);
	}
	,genSource: function() {
		return lime.audio.openal.AL.genSource();
	}
	,genSources: function(n) {
		return lime.audio.openal.AL.genSources(n);
	}
	,genBuffer: function() {
		return lime.audio.openal.AL.genBuffer();
	}
	,genBuffers: function(n) {
		return lime.audio.openal.AL.genBuffers(n);
	}
	,getBoolean: function(param) {
		return lime.audio.openal.AL.getBoolean(param);
	}
	,getBooleanv: function(param,count) {
		if(count == null) count = 1;
		return lime.audio.openal.AL.getBooleanv(param,count);
	}
	,getBuffer3f: function(buffer,param) {
		return lime.audio.openal.AL.getBuffer3f(buffer,param);
	}
	,getBuffer3i: function(buffer,param) {
		return lime.audio.openal.AL.getBuffer3i(buffer,param);
	}
	,getBufferf: function(buffer,param) {
		return lime.audio.openal.AL.getBufferf(buffer,param);
	}
	,getBufferfv: function(buffer,param,count) {
		if(count == null) count = 1;
		return lime.audio.openal.AL.getBufferfv(buffer,param,count);
	}
	,getBufferi: function(buffer,param) {
		return lime.audio.openal.AL.getBufferi(buffer,param);
	}
	,getBufferiv: function(buffer,param,count) {
		if(count == null) count = 1;
		return lime.audio.openal.AL.getBufferiv(buffer,param,count);
	}
	,getDouble: function(param) {
		return lime.audio.openal.AL.getDouble(param);
	}
	,getDoublev: function(param,count) {
		if(count == null) count = 1;
		return lime.audio.openal.AL.getDoublev(param,count);
	}
	,getEnumValue: function(ename) {
		return lime.audio.openal.AL.getEnumValue(ename);
	}
	,getError: function() {
		return lime.audio.openal.AL.getError();
	}
	,getErrorString: function() {
		return lime.audio.openal.AL.getErrorString();
	}
	,getFloat: function(param) {
		return lime.audio.openal.AL.getFloat(param);
	}
	,getFloatv: function(param,count) {
		if(count == null) count = 1;
		return lime.audio.openal.AL.getFloatv(param,count);
	}
	,getInteger: function(param) {
		return lime.audio.openal.AL.getInteger(param);
	}
	,getIntegerv: function(param,count) {
		if(count == null) count = 1;
		return lime.audio.openal.AL.getIntegerv(param,count);
	}
	,getListener3f: function(param) {
		return lime.audio.openal.AL.getListener3f(param);
	}
	,getListener3i: function(param) {
		return lime.audio.openal.AL.getListener3i(param);
	}
	,getListenerf: function(param) {
		return lime.audio.openal.AL.getListenerf(param);
	}
	,getListenerfv: function(param,count) {
		if(count == null) count = 1;
		return lime.audio.openal.AL.getListenerfv(param,count);
	}
	,getListeneri: function(param) {
		return lime.audio.openal.AL.getListeneri(param);
	}
	,getListeneriv: function(param,count) {
		if(count == null) count = 1;
		return lime.audio.openal.AL.getListeneriv(param,count);
	}
	,getProcAddress: function(fname) {
		return lime.audio.openal.AL.getProcAddress(fname);
	}
	,getSource3f: function(source,param) {
		return lime.audio.openal.AL.getSource3f(source,param);
	}
	,getSourcef: function(source,param) {
		return lime.audio.openal.AL.getSourcef(source,param);
	}
	,getSource3i: function(source,param) {
		return lime.audio.openal.AL.getSource3i(source,param);
	}
	,getSourcefv: function(source,param) {
		return lime.audio.openal.AL.getSourcefv(source,param);
	}
	,getSourcei: function(source,param) {
		return lime.audio.openal.AL.getSourcei(source,param);
	}
	,getSourceiv: function(source,param,count) {
		if(count == null) count = 1;
		return lime.audio.openal.AL.getSourceiv(source,param,count);
	}
	,getString: function(param) {
		return lime.audio.openal.AL.getString(param);
	}
	,isBuffer: function(buffer) {
		return lime.audio.openal.AL.isBuffer(buffer);
	}
	,isEnabled: function(capability) {
		return lime.audio.openal.AL.isEnabled(capability);
	}
	,isExtensionPresent: function(extname) {
		return lime.audio.openal.AL.isExtensionPresent(extname);
	}
	,isSource: function(source) {
		return lime.audio.openal.AL.isSource(source);
	}
	,listener3f: function(param,value1,value2,value3) {
		lime.audio.openal.AL.listener3f(param,value1,value2,value3);
	}
	,listener3i: function(param,value1,value2,value3) {
		lime.audio.openal.AL.listener3i(param,value1,value2,value3);
	}
	,listenerf: function(param,value) {
		lime.audio.openal.AL.listenerf(param,value);
	}
	,listenerfv: function(param,values) {
		lime.audio.openal.AL.listenerfv(param,values);
	}
	,listeneri: function(param,value) {
		lime.audio.openal.AL.listeneri(param,value);
	}
	,listeneriv: function(param,values) {
		lime.audio.openal.AL.listeneriv(param,values);
	}
	,source3f: function(source,param,value1,value2,value3) {
		lime.audio.openal.AL.source3f(source,param,value1,value2,value3);
	}
	,source3i: function(source,param,value1,value2,value3) {
		lime.audio.openal.AL.source3i(source,param,value1,value2,value3);
	}
	,sourcef: function(source,param,value) {
		lime.audio.openal.AL.sourcef(source,param,value);
	}
	,sourcefv: function(source,param,values) {
		lime.audio.openal.AL.sourcefv(source,param,values);
	}
	,sourcei: function(source,param,value) {
		lime.audio.openal.AL.sourcei(source,param,value);
	}
	,sourceiv: function(source,param,values) {
		lime.audio.openal.AL.sourceiv(source,param,values);
	}
	,sourcePlay: function(source) {
		lime.audio.openal.AL.sourcePlay(source);
	}
	,sourcePlayv: function(sources) {
		lime.audio.openal.AL.sourcePlayv(sources);
	}
	,sourceStop: function(source) {
		lime.audio.openal.AL.sourceStop(source);
	}
	,sourceStopv: function(sources) {
		lime.audio.openal.AL.sourceStopv(sources);
	}
	,sourceRewind: function(source) {
		lime.audio.openal.AL.sourceRewind(source);
	}
	,sourceRewindv: function(sources) {
		lime.audio.openal.AL.sourceRewindv(sources);
	}
	,sourcePause: function(source) {
		lime.audio.openal.AL.sourcePause(source);
	}
	,sourcePausev: function(sources) {
		lime.audio.openal.AL.sourcePausev(sources);
	}
	,sourceQueueBuffer: function(source,buffer) {
		lime.audio.openal.AL.sourceQueueBuffer(source,buffer);
	}
	,sourceQueueBuffers: function(source,nb,buffers) {
		lime.audio.openal.AL.sourceQueueBuffers(source,nb,buffers);
	}
	,sourceUnqueueBuffer: function(source) {
		return lime.audio.openal.AL.sourceUnqueueBuffer(source);
	}
	,sourceUnqueueBuffers: function(source,nb) {
		return lime.audio.openal.AL.sourceUnqueueBuffers(source,nb);
	}
	,speedOfSound: function(value) {
		lime.audio.openal.AL.speedOfSound(value);
	}
	,__class__: lime.audio.ALAudioContext
};
lime.audio.ALCAudioContext = function() {
	this.ALL_DEVICES_SPECIFIER = 4115;
	this.DEFAULT_ALL_DEVICES_SPECIFIER = 4114;
	this.ENUMERATE_ALL_EXT = 1;
	this.EXTENSIONS = 4102;
	this.DEVICE_SPECIFIER = 4101;
	this.DEFAULT_DEVICE_SPECIFIER = 4100;
	this.ALL_ATTRIBUTES = 4099;
	this.ATTRIBUTES_SIZE = 4098;
	this.OUT_OF_MEMORY = 40965;
	this.INVALID_VALUE = 40964;
	this.INVALID_ENUM = 40963;
	this.INVALID_CONTEXT = 40962;
	this.INVALID_DEVICE = 40961;
	this.NO_ERROR = 0;
	this.STEREO_SOURCES = 4113;
	this.MONO_SOURCES = 4112;
	this.SYNC = 4105;
	this.REFRESH = 4104;
	this.FREQUENCY = 4103;
	this.TRUE = 1;
	this.FALSE = 0;
};
$hxClasses["lime.audio.ALCAudioContext"] = lime.audio.ALCAudioContext;
lime.audio.ALCAudioContext.__name__ = ["lime","audio","ALCAudioContext"];
lime.audio.ALCAudioContext.prototype = {
	FALSE: null
	,TRUE: null
	,FREQUENCY: null
	,REFRESH: null
	,SYNC: null
	,MONO_SOURCES: null
	,STEREO_SOURCES: null
	,NO_ERROR: null
	,INVALID_DEVICE: null
	,INVALID_CONTEXT: null
	,INVALID_ENUM: null
	,INVALID_VALUE: null
	,OUT_OF_MEMORY: null
	,ATTRIBUTES_SIZE: null
	,ALL_ATTRIBUTES: null
	,DEFAULT_DEVICE_SPECIFIER: null
	,DEVICE_SPECIFIER: null
	,EXTENSIONS: null
	,ENUMERATE_ALL_EXT: null
	,DEFAULT_ALL_DEVICES_SPECIFIER: null
	,ALL_DEVICES_SPECIFIER: null
	,closeDevice: function(device) {
		return lime.audio.openal.ALC.closeDevice(device);
	}
	,createContext: function(device,attrlist) {
		return lime.audio.openal.ALC.createContext(device,attrlist);
	}
	,destroyContext: function(context) {
		lime.audio.openal.ALC.destroyContext(context);
	}
	,getContextsDevice: function(context) {
		return lime.audio.openal.ALC.getContextsDevice(context);
	}
	,getCurrentContext: function() {
		return lime.audio.openal.ALC.getCurrentContext();
	}
	,getError: function(device) {
		return lime.audio.openal.ALC.getError(device);
	}
	,getErrorString: function(device) {
		return lime.audio.openal.ALC.getErrorString(device);
	}
	,getIntegerv: function(device,param,count) {
		if(count == null) count = 1;
		return lime.audio.openal.ALC.getIntegerv(device,param,count);
	}
	,getString: function(device,param) {
		return lime.audio.openal.ALC.getString(device,param);
	}
	,makeContextCurrent: function(context) {
		return lime.audio.openal.ALC.makeContextCurrent(context);
	}
	,openDevice: function(deviceName) {
		return lime.audio.openal.ALC.openDevice(deviceName);
	}
	,processContext: function(context) {
		lime.audio.openal.ALC.processContext(context);
	}
	,suspendContext: function(context) {
		lime.audio.openal.ALC.suspendContext(context);
	}
	,__class__: lime.audio.ALCAudioContext
};
lime.audio.AudioBuffer = function() {
	this.id = 0;
};
$hxClasses["lime.audio.AudioBuffer"] = lime.audio.AudioBuffer;
lime.audio.AudioBuffer.__name__ = ["lime","audio","AudioBuffer"];
lime.audio.AudioBuffer.fromBytes = function(bytes) {
	return null;
};
lime.audio.AudioBuffer.fromFile = function(path) {
	return null;
};
lime.audio.AudioBuffer.fromURL = function(url,handler) {
};
lime.audio.AudioBuffer.prototype = {
	bitsPerSample: null
	,channels: null
	,data: null
	,id: null
	,sampleRate: null
	,src: null
	,dispose: function() {
	}
	,__class__: lime.audio.AudioBuffer
};
lime.audio.AudioContext = $hxClasses["lime.audio.AudioContext"] = { __ename__ : ["lime","audio","AudioContext"], __constructs__ : ["OPENAL","HTML5","WEB","FLASH","CUSTOM"] };
lime.audio.AudioContext.OPENAL = function(alc,al) { var $x = ["OPENAL",0,alc,al]; $x.__enum__ = lime.audio.AudioContext; $x.toString = $estr; return $x; };
lime.audio.AudioContext.HTML5 = function(context) { var $x = ["HTML5",1,context]; $x.__enum__ = lime.audio.AudioContext; $x.toString = $estr; return $x; };
lime.audio.AudioContext.WEB = function(context) { var $x = ["WEB",2,context]; $x.__enum__ = lime.audio.AudioContext; $x.toString = $estr; return $x; };
lime.audio.AudioContext.FLASH = function(context) { var $x = ["FLASH",3,context]; $x.__enum__ = lime.audio.AudioContext; $x.toString = $estr; return $x; };
lime.audio.AudioContext.CUSTOM = function(data) { var $x = ["CUSTOM",4,data]; $x.__enum__ = lime.audio.AudioContext; $x.toString = $estr; return $x; };
lime.audio.AudioContext.__empty_constructs__ = [];
lime.audio.AudioManager = function() { };
$hxClasses["lime.audio.AudioManager"] = lime.audio.AudioManager;
lime.audio.AudioManager.__name__ = ["lime","audio","AudioManager"];
lime.audio.AudioManager.context = null;
lime.audio.AudioManager.init = function(context) {
	if(lime.audio.AudioManager.context == null) {
		if(context == null) try {
			window.AudioContext = window.AudioContext || window.webkitAudioContext;;
			lime.audio.AudioManager.context = lime.audio.AudioContext.WEB(new AudioContext ());
		} catch( e ) {
			lime.audio.AudioManager.context = lime.audio.AudioContext.HTML5(new lime.audio.HTML5AudioContext());
		} else lime.audio.AudioManager.context = context;
	}
};
lime.audio.AudioManager.resume = function() {
	if(lime.audio.AudioManager.context != null) {
		var _g = lime.audio.AudioManager.context;
		switch(_g[1]) {
		case 0:
			var al = _g[3];
			var alc = _g[2];
			alc.processContext(alc.getCurrentContext());
			break;
		default:
		}
	}
};
lime.audio.AudioManager.shutdown = function() {
	if(lime.audio.AudioManager.context != null) {
		var _g = lime.audio.AudioManager.context;
		switch(_g[1]) {
		case 0:
			var al = _g[3];
			var alc = _g[2];
			var currentContext = alc.getCurrentContext();
			if(currentContext != null) {
				var device = alc.getContextsDevice(currentContext);
				alc.makeContextCurrent(null);
				alc.destroyContext(currentContext);
				alc.closeDevice(device);
			}
			break;
		default:
		}
	}
};
lime.audio.AudioManager.suspend = function() {
	if(lime.audio.AudioManager.context != null) {
		var _g = lime.audio.AudioManager.context;
		switch(_g[1]) {
		case 0:
			var al = _g[3];
			var alc = _g[2];
			alc.suspendContext(alc.getCurrentContext());
			break;
		default:
		}
	}
};
lime.audio.AudioSource = function(buffer) {
	this.onComplete = new lime.app.Event();
	this.buffer = buffer;
	this.id = 0;
	this.pauseTime = 0;
	if(buffer != null) this.init();
};
$hxClasses["lime.audio.AudioSource"] = lime.audio.AudioSource;
lime.audio.AudioSource.__name__ = ["lime","audio","AudioSource"];
lime.audio.AudioSource.prototype = {
	onComplete: null
	,buffer: null
	,id: null
	,pauseTime: null
	,init: function() {
		{
			var _g = lime.audio.AudioManager.context;
			switch(_g[1]) {
			case 0:
				var al = _g[3];
				var alc = _g[2];
				if((function($this) {
					var $r;
					var $int = $this.buffer.id;
					$r = $int < 0?4294967296.0 + $int:$int + 0.0;
					return $r;
				}(this)) == 0) {
					this.buffer.id = al.genBuffer();
					var format = 0;
					if(this.buffer.channels == 1) {
						if(this.buffer.bitsPerSample == 8) format = al.FORMAT_MONO8; else if(this.buffer.bitsPerSample == 16) format = al.FORMAT_MONO16;
					} else if(this.buffer.channels == 2) {
						if(this.buffer.bitsPerSample == 8) format = al.FORMAT_STEREO8; else if(this.buffer.bitsPerSample == 16) format = al.FORMAT_STEREO16;
					}
					al.bufferData(this.buffer.id,format,this.buffer.data,this.buffer.data.length,this.buffer.sampleRate);
				}
				this.id = al.genSource();
				al.sourcei(this.id,al.BUFFER,this.buffer.id);
				break;
			default:
			}
		}
	}
	,play: function() {
	}
	,pause: function() {
	}
	,stop: function() {
	}
	,get_gain: function() {
		return 1;
	}
	,set_gain: function(value) {
		return 1;
	}
	,get_timeOffset: function() {
		return 0;
	}
	,set_timeOffset: function(value) {
		return 0;
	}
	,__class__: lime.audio.AudioSource
	,__properties__: {set_timeOffset:"set_timeOffset",get_timeOffset:"get_timeOffset",set_gain:"set_gain",get_gain:"get_gain"}
};
lime.audio.FlashAudioContext = function() {
};
$hxClasses["lime.audio.FlashAudioContext"] = lime.audio.FlashAudioContext;
lime.audio.FlashAudioContext.__name__ = ["lime","audio","FlashAudioContext"];
lime.audio.FlashAudioContext.prototype = {
	createBuffer: function(stream,context) {
		return null;
	}
	,getBytesLoaded: function(buffer) {
		return 0;
	}
	,getBytesTotal: function(buffer) {
		return 0;
	}
	,getID3: function(buffer) {
		return null;
	}
	,getIsBuffering: function(buffer) {
		return false;
	}
	,getIsURLInaccessible: function(buffer) {
		return false;
	}
	,getLength: function(buffer) {
		return 0;
	}
	,getURL: function(buffer) {
		return null;
	}
	,close: function(buffer) {
	}
	,extract: function(buffer,target,length,startPosition) {
		if(startPosition == null) startPosition = -1;
		return 0;
	}
	,load: function(buffer,stream,context) {
	}
	,loadCompressedDataFromByteArray: function(buffer,bytes,bytesLength) {
	}
	,loadPCMFromByteArray: function(buffer,bytes,samples,format,stereo,sampleRate) {
		if(sampleRate == null) sampleRate = 44100;
		if(stereo == null) stereo = true;
	}
	,play: function(buffer,startTime,loops,sndTransform) {
		if(loops == null) loops = 0;
		if(startTime == null) startTime = 0;
		return null;
	}
	,__class__: lime.audio.FlashAudioContext
};
lime.audio.HTML5AudioContext = function() {
	this.NETWORK_NO_SOURCE = 3;
	this.NETWORK_LOADING = 2;
	this.NETWORK_IDLE = 1;
	this.NETWORK_EMPTY = 0;
	this.HAVE_NOTHING = 0;
	this.HAVE_METADATA = 1;
	this.HAVE_FUTURE_DATA = 3;
	this.HAVE_ENOUGH_DATA = 4;
	this.HAVE_CURRENT_DATA = 2;
};
$hxClasses["lime.audio.HTML5AudioContext"] = lime.audio.HTML5AudioContext;
lime.audio.HTML5AudioContext.__name__ = ["lime","audio","HTML5AudioContext"];
lime.audio.HTML5AudioContext.prototype = {
	HAVE_CURRENT_DATA: null
	,HAVE_ENOUGH_DATA: null
	,HAVE_FUTURE_DATA: null
	,HAVE_METADATA: null
	,HAVE_NOTHING: null
	,NETWORK_EMPTY: null
	,NETWORK_IDLE: null
	,NETWORK_LOADING: null
	,NETWORK_NO_SOURCE: null
	,canPlayType: function(buffer,type) {
		if(buffer.src != null) return buffer.src.canPlayType(type);
		return null;
	}
	,createBuffer: function(urlString) {
		var buffer = new lime.audio.AudioBuffer();
		buffer.src = new Audio();
		buffer.src.src = urlString;
		return buffer;
	}
	,getAudioDecodedByteCount: function(buffer) {
		if(buffer.src != null) return buffer.src.audioDecodedByteCount;
		return 0;
	}
	,getAutoplay: function(buffer) {
		if(buffer.src != null) return buffer.src.autoplay;
		return false;
	}
	,getBuffered: function(buffer) {
		if(buffer.src != null) return buffer.src.buffered;
		return null;
	}
	,getController: function(buffer) {
		if(buffer.src != null) return buffer.src.controller;
		return null;
	}
	,getCurrentSrc: function(buffer) {
		if(buffer.src != null) return buffer.src.currentSrc;
		return null;
	}
	,getCurrentTime: function(buffer) {
		if(buffer.src != null) return buffer.src.currentTime;
		return 0;
	}
	,getDefaultPlaybackRate: function(buffer) {
		if(buffer.src != null) return buffer.src.defaultPlaybackRate;
		return 1;
	}
	,getDuration: function(buffer) {
		if(buffer.src != null) return buffer.src.duration;
		return 0;
	}
	,getEnded: function(buffer) {
		if(buffer.src != null) return buffer.src.ended;
		return false;
	}
	,getError: function(buffer) {
		if(buffer.src != null) return buffer.src.error;
		return null;
	}
	,getInitialTime: function(buffer) {
		if(buffer.src != null) return buffer.src.initialTime;
		return 0;
	}
	,getLoop: function(buffer) {
		if(buffer.src != null) return buffer.src.loop;
		return false;
	}
	,getMediaGroup: function(buffer) {
		if(buffer.src != null) return buffer.src.mediaGroup;
		return null;
	}
	,getMuted: function(buffer) {
		if(buffer.src != null) return buffer.src.muted;
		return false;
	}
	,getNetworkState: function(buffer) {
		if(buffer.src != null) return buffer.src.networkState;
		return 0;
	}
	,getPaused: function(buffer) {
		if(buffer.src != null) return buffer.src.paused;
		return false;
	}
	,getPlaybackRate: function(buffer) {
		if(buffer.src != null) return buffer.src.playbackRate;
		return 1;
	}
	,getPlayed: function(buffer) {
		if(buffer.src != null) return buffer.src.played;
		return null;
	}
	,getPreload: function(buffer) {
		if(buffer.src != null) return buffer.src.preload;
		return null;
	}
	,getReadyState: function(buffer) {
		if(buffer.src != null) return buffer.src.readyState;
		return 0;
	}
	,getSeekable: function(buffer) {
		if(buffer.src != null) return buffer.src.seekable;
		return null;
	}
	,getSeeking: function(buffer) {
		if(buffer.src != null) return buffer.src.seeking;
		return false;
	}
	,getSrc: function(buffer) {
		if(buffer.src != null) return buffer.src.src;
		return null;
	}
	,getStartTime: function(buffer) {
		if(buffer.src != null) return buffer.src.playbackRate;
		return 0;
	}
	,getVolume: function(buffer) {
		if(buffer.src != null) return buffer.src.volume;
		return 1;
	}
	,load: function(buffer) {
		if(buffer.src != null) return buffer.src.load();
	}
	,pause: function(buffer) {
		if(buffer.src != null) return buffer.src.pause();
	}
	,play: function(buffer) {
		if(buffer.src != null) return buffer.src.play();
	}
	,setAutoplay: function(buffer,value) {
		if(buffer.src != null) buffer.src.autoplay = value;
	}
	,setController: function(buffer,value) {
		if(buffer.src != null) buffer.src.controller = value;
	}
	,setCurrentTime: function(buffer,value) {
		if(buffer.src != null) buffer.src.currentTime = value;
	}
	,setDefaultPlaybackRate: function(buffer,value) {
		if(buffer.src != null) buffer.src.defaultPlaybackRate = value;
	}
	,setLoop: function(buffer,value) {
		if(buffer.src != null) buffer.src.loop = value;
	}
	,setMediaGroup: function(buffer,value) {
		if(buffer.src != null) buffer.src.mediaGroup = value;
	}
	,setMuted: function(buffer,value) {
		if(buffer.src != null) buffer.src.muted = value;
	}
	,setPlaybackRate: function(buffer,value) {
		if(buffer.src != null) buffer.src.playbackRate = value;
	}
	,setPreload: function(buffer,value) {
		if(buffer.src != null) buffer.src.preload = value;
	}
	,setSrc: function(buffer,value) {
		if(buffer.src != null) buffer.src.src = value;
	}
	,setVolume: function(buffer,value) {
		if(buffer.src != null) buffer.src.volume = value;
	}
	,__class__: lime.audio.HTML5AudioContext
};
lime.audio.openal = {};
lime.audio.openal.AL = function() { };
$hxClasses["lime.audio.openal.AL"] = lime.audio.openal.AL;
lime.audio.openal.AL.__name__ = ["lime","audio","openal","AL"];
lime.audio.openal.AL.bufferData = function(buffer,format,data,size,freq) {
};
lime.audio.openal.AL.buffer3f = function(buffer,param,value1,value2,value3) {
};
lime.audio.openal.AL.buffer3i = function(buffer,param,value1,value2,value3) {
};
lime.audio.openal.AL.bufferf = function(buffer,param,value) {
};
lime.audio.openal.AL.bufferfv = function(buffer,param,values) {
};
lime.audio.openal.AL.bufferi = function(buffer,param,value) {
};
lime.audio.openal.AL.bufferiv = function(buffer,param,values) {
};
lime.audio.openal.AL.deleteBuffer = function(buffer) {
};
lime.audio.openal.AL.deleteBuffers = function(buffers) {
};
lime.audio.openal.AL.deleteSource = function(source) {
};
lime.audio.openal.AL.deleteSources = function(sources) {
};
lime.audio.openal.AL.disable = function(capability) {
};
lime.audio.openal.AL.distanceModel = function(distanceModel) {
};
lime.audio.openal.AL.dopplerFactor = function(value) {
};
lime.audio.openal.AL.dopplerVelocity = function(value) {
};
lime.audio.openal.AL.enable = function(capability) {
};
lime.audio.openal.AL.genSource = function() {
	return 0;
};
lime.audio.openal.AL.genSources = function(n) {
	return null;
};
lime.audio.openal.AL.genBuffer = function() {
	return 0;
};
lime.audio.openal.AL.genBuffers = function(n) {
	return null;
};
lime.audio.openal.AL.getBoolean = function(param) {
	return false;
};
lime.audio.openal.AL.getBooleanv = function(param,count) {
	if(count == null) count = 1;
	return null;
};
lime.audio.openal.AL.getBuffer3f = function(buffer,param) {
	return null;
};
lime.audio.openal.AL.getBuffer3i = function(buffer,param) {
	return null;
};
lime.audio.openal.AL.getBufferf = function(buffer,param) {
	return 0;
};
lime.audio.openal.AL.getBufferfv = function(buffer,param,count) {
	if(count == null) count = 1;
	return null;
};
lime.audio.openal.AL.getBufferi = function(buffer,param) {
	return 0;
};
lime.audio.openal.AL.getBufferiv = function(buffer,param,count) {
	if(count == null) count = 1;
	return null;
};
lime.audio.openal.AL.getDouble = function(param) {
	return 0;
};
lime.audio.openal.AL.getDoublev = function(param,count) {
	if(count == null) count = 1;
	return null;
};
lime.audio.openal.AL.getEnumValue = function(ename) {
	return 0;
};
lime.audio.openal.AL.getError = function() {
	return 0;
};
lime.audio.openal.AL.getErrorString = function() {
	var _g = lime.audio.openal.AL.getError();
	switch(_g) {
	case 40961:
		return "INVALID_NAME: Invalid parameter name";
	case 40962:
		return "INVALID_ENUM: Invalid enum value";
	case 40963:
		return "INVALID_VALUE: Invalid parameter value";
	case 40964:
		return "INVALID_OPERATION: Illegal operation or call";
	case 40965:
		return "OUT_OF_MEMORY: OpenAL has run out of memory";
	default:
		return "";
	}
};
lime.audio.openal.AL.getFloat = function(param) {
	return 0;
};
lime.audio.openal.AL.getFloatv = function(param,count) {
	if(count == null) count = 1;
	return null;
};
lime.audio.openal.AL.getInteger = function(param) {
	return 0;
};
lime.audio.openal.AL.getIntegerv = function(param,count) {
	if(count == null) count = 1;
	return null;
};
lime.audio.openal.AL.getListener3f = function(param) {
	return null;
};
lime.audio.openal.AL.getListener3i = function(param) {
	return null;
};
lime.audio.openal.AL.getListenerf = function(param) {
	return 0;
};
lime.audio.openal.AL.getListenerfv = function(param,count) {
	if(count == null) count = 1;
	return null;
};
lime.audio.openal.AL.getListeneri = function(param) {
	return 0;
};
lime.audio.openal.AL.getListeneriv = function(param,count) {
	if(count == null) count = 1;
	return null;
};
lime.audio.openal.AL.getProcAddress = function(fname) {
	return null;
};
lime.audio.openal.AL.getSource3f = function(source,param) {
	return null;
};
lime.audio.openal.AL.getSourcef = function(source,param) {
	return 0;
};
lime.audio.openal.AL.getSource3i = function(source,param) {
	return null;
};
lime.audio.openal.AL.getSourcefv = function(source,param) {
	return null;
};
lime.audio.openal.AL.getSourcei = function(source,param) {
	return 0;
};
lime.audio.openal.AL.getSourceiv = function(source,param,count) {
	if(count == null) count = 1;
	return null;
};
lime.audio.openal.AL.getString = function(param) {
	return null;
};
lime.audio.openal.AL.isBuffer = function(buffer) {
	return false;
};
lime.audio.openal.AL.isEnabled = function(capability) {
	return false;
};
lime.audio.openal.AL.isExtensionPresent = function(extname) {
	return false;
};
lime.audio.openal.AL.isSource = function(source) {
	return false;
};
lime.audio.openal.AL.listener3f = function(param,value1,value2,value3) {
};
lime.audio.openal.AL.listener3i = function(param,value1,value2,value3) {
};
lime.audio.openal.AL.listenerf = function(param,value) {
};
lime.audio.openal.AL.listenerfv = function(param,values) {
};
lime.audio.openal.AL.listeneri = function(param,value) {
};
lime.audio.openal.AL.listeneriv = function(param,values) {
};
lime.audio.openal.AL.source3f = function(source,param,value1,value2,value3) {
};
lime.audio.openal.AL.source3i = function(source,param,value1,value2,value3) {
};
lime.audio.openal.AL.sourcef = function(source,param,value) {
};
lime.audio.openal.AL.sourcefv = function(source,param,values) {
};
lime.audio.openal.AL.sourcei = function(source,param,value) {
};
lime.audio.openal.AL.sourceiv = function(source,param,values) {
};
lime.audio.openal.AL.sourcePlay = function(source) {
};
lime.audio.openal.AL.sourcePlayv = function(sources) {
};
lime.audio.openal.AL.sourceStop = function(source) {
};
lime.audio.openal.AL.sourceStopv = function(sources) {
};
lime.audio.openal.AL.sourceRewind = function(source) {
};
lime.audio.openal.AL.sourceRewindv = function(sources) {
};
lime.audio.openal.AL.sourcePause = function(source) {
};
lime.audio.openal.AL.sourcePausev = function(sources) {
};
lime.audio.openal.AL.sourceQueueBuffer = function(source,buffer) {
};
lime.audio.openal.AL.sourceQueueBuffers = function(source,nb,buffers) {
};
lime.audio.openal.AL.sourceUnqueueBuffer = function(source) {
	return 0;
};
lime.audio.openal.AL.sourceUnqueueBuffers = function(source,nb) {
	return null;
};
lime.audio.openal.AL.speedOfSound = function(value) {
};
lime.audio.openal.ALC = function() { };
$hxClasses["lime.audio.openal.ALC"] = lime.audio.openal.ALC;
lime.audio.openal.ALC.__name__ = ["lime","audio","openal","ALC"];
lime.audio.openal.ALC.closeDevice = function(device) {
	return false;
};
lime.audio.openal.ALC.createContext = function(device,attrlist) {
	return null;
};
lime.audio.openal.ALC.destroyContext = function(context) {
};
lime.audio.openal.ALC.getContextsDevice = function(context) {
	return null;
};
lime.audio.openal.ALC.getCurrentContext = function() {
	return null;
};
lime.audio.openal.ALC.getError = function(device) {
	return 0;
};
lime.audio.openal.ALC.getErrorString = function(device) {
	var _g = lime.audio.openal.ALC.getError(device);
	switch(_g) {
	case 40961:
		return "INVALID_DEVICE: Invalid device (or no device?)";
	case 40962:
		return "INVALID_CONTEXT: Invalid context (or no context?)";
	case 40963:
		return "INVALID_ENUM: Invalid enum value";
	case 40964:
		return "INVALID_VALUE: Invalid param value";
	case 40965:
		return "OUT_OF_MEMORY: OpenAL has run out of memory";
	default:
		return "";
	}
};
lime.audio.openal.ALC.getIntegerv = function(device,param,size) {
	return null;
};
lime.audio.openal.ALC.getString = function(device,param) {
	return null;
};
lime.audio.openal.ALC.makeContextCurrent = function(context) {
	return false;
};
lime.audio.openal.ALC.openDevice = function(deviceName) {
	return null;
};
lime.audio.openal.ALC.processContext = function(context) {
};
lime.audio.openal.ALC.suspendContext = function(context) {
};
lime.audio.openal._ALContext = {};
lime.audio.openal._ALContext.ALContext_Impl_ = function() { };
$hxClasses["lime.audio.openal._ALContext.ALContext_Impl_"] = lime.audio.openal._ALContext.ALContext_Impl_;
lime.audio.openal._ALContext.ALContext_Impl_.__name__ = ["lime","audio","openal","_ALContext","ALContext_Impl_"];
lime.audio.openal._ALContext.ALContext_Impl_._new = function(handle) {
	return handle;
};
lime.audio.openal._ALDevice = {};
lime.audio.openal._ALDevice.ALDevice_Impl_ = function() { };
$hxClasses["lime.audio.openal._ALDevice.ALDevice_Impl_"] = lime.audio.openal._ALDevice.ALDevice_Impl_;
lime.audio.openal._ALDevice.ALDevice_Impl_.__name__ = ["lime","audio","openal","_ALDevice","ALDevice_Impl_"];
lime.audio.openal._ALDevice.ALDevice_Impl_._new = function(handle) {
	return handle;
};
lime.graphics = {};
lime.graphics.ConsoleRenderContext = function() {
};
$hxClasses["lime.graphics.ConsoleRenderContext"] = lime.graphics.ConsoleRenderContext;
lime.graphics.ConsoleRenderContext.__name__ = ["lime","graphics","ConsoleRenderContext"];
lime.graphics.ConsoleRenderContext.prototype = {
	clear: function() {
	}
	,clearColor: function(r,g,b,a) {
	}
	,clearDepth: function(depth) {
	}
	,clearStencil: function(stencil) {
	}
	,__class__: lime.graphics.ConsoleRenderContext
};
lime.graphics.FlashRenderContext = function() {
};
$hxClasses["lime.graphics.FlashRenderContext"] = lime.graphics.FlashRenderContext;
lime.graphics.FlashRenderContext.__name__ = ["lime","graphics","FlashRenderContext"];
lime.graphics.FlashRenderContext.prototype = {
	accessibilityImplementation: null
	,accessibilityProperties: null
	,alpha: null
	,blendMode: null
	,blendShader: null
	,buttonMode: null
	,cacheAsBitmap: null
	,contextMenu: null
	,doubleClickEnabled: null
	,dropTarget: null
	,filters: null
	,focusRect: null
	,graphics: null
	,height: null
	,hitArea: null
	,loaderInfo: null
	,mask: null
	,mouseChildren: null
	,mouseEnabled: null
	,mouseX: null
	,mouseY: null
	,name: null
	,needsSoftKeyboard: null
	,numChildren: null
	,opaqueBackground: null
	,parent: null
	,root: null
	,rotation: null
	,rotationX: null
	,rotationY: null
	,rotationZ: null
	,scale9Grid: null
	,scaleX: null
	,scaleY: null
	,scaleZ: null
	,scrollRect: null
	,softKeyboardInputAreaOfInterest: null
	,soundTransform: null
	,stage: null
	,tabChildren: null
	,tabEnabled: null
	,tabIndex: null
	,textSnapshot: null
	,transform: null
	,useHandCursor: null
	,visible: null
	,width: null
	,x: null
	,y: null
	,z: null
	,addChild: function(child) {
		return null;
	}
	,addChildAt: function(child,index) {
		return null;
	}
	,addEventListener: function(type,listener,useCapture,priority,useWeakReference) {
		if(useWeakReference == null) useWeakReference = false;
		if(priority == null) priority = 0;
		if(useCapture == null) useCapture = false;
	}
	,areInaccessibleObjectsUnderPoint: function(point) {
		return false;
	}
	,contains: function(child) {
		return false;
	}
	,dispatchEvent: function(event) {
		return false;
	}
	,getBounds: function(targetCoordinateSpace) {
		return null;
	}
	,getChildAt: function(index) {
		return null;
	}
	,getChildByName: function(name) {
		return null;
	}
	,getChildIndex: function(child) {
		return 0;
	}
	,getObjectsUnderPoint: function(point) {
		return null;
	}
	,getRect: function(targetCoordinateSpace) {
		return null;
	}
	,globalToLocal: function(point) {
		return null;
	}
	,globalToLocal3D: function(point) {
		return null;
	}
	,hasEventListener: function(type) {
		return false;
	}
	,hitTestObject: function(obj) {
		return false;
	}
	,hitTestPoint: function(x,y,shapeFlag) {
		if(shapeFlag == null) shapeFlag = false;
		return false;
	}
	,local3DToGlobal: function(point3d) {
		return null;
	}
	,localToGlobal: function(point) {
		return null;
	}
	,removeChild: function(child) {
		return null;
	}
	,removeChildAt: function(index) {
		return null;
	}
	,removeChildren: function(beginIndex,endIndex) {
		if(endIndex == null) endIndex = 2147483647;
		if(beginIndex == null) beginIndex = 0;
	}
	,removeEventListener: function(type,listener,useCapture) {
		if(useCapture == null) useCapture = false;
	}
	,requestSoftKeyboard: function() {
		return false;
	}
	,setChildIndex: function(child,index) {
	}
	,startDrag: function(lockCenter,bounds) {
		if(lockCenter == null) lockCenter = false;
	}
	,startTouchDrag: function(touchPointID,lockCenter,bounds) {
		if(lockCenter == null) lockCenter = false;
	}
	,stopAllMovieClips: function() {
	}
	,stopDrag: function() {
	}
	,stopTouchDrag: function(touchPointID) {
	}
	,swapChildren: function(child1,child2) {
	}
	,swapChildrenAt: function(index1,index2) {
	}
	,toString: function() {
		return null;
	}
	,willTrigger: function(type) {
		return false;
	}
	,__class__: lime.graphics.FlashRenderContext
};
lime.graphics.Image = function(buffer,offsetX,offsetY,width,height,color,type) {
	if(height == null) height = -1;
	if(width == null) width = -1;
	if(offsetY == null) offsetY = 0;
	if(offsetX == null) offsetX = 0;
	this.offsetX = offsetX;
	this.offsetY = offsetY;
	this.width = width;
	this.height = height;
	if(type == null) {
		if(lime.app.Application.current != null && lime.app.Application.current.renderers[0] != null) {
			var _g = lime.app.Application.current.renderers[0].context;
			switch(_g[1]) {
			case 2:case 1:
				this.type = lime.graphics.ImageType.CANVAS;
				break;
			case 3:
				this.type = lime.graphics.ImageType.FLASH;
				break;
			default:
				this.type = lime.graphics.ImageType.DATA;
			}
		} else this.type = lime.graphics.ImageType.DATA;
	} else this.type = type;
	if(buffer == null) {
		if(width > 0 && height > 0) {
			var _g1 = this.type;
			switch(_g1[1]) {
			case 0:
				this.buffer = new lime.graphics.ImageBuffer(null,width,height);
				lime.graphics.utils.ImageCanvasUtil.createCanvas(this,width,height);
				if(color != null) this.fillRect(new lime.math.Rectangle(0,0,width,height),color);
				break;
			case 1:
				this.buffer = new lime.graphics.ImageBuffer(new Uint8Array(width * height * 4),width,height);
				if(color != null) this.fillRect(new lime.math.Rectangle(0,0,width,height),color);
				break;
			case 2:
				break;
			default:
			}
		}
	} else this.__fromImageBuffer(buffer);
};
$hxClasses["lime.graphics.Image"] = lime.graphics.Image;
lime.graphics.Image.__name__ = ["lime","graphics","Image"];
lime.graphics.Image.__base64Encoder = null;
lime.graphics.Image.fromBase64 = function(base64,type,onload) {
	var image = new lime.graphics.Image();
	image.__fromBase64(base64,type,onload);
	return image;
};
lime.graphics.Image.fromBitmapData = function(bitmapData) {
	var buffer = new lime.graphics.ImageBuffer(null,bitmapData.width,bitmapData.height);
	buffer.__srcBitmapData = bitmapData;
	return new lime.graphics.Image(buffer);
};
lime.graphics.Image.fromBytes = function(bytes,onload) {
	var image = new lime.graphics.Image();
	image.__fromBytes(bytes,onload);
	return image;
};
lime.graphics.Image.fromCanvas = function(canvas) {
	var buffer = new lime.graphics.ImageBuffer(null,canvas.width,canvas.height);
	buffer.set_src(canvas);
	return new lime.graphics.Image(buffer);
};
lime.graphics.Image.fromFile = function(path,onload,onerror) {
	var image = new lime.graphics.Image();
	image.__fromFile(path,onload,onerror);
	return image;
};
lime.graphics.Image.fromImageElement = function(image) {
	var buffer = new lime.graphics.ImageBuffer(null,image.width,image.height);
	buffer.set_src(image);
	return new lime.graphics.Image(buffer);
};
lime.graphics.Image.__base64Encode = function(bytes) {
	var extension;
	var _g = bytes.length % 3;
	switch(_g) {
	case 1:
		extension = "==";
		break;
	case 2:
		extension = "=";
		break;
	default:
		extension = "";
	}
	if(lime.graphics.Image.__base64Encoder == null) lime.graphics.Image.__base64Encoder = new haxe.crypto.BaseCode(haxe.io.Bytes.ofString(lime.graphics.Image.__base64Chars));
	return lime.graphics.Image.__base64Encoder.encodeBytes(haxe.io.Bytes.ofData(bytes.byteView)).toString() + extension;
};
lime.graphics.Image.__isJPG = function(bytes) {
	bytes.position = 0;
	return bytes.readUnsignedByte() == 255 && bytes.readUnsignedByte() == 216;
};
lime.graphics.Image.__isPNG = function(bytes) {
	bytes.position = 0;
	return bytes.readUnsignedByte() == 137 && bytes.readUnsignedByte() == 80 && bytes.readUnsignedByte() == 78 && bytes.readUnsignedByte() == 71 && bytes.readUnsignedByte() == 13 && bytes.readUnsignedByte() == 10 && bytes.readUnsignedByte() == 26 && bytes.readUnsignedByte() == 10;
};
lime.graphics.Image.__isGIF = function(bytes) {
	bytes.position = 0;
	if(bytes.readUnsignedByte() == 71 && bytes.readUnsignedByte() == 73 && bytes.readUnsignedByte() == 70 && bytes.readUnsignedByte() == 56) {
		var b = bytes.readUnsignedByte();
		return (b == 55 || b == 57) && bytes.readUnsignedByte() == 97;
	}
	return false;
};
lime.graphics.Image.prototype = {
	buffer: null
	,dirty: null
	,height: null
	,offsetX: null
	,offsetY: null
	,rect: null
	,type: null
	,width: null
	,x: null
	,y: null
	,clone: function() {
		var image = new lime.graphics.Image(this.buffer.clone(),this.offsetX,this.offsetY,this.width,this.height,null,this.type);
		return image;
	}
	,colorTransform: function(rect,colorMatrix) {
		rect = this.__clipRect(rect);
		if(this.buffer == null || rect == null) return;
		var _g = this.type;
		switch(_g[1]) {
		case 0:
			lime.graphics.utils.ImageCanvasUtil.colorTransform(this,rect,colorMatrix);
			break;
		case 1:
			lime.graphics.utils.ImageCanvasUtil.convertToData(this);
			lime.graphics.utils.ImageDataUtil.colorTransform(this,rect,colorMatrix);
			break;
		case 2:
			rect.offset(this.offsetX,this.offsetY);
			this.buffer.__srcBitmapData.colorTransform(rect.__toFlashRectangle(),lime.math._ColorMatrix.ColorMatrix_Impl_.__toFlashColorTransform(colorMatrix));
			break;
		default:
		}
	}
	,copyChannel: function(sourceImage,sourceRect,destPoint,sourceChannel,destChannel) {
		sourceRect = this.__clipRect(sourceRect);
		if(this.buffer == null || sourceRect == null) return;
		if(destChannel == lime.graphics.ImageChannel.ALPHA && !this.get_transparent()) return;
		if(sourceRect.width <= 0 || sourceRect.height <= 0) return;
		if(sourceRect.x + sourceRect.width > sourceImage.width) sourceRect.width = sourceImage.width - sourceRect.x;
		if(sourceRect.y + sourceRect.height > sourceImage.height) sourceRect.height = sourceImage.height - sourceRect.y;
		var _g = this.type;
		switch(_g[1]) {
		case 0:
			lime.graphics.utils.ImageCanvasUtil.copyChannel(this,sourceImage,sourceRect,destPoint,sourceChannel,destChannel);
			break;
		case 1:
			lime.graphics.utils.ImageCanvasUtil.convertToData(this);
			lime.graphics.utils.ImageDataUtil.copyChannel(this,sourceImage,sourceRect,destPoint,sourceChannel,destChannel);
			break;
		case 2:
			var srcChannel;
			switch(sourceChannel[1]) {
			case 0:
				srcChannel = 1;
				break;
			case 1:
				srcChannel = 2;
				break;
			case 2:
				srcChannel = 4;
				break;
			case 3:
				srcChannel = 8;
				break;
			}
			var dstChannel;
			switch(destChannel[1]) {
			case 0:
				dstChannel = 1;
				break;
			case 1:
				dstChannel = 2;
				break;
			case 2:
				dstChannel = 4;
				break;
			case 3:
				dstChannel = 8;
				break;
			}
			sourceRect.offset(sourceImage.offsetX,sourceImage.offsetY);
			destPoint.offset(this.offsetX,this.offsetY);
			this.buffer.__srcBitmapData.copyChannel(sourceImage.buffer.get_src(),sourceRect.__toFlashRectangle(),destPoint.__toFlashPoint(),srcChannel,dstChannel);
			break;
		default:
		}
	}
	,copyPixels: function(sourceImage,sourceRect,destPoint,alphaImage,alphaPoint,mergeAlpha) {
		if(mergeAlpha == null) mergeAlpha = false;
		if(this.buffer == null || sourceImage == null) return;
		if(sourceRect.x + sourceRect.width > sourceImage.width) sourceRect.width = sourceImage.width - sourceRect.x;
		if(sourceRect.y + sourceRect.height > sourceImage.height) sourceRect.height = sourceImage.height - sourceRect.y;
		if(sourceRect.width <= 0 || sourceRect.height <= 0) return;
		var _g = this.type;
		switch(_g[1]) {
		case 0:
			lime.graphics.utils.ImageCanvasUtil.convertToCanvas(this);
			lime.graphics.utils.ImageCanvasUtil.copyPixels(this,sourceImage,sourceRect,destPoint,alphaImage,alphaPoint,mergeAlpha);
			break;
		case 1:
			lime.graphics.utils.ImageCanvasUtil.convertToData(this);
			lime.graphics.utils.ImageCanvasUtil.convertToData(sourceImage);
			lime.graphics.utils.ImageDataUtil.copyPixels(this,sourceImage,sourceRect,destPoint,alphaImage,alphaPoint,mergeAlpha);
			break;
		case 2:
			sourceRect.offset(sourceImage.offsetX,sourceImage.offsetY);
			destPoint.offset(this.offsetX,this.offsetY);
			if(alphaImage != null && alphaPoint != null) alphaPoint.offset(alphaImage.offsetX,alphaImage.offsetY);
			this.buffer.__srcBitmapData.copyPixels(sourceImage.buffer.__srcBitmapData,sourceRect.__toFlashRectangle(),destPoint.__toFlashPoint(),alphaImage != null?alphaImage.buffer.get_src():null,alphaPoint != null?alphaPoint.__toFlashPoint():null,mergeAlpha);
			break;
		default:
		}
	}
	,encode: function(format,quality) {
		if(quality == null) quality = 90;
		if(format == null) format = "png";
		return null;
	}
	,fillRect: function(rect,color) {
		rect = this.__clipRect(rect);
		if(this.buffer == null || rect == null) return;
		var _g = this.type;
		switch(_g[1]) {
		case 0:
			lime.graphics.utils.ImageCanvasUtil.fillRect(this,rect,color);
			break;
		case 1:
			lime.graphics.utils.ImageCanvasUtil.convertToData(this);
			lime.graphics.utils.ImageDataUtil.fillRect(this,rect,color);
			break;
		case 2:
			rect.offset(this.offsetX,this.offsetY);
			this.buffer.__srcBitmapData.fillRect(rect.__toFlashRectangle(),color);
			break;
		default:
		}
	}
	,floodFill: function(x,y,color) {
		if(this.buffer == null) return;
		var _g = this.type;
		switch(_g[1]) {
		case 0:
			lime.graphics.utils.ImageCanvasUtil.floodFill(this,x,y,color);
			break;
		case 1:
			lime.graphics.utils.ImageCanvasUtil.convertToData(this);
			lime.graphics.utils.ImageDataUtil.floodFill(this,x,y,color);
			break;
		case 2:
			this.buffer.__srcBitmapData.floodFill(x + this.offsetX,y + this.offsetY,color);
			break;
		default:
		}
	}
	,getPixel: function(x,y) {
		if(this.buffer == null || x < 0 || y < 0 || x >= this.width || y >= this.height) return 0;
		var _g = this.type;
		switch(_g[1]) {
		case 0:
			return lime.graphics.utils.ImageCanvasUtil.getPixel(this,x,y);
		case 1:
			lime.graphics.utils.ImageCanvasUtil.convertToData(this);
			return lime.graphics.utils.ImageDataUtil.getPixel(this,x,y);
		case 2:
			return this.buffer.__srcBitmapData.getPixel(x + this.offsetX,y + this.offsetY);
		default:
			return 0;
		}
	}
	,getPixel32: function(x,y) {
		if(this.buffer == null || x < 0 || y < 0 || x >= this.width || y >= this.height) return 0;
		var _g = this.type;
		switch(_g[1]) {
		case 0:
			return lime.graphics.utils.ImageCanvasUtil.getPixel32(this,x,y);
		case 1:
			lime.graphics.utils.ImageCanvasUtil.convertToData(this);
			return lime.graphics.utils.ImageDataUtil.getPixel32(this,x,y);
		case 2:
			return this.buffer.__srcBitmapData.getPixel32(x + this.offsetX,y + this.offsetY);
		default:
			return 0;
		}
	}
	,getPixels: function(rect) {
		if(this.buffer == null) return null;
		var _g = this.type;
		switch(_g[1]) {
		case 0:
			return lime.graphics.utils.ImageCanvasUtil.getPixels(this,rect);
		case 1:
			lime.graphics.utils.ImageCanvasUtil.convertToData(this);
			return lime.graphics.utils.ImageDataUtil.getPixels(this,rect);
		case 2:
			rect.offset(this.offsetX,this.offsetY);
			return this.buffer.__srcBitmapData.getPixels(rect.__toFlashRectangle());
		default:
			return null;
		}
	}
	,merge: function(sourceImage,sourceRect,destPoint,redMultiplier,greenMultiplier,blueMultiplier,alphaMultiplier) {
		if(this.buffer == null || sourceImage == null) return;
		var _g = this.type;
		switch(_g[1]) {
		case 0:
			lime.graphics.utils.ImageCanvasUtil.convertToCanvas(this);
			lime.graphics.utils.ImageCanvasUtil.merge(this,sourceImage,sourceRect,destPoint,redMultiplier,greenMultiplier,blueMultiplier,alphaMultiplier);
			break;
		case 1:
			lime.graphics.utils.ImageCanvasUtil.convertToData(this);
			lime.graphics.utils.ImageCanvasUtil.convertToData(sourceImage);
			lime.graphics.utils.ImageDataUtil.merge(this,sourceImage,sourceRect,destPoint,redMultiplier,greenMultiplier,blueMultiplier,alphaMultiplier);
			break;
		case 2:
			sourceRect.offset(this.offsetX,this.offsetY);
			this.buffer.__srcBitmapData.merge(sourceImage.buffer.__srcBitmapData,sourceRect.__toFlashRectangle(),destPoint.__toFlashPoint(),redMultiplier,greenMultiplier,blueMultiplier,alphaMultiplier);
			break;
		default:
			return null;
		}
	}
	,resize: function(newWidth,newHeight) {
		var _g = this.type;
		switch(_g[1]) {
		case 0:
			lime.graphics.utils.ImageCanvasUtil.resize(this,newWidth,newHeight);
			break;
		case 1:
			lime.graphics.utils.ImageDataUtil.resize(this,newWidth,newHeight);
			break;
		case 2:
			break;
		default:
		}
		this.buffer.width = newWidth;
		this.buffer.height = newHeight;
		this.offsetX = 0;
		this.offsetY = 0;
		this.width = newWidth;
		this.height = newHeight;
	}
	,setPixel: function(x,y,color) {
		if(this.buffer == null || x < 0 || y < 0 || x >= this.width || y >= this.height) return;
		var _g = this.type;
		switch(_g[1]) {
		case 0:
			lime.graphics.utils.ImageCanvasUtil.setPixel(this,x,y,color);
			break;
		case 1:
			lime.graphics.utils.ImageCanvasUtil.convertToData(this);
			lime.graphics.utils.ImageDataUtil.setPixel(this,x,y,color);
			break;
		case 2:
			this.buffer.__srcBitmapData.setPixel(x + this.offsetX,y + this.offsetX,color);
			break;
		default:
		}
	}
	,setPixel32: function(x,y,color) {
		if(this.buffer == null || x < 0 || y < 0 || x >= this.width || y >= this.height) return;
		var _g = this.type;
		switch(_g[1]) {
		case 0:
			lime.graphics.utils.ImageCanvasUtil.setPixel32(this,x,y,color);
			break;
		case 1:
			lime.graphics.utils.ImageCanvasUtil.convertToData(this);
			lime.graphics.utils.ImageDataUtil.setPixel32(this,x,y,color);
			break;
		case 2:
			this.buffer.__srcBitmapData.setPixel32(x + this.offsetX,y + this.offsetY,color);
			break;
		default:
		}
	}
	,setPixels: function(rect,byteArray) {
		rect = this.__clipRect(rect);
		if(this.buffer == null || rect == null) return;
		var _g = this.type;
		switch(_g[1]) {
		case 0:
			lime.graphics.utils.ImageCanvasUtil.setPixels(this,rect,byteArray);
			break;
		case 1:
			lime.graphics.utils.ImageCanvasUtil.convertToData(this);
			lime.graphics.utils.ImageDataUtil.setPixels(this,rect,byteArray);
			break;
		case 2:
			rect.offset(this.offsetX,this.offsetY);
			this.buffer.__srcBitmapData.setPixels(rect.__toFlashRectangle(),byteArray);
			break;
		default:
		}
	}
	,__clipRect: function(r) {
		if(r == null) return null;
		if(r.x < 0) {
			r.width -= -r.x;
			r.x = 0;
			if(r.x + r.width <= 0) return null;
		}
		if(r.y < 0) {
			r.height -= -r.y;
			r.y = 0;
			if(r.y + r.height <= 0) return null;
		}
		if(r.x + r.width >= this.width) {
			r.width -= r.x + r.width - this.width;
			if(r.width <= 0) return null;
		}
		if(r.y + r.height >= this.height) {
			r.height -= r.y + r.height - this.height;
			if(r.height <= 0) return null;
		}
		return r;
	}
	,__fromBase64: function(base64,type,onload) {
		var _g = this;
		var image = new Image();
		var image_onLoaded = function(event) {
			_g.buffer = new lime.graphics.ImageBuffer(null,image.width,image.height);
			_g.buffer.__srcImage = image;
			_g.offsetX = 0;
			_g.offsetY = 0;
			_g.width = _g.buffer.width;
			_g.height = _g.buffer.height;
			if(onload != null) onload(_g);
		};
		image.addEventListener("load",image_onLoaded,false);
		image.src = "data:" + type + ";base64," + base64;
	}
	,__fromBytes: function(bytes,onload) {
		var type = "";
		if(lime.graphics.Image.__isPNG(bytes)) type = "image/png"; else if(lime.graphics.Image.__isJPG(bytes)) type = "image/jpeg"; else if(lime.graphics.Image.__isGIF(bytes)) type = "image/gif"; else throw "Image tried to read a PNG/JPG ByteArray, but found an invalid header.";
		this.__fromBase64(lime.graphics.Image.__base64Encode(bytes),type,onload);
	}
	,__fromFile: function(path,onload,onerror) {
		var _g = this;
		var image = new Image();
		image.onload = function(_) {
			_g.buffer = new lime.graphics.ImageBuffer(null,image.width,image.height);
			_g.buffer.__srcImage = image;
			_g.width = image.width;
			_g.height = image.height;
			if(onload != null) onload(_g);
		};
		image.onerror = function(_1) {
			if(onerror != null) onerror();
		};
		image.src = path;
		if(image.complete) {
		}
	}
	,__fromImageBuffer: function(buffer) {
		this.buffer = buffer;
		if(buffer != null) {
			if(this.width == -1) this.width = buffer.width;
			if(this.height == -1) this.height = buffer.height;
		}
	}
	,get_data: function() {
		if(this.buffer.data == null && this.buffer.width > 0 && this.buffer.height > 0) {
			lime.graphics.utils.ImageCanvasUtil.convertToCanvas(this);
			lime.graphics.utils.ImageCanvasUtil.sync(this);
			lime.graphics.utils.ImageCanvasUtil.createImageData(this);
		}
		return this.buffer.data;
	}
	,set_data: function(value) {
		return this.buffer.data = value;
	}
	,get_powerOfTwo: function() {
		return this.buffer.width != 0 && (this.buffer.width & ~this.buffer.width + 1) == this.buffer.width && (this.buffer.height != 0 && (this.buffer.height & ~this.buffer.height + 1) == this.buffer.height);
	}
	,set_powerOfTwo: function(value) {
		if(value != this.get_powerOfTwo()) {
			var newWidth = 1;
			var newHeight = 1;
			while(newWidth < this.buffer.width) newWidth <<= 1;
			while(newHeight < this.buffer.height) newHeight <<= 1;
			var _g = this.type;
			switch(_g[1]) {
			case 0:
				break;
			case 1:
				lime.graphics.utils.ImageDataUtil.resizeBuffer(this,newWidth,newHeight);
				break;
			case 2:
				break;
			default:
			}
		}
		return value;
	}
	,get_premultiplied: function() {
		return this.buffer.premultiplied;
	}
	,set_premultiplied: function(value) {
		if(value && !this.buffer.premultiplied) {
			var _g = this.type;
			switch(_g[1]) {
			case 1:
				lime.graphics.utils.ImageCanvasUtil.convertToData(this);
				lime.graphics.utils.ImageDataUtil.multiplyAlpha(this);
				break;
			default:
			}
		} else if(!value && this.buffer.premultiplied) {
			var _g1 = this.type;
			switch(_g1[1]) {
			case 1:
				lime.graphics.utils.ImageCanvasUtil.convertToData(this);
				lime.graphics.utils.ImageDataUtil.unmultiplyAlpha(this);
				break;
			default:
			}
		}
		return value;
	}
	,get_rect: function() {
		return new lime.math.Rectangle(0,0,this.width,this.height);
	}
	,get_src: function() {
		return this.buffer.get_src();
	}
	,set_src: function(value) {
		return this.buffer.set_src(value);
	}
	,get_transparent: function() {
		return this.buffer.transparent;
	}
	,set_transparent: function(value) {
		return this.buffer.transparent = value;
	}
	,__class__: lime.graphics.Image
	,__properties__: {set_transparent:"set_transparent",get_transparent:"get_transparent",set_src:"set_src",get_src:"get_src",get_rect:"get_rect",set_premultiplied:"set_premultiplied",get_premultiplied:"get_premultiplied",set_powerOfTwo:"set_powerOfTwo",get_powerOfTwo:"get_powerOfTwo",set_data:"set_data",get_data:"get_data"}
};
lime.graphics.ImageChannel = $hxClasses["lime.graphics.ImageChannel"] = { __ename__ : ["lime","graphics","ImageChannel"], __constructs__ : ["RED","GREEN","BLUE","ALPHA"] };
lime.graphics.ImageChannel.RED = ["RED",0];
lime.graphics.ImageChannel.RED.toString = $estr;
lime.graphics.ImageChannel.RED.__enum__ = lime.graphics.ImageChannel;
lime.graphics.ImageChannel.GREEN = ["GREEN",1];
lime.graphics.ImageChannel.GREEN.toString = $estr;
lime.graphics.ImageChannel.GREEN.__enum__ = lime.graphics.ImageChannel;
lime.graphics.ImageChannel.BLUE = ["BLUE",2];
lime.graphics.ImageChannel.BLUE.toString = $estr;
lime.graphics.ImageChannel.BLUE.__enum__ = lime.graphics.ImageChannel;
lime.graphics.ImageChannel.ALPHA = ["ALPHA",3];
lime.graphics.ImageChannel.ALPHA.toString = $estr;
lime.graphics.ImageChannel.ALPHA.__enum__ = lime.graphics.ImageChannel;
lime.graphics.ImageChannel.__empty_constructs__ = [lime.graphics.ImageChannel.RED,lime.graphics.ImageChannel.GREEN,lime.graphics.ImageChannel.BLUE,lime.graphics.ImageChannel.ALPHA];
lime.graphics.ImageBuffer = function(data,width,height,bitsPerPixel) {
	if(bitsPerPixel == null) bitsPerPixel = 4;
	if(height == null) height = 0;
	if(width == null) width = 0;
	this.data = data;
	this.width = width;
	this.height = height;
	this.bitsPerPixel = bitsPerPixel;
	this.transparent = true;
};
$hxClasses["lime.graphics.ImageBuffer"] = lime.graphics.ImageBuffer;
lime.graphics.ImageBuffer.__name__ = ["lime","graphics","ImageBuffer"];
lime.graphics.ImageBuffer.prototype = {
	bitsPerPixel: null
	,data: null
	,height: null
	,premultiplied: null
	,transparent: null
	,width: null
	,__srcBitmapData: null
	,__srcCanvas: null
	,__srcContext: null
	,__srcCustom: null
	,__srcImage: null
	,__srcImageData: null
	,clone: function() {
		var buffer = new lime.graphics.ImageBuffer(this.data,this.width,this.height,this.bitsPerPixel);
		if(this.data != null) {
			buffer.data = new Uint8Array(this.data.byteLength);
			var copy = new Uint8Array(this.data);
			buffer.data.set(copy);
		} else if(this.__srcImageData != null) {
			buffer.__srcCanvas = window.document.createElement("canvas");
			buffer.__srcContext = buffer.__srcCanvas.getContext("2d");
			buffer.__srcCanvas.width = this.__srcImageData.width;
			buffer.__srcCanvas.height = this.__srcImageData.height;
			buffer.__srcImageData = buffer.__srcContext.createImageData(this.__srcImageData.width,this.__srcImageData.height);
			var copy1 = new Uint8ClampedArray(this.__srcImageData.data);
			buffer.__srcImageData.data.set(copy1);
		} else if(this.__srcCanvas != null) {
			buffer.__srcCanvas = window.document.createElement("canvas");
			buffer.__srcContext = buffer.__srcCanvas.getContext("2d");
			buffer.__srcCanvas.width = this.__srcCanvas.width;
			buffer.__srcCanvas.height = this.__srcCanvas.height;
			buffer.__srcContext.drawImage(this.__srcCanvas,0,0);
		} else buffer.__srcImage = this.__srcImage;
		buffer.premultiplied = this.premultiplied;
		buffer.transparent = this.transparent;
		return buffer;
	}
	,get_src: function() {
		if(this.__srcImage != null) return this.__srcImage;
		return this.__srcCanvas;
	}
	,set_src: function(value) {
		if(js.Boot.__instanceof(value,Image)) this.__srcImage = value; else if(js.Boot.__instanceof(value,HTMLCanvasElement)) {
			this.__srcCanvas = value;
			this.__srcContext = this.__srcCanvas.getContext("2d");
		}
		return value;
	}
	,__class__: lime.graphics.ImageBuffer
	,__properties__: {set_src:"set_src",get_src:"get_src"}
};
lime.graphics.ImageType = $hxClasses["lime.graphics.ImageType"] = { __ename__ : ["lime","graphics","ImageType"], __constructs__ : ["CANVAS","DATA","FLASH","CUSTOM"] };
lime.graphics.ImageType.CANVAS = ["CANVAS",0];
lime.graphics.ImageType.CANVAS.toString = $estr;
lime.graphics.ImageType.CANVAS.__enum__ = lime.graphics.ImageType;
lime.graphics.ImageType.DATA = ["DATA",1];
lime.graphics.ImageType.DATA.toString = $estr;
lime.graphics.ImageType.DATA.__enum__ = lime.graphics.ImageType;
lime.graphics.ImageType.FLASH = ["FLASH",2];
lime.graphics.ImageType.FLASH.toString = $estr;
lime.graphics.ImageType.FLASH.__enum__ = lime.graphics.ImageType;
lime.graphics.ImageType.CUSTOM = ["CUSTOM",3];
lime.graphics.ImageType.CUSTOM.toString = $estr;
lime.graphics.ImageType.CUSTOM.__enum__ = lime.graphics.ImageType;
lime.graphics.ImageType.__empty_constructs__ = [lime.graphics.ImageType.CANVAS,lime.graphics.ImageType.DATA,lime.graphics.ImageType.FLASH,lime.graphics.ImageType.CUSTOM];
lime.graphics.RenderContext = $hxClasses["lime.graphics.RenderContext"] = { __ename__ : ["lime","graphics","RenderContext"], __constructs__ : ["OPENGL","CANVAS","DOM","FLASH","CONSOLE","CUSTOM"] };
lime.graphics.RenderContext.OPENGL = function(gl) { var $x = ["OPENGL",0,gl]; $x.__enum__ = lime.graphics.RenderContext; $x.toString = $estr; return $x; };
lime.graphics.RenderContext.CANVAS = function(context) { var $x = ["CANVAS",1,context]; $x.__enum__ = lime.graphics.RenderContext; $x.toString = $estr; return $x; };
lime.graphics.RenderContext.DOM = function(element) { var $x = ["DOM",2,element]; $x.__enum__ = lime.graphics.RenderContext; $x.toString = $estr; return $x; };
lime.graphics.RenderContext.FLASH = function(stage) { var $x = ["FLASH",3,stage]; $x.__enum__ = lime.graphics.RenderContext; $x.toString = $estr; return $x; };
lime.graphics.RenderContext.CONSOLE = function(context) { var $x = ["CONSOLE",4,context]; $x.__enum__ = lime.graphics.RenderContext; $x.toString = $estr; return $x; };
lime.graphics.RenderContext.CUSTOM = function(data) { var $x = ["CUSTOM",5,data]; $x.__enum__ = lime.graphics.RenderContext; $x.toString = $estr; return $x; };
lime.graphics.RenderContext.__empty_constructs__ = [];
lime.graphics.Renderer = function(window) {
	this.onRender = new lime.app.Event();
	this.onRenderContextRestored = new lime.app.Event();
	this.onRenderContextLost = new lime.app.Event();
	this.window = window;
	this.backend = new lime._backend.html5.HTML5Renderer(this);
	this.window.currentRenderer = this;
};
$hxClasses["lime.graphics.Renderer"] = lime.graphics.Renderer;
lime.graphics.Renderer.__name__ = ["lime","graphics","Renderer"];
lime.graphics.Renderer.prototype = {
	context: null
	,onRenderContextLost: null
	,onRenderContextRestored: null
	,onRender: null
	,window: null
	,backend: null
	,create: function() {
		this.backend.create();
	}
	,flip: function() {
		this.backend.flip();
	}
	,render: function() {
		this.backend.render();
	}
	,__class__: lime.graphics.Renderer
};
lime.graphics.format = {};
lime.graphics.format.BMP = function() { };
$hxClasses["lime.graphics.format.BMP"] = lime.graphics.format.BMP;
lime.graphics.format.BMP.__name__ = ["lime","graphics","format","BMP"];
lime.graphics.format.BMP.encode = function(image,type) {
	if(type == null) type = lime.graphics.format.BMPType.RGB;
	var fileHeaderLength = 14;
	var infoHeaderLength = 40;
	var pixelValuesLength = image.width * image.height * 4;
	switch(type[1]) {
	case 1:
		infoHeaderLength = 108;
		break;
	case 2:
		fileHeaderLength = 0;
		pixelValuesLength += image.width * image.height;
		break;
	default:
	}
	var data = new lime.utils.ByteArray(fileHeaderLength + infoHeaderLength + pixelValuesLength);
	if(fileHeaderLength > 0) {
		data.writeByte(66);
		data.writeByte(77);
		data.writeInt(data.length);
		data.writeInt(0);
		data.writeInt(fileHeaderLength + infoHeaderLength);
	}
	data.writeInt(infoHeaderLength);
	data.writeInt(image.width);
	if(type == lime.graphics.format.BMPType.ICO) data.writeInt(image.height * 2); else data.writeInt(image.height);
	data.writeShort(1);
	data.writeShort(32);
	switch(type[1]) {
	case 1:
		data.writeInt(3);
		break;
	default:
		data.writeInt(0);
	}
	data.writeInt(pixelValuesLength);
	data.writeInt(11824);
	data.writeInt(11824);
	data.writeInt(0);
	data.writeInt(0);
	if(type == lime.graphics.format.BMPType.BITFIELD) {
		data.writeInt(16711680);
		data.writeInt(65280);
		data.writeInt(255);
		data.writeInt(-16777216);
		data.writeByte(32);
		data.writeByte(110);
		data.writeByte(105);
		data.writeByte(87);
		data.writeInt(0);
		data.writeInt(0);
		data.writeInt(0);
		data.writeInt(0);
		data.writeInt(0);
		data.writeInt(0);
		data.writeInt(0);
		data.writeInt(0);
		data.writeInt(0);
		data.writeInt(0);
		data.writeInt(0);
		data.writeInt(0);
	}
	var pixels = image.getPixels(new lime.math.Rectangle(0,0,image.width,image.height));
	var a;
	var r;
	var g;
	var b;
	if(type != lime.graphics.format.BMPType.ICO) {
		var _g1 = 0;
		var _g = image.height;
		while(_g1 < _g) {
			var y = _g1++;
			pixels.position = (image.height - 1 - y) * 4 * image.width;
			var _g3 = 0;
			var _g2 = image.width;
			while(_g3 < _g2) {
				var x = _g3++;
				a = pixels.readByte();
				r = pixels.readByte();
				g = pixels.readByte();
				b = pixels.readByte();
				data.writeByte(b);
				data.writeByte(g);
				data.writeByte(r);
				data.writeByte(a);
			}
		}
	} else {
		var andMask = new lime.utils.ByteArray(image.width * image.height);
		var _g11 = 0;
		var _g4 = image.height;
		while(_g11 < _g4) {
			var y1 = _g11++;
			pixels.position = (image.height - 1 - y1) * 4 * image.width;
			var _g31 = 0;
			var _g21 = image.width;
			while(_g31 < _g21) {
				var x1 = _g31++;
				a = pixels.readByte();
				r = pixels.readByte();
				g = pixels.readByte();
				b = pixels.readByte();
				data.writeByte(b);
				data.writeByte(g);
				data.writeByte(r);
				data.writeByte(a);
				andMask.writeByte(0);
			}
		}
		data.writeBytes(andMask);
	}
	return data;
};
lime.graphics.format.BMPType = $hxClasses["lime.graphics.format.BMPType"] = { __ename__ : ["lime","graphics","format","BMPType"], __constructs__ : ["RGB","BITFIELD","ICO"] };
lime.graphics.format.BMPType.RGB = ["RGB",0];
lime.graphics.format.BMPType.RGB.toString = $estr;
lime.graphics.format.BMPType.RGB.__enum__ = lime.graphics.format.BMPType;
lime.graphics.format.BMPType.BITFIELD = ["BITFIELD",1];
lime.graphics.format.BMPType.BITFIELD.toString = $estr;
lime.graphics.format.BMPType.BITFIELD.__enum__ = lime.graphics.format.BMPType;
lime.graphics.format.BMPType.ICO = ["ICO",2];
lime.graphics.format.BMPType.ICO.toString = $estr;
lime.graphics.format.BMPType.ICO.__enum__ = lime.graphics.format.BMPType;
lime.graphics.format.BMPType.__empty_constructs__ = [lime.graphics.format.BMPType.RGB,lime.graphics.format.BMPType.BITFIELD,lime.graphics.format.BMPType.ICO];
lime.graphics.format.JPEG = function() { };
$hxClasses["lime.graphics.format.JPEG"] = lime.graphics.format.JPEG;
lime.graphics.format.JPEG.__name__ = ["lime","graphics","format","JPEG"];
lime.graphics.format.JPEG.encode = function(image,quality) {
	return null;
};
lime.graphics.format.PNG = function() { };
$hxClasses["lime.graphics.format.PNG"] = lime.graphics.format.PNG;
lime.graphics.format.PNG.__name__ = ["lime","graphics","format","PNG"];
lime.graphics.format.PNG.encode = function(image) {
	return null;
};
lime.graphics.opengl = {};
lime.graphics.opengl.GL = function() { };
$hxClasses["lime.graphics.opengl.GL"] = lime.graphics.opengl.GL;
lime.graphics.opengl.GL.__name__ = ["lime","graphics","opengl","GL"];
lime.graphics.opengl.GL.__properties__ = {get_version:"get_version"}
lime.graphics.opengl.GL.version = null;
lime.graphics.opengl.GL.context = null;
lime.graphics.opengl.GL.activeTexture = function(texture) {
	lime.graphics.opengl.GL.context.activeTexture(texture);
};
lime.graphics.opengl.GL.attachShader = function(program,shader) {
	lime.graphics.opengl.GL.context.attachShader(program,shader);
};
lime.graphics.opengl.GL.bindAttribLocation = function(program,index,name) {
	lime.graphics.opengl.GL.context.bindAttribLocation(program,index,name);
};
lime.graphics.opengl.GL.bindBuffer = function(target,buffer) {
	lime.graphics.opengl.GL.context.bindBuffer(target,buffer);
};
lime.graphics.opengl.GL.bindFramebuffer = function(target,framebuffer) {
	lime.graphics.opengl.GL.context.bindFramebuffer(target,framebuffer);
};
lime.graphics.opengl.GL.bindRenderbuffer = function(target,renderbuffer) {
	lime.graphics.opengl.GL.context.bindRenderbuffer(target,renderbuffer);
};
lime.graphics.opengl.GL.bindTexture = function(target,texture) {
	lime.graphics.opengl.GL.context.bindTexture(target,texture);
};
lime.graphics.opengl.GL.blendColor = function(red,green,blue,alpha) {
	lime.graphics.opengl.GL.context.blendColor(red,green,blue,alpha);
};
lime.graphics.opengl.GL.blendEquation = function(mode) {
	lime.graphics.opengl.GL.context.blendEquation(mode);
};
lime.graphics.opengl.GL.blendEquationSeparate = function(modeRGB,modeAlpha) {
	lime.graphics.opengl.GL.context.blendEquationSeparate(modeRGB,modeAlpha);
};
lime.graphics.opengl.GL.blendFunc = function(sfactor,dfactor) {
	lime.graphics.opengl.GL.context.blendFunc(sfactor,dfactor);
};
lime.graphics.opengl.GL.blendFuncSeparate = function(srcRGB,dstRGB,srcAlpha,dstAlpha) {
	lime.graphics.opengl.GL.context.blendFuncSeparate(srcRGB,dstRGB,srcAlpha,dstAlpha);
};
lime.graphics.opengl.GL.bufferData = function(target,data,usage) {
	lime.graphics.opengl.GL.context.bufferData(target,data,usage);
};
lime.graphics.opengl.GL.bufferSubData = function(target,offset,data) {
	lime.graphics.opengl.GL.context.bufferSubData(target,offset,data);
};
lime.graphics.opengl.GL.checkFramebufferStatus = function(target) {
	return lime.graphics.opengl.GL.context.checkFramebufferStatus(target);
};
lime.graphics.opengl.GL.clear = function(mask) {
	lime.graphics.opengl.GL.context.clear(mask);
};
lime.graphics.opengl.GL.clearColor = function(red,green,blue,alpha) {
	lime.graphics.opengl.GL.context.clearColor(red,green,blue,alpha);
};
lime.graphics.opengl.GL.clearDepth = function(depth) {
	lime.graphics.opengl.GL.context.clearDepth(depth);
};
lime.graphics.opengl.GL.clearStencil = function(s) {
	lime.graphics.opengl.GL.context.clearStencil(s);
};
lime.graphics.opengl.GL.colorMask = function(red,green,blue,alpha) {
	lime.graphics.opengl.GL.context.colorMask(red,green,blue,alpha);
};
lime.graphics.opengl.GL.compileShader = function(shader) {
	lime.graphics.opengl.GL.context.compileShader(shader);
};
lime.graphics.opengl.GL.compressedTexImage2D = function(target,level,internalformat,width,height,border,data) {
	lime.graphics.opengl.GL.context.compressedTexImage2D(target,level,internalformat,width,height,border,data);
};
lime.graphics.opengl.GL.compressedTexSubImage2D = function(target,level,xoffset,yoffset,width,height,format,data) {
	lime.graphics.opengl.GL.context.compressedTexSubImage2D(target,level,xoffset,yoffset,width,height,format,data);
};
lime.graphics.opengl.GL.copyTexImage2D = function(target,level,internalformat,x,y,width,height,border) {
	lime.graphics.opengl.GL.context.copyTexImage2D(target,level,internalformat,x,y,width,height,border);
};
lime.graphics.opengl.GL.copyTexSubImage2D = function(target,level,xoffset,yoffset,x,y,width,height) {
	lime.graphics.opengl.GL.context.copyTexSubImage2D(target,level,xoffset,yoffset,x,y,width,height);
};
lime.graphics.opengl.GL.createBuffer = function() {
	return lime.graphics.opengl.GL.context.createBuffer();
};
lime.graphics.opengl.GL.createFramebuffer = function() {
	return lime.graphics.opengl.GL.context.createFramebuffer();
};
lime.graphics.opengl.GL.createProgram = function() {
	return lime.graphics.opengl.GL.context.createProgram();
};
lime.graphics.opengl.GL.createRenderbuffer = function() {
	return lime.graphics.opengl.GL.context.createRenderbuffer();
};
lime.graphics.opengl.GL.createShader = function(type) {
	return lime.graphics.opengl.GL.context.createShader(type);
};
lime.graphics.opengl.GL.createTexture = function() {
	return lime.graphics.opengl.GL.context.createTexture();
};
lime.graphics.opengl.GL.cullFace = function(mode) {
	lime.graphics.opengl.GL.context.cullFace(mode);
};
lime.graphics.opengl.GL.deleteBuffer = function(buffer) {
	lime.graphics.opengl.GL.context.deleteBuffer(buffer);
};
lime.graphics.opengl.GL.deleteFramebuffer = function(framebuffer) {
	lime.graphics.opengl.GL.context.deleteFramebuffer(framebuffer);
};
lime.graphics.opengl.GL.deleteProgram = function(program) {
	lime.graphics.opengl.GL.context.deleteProgram(program);
};
lime.graphics.opengl.GL.deleteRenderbuffer = function(renderbuffer) {
	lime.graphics.opengl.GL.context.deleteRenderbuffer(renderbuffer);
};
lime.graphics.opengl.GL.deleteShader = function(shader) {
	lime.graphics.opengl.GL.context.deleteShader(shader);
};
lime.graphics.opengl.GL.deleteTexture = function(texture) {
	lime.graphics.opengl.GL.context.deleteTexture(texture);
};
lime.graphics.opengl.GL.depthFunc = function(func) {
	lime.graphics.opengl.GL.context.depthFunc(func);
};
lime.graphics.opengl.GL.depthMask = function(flag) {
	lime.graphics.opengl.GL.context.depthMask(flag);
};
lime.graphics.opengl.GL.depthRange = function(zNear,zFar) {
	lime.graphics.opengl.GL.context.depthRange(zNear,zFar);
};
lime.graphics.opengl.GL.detachShader = function(program,shader) {
	lime.graphics.opengl.GL.context.detachShader(program,shader);
};
lime.graphics.opengl.GL.disable = function(cap) {
	lime.graphics.opengl.GL.context.disable(cap);
};
lime.graphics.opengl.GL.disableVertexAttribArray = function(index) {
	lime.graphics.opengl.GL.context.disableVertexAttribArray(index);
};
lime.graphics.opengl.GL.drawArrays = function(mode,first,count) {
	lime.graphics.opengl.GL.context.drawArrays(mode,first,count);
};
lime.graphics.opengl.GL.drawElements = function(mode,count,type,offset) {
	lime.graphics.opengl.GL.context.drawElements(mode,count,type,offset);
};
lime.graphics.opengl.GL.enable = function(cap) {
	lime.graphics.opengl.GL.context.enable(cap);
};
lime.graphics.opengl.GL.enableVertexAttribArray = function(index) {
	lime.graphics.opengl.GL.context.enableVertexAttribArray(index);
};
lime.graphics.opengl.GL.finish = function() {
	lime.graphics.opengl.GL.context.finish();
};
lime.graphics.opengl.GL.flush = function() {
	lime.graphics.opengl.GL.context.flush();
};
lime.graphics.opengl.GL.framebufferRenderbuffer = function(target,attachment,renderbuffertarget,renderbuffer) {
	lime.graphics.opengl.GL.context.framebufferRenderbuffer(target,attachment,renderbuffertarget,renderbuffer);
};
lime.graphics.opengl.GL.framebufferTexture2D = function(target,attachment,textarget,texture,level) {
	lime.graphics.opengl.GL.context.framebufferTexture2D(target,attachment,textarget,texture,level);
};
lime.graphics.opengl.GL.frontFace = function(mode) {
	lime.graphics.opengl.GL.context.frontFace(mode);
};
lime.graphics.opengl.GL.generateMipmap = function(target) {
	lime.graphics.opengl.GL.context.generateMipmap(target);
};
lime.graphics.opengl.GL.getActiveAttrib = function(program,index) {
	return lime.graphics.opengl.GL.context.getActiveAttrib(program,index);
};
lime.graphics.opengl.GL.getActiveUniform = function(program,index) {
	return lime.graphics.opengl.GL.context.getActiveUniform(program,index);
};
lime.graphics.opengl.GL.getAttachedShaders = function(program) {
	return lime.graphics.opengl.GL.context.getAttachedShaders(program);
};
lime.graphics.opengl.GL.getAttribLocation = function(program,name) {
	return lime.graphics.opengl.GL.context.getAttribLocation(program,name);
};
lime.graphics.opengl.GL.getBufferParameter = function(target,pname) {
	return lime.graphics.opengl.GL.context.getBufferParameter(target,pname);
};
lime.graphics.opengl.GL.getContextAttributes = function() {
	return lime.graphics.opengl.GL.context.getContextAttributes();
};
lime.graphics.opengl.GL.getError = function() {
	return lime.graphics.opengl.GL.context.getError();
};
lime.graphics.opengl.GL.getExtension = function(name) {
	return lime.graphics.opengl.GL.context.getExtension(name);
};
lime.graphics.opengl.GL.getFramebufferAttachmentParameter = function(target,attachment,pname) {
	return lime.graphics.opengl.GL.context.getFramebufferAttachmentParameter(target,attachment,pname);
};
lime.graphics.opengl.GL.getParameter = function(pname) {
	return lime.graphics.opengl.GL.context.getParameter(pname);
};
lime.graphics.opengl.GL.getProgramInfoLog = function(program) {
	return lime.graphics.opengl.GL.context.getProgramInfoLog(program);
};
lime.graphics.opengl.GL.getProgramParameter = function(program,pname) {
	return lime.graphics.opengl.GL.context.getProgramParameter(program,pname);
};
lime.graphics.opengl.GL.getRenderbufferParameter = function(target,pname) {
	return lime.graphics.opengl.GL.context.getRenderbufferParameter(target,pname);
};
lime.graphics.opengl.GL.getShaderInfoLog = function(shader) {
	return lime.graphics.opengl.GL.context.getShaderInfoLog(shader);
};
lime.graphics.opengl.GL.getShaderParameter = function(shader,pname) {
	return lime.graphics.opengl.GL.context.getShaderParameter(shader,pname);
};
lime.graphics.opengl.GL.getShaderPrecisionFormat = function(shadertype,precisiontype) {
	return lime.graphics.opengl.GL.context.getShaderPrecisionFormat(shadertype,precisiontype);
};
lime.graphics.opengl.GL.getShaderSource = function(shader) {
	return lime.graphics.opengl.GL.context.getShaderSource(shader);
};
lime.graphics.opengl.GL.getSupportedExtensions = function() {
	return lime.graphics.opengl.GL.context.getSupportedExtensions();
};
lime.graphics.opengl.GL.getTexParameter = function(target,pname) {
	return lime.graphics.opengl.GL.context.getTexParameter(target,pname);
};
lime.graphics.opengl.GL.getUniform = function(program,location) {
	return lime.graphics.opengl.GL.context.getUniform(program,location);
};
lime.graphics.opengl.GL.getUniformLocation = function(program,name) {
	return lime.graphics.opengl.GL.context.getUniformLocation(program,name);
};
lime.graphics.opengl.GL.getVertexAttrib = function(index,pname) {
	return lime.graphics.opengl.GL.context.getVertexAttrib(index,pname);
};
lime.graphics.opengl.GL.getVertexAttribOffset = function(index,pname) {
	return lime.graphics.opengl.GL.context.getVertexAttribOffset(index,pname);
};
lime.graphics.opengl.GL.hint = function(target,mode) {
	lime.graphics.opengl.GL.context.hint(target,mode);
};
lime.graphics.opengl.GL.isBuffer = function(buffer) {
	return lime.graphics.opengl.GL.context.isBuffer(buffer);
};
lime.graphics.opengl.GL.isContextLost = function() {
	return lime.graphics.opengl.GL.context.isContextLost();
};
lime.graphics.opengl.GL.isEnabled = function(cap) {
	return lime.graphics.opengl.GL.context.isEnabled(cap);
};
lime.graphics.opengl.GL.isFramebuffer = function(framebuffer) {
	return lime.graphics.opengl.GL.context.isFramebuffer(framebuffer);
};
lime.graphics.opengl.GL.isProgram = function(program) {
	return lime.graphics.opengl.GL.context.isProgram(program);
};
lime.graphics.opengl.GL.isRenderbuffer = function(renderbuffer) {
	return lime.graphics.opengl.GL.context.isRenderbuffer(renderbuffer);
};
lime.graphics.opengl.GL.isShader = function(shader) {
	return lime.graphics.opengl.GL.context.isShader(shader);
};
lime.graphics.opengl.GL.isTexture = function(texture) {
	return lime.graphics.opengl.GL.context.isTexture(texture);
};
lime.graphics.opengl.GL.lineWidth = function(width) {
	lime.graphics.opengl.GL.context.lineWidth(width);
};
lime.graphics.opengl.GL.linkProgram = function(program) {
	lime.graphics.opengl.GL.context.linkProgram(program);
};
lime.graphics.opengl.GL.pixelStorei = function(pname,param) {
	lime.graphics.opengl.GL.context.pixelStorei(pname,param);
};
lime.graphics.opengl.GL.polygonOffset = function(factor,units) {
	lime.graphics.opengl.GL.context.polygonOffset(factor,units);
};
lime.graphics.opengl.GL.readPixels = function(x,y,width,height,format,type,pixels) {
	lime.graphics.opengl.GL.context.readPixels(x,y,width,height,format,type,pixels);
};
lime.graphics.opengl.GL.renderbufferStorage = function(target,internalformat,width,height) {
	lime.graphics.opengl.GL.context.renderbufferStorage(target,internalformat,width,height);
};
lime.graphics.opengl.GL.sampleCoverage = function(value,invert) {
	lime.graphics.opengl.GL.context.sampleCoverage(value,invert);
};
lime.graphics.opengl.GL.scissor = function(x,y,width,height) {
	lime.graphics.opengl.GL.context.scissor(x,y,width,height);
};
lime.graphics.opengl.GL.shaderSource = function(shader,source) {
	lime.graphics.opengl.GL.context.shaderSource(shader,source);
};
lime.graphics.opengl.GL.stencilFunc = function(func,ref,mask) {
	lime.graphics.opengl.GL.context.stencilFunc(func,ref,mask);
};
lime.graphics.opengl.GL.stencilFuncSeparate = function(face,func,ref,mask) {
	lime.graphics.opengl.GL.context.stencilFuncSeparate(face,func,ref,mask);
};
lime.graphics.opengl.GL.stencilMask = function(mask) {
	lime.graphics.opengl.GL.context.stencilMask(mask);
};
lime.graphics.opengl.GL.stencilMaskSeparate = function(face,mask) {
	lime.graphics.opengl.GL.context.stencilMaskSeparate(face,mask);
};
lime.graphics.opengl.GL.stencilOp = function(fail,zfail,zpass) {
	lime.graphics.opengl.GL.context.stencilOp(fail,zfail,zpass);
};
lime.graphics.opengl.GL.stencilOpSeparate = function(face,fail,zfail,zpass) {
	lime.graphics.opengl.GL.context.stencilOpSeparate(face,fail,zfail,zpass);
};
lime.graphics.opengl.GL.texImage2D = function(target,level,internalformat,width,height,border,format,type,pixels) {
	lime.graphics.opengl.GL.context.texImage2D(target,level,internalformat,width,height,border,format,type,pixels);
};
lime.graphics.opengl.GL.texParameterf = function(target,pname,param) {
	lime.graphics.opengl.GL.context.texParameterf(target,pname,param);
};
lime.graphics.opengl.GL.texParameteri = function(target,pname,param) {
	lime.graphics.opengl.GL.context.texParameteri(target,pname,param);
};
lime.graphics.opengl.GL.texSubImage2D = function(target,level,xoffset,yoffset,width,height,format,type,pixels) {
	lime.graphics.opengl.GL.context.texSubImage2D(target,level,xoffset,yoffset,width,height,format,type,pixels);
};
lime.graphics.opengl.GL.uniform1f = function(location,x) {
	lime.graphics.opengl.GL.context.uniform1f(location,x);
};
lime.graphics.opengl.GL.uniform1fv = function(location,x) {
	lime.graphics.opengl.GL.context.uniform1fv(location,x);
};
lime.graphics.opengl.GL.uniform1i = function(location,x) {
	lime.graphics.opengl.GL.context.uniform1i(location,x);
};
lime.graphics.opengl.GL.uniform1iv = function(location,v) {
	lime.graphics.opengl.GL.context.uniform1iv(location,v);
};
lime.graphics.opengl.GL.uniform2f = function(location,x,y) {
	lime.graphics.opengl.GL.context.uniform2f(location,x,y);
};
lime.graphics.opengl.GL.uniform2fv = function(location,v) {
	lime.graphics.opengl.GL.context.uniform2fv(location,v);
};
lime.graphics.opengl.GL.uniform2i = function(location,x,y) {
	lime.graphics.opengl.GL.context.uniform2i(location,x,y);
};
lime.graphics.opengl.GL.uniform2iv = function(location,v) {
	lime.graphics.opengl.GL.context.uniform2iv(location,v);
};
lime.graphics.opengl.GL.uniform3f = function(location,x,y,z) {
	lime.graphics.opengl.GL.context.uniform3f(location,x,y,z);
};
lime.graphics.opengl.GL.uniform3fv = function(location,v) {
	lime.graphics.opengl.GL.context.uniform3fv(location,v);
};
lime.graphics.opengl.GL.uniform3i = function(location,x,y,z) {
	lime.graphics.opengl.GL.context.uniform3i(location,x,y,z);
};
lime.graphics.opengl.GL.uniform3iv = function(location,v) {
	lime.graphics.opengl.GL.context.uniform3iv(location,v);
};
lime.graphics.opengl.GL.uniform4f = function(location,x,y,z,w) {
	lime.graphics.opengl.GL.context.uniform4f(location,x,y,z,w);
};
lime.graphics.opengl.GL.uniform4fv = function(location,v) {
	lime.graphics.opengl.GL.context.uniform4fv(location,v);
};
lime.graphics.opengl.GL.uniform4i = function(location,x,y,z,w) {
	lime.graphics.opengl.GL.context.uniform4i(location,x,y,z,w);
};
lime.graphics.opengl.GL.uniform4iv = function(location,v) {
	lime.graphics.opengl.GL.context.uniform4iv(location,v);
};
lime.graphics.opengl.GL.uniformMatrix2fv = function(location,transpose,v) {
	lime.graphics.opengl.GL.context.uniformMatrix2fv(location,transpose,v);
};
lime.graphics.opengl.GL.uniformMatrix3fv = function(location,transpose,v) {
	lime.graphics.opengl.GL.context.uniformMatrix3fv(location,transpose,v);
};
lime.graphics.opengl.GL.uniformMatrix4fv = function(location,transpose,v) {
	lime.graphics.opengl.GL.context.uniformMatrix4fv(location,transpose,v);
};
lime.graphics.opengl.GL.useProgram = function(program) {
	lime.graphics.opengl.GL.context.useProgram(program);
};
lime.graphics.opengl.GL.validateProgram = function(program) {
	lime.graphics.opengl.GL.context.validateProgram(program);
};
lime.graphics.opengl.GL.vertexAttrib1f = function(indx,x) {
	lime.graphics.opengl.GL.context.vertexAttrib1f(indx,x);
};
lime.graphics.opengl.GL.vertexAttrib1fv = function(indx,values) {
	lime.graphics.opengl.GL.context.vertexAttrib1fv(indx,values);
};
lime.graphics.opengl.GL.vertexAttrib2f = function(indx,x,y) {
	lime.graphics.opengl.GL.context.vertexAttrib2f(indx,x,y);
};
lime.graphics.opengl.GL.vertexAttrib2fv = function(indx,values) {
	lime.graphics.opengl.GL.context.vertexAttrib2fv(indx,values);
};
lime.graphics.opengl.GL.vertexAttrib3f = function(indx,x,y,z) {
	lime.graphics.opengl.GL.context.vertexAttrib3f(indx,x,y,z);
};
lime.graphics.opengl.GL.vertexAttrib3fv = function(indx,values) {
	lime.graphics.opengl.GL.context.vertexAttrib3fv(indx,values);
};
lime.graphics.opengl.GL.vertexAttrib4f = function(indx,x,y,z,w) {
	lime.graphics.opengl.GL.context.vertexAttrib4f(indx,x,y,z,w);
};
lime.graphics.opengl.GL.vertexAttrib4fv = function(indx,values) {
	lime.graphics.opengl.GL.context.vertexAttrib4fv(indx,values);
};
lime.graphics.opengl.GL.vertexAttribPointer = function(indx,size,type,normalized,stride,offset) {
	lime.graphics.opengl.GL.context.vertexAttribPointer(indx,size,type,normalized,stride,offset);
};
lime.graphics.opengl.GL.viewport = function(x,y,width,height) {
	lime.graphics.opengl.GL.context.viewport(x,y,width,height);
};
lime.graphics.opengl.GL.get_version = function() {
	return 2;
};
lime.graphics.utils = {};
lime.graphics.utils.ImageCanvasUtil = function() { };
$hxClasses["lime.graphics.utils.ImageCanvasUtil"] = lime.graphics.utils.ImageCanvasUtil;
lime.graphics.utils.ImageCanvasUtil.__name__ = ["lime","graphics","utils","ImageCanvasUtil"];
lime.graphics.utils.ImageCanvasUtil.colorTransform = function(image,rect,colorMatrix) {
	lime.graphics.utils.ImageCanvasUtil.convertToCanvas(image);
	lime.graphics.utils.ImageCanvasUtil.createImageData(image);
	lime.graphics.utils.ImageDataUtil.colorTransform(image,rect,colorMatrix);
};
lime.graphics.utils.ImageCanvasUtil.convertToCanvas = function(image) {
	var buffer = image.buffer;
	if(buffer.__srcImage != null) {
		if(buffer.__srcCanvas == null) {
			lime.graphics.utils.ImageCanvasUtil.createCanvas(image,buffer.__srcImage.width,buffer.__srcImage.height);
			buffer.__srcContext.drawImage(buffer.__srcImage,0,0);
		}
		buffer.__srcImage = null;
	}
};
lime.graphics.utils.ImageCanvasUtil.convertToData = function(image) {
	if(image.buffer.data == null) {
		lime.graphics.utils.ImageCanvasUtil.convertToCanvas(image);
		lime.graphics.utils.ImageCanvasUtil.sync(image);
		lime.graphics.utils.ImageCanvasUtil.createImageData(image);
		image.buffer.__srcCanvas = null;
		image.buffer.__srcContext = null;
	}
};
lime.graphics.utils.ImageCanvasUtil.copyChannel = function(image,sourceImage,sourceRect,destPoint,sourceChannel,destChannel) {
	lime.graphics.utils.ImageCanvasUtil.convertToCanvas(sourceImage);
	lime.graphics.utils.ImageCanvasUtil.createImageData(sourceImage);
	lime.graphics.utils.ImageCanvasUtil.convertToCanvas(image);
	lime.graphics.utils.ImageCanvasUtil.createImageData(image);
	lime.graphics.utils.ImageDataUtil.copyChannel(image,sourceImage,sourceRect,destPoint,sourceChannel,destChannel);
};
lime.graphics.utils.ImageCanvasUtil.copyPixels = function(image,sourceImage,sourceRect,destPoint,alphaImage,alphaPoint,mergeAlpha) {
	if(mergeAlpha == null) mergeAlpha = false;
	if(alphaImage != null && alphaImage.get_transparent()) {
		if(alphaPoint == null) alphaPoint = new lime.math.Vector2();
		var tempData = image.clone();
		tempData.copyChannel(alphaImage,new lime.math.Rectangle(alphaPoint.x,alphaPoint.y,sourceRect.width,sourceRect.height),new lime.math.Vector2(sourceRect.x,sourceRect.y),lime.graphics.ImageChannel.ALPHA,lime.graphics.ImageChannel.ALPHA);
		sourceImage = tempData;
	}
	lime.graphics.utils.ImageCanvasUtil.sync(image);
	if(!mergeAlpha) {
		if(image.get_transparent() && sourceImage.get_transparent()) image.buffer.__srcContext.clearRect(destPoint.x + image.offsetX,destPoint.y + image.offsetY,sourceRect.width + image.offsetX,sourceRect.height + image.offsetY);
	}
	lime.graphics.utils.ImageCanvasUtil.sync(sourceImage);
	if(sourceImage.buffer.get_src() != null) image.buffer.__srcContext.drawImage(sourceImage.buffer.get_src(),sourceRect.x + sourceImage.offsetX | 0,sourceRect.y + sourceImage.offsetY | 0,sourceRect.width | 0,sourceRect.height | 0,destPoint.x + image.offsetX | 0,destPoint.y + image.offsetY | 0,sourceRect.width | 0,sourceRect.height | 0);
};
lime.graphics.utils.ImageCanvasUtil.createCanvas = function(image,width,height) {
	var buffer = image.buffer;
	if(buffer.__srcCanvas == null) {
		buffer.__srcCanvas = window.document.createElement("canvas");
		buffer.__srcCanvas.width = width;
		buffer.__srcCanvas.height = height;
		if(!image.get_transparent()) {
			if(!image.get_transparent()) buffer.__srcCanvas.setAttribute("moz-opaque","true");
			buffer.__srcContext = buffer.__srcCanvas.getContext ("2d", { alpha: false });
		} else buffer.__srcContext = buffer.__srcCanvas.getContext("2d");
		buffer.__srcContext.mozImageSmoothingEnabled = false;
		buffer.__srcContext.webkitImageSmoothingEnabled = false;
		buffer.__srcContext.imageSmoothingEnabled = false;
	}
};
lime.graphics.utils.ImageCanvasUtil.createImageData = function(image) {
	var buffer = image.buffer;
	if(buffer.data == null) {
		buffer.__srcImageData = buffer.__srcContext.getImageData(0,0,buffer.width,buffer.height);
		buffer.data = new Uint8Array(buffer.__srcImageData.data.buffer);
	}
};
lime.graphics.utils.ImageCanvasUtil.fillRect = function(image,rect,color) {
	lime.graphics.utils.ImageCanvasUtil.convertToCanvas(image);
	lime.graphics.utils.ImageCanvasUtil.sync(image);
	if(rect.x == 0 && rect.y == 0 && rect.width == image.width && rect.height == image.height) {
		if(image.get_transparent() && (color & -16777216) == 0) {
			image.buffer.__srcCanvas.width = image.buffer.width;
			return;
		}
	}
	var a;
	if(image.get_transparent()) a = (color & -16777216) >>> 24; else a = 255;
	var r = (color & 16711680) >>> 16;
	var g = (color & 65280) >>> 8;
	var b = color & 255;
	image.buffer.__srcContext.fillStyle = "rgba(" + r + ", " + g + ", " + b + ", " + a / 255 + ")";
	image.buffer.__srcContext.fillRect(rect.x + image.offsetX,rect.y + image.offsetY,rect.width + image.offsetX,rect.height + image.offsetY);
};
lime.graphics.utils.ImageCanvasUtil.floodFill = function(image,x,y,color) {
	lime.graphics.utils.ImageCanvasUtil.convertToCanvas(image);
	lime.graphics.utils.ImageCanvasUtil.createImageData(image);
	lime.graphics.utils.ImageDataUtil.floodFill(image,x,y,color);
};
lime.graphics.utils.ImageCanvasUtil.getPixel = function(image,x,y) {
	lime.graphics.utils.ImageCanvasUtil.convertToCanvas(image);
	lime.graphics.utils.ImageCanvasUtil.createImageData(image);
	return lime.graphics.utils.ImageDataUtil.getPixel(image,x,y);
};
lime.graphics.utils.ImageCanvasUtil.getPixel32 = function(image,x,y) {
	lime.graphics.utils.ImageCanvasUtil.convertToCanvas(image);
	lime.graphics.utils.ImageCanvasUtil.createImageData(image);
	return lime.graphics.utils.ImageDataUtil.getPixel32(image,x,y);
};
lime.graphics.utils.ImageCanvasUtil.getPixels = function(image,rect) {
	lime.graphics.utils.ImageCanvasUtil.convertToCanvas(image);
	lime.graphics.utils.ImageCanvasUtil.createImageData(image);
	return lime.graphics.utils.ImageDataUtil.getPixels(image,rect);
};
lime.graphics.utils.ImageCanvasUtil.merge = function(image,sourceImage,sourceRect,destPoint,redMultiplier,greenMultiplier,blueMultiplier,alphaMultiplier) {
	lime.graphics.utils.ImageCanvasUtil.convertToCanvas(sourceImage);
	lime.graphics.utils.ImageCanvasUtil.createImageData(sourceImage);
	lime.graphics.utils.ImageCanvasUtil.convertToCanvas(image);
	lime.graphics.utils.ImageCanvasUtil.createImageData(image);
	lime.graphics.utils.ImageDataUtil.merge(image,sourceImage,sourceRect,destPoint,redMultiplier,greenMultiplier,blueMultiplier,alphaMultiplier);
};
lime.graphics.utils.ImageCanvasUtil.resize = function(image,newWidth,newHeight) {
	var buffer = image.buffer;
	if(buffer.__srcCanvas == null) {
		lime.graphics.utils.ImageCanvasUtil.createCanvas(image,newWidth,newHeight);
		buffer.__srcContext.drawImage(buffer.get_src(),0,0,newWidth,newHeight);
	} else {
		lime.graphics.utils.ImageCanvasUtil.sync(image);
		var sourceCanvas = buffer.__srcCanvas;
		buffer.__srcCanvas = null;
		lime.graphics.utils.ImageCanvasUtil.createCanvas(image,newWidth,newHeight);
		buffer.__srcContext.drawImage(sourceCanvas,0,0,newWidth,newHeight);
	}
};
lime.graphics.utils.ImageCanvasUtil.setPixel = function(image,x,y,color) {
	lime.graphics.utils.ImageCanvasUtil.convertToCanvas(image);
	lime.graphics.utils.ImageCanvasUtil.createImageData(image);
	lime.graphics.utils.ImageDataUtil.setPixel(image,x,y,color);
};
lime.graphics.utils.ImageCanvasUtil.setPixel32 = function(image,x,y,color) {
	lime.graphics.utils.ImageCanvasUtil.convertToCanvas(image);
	lime.graphics.utils.ImageCanvasUtil.createImageData(image);
	lime.graphics.utils.ImageDataUtil.setPixel32(image,x,y,color);
};
lime.graphics.utils.ImageCanvasUtil.setPixels = function(image,rect,byteArray) {
	lime.graphics.utils.ImageCanvasUtil.convertToCanvas(image);
	lime.graphics.utils.ImageCanvasUtil.createImageData(image);
	lime.graphics.utils.ImageDataUtil.setPixels(image,rect,byteArray);
};
lime.graphics.utils.ImageCanvasUtil.sync = function(image) {
	if(image.dirty && image.type != lime.graphics.ImageType.DATA) {
		image.buffer.__srcContext.putImageData(image.buffer.__srcImageData,0,0);
		image.buffer.data = null;
		image.dirty = false;
	}
};
lime.graphics.utils.ImageDataUtil = function() { };
$hxClasses["lime.graphics.utils.ImageDataUtil"] = lime.graphics.utils.ImageDataUtil;
lime.graphics.utils.ImageDataUtil.__name__ = ["lime","graphics","utils","ImageDataUtil"];
lime.graphics.utils.ImageDataUtil.__alpha16 = null;
lime.graphics.utils.ImageDataUtil.__clamp = null;
lime.graphics.utils.ImageDataUtil.colorTransform = function(image,rect,colorMatrix) {
	var data = image.buffer.data;
	var stride = image.buffer.width * 4;
	var offset;
	var rowStart = Std["int"](rect.get_top() + image.offsetY);
	var rowEnd = Std["int"](rect.get_bottom() + image.offsetY);
	var columnStart = Std["int"](rect.get_left() + image.offsetX);
	var columnEnd = Std["int"](rect.get_right() + image.offsetX);
	var r;
	var g;
	var b;
	var a;
	var ex = 0;
	var _g = rowStart;
	while(_g < rowEnd) {
		var row = _g++;
		var _g1 = columnStart;
		while(_g1 < columnEnd) {
			var column = _g1++;
			offset = row * stride + column * 4;
			a = data[offset + 3] * colorMatrix[18] + colorMatrix[19] * 255 | 0;
			if(a > 255) ex = a - 255; else ex = 0;
			b = data[offset + 2] * colorMatrix[12] + colorMatrix[14] * 255 + ex | 0;
			if(b > 255) ex = b - 255; else ex = 0;
			g = data[offset + 1] * colorMatrix[6] + colorMatrix[9] * 255 + ex | 0;
			if(g > 255) ex = g - 255; else ex = 0;
			r = data[offset] * colorMatrix[0] + colorMatrix[4] * 255 + ex | 0;
			if(r > 255) data[offset] = 255; else data[offset] = r;
			if(g > 255) data[offset + 1] = 255; else data[offset + 1] = g;
			if(b > 255) data[offset + 2] = 255; else data[offset + 2] = b;
			if(a > 255) data[offset + 3] = 255; else data[offset + 3] = a;
		}
	}
	image.dirty = true;
};
lime.graphics.utils.ImageDataUtil.copyChannel = function(image,sourceImage,sourceRect,destPoint,sourceChannel,destChannel) {
	var destIdx;
	switch(destChannel[1]) {
	case 0:
		destIdx = 0;
		break;
	case 1:
		destIdx = 1;
		break;
	case 2:
		destIdx = 2;
		break;
	case 3:
		destIdx = 3;
		break;
	}
	var srcIdx;
	switch(sourceChannel[1]) {
	case 0:
		srcIdx = 0;
		break;
	case 1:
		srcIdx = 1;
		break;
	case 2:
		srcIdx = 2;
		break;
	case 3:
		srcIdx = 3;
		break;
	}
	var srcStride = sourceImage.buffer.width * 4 | 0;
	var srcPosition = (sourceRect.x + sourceImage.offsetX) * 4 + srcStride * (sourceRect.y + sourceImage.offsetY) + srcIdx | 0;
	var srcRowOffset = srcStride - (4 * (sourceRect.width + sourceImage.offsetX) | 0);
	var srcRowEnd = 4 * (sourceRect.x + sourceImage.offsetX + sourceRect.width) | 0;
	var srcData = sourceImage.buffer.data;
	var destStride = image.buffer.width * 4 | 0;
	var destPosition = (destPoint.x + image.offsetX) * 4 + destStride * (destPoint.y + image.offsetY) + destIdx | 0;
	var destRowOffset = destStride - (4 * (sourceRect.width + image.offsetX) | 0);
	var destRowEnd = 4 * (destPoint.x + image.offsetX + sourceRect.width) | 0;
	var destData = image.buffer.data;
	var length = sourceRect.width * sourceRect.height | 0;
	var _g = 0;
	while(_g < length) {
		var i = _g++;
		destData[destPosition] = srcData[srcPosition];
		srcPosition += 4;
		destPosition += 4;
		if(srcPosition % srcStride > srcRowEnd) srcPosition += srcRowOffset;
		if(destPosition % destStride > destRowEnd) destPosition += destRowOffset;
	}
	image.dirty = true;
};
lime.graphics.utils.ImageDataUtil.copyPixels = function(image,sourceImage,sourceRect,destPoint,alphaImage,alphaPoint,mergeAlpha) {
	if(mergeAlpha == null) mergeAlpha = false;
	if(alphaImage != null && alphaImage.get_transparent()) {
		if(alphaPoint == null) alphaPoint = new lime.math.Vector2();
		var tempData = image.clone();
		tempData.copyChannel(alphaImage,new lime.math.Rectangle(alphaPoint.x,alphaPoint.y,sourceRect.width,sourceRect.height),new lime.math.Vector2(sourceRect.x,sourceRect.y),lime.graphics.ImageChannel.ALPHA,lime.graphics.ImageChannel.ALPHA);
		sourceImage = tempData;
	}
	var rowOffset = destPoint.y + image.offsetY - sourceRect.y - sourceImage.offsetY | 0;
	var columnOffset = destPoint.x + image.offsetX - sourceRect.x - sourceImage.offsetY | 0;
	var sourceData = sourceImage.buffer.data;
	var sourceStride = sourceImage.buffer.width * 4;
	var sourceOffset = 0;
	var data = image.buffer.data;
	var stride = image.buffer.width * 4;
	var offset = 0;
	if(!mergeAlpha || !sourceImage.get_transparent()) {
		var _g1 = Std["int"](sourceRect.get_top() + sourceImage.offsetY);
		var _g = Std["int"](sourceRect.get_bottom() + sourceImage.offsetY);
		while(_g1 < _g) {
			var row = _g1++;
			var _g3 = Std["int"](sourceRect.get_left() + sourceImage.offsetX);
			var _g2 = Std["int"](sourceRect.get_right() + sourceImage.offsetX);
			while(_g3 < _g2) {
				var column = _g3++;
				sourceOffset = row * sourceStride + column * 4;
				offset = (row + rowOffset) * stride + (column + columnOffset) * 4;
				data[offset] = sourceData[sourceOffset];
				data[offset + 1] = sourceData[sourceOffset + 1];
				data[offset + 2] = sourceData[sourceOffset + 2];
				data[offset + 3] = sourceData[sourceOffset + 3];
			}
		}
	} else {
		var sourceAlpha;
		var oneMinusSourceAlpha;
		var _g11 = Std["int"](sourceRect.get_top() + sourceImage.offsetY);
		var _g4 = Std["int"](sourceRect.get_bottom() + sourceImage.offsetY);
		while(_g11 < _g4) {
			var row1 = _g11++;
			var _g31 = Std["int"](sourceRect.get_left() + sourceImage.offsetX);
			var _g21 = Std["int"](sourceRect.get_right() + sourceImage.offsetX);
			while(_g31 < _g21) {
				var column1 = _g31++;
				sourceOffset = row1 * sourceStride + column1 * 4;
				offset = (row1 + rowOffset) * stride + (column1 + columnOffset) * 4;
				sourceAlpha = sourceData[sourceOffset + 3] / 255;
				oneMinusSourceAlpha = 1 - sourceAlpha;
				data[offset] = lime.graphics.utils.ImageDataUtil.__clamp[sourceData[sourceOffset] + data[offset] * oneMinusSourceAlpha | 0];
				data[offset + 1] = lime.graphics.utils.ImageDataUtil.__clamp[sourceData[sourceOffset + 1] + data[offset + 1] * oneMinusSourceAlpha | 0];
				data[offset + 2] = lime.graphics.utils.ImageDataUtil.__clamp[sourceData[sourceOffset + 2] + data[offset + 2] * oneMinusSourceAlpha | 0];
				data[offset + 3] = lime.graphics.utils.ImageDataUtil.__clamp[sourceData[sourceOffset + 3] + data[offset + 3] * oneMinusSourceAlpha | 0];
			}
		}
	}
	image.dirty = true;
};
lime.graphics.utils.ImageDataUtil.fillRect = function(image,rect,color) {
	var a;
	if(image.get_transparent()) a = (color & -16777216) >>> 24; else a = 255;
	var r = (color & 16711680) >>> 16;
	var g = (color & 65280) >>> 8;
	var b = color & 255;
	var rgba = r | g << 8 | b << 16 | a << 24;
	var data = image.buffer.data;
	if(rect.width == image.buffer.width && rect.height == image.buffer.height && rect.x == 0 && rect.y == 0 && image.offsetX == 0 && image.offsetY == 0) {
		var length = image.buffer.width * image.buffer.height;
		var j = 0;
		var _g = 0;
		while(_g < length) {
			var i = _g++;
			j = i * 4;
			data[j] = r;
			data[j + 1] = g;
			data[j + 2] = b;
			data[j + 3] = a;
		}
	} else {
		var stride = image.buffer.width * 4;
		var offset;
		var rowStart = rect.y + image.offsetY | 0;
		var rowEnd = Std["int"](rect.get_bottom() + image.offsetY);
		var columnStart = rect.x + image.offsetX | 0;
		var columnEnd = Std["int"](rect.get_right() + image.offsetX);
		var _g1 = rowStart;
		while(_g1 < rowEnd) {
			var row = _g1++;
			var _g11 = columnStart;
			while(_g11 < columnEnd) {
				var column = _g11++;
				offset = row * stride + column * 4;
				data[offset] = r;
				data[offset + 1] = g;
				data[offset + 2] = b;
				data[offset + 3] = a;
			}
		}
	}
	image.dirty = true;
};
lime.graphics.utils.ImageDataUtil.floodFill = function(image,x,y,color) {
	var data = image.buffer.data;
	var offset = (y + image.offsetY) * (image.buffer.width * 4) + (x + image.offsetX) * 4;
	var hitColorR = data[offset];
	var hitColorG = data[offset + 1];
	var hitColorB = data[offset + 2];
	var hitColorA;
	if(image.get_transparent()) hitColorA = data[offset + 3]; else hitColorA = 255;
	var r = (color & 16711680) >>> 16;
	var g = (color & 65280) >>> 8;
	var b = color & 255;
	var a;
	if(image.get_transparent()) a = (color & -16777216) >>> 24; else a = 255;
	if(hitColorR == r && hitColorG == g && hitColorB == b && hitColorA == a) return;
	var dx = [0,-1,1,0];
	var dy = [-1,0,0,1];
	var minX = -image.offsetX;
	var minY = -image.offsetY;
	var maxX = minX + image.width;
	var maxY = minY + image.height;
	var queue = new Array();
	queue.push(x);
	queue.push(y);
	while(queue.length > 0) {
		var curPointY = queue.pop();
		var curPointX = queue.pop();
		var _g = 0;
		while(_g < 4) {
			var i = _g++;
			var nextPointX = curPointX + dx[i];
			var nextPointY = curPointY + dy[i];
			if(nextPointX < minX || nextPointY < minY || nextPointX >= maxX || nextPointY >= maxY) continue;
			var nextPointOffset = (nextPointY * image.width + nextPointX) * 4;
			if(data[nextPointOffset] == hitColorR && data[nextPointOffset + 1] == hitColorG && data[nextPointOffset + 2] == hitColorB && data[nextPointOffset + 3] == hitColorA) {
				data[nextPointOffset] = r;
				data[nextPointOffset + 1] = g;
				data[nextPointOffset + 2] = b;
				data[nextPointOffset + 3] = a;
				queue.push(nextPointX);
				queue.push(nextPointY);
			}
		}
	}
	image.dirty = true;
};
lime.graphics.utils.ImageDataUtil.getPixel = function(image,x,y) {
	var data = image.buffer.data;
	var offset = 4 * (y + image.offsetY) * image.buffer.width + (x + image.offsetX) * 4;
	if(image.get_premultiplied()) {
		var unmultiply = 255.0 / data[offset + 3];
		haxe.Log.trace(unmultiply,{ fileName : "ImageDataUtil.hx", lineNumber : 364, className : "lime.graphics.utils.ImageDataUtil", methodName : "getPixel"});
		return lime.graphics.utils.ImageDataUtil.__clamp[data[offset] * unmultiply | 0] << 16 | lime.graphics.utils.ImageDataUtil.__clamp[data[offset + 1] * unmultiply | 0] << 8 | lime.graphics.utils.ImageDataUtil.__clamp[data[offset + 2] * unmultiply | 0];
	} else return data[offset] << 16 | data[offset + 1] << 8 | data[offset + 2];
};
lime.graphics.utils.ImageDataUtil.getPixel32 = function(image,x,y) {
	var data = image.buffer.data;
	var offset = 4 * (y + image.offsetY) * image.buffer.width + (x + image.offsetX) * 4;
	var a;
	if(image.get_transparent()) a = data[offset + 3]; else a = 255;
	if(image.get_premultiplied() && a != 0) {
		var unmultiply = 255.0 / a;
		return a << 24 | (function($this) {
			var $r;
			var index = Math.round(data[offset] * unmultiply);
			$r = lime.graphics.utils.ImageDataUtil.__clamp[index];
			return $r;
		}(this)) << 16 | lime.graphics.utils.ImageDataUtil.__clamp[data[offset + 1] * unmultiply | 0] << 8 | lime.graphics.utils.ImageDataUtil.__clamp[data[offset + 2] * unmultiply | 0];
	} else return a << 24 | data[offset] << 16 | data[offset + 1] << 8 | data[offset + 2];
};
lime.graphics.utils.ImageDataUtil.getPixels = function(image,rect) {
	var byteArray = new lime.utils.ByteArray(rect.width * rect.height * 4 | 0);
	var srcData = image.buffer.data;
	var srcStride = image.buffer.width * 4 | 0;
	var srcPosition = rect.x * 4 + srcStride * rect.y | 0;
	var srcRowOffset = srcStride - (4 * rect.width | 0);
	var srcRowEnd = 4 * (rect.x + rect.width) | 0;
	var length = rect.width * rect.height | 0;
	byteArray.set_length(length * 4);
	var _g = 0;
	while(_g < length) {
		var i = _g++;
		byteArray.__set(i * 4 + 1,srcData[srcPosition++]);
		byteArray.__set(i * 4 + 2,srcData[srcPosition++]);
		byteArray.__set(i * 4 + 3,srcData[srcPosition++]);
		byteArray.__set(i * 4,srcData[srcPosition++]);
		if(srcPosition % srcStride > srcRowEnd) srcPosition += srcRowOffset;
	}
	byteArray.position = 0;
	return byteArray;
};
lime.graphics.utils.ImageDataUtil.merge = function(image,sourceImage,sourceRect,destPoint,redMultiplier,greenMultiplier,blueMultiplier,alphaMultiplier) {
	var rowOffset = destPoint.y + image.offsetY - sourceRect.y - sourceImage.offsetY | 0;
	var columnOffset = destPoint.x + image.offsetX - sourceRect.x - sourceImage.offsetY | 0;
	var sourceData = sourceImage.buffer.data;
	var sourceStride = sourceImage.buffer.width * 4;
	var sourceOffset = 0;
	var data = image.buffer.data;
	var stride = image.buffer.width * 4;
	var offset = 0;
	var _g1 = Std["int"](sourceRect.get_top() + sourceImage.offsetY);
	var _g = Std["int"](sourceRect.get_bottom() + sourceImage.offsetY);
	while(_g1 < _g) {
		var row = _g1++;
		var _g3 = Std["int"](sourceRect.get_left() + sourceImage.offsetX);
		var _g2 = Std["int"](sourceRect.get_right() + sourceImage.offsetX);
		while(_g3 < _g2) {
			var column = _g3++;
			sourceOffset = row * sourceStride + column * 4;
			offset = (row + rowOffset) * stride + (column + columnOffset) * 4;
			data[offset] = (sourceData[offset] * redMultiplier + data[offset] * (256 - redMultiplier)) / 256 | 0;
			data[offset + 1] = (sourceData[offset + 1] * greenMultiplier + data[offset + 1] * (256 - greenMultiplier)) / 256 | 0;
			data[offset + 2] = (sourceData[offset + 2] * blueMultiplier + data[offset + 2] * (256 - blueMultiplier)) / 256 | 0;
			data[offset + 3] = (sourceData[offset + 3] * alphaMultiplier + data[offset + 3] * (256 - alphaMultiplier)) / 256 | 0;
		}
	}
	image.dirty = true;
};
lime.graphics.utils.ImageDataUtil.multiplyAlpha = function(image) {
	var data = image.buffer.data;
	if(data == null) return;
	var index;
	var a16;
	var length = data.length / 4 | 0;
	var _g = 0;
	while(_g < length) {
		var i = _g++;
		index = i * 4;
		var a161 = lime.graphics.utils.ImageDataUtil.__alpha16[data[index + 3]];
		data[index] = data[index] * a161 >> 16;
		data[index + 1] = data[index + 1] * a161 >> 16;
		data[index + 2] = data[index + 2] * a161 >> 16;
	}
	image.buffer.premultiplied = true;
	image.dirty = true;
};
lime.graphics.utils.ImageDataUtil.resize = function(image,newWidth,newHeight) {
	var buffer = image.buffer;
	var newBuffer = new lime.graphics.ImageBuffer(new Uint8Array(newWidth * newHeight * 4),newWidth,newHeight);
	var imageWidth = image.width;
	var imageHeight = image.height;
	var data = image.get_data();
	var newData = newBuffer.data;
	var sourceIndex;
	var sourceIndexX;
	var sourceIndexY;
	var sourceIndexXY;
	var index;
	var sourceX;
	var sourceY;
	var u;
	var v;
	var uRatio;
	var vRatio;
	var uOpposite;
	var vOpposite;
	var _g = 0;
	while(_g < newHeight) {
		var y = _g++;
		var _g1 = 0;
		while(_g1 < newWidth) {
			var x = _g1++;
			u = (x + 0.5) / newWidth * imageWidth - 0.5;
			v = (y + 0.5) / newHeight * imageHeight - 0.5;
			sourceX = u | 0;
			sourceY = v | 0;
			sourceIndex = (sourceY * imageWidth + sourceX) * 4;
			if(sourceX < imageWidth - 1) sourceIndexX = sourceIndex + 4; else sourceIndexX = sourceIndex;
			if(sourceY < imageHeight - 1) sourceIndexY = sourceIndex + imageWidth * 4; else sourceIndexY = sourceIndex;
			if(sourceIndexX != sourceIndex) sourceIndexXY = sourceIndexY + 4; else sourceIndexXY = sourceIndexY;
			index = (y * newWidth + x) * 4;
			uRatio = u - sourceX;
			vRatio = v - sourceY;
			uOpposite = 1 - uRatio;
			vOpposite = 1 - vRatio;
			newData[index] = (data[sourceIndex] * uOpposite + data[sourceIndexX] * uRatio) * vOpposite + (data[sourceIndexY] * uOpposite + data[sourceIndexXY] * uRatio) * vRatio | 0;
			newData[index + 1] = (data[sourceIndex + 1] * uOpposite + data[sourceIndexX + 1] * uRatio) * vOpposite + (data[sourceIndexY + 1] * uOpposite + data[sourceIndexXY + 1] * uRatio) * vRatio | 0;
			newData[index + 2] = (data[sourceIndex + 2] * uOpposite + data[sourceIndexX + 2] * uRatio) * vOpposite + (data[sourceIndexY + 2] * uOpposite + data[sourceIndexXY + 2] * uRatio) * vRatio | 0;
			if(data[sourceIndexX + 3] == 0 || data[sourceIndexY + 3] == 0 || data[sourceIndexXY + 3] == 0) newData[index + 3] = 0; else newData[index + 3] = data[sourceIndex + 3];
		}
	}
	buffer.data = newData;
	buffer.width = newWidth;
	buffer.height = newHeight;
};
lime.graphics.utils.ImageDataUtil.resizeBuffer = function(image,newWidth,newHeight) {
	var buffer = image.buffer;
	var data = image.get_data();
	var newData = new Uint8Array(newWidth * newHeight * 4);
	var sourceIndex;
	var index;
	var _g1 = 0;
	var _g = buffer.height;
	while(_g1 < _g) {
		var y = _g1++;
		var _g3 = 0;
		var _g2 = buffer.width;
		while(_g3 < _g2) {
			var x = _g3++;
			sourceIndex = (y * buffer.width + x) * 4;
			index = (y * newWidth + x) * 4;
			newData[index] = data[sourceIndex];
			newData[index + 1] = data[sourceIndex + 1];
			newData[index + 2] = data[sourceIndex + 2];
			newData[index + 3] = data[sourceIndex + 3];
		}
	}
	buffer.data = newData;
	buffer.width = newWidth;
	buffer.height = newHeight;
};
lime.graphics.utils.ImageDataUtil.setPixel = function(image,x,y,color) {
	var data = image.buffer.data;
	var offset = 4 * (y + image.offsetY) * image.buffer.width + (x + image.offsetX) * 4;
	data[offset] = (color & 16711680) >>> 16;
	data[offset + 1] = (color & 65280) >>> 8;
	data[offset + 2] = color & 255;
	if(image.get_transparent()) data[offset + 3] = 255;
	image.dirty = true;
};
lime.graphics.utils.ImageDataUtil.setPixel32 = function(image,x,y,color) {
	var data = image.buffer.data;
	var offset = 4 * (y + image.offsetY) * image.buffer.width + (x + image.offsetX) * 4;
	var a;
	if(image.get_transparent()) a = (color & -16777216) >>> 24; else a = 255;
	if(image.get_transparent() && image.get_premultiplied()) {
		var a16 = lime.graphics.utils.ImageDataUtil.__alpha16[a];
		data[offset] = ((color & 16711680) >>> 16) * a16 >> 16;
		data[offset + 1] = ((color & 65280) >>> 8) * a16 >> 16;
		data[offset + 2] = (color & 255) * a16 >> 16;
		data[offset + 3] = a;
	} else {
		data[offset] = (color & 16711680) >>> 16;
		data[offset + 1] = (color & 65280) >>> 8;
		data[offset + 2] = color & 255;
		data[offset + 3] = a;
	}
	image.dirty = true;
};
lime.graphics.utils.ImageDataUtil.setPixels = function(image,rect,byteArray) {
	var len = Math.round(rect.width * rect.height);
	var data = image.buffer.data;
	var offset = Math.round(image.buffer.width * (rect.y + image.offsetX) + (rect.x + image.offsetY));
	var pos = offset * 4;
	var boundR = Math.round(rect.x + rect.width + image.offsetX);
	var width = image.buffer.width;
	var color;
	var _g = 0;
	while(_g < len) {
		var i = _g++;
		if(pos % (width * 4) >= boundR * 4) pos += (width - boundR) * 4;
		color = byteArray.readUnsignedInt();
		data[pos++] = (color & 16711680) >>> 16;
		data[pos++] = (color & 65280) >>> 8;
		data[pos++] = color & 255;
		data[pos++] = (color & -16777216) >>> 24;
	}
	image.dirty = true;
};
lime.graphics.utils.ImageDataUtil.unmultiplyAlpha = function(image) {
	var data = image.buffer.data;
	var index;
	var a;
	var unmultiply;
	var length = data.length / 4 | 0;
	var _g = 0;
	while(_g < length) {
		var i = _g++;
		index = i * 4;
		a = data[index + 3];
		if(a != 0) {
			unmultiply = 255.0 / a;
			data[index] = lime.graphics.utils.ImageDataUtil.__clamp[data[index] * unmultiply | 0];
			data[index + 1] = lime.graphics.utils.ImageDataUtil.__clamp[data[index + 1] * unmultiply | 0];
			data[index + 2] = lime.graphics.utils.ImageDataUtil.__clamp[data[index + 2] * unmultiply | 0];
		}
	}
	image.buffer.premultiplied = false;
	image.dirty = true;
};
lime.math = {};
lime.math._ColorMatrix = {};
lime.math._ColorMatrix.ColorMatrix_Impl_ = function() { };
$hxClasses["lime.math._ColorMatrix.ColorMatrix_Impl_"] = lime.math._ColorMatrix.ColorMatrix_Impl_;
lime.math._ColorMatrix.ColorMatrix_Impl_.__name__ = ["lime","math","_ColorMatrix","ColorMatrix_Impl_"];
lime.math._ColorMatrix.ColorMatrix_Impl_.__properties__ = {set_redOffset:"set_redOffset",get_redOffset:"get_redOffset",set_redMultiplier:"set_redMultiplier",get_redMultiplier:"get_redMultiplier",set_greenOffset:"set_greenOffset",get_greenOffset:"get_greenOffset",set_greenMultiplier:"set_greenMultiplier",get_greenMultiplier:"get_greenMultiplier",set_color:"set_color",get_color:"get_color",set_blueOffset:"set_blueOffset",get_blueOffset:"get_blueOffset",set_blueMultiplier:"set_blueMultiplier",get_blueMultiplier:"get_blueMultiplier",set_alphaOffset:"set_alphaOffset",get_alphaOffset:"get_alphaOffset",set_alphaMultiplier:"set_alphaMultiplier",get_alphaMultiplier:"get_alphaMultiplier"}
lime.math._ColorMatrix.ColorMatrix_Impl_._new = function(data) {
	var this1;
	if(data != null && data.length == 20) this1 = data; else this1 = new Float32Array(lime.math._ColorMatrix.ColorMatrix_Impl_.__identity);
	return this1;
};
lime.math._ColorMatrix.ColorMatrix_Impl_.clone = function(this1) {
	return lime.math._ColorMatrix.ColorMatrix_Impl_._new(new Float32Array(this1));
};
lime.math._ColorMatrix.ColorMatrix_Impl_.concat = function(this1,second) {
	var _g = this1;
	var value = _g[0] + second[0];
	_g[0] = value;
	value;
	var _g1 = this1;
	var value1 = _g1[6] + second[6];
	_g1[6] = value1;
	value1;
	var _g2 = this1;
	var value2 = _g2[12] + second[12];
	_g2[12] = value2;
	value2;
	var _g3 = this1;
	var value3 = _g3[18] + second[18];
	_g3[18] = value3;
	value3;
};
lime.math._ColorMatrix.ColorMatrix_Impl_.copyFrom = function(this1,other) {
	this1.set(other);
};
lime.math._ColorMatrix.ColorMatrix_Impl_.identity = function(this1) {
	this1[0] = 1;
	this1[1] = 0;
	this1[2] = 0;
	this1[3] = 0;
	this1[4] = 0;
	this1[5] = 0;
	this1[6] = 1;
	this1[7] = 0;
	this1[8] = 0;
	this1[9] = 0;
	this1[10] = 0;
	this1[11] = 0;
	this1[12] = 1;
	this1[13] = 0;
	this1[14] = 0;
	this1[15] = 0;
	this1[16] = 0;
	this1[17] = 0;
	this1[18] = 1;
	this1[19] = 0;
};
lime.math._ColorMatrix.ColorMatrix_Impl_.__toFlashColorTransform = function(this1) {
	return null;
};
lime.math._ColorMatrix.ColorMatrix_Impl_.get_alphaMultiplier = function(this1) {
	return this1[18];
};
lime.math._ColorMatrix.ColorMatrix_Impl_.set_alphaMultiplier = function(this1,value) {
	this1[18] = value;
	return value;
};
lime.math._ColorMatrix.ColorMatrix_Impl_.get_alphaOffset = function(this1) {
	return this1[19] * 255;
};
lime.math._ColorMatrix.ColorMatrix_Impl_.set_alphaOffset = function(this1,value) {
	this1[19] = value / 255;
	return value;
};
lime.math._ColorMatrix.ColorMatrix_Impl_.get_blueMultiplier = function(this1) {
	return this1[12];
};
lime.math._ColorMatrix.ColorMatrix_Impl_.set_blueMultiplier = function(this1,value) {
	this1[12] = value;
	return value;
};
lime.math._ColorMatrix.ColorMatrix_Impl_.get_blueOffset = function(this1) {
	return this1[14] * 255;
};
lime.math._ColorMatrix.ColorMatrix_Impl_.set_blueOffset = function(this1,value) {
	this1[14] = value / 255;
	return value;
};
lime.math._ColorMatrix.ColorMatrix_Impl_.get_color = function(this1) {
	return (this1[4] * 255 | 0) << 16 | (this1[9] * 255 | 0) << 8 | (this1[14] * 255 | 0);
};
lime.math._ColorMatrix.ColorMatrix_Impl_.set_color = function(this1,value) {
	var value1 = value >> 16 & 255;
	this1[4] = value1 / 255;
	value1;
	var value2 = value >> 8 & 255;
	this1[9] = value2 / 255;
	value2;
	var value3 = value & 255;
	this1[14] = value3 / 255;
	value3;
	this1[0] = 0;
	0;
	this1[6] = 0;
	0;
	this1[12] = 0;
	0;
	return lime.math._ColorMatrix.ColorMatrix_Impl_.get_color(this1);
};
lime.math._ColorMatrix.ColorMatrix_Impl_.get_greenMultiplier = function(this1) {
	return this1[6];
};
lime.math._ColorMatrix.ColorMatrix_Impl_.set_greenMultiplier = function(this1,value) {
	this1[6] = value;
	return value;
};
lime.math._ColorMatrix.ColorMatrix_Impl_.get_greenOffset = function(this1) {
	return this1[9] * 255;
};
lime.math._ColorMatrix.ColorMatrix_Impl_.set_greenOffset = function(this1,value) {
	this1[9] = value / 255;
	return value;
};
lime.math._ColorMatrix.ColorMatrix_Impl_.get_redMultiplier = function(this1) {
	return this1[0];
};
lime.math._ColorMatrix.ColorMatrix_Impl_.set_redMultiplier = function(this1,value) {
	this1[0] = value;
	return value;
};
lime.math._ColorMatrix.ColorMatrix_Impl_.get_redOffset = function(this1) {
	return this1[4] * 255;
};
lime.math._ColorMatrix.ColorMatrix_Impl_.set_redOffset = function(this1,value) {
	this1[4] = value / 255;
	return value;
};
lime.math._ColorMatrix.ColorMatrix_Impl_.get = function(this1,index) {
	return this1[index];
};
lime.math._ColorMatrix.ColorMatrix_Impl_.set = function(this1,index,value) {
	this1[index] = value;
	return value;
};
lime.math.Matrix3 = function(a,b,c,d,tx,ty) {
	if(ty == null) ty = 0;
	if(tx == null) tx = 0;
	if(d == null) d = 1;
	if(c == null) c = 0;
	if(b == null) b = 0;
	if(a == null) a = 1;
	this.a = a;
	this.b = b;
	this.c = c;
	this.d = d;
	this.tx = tx;
	this.ty = ty;
};
$hxClasses["lime.math.Matrix3"] = lime.math.Matrix3;
lime.math.Matrix3.__name__ = ["lime","math","Matrix3"];
lime.math.Matrix3.prototype = {
	a: null
	,b: null
	,c: null
	,d: null
	,tx: null
	,ty: null
	,clone: function() {
		return new lime.math.Matrix3(this.a,this.b,this.c,this.d,this.tx,this.ty);
	}
	,concat: function(m) {
		var a1 = this.a * m.a + this.b * m.c;
		this.b = this.a * m.b + this.b * m.d;
		this.a = a1;
		var c1 = this.c * m.a + this.d * m.c;
		this.d = this.c * m.b + this.d * m.d;
		this.c = c1;
		var tx1 = this.tx * m.a + this.ty * m.c + m.tx;
		this.ty = this.tx * m.b + this.ty * m.d + m.ty;
		this.tx = tx1;
	}
	,copyColumnFrom: function(column,vector4) {
		if(column > 2) throw "Column " + column + " out of bounds (2)"; else if(column == 0) {
			this.a = vector4.x;
			this.c = vector4.y;
		} else if(column == 1) {
			this.b = vector4.x;
			this.d = vector4.y;
		} else {
			this.tx = vector4.x;
			this.ty = vector4.y;
		}
	}
	,copyColumnTo: function(column,vector4) {
		if(column > 2) throw "Column " + column + " out of bounds (2)"; else if(column == 0) {
			vector4.x = this.a;
			vector4.y = this.c;
			vector4.z = 0;
		} else if(column == 1) {
			vector4.x = this.b;
			vector4.y = this.d;
			vector4.z = 0;
		} else {
			vector4.x = this.tx;
			vector4.y = this.ty;
			vector4.z = 1;
		}
	}
	,copyFrom: function(sourceMatrix3) {
		this.a = sourceMatrix3.a;
		this.b = sourceMatrix3.b;
		this.c = sourceMatrix3.c;
		this.d = sourceMatrix3.d;
		this.tx = sourceMatrix3.tx;
		this.ty = sourceMatrix3.ty;
	}
	,copyRowFrom: function(row,vector4) {
		if(row > 2) throw "Row " + row + " out of bounds (2)"; else if(row == 0) {
			this.a = vector4.x;
			this.c = vector4.y;
		} else if(row == 1) {
			this.b = vector4.x;
			this.d = vector4.y;
		} else {
			this.tx = vector4.x;
			this.ty = vector4.y;
		}
	}
	,copyRowTo: function(row,vector4) {
		if(row > 2) throw "Row " + row + " out of bounds (2)"; else if(row == 0) {
			vector4.x = this.a;
			vector4.y = this.b;
			vector4.z = this.tx;
		} else if(row == 1) {
			vector4.x = this.c;
			vector4.y = this.d;
			vector4.z = this.ty;
		} else {
			vector4.x = 0;
			vector4.y = 0;
			vector4.z = 1;
		}
	}
	,createBox: function(scaleX,scaleY,rotation,tx,ty) {
		if(ty == null) ty = 0;
		if(tx == null) tx = 0;
		if(rotation == null) rotation = 0;
		this.a = scaleX;
		this.d = scaleY;
		this.b = rotation;
		this.tx = tx;
		this.ty = ty;
	}
	,createGradientBox: function(width,height,rotation,tx,ty) {
		if(ty == null) ty = 0;
		if(tx == null) tx = 0;
		if(rotation == null) rotation = 0;
		this.a = width / 1638.4;
		this.d = height / 1638.4;
		if(rotation != 0) {
			var cos = Math.cos(rotation);
			var sin = Math.sin(rotation);
			this.b = sin * this.d;
			this.c = -sin * this.a;
			this.a *= cos;
			this.d *= cos;
		} else {
			this.b = 0;
			this.c = 0;
		}
		this.tx = tx + width / 2;
		this.ty = ty + height / 2;
	}
	,equals: function(Matrix3) {
		return Matrix3 != null && this.tx == Matrix3.tx && this.ty == Matrix3.ty && this.a == Matrix3.a && this.b == Matrix3.b && this.c == Matrix3.c && this.d == Matrix3.d;
	}
	,deltaTransformVector2: function(Vector2) {
		return new lime.math.Vector2(Vector2.x * this.a + Vector2.y * this.c,Vector2.x * this.b + Vector2.y * this.d);
	}
	,identity: function() {
		this.a = 1;
		this.b = 0;
		this.c = 0;
		this.d = 1;
		this.tx = 0;
		this.ty = 0;
	}
	,invert: function() {
		var norm = this.a * this.d - this.b * this.c;
		if(norm == 0) {
			this.a = this.b = this.c = this.d = 0;
			this.tx = -this.tx;
			this.ty = -this.ty;
		} else {
			norm = 1.0 / norm;
			var a1 = this.d * norm;
			this.d = this.a * norm;
			this.a = a1;
			this.b *= -norm;
			this.c *= -norm;
			var tx1 = -this.a * this.tx - this.c * this.ty;
			this.ty = -this.b * this.tx - this.d * this.ty;
			this.tx = tx1;
		}
		return this;
	}
	,mult: function(m) {
		var result = new lime.math.Matrix3(this.a,this.b,this.c,this.d,this.tx,this.ty);
		result.concat(m);
		return result;
	}
	,rotate: function(theta) {
		var cos = Math.cos(theta);
		var sin = Math.sin(theta);
		var a1 = this.a * cos - this.b * sin;
		this.b = this.a * sin + this.b * cos;
		this.a = a1;
		var c1 = this.c * cos - this.d * sin;
		this.d = this.c * sin + this.d * cos;
		this.c = c1;
		var tx1 = this.tx * cos - this.ty * sin;
		this.ty = this.tx * sin + this.ty * cos;
		this.tx = tx1;
	}
	,scale: function(sx,sy) {
		this.a *= sx;
		this.b *= sy;
		this.c *= sx;
		this.d *= sy;
		this.tx *= sx;
		this.ty *= sy;
	}
	,setRotation: function(theta,scale) {
		if(scale == null) scale = 1;
		this.a = Math.cos(theta) * scale;
		this.c = Math.sin(theta) * scale;
		this.b = -this.c;
		this.d = this.a;
	}
	,setTo: function(a,b,c,d,tx,ty) {
		this.a = a;
		this.b = b;
		this.c = c;
		this.d = d;
		this.tx = tx;
		this.ty = ty;
	}
	,to3DString: function(roundPixels) {
		if(roundPixels == null) roundPixels = false;
		if(roundPixels) return "Matrix33d(" + this.a + ", " + this.b + ", " + "0, 0, " + this.c + ", " + this.d + ", " + "0, 0, 0, 0, 1, 0, " + (this.tx | 0) + ", " + (this.ty | 0) + ", 0, 1)"; else return "Matrix33d(" + this.a + ", " + this.b + ", " + "0, 0, " + this.c + ", " + this.d + ", " + "0, 0, 0, 0, 1, 0, " + this.tx + ", " + this.ty + ", 0, 1)";
	}
	,toMozString: function() {
		return "Matrix3(" + this.a + ", " + this.b + ", " + this.c + ", " + this.d + ", " + this.tx + "px, " + this.ty + "px)";
	}
	,toString: function() {
		return "Matrix3(" + this.a + ", " + this.b + ", " + this.c + ", " + this.d + ", " + this.tx + ", " + this.ty + ")";
	}
	,transformVector2: function(pos) {
		return new lime.math.Vector2(pos.x * this.a + pos.y * this.c + this.tx,pos.x * this.b + pos.y * this.d + this.ty);
	}
	,translate: function(dx,dy) {
		var m = new lime.math.Matrix3();
		m.tx = dx;
		m.ty = dy;
		this.concat(m);
	}
	,__cleanValues: function() {
		this.a = Math.round(this.a * 1000) / 1000;
		this.b = Math.round(this.b * 1000) / 1000;
		this.c = Math.round(this.c * 1000) / 1000;
		this.d = Math.round(this.d * 1000) / 1000;
		this.tx = Math.round(this.tx * 10) / 10;
		this.ty = Math.round(this.ty * 10) / 10;
	}
	,__transformX: function(pos) {
		return pos.x * this.a + pos.y * this.c + this.tx;
	}
	,__transformY: function(pos) {
		return pos.x * this.b + pos.y * this.d + this.ty;
	}
	,__translateTransformed: function(pos) {
		this.tx = pos.x * this.a + pos.y * this.c + this.tx;
		this.ty = pos.x * this.b + pos.y * this.d + this.ty;
	}
	,__class__: lime.math.Matrix3
};
lime.math._Matrix4 = {};
lime.math._Matrix4.Matrix4_Impl_ = function() { };
$hxClasses["lime.math._Matrix4.Matrix4_Impl_"] = lime.math._Matrix4.Matrix4_Impl_;
lime.math._Matrix4.Matrix4_Impl_.__name__ = ["lime","math","_Matrix4","Matrix4_Impl_"];
lime.math._Matrix4.Matrix4_Impl_.__properties__ = {set_position:"set_position",get_position:"get_position",get_determinant:"get_determinant"}
lime.math._Matrix4.Matrix4_Impl_._new = function(data) {
	var this1;
	if(data != null && data.length == 16) this1 = data; else this1 = new Float32Array(lime.math._Matrix4.Matrix4_Impl_.__identity);
	return this1;
};
lime.math._Matrix4.Matrix4_Impl_.append = function(this1,lhs) {
	var m111 = this1[0];
	var m121 = this1[4];
	var m131 = this1[8];
	var m141 = this1[12];
	var m112 = this1[1];
	var m122 = this1[5];
	var m132 = this1[9];
	var m142 = this1[13];
	var m113 = this1[2];
	var m123 = this1[6];
	var m133 = this1[10];
	var m143 = this1[14];
	var m114 = this1[3];
	var m124 = this1[7];
	var m134 = this1[11];
	var m144 = this1[15];
	var m211 = lime.math._Matrix4.Matrix4_Impl_.get(lhs,0);
	var m221 = lime.math._Matrix4.Matrix4_Impl_.get(lhs,4);
	var m231 = lime.math._Matrix4.Matrix4_Impl_.get(lhs,8);
	var m241 = lime.math._Matrix4.Matrix4_Impl_.get(lhs,12);
	var m212 = lime.math._Matrix4.Matrix4_Impl_.get(lhs,1);
	var m222 = lime.math._Matrix4.Matrix4_Impl_.get(lhs,5);
	var m232 = lime.math._Matrix4.Matrix4_Impl_.get(lhs,9);
	var m242 = lime.math._Matrix4.Matrix4_Impl_.get(lhs,13);
	var m213 = lime.math._Matrix4.Matrix4_Impl_.get(lhs,2);
	var m223 = lime.math._Matrix4.Matrix4_Impl_.get(lhs,6);
	var m233 = lime.math._Matrix4.Matrix4_Impl_.get(lhs,10);
	var m243 = lime.math._Matrix4.Matrix4_Impl_.get(lhs,14);
	var m214 = lime.math._Matrix4.Matrix4_Impl_.get(lhs,3);
	var m224 = lime.math._Matrix4.Matrix4_Impl_.get(lhs,7);
	var m234 = lime.math._Matrix4.Matrix4_Impl_.get(lhs,11);
	var m244 = lime.math._Matrix4.Matrix4_Impl_.get(lhs,15);
	this1[0] = m111 * m211 + m112 * m221 + m113 * m231 + m114 * m241;
	this1[1] = m111 * m212 + m112 * m222 + m113 * m232 + m114 * m242;
	this1[2] = m111 * m213 + m112 * m223 + m113 * m233 + m114 * m243;
	this1[3] = m111 * m214 + m112 * m224 + m113 * m234 + m114 * m244;
	this1[4] = m121 * m211 + m122 * m221 + m123 * m231 + m124 * m241;
	this1[5] = m121 * m212 + m122 * m222 + m123 * m232 + m124 * m242;
	this1[6] = m121 * m213 + m122 * m223 + m123 * m233 + m124 * m243;
	this1[7] = m121 * m214 + m122 * m224 + m123 * m234 + m124 * m244;
	this1[8] = m131 * m211 + m132 * m221 + m133 * m231 + m134 * m241;
	this1[9] = m131 * m212 + m132 * m222 + m133 * m232 + m134 * m242;
	this1[10] = m131 * m213 + m132 * m223 + m133 * m233 + m134 * m243;
	this1[11] = m131 * m214 + m132 * m224 + m133 * m234 + m134 * m244;
	this1[12] = m141 * m211 + m142 * m221 + m143 * m231 + m144 * m241;
	this1[13] = m141 * m212 + m142 * m222 + m143 * m232 + m144 * m242;
	this1[14] = m141 * m213 + m142 * m223 + m143 * m233 + m144 * m243;
	this1[15] = m141 * m214 + m142 * m224 + m143 * m234 + m144 * m244;
};
lime.math._Matrix4.Matrix4_Impl_.appendRotation = function(this1,degrees,axis,pivotPoint) {
	var m = lime.math._Matrix4.Matrix4_Impl_.getAxisRotation(axis.x,axis.y,axis.z,degrees);
	if(pivotPoint != null) {
		var p = pivotPoint;
		lime.math._Matrix4.Matrix4_Impl_.appendTranslation(m,p.x,p.y,p.z);
	}
	lime.math._Matrix4.Matrix4_Impl_.append(this1,m);
};
lime.math._Matrix4.Matrix4_Impl_.appendScale = function(this1,xScale,yScale,zScale) {
	lime.math._Matrix4.Matrix4_Impl_.append(this1,lime.math._Matrix4.Matrix4_Impl_._new(new Float32Array([xScale,0.0,0.0,0.0,0.0,yScale,0.0,0.0,0.0,0.0,zScale,0.0,0.0,0.0,0.0,1.0])));
};
lime.math._Matrix4.Matrix4_Impl_.appendTranslation = function(this1,x,y,z) {
	this1[12] = this1[12] + x;
	this1[13] = this1[13] + y;
	this1[14] = this1[14] + z;
};
lime.math._Matrix4.Matrix4_Impl_.clone = function(this1) {
	return lime.math._Matrix4.Matrix4_Impl_._new(new Float32Array(this1));
};
lime.math._Matrix4.Matrix4_Impl_.copyColumnFrom = function(this1,column,vector) {
	switch(column) {
	case 0:
		this1[0] = vector.x;
		this1[1] = vector.y;
		this1[2] = vector.z;
		this1[3] = vector.w;
		break;
	case 1:
		this1[4] = vector.x;
		this1[5] = vector.y;
		this1[6] = vector.z;
		this1[7] = vector.w;
		break;
	case 2:
		this1[8] = vector.x;
		this1[9] = vector.y;
		this1[10] = vector.z;
		this1[11] = vector.w;
		break;
	case 3:
		this1[12] = vector.x;
		this1[13] = vector.y;
		this1[14] = vector.z;
		this1[15] = vector.w;
		break;
	default:
		throw "Error, Column " + column + " out of bounds [0, ..., 3]";
	}
};
lime.math._Matrix4.Matrix4_Impl_.copyColumnTo = function(this1,column,vector) {
	switch(column) {
	case 0:
		vector.x = this1[0];
		vector.y = this1[1];
		vector.z = this1[2];
		vector.w = this1[3];
		break;
	case 1:
		vector.x = this1[4];
		vector.y = this1[5];
		vector.z = this1[6];
		vector.w = this1[7];
		break;
	case 2:
		vector.x = this1[8];
		vector.y = this1[9];
		vector.z = this1[10];
		vector.w = this1[11];
		break;
	case 3:
		vector.x = this1[12];
		vector.y = this1[13];
		vector.z = this1[14];
		vector.w = this1[15];
		break;
	default:
		throw "Error, Column " + column + " out of bounds [0, ..., 3]";
	}
};
lime.math._Matrix4.Matrix4_Impl_.copyFrom = function(this1,other) {
	this1.set(other);
};
lime.math._Matrix4.Matrix4_Impl_.copythisFrom = function(this1,array,index,transposeValues) {
	if(transposeValues == null) transposeValues = false;
	if(index == null) index = 0;
	if(transposeValues) lime.math._Matrix4.Matrix4_Impl_.transpose(this1);
	var l = array.length - index;
	var _g = 0;
	while(_g < l) {
		var c = _g++;
		this1[c] = array[c + index];
	}
	if(transposeValues) lime.math._Matrix4.Matrix4_Impl_.transpose(this1);
};
lime.math._Matrix4.Matrix4_Impl_.copythisTo = function(this1,array,index,transposeValues) {
	if(transposeValues == null) transposeValues = false;
	if(index == null) index = 0;
	if(transposeValues) lime.math._Matrix4.Matrix4_Impl_.transpose(this1);
	var l = this1.length;
	var _g = 0;
	while(_g < l) {
		var c = _g++;
		array[c + index] = this1[c];
	}
	if(transposeValues) lime.math._Matrix4.Matrix4_Impl_.transpose(this1);
};
lime.math._Matrix4.Matrix4_Impl_.copyRowFrom = function(this1,row,vector) {
	switch(row) {
	case 0:
		this1[0] = vector.x;
		this1[4] = vector.y;
		this1[8] = vector.z;
		this1[12] = vector.w;
		break;
	case 1:
		this1[1] = vector.x;
		this1[5] = vector.y;
		this1[9] = vector.z;
		this1[13] = vector.w;
		break;
	case 2:
		this1[2] = vector.x;
		this1[6] = vector.y;
		this1[10] = vector.z;
		this1[14] = vector.w;
		break;
	case 3:
		this1[3] = vector.x;
		this1[7] = vector.y;
		this1[11] = vector.z;
		this1[15] = vector.w;
		break;
	default:
		throw "Error, Row " + Std.string((function($this) {
			var $r;
			var $int = row;
			$r = $int < 0?4294967296.0 + $int:$int + 0.0;
			return $r;
		}(this))) + " out of bounds [0, ..., 3]";
	}
};
lime.math._Matrix4.Matrix4_Impl_.create2D = function(x,y,scale,rotation) {
	if(rotation == null) rotation = 0;
	if(scale == null) scale = 1;
	var theta = rotation * Math.PI / 180.0;
	var c = Math.cos(theta);
	var s = Math.sin(theta);
	return lime.math._Matrix4.Matrix4_Impl_._new(new Float32Array([c * scale,-s * scale,0,0,s * scale,c * scale,0,0,0,0,1,0,x,y,0,1]));
};
lime.math._Matrix4.Matrix4_Impl_.createABCD = function(a,b,c,d,tx,ty) {
	return lime.math._Matrix4.Matrix4_Impl_._new(new Float32Array([a,b,0,0,c,d,0,0,0,0,1,0,tx,ty,0,1]));
};
lime.math._Matrix4.Matrix4_Impl_.createOrtho = function(x0,x1,y0,y1,zNear,zFar) {
	var sx = 1.0 / (x1 - x0);
	var sy = 1.0 / (y1 - y0);
	var sz = 1.0 / (zFar - zNear);
	return lime.math._Matrix4.Matrix4_Impl_._new(new Float32Array([2.0 * sx,0,0,0,0,2.0 * sy,0,0,0,0,-2. * sz,0,-(x0 + x1) * sx,-(y0 + y1) * sy,-(zNear + zFar) * sz,1]));
};
lime.math._Matrix4.Matrix4_Impl_.copyRowTo = function(this1,row,vector) {
	switch(row) {
	case 0:
		vector.x = this1[0];
		vector.y = this1[4];
		vector.z = this1[8];
		vector.w = this1[12];
		break;
	case 1:
		vector.x = this1[1];
		vector.y = this1[5];
		vector.z = this1[9];
		vector.w = this1[13];
		break;
	case 2:
		vector.x = this1[2];
		vector.y = this1[6];
		vector.z = this1[10];
		vector.w = this1[14];
		break;
	case 3:
		vector.x = this1[3];
		vector.y = this1[7];
		vector.z = this1[11];
		vector.w = this1[15];
		break;
	default:
		throw "Error, Row " + row + " out of bounds [0, ..., 3]";
	}
};
lime.math._Matrix4.Matrix4_Impl_.copyToMatrix4 = function(this1,other) {
	(js.Boot.__cast(other , Float32Array)).set(this1);
};
lime.math._Matrix4.Matrix4_Impl_.deltaTransformVector = function(this1,v) {
	var x = v.x;
	var y = v.y;
	var z = v.z;
	return new lime.math.Vector4(x * this1[0] + y * this1[4] + z * this1[8] + this1[3],x * this1[1] + y * this1[5] + z * this1[9] + this1[7],x * this1[2] + y * this1[6] + z * this1[10] + this1[11],0);
};
lime.math._Matrix4.Matrix4_Impl_.identity = function(this1) {
	this1[0] = 1;
	this1[1] = 0;
	this1[2] = 0;
	this1[3] = 0;
	this1[4] = 0;
	this1[5] = 1;
	this1[6] = 0;
	this1[7] = 0;
	this1[8] = 0;
	this1[9] = 0;
	this1[10] = 1;
	this1[11] = 0;
	this1[12] = 0;
	this1[13] = 0;
	this1[14] = 0;
	this1[15] = 1;
};
lime.math._Matrix4.Matrix4_Impl_.interpolate = function(thisMat,toMat,percent) {
	var m = lime.math._Matrix4.Matrix4_Impl_._new();
	var _g = 0;
	while(_g < 16) {
		var i = _g++;
		lime.math._Matrix4.Matrix4_Impl_.set(m,i,lime.math._Matrix4.Matrix4_Impl_.get(thisMat,i) + (lime.math._Matrix4.Matrix4_Impl_.get(toMat,i) - lime.math._Matrix4.Matrix4_Impl_.get(thisMat,i)) * percent);
	}
	return m;
};
lime.math._Matrix4.Matrix4_Impl_.interpolateTo = function(this1,toMat,percent) {
	var _g = 0;
	while(_g < 16) {
		var i = _g++;
		this1[i] = this1[i] + (lime.math._Matrix4.Matrix4_Impl_.get(toMat,i) - this1[i]) * percent;
	}
};
lime.math._Matrix4.Matrix4_Impl_.invert = function(this1) {
	var d = lime.math._Matrix4.Matrix4_Impl_.get_determinant(this1);
	var invertable = Math.abs(d) > 0.00000000001;
	if(invertable) {
		d = 1 / d;
		var m11 = this1[0];
		var m21 = this1[4];
		var m31 = this1[8];
		var m41 = this1[12];
		var m12 = this1[1];
		var m22 = this1[5];
		var m32 = this1[9];
		var m42 = this1[13];
		var m13 = this1[2];
		var m23 = this1[6];
		var m33 = this1[10];
		var m43 = this1[14];
		var m14 = this1[3];
		var m24 = this1[7];
		var m34 = this1[11];
		var m44 = this1[15];
		this1[0] = d * (m22 * (m33 * m44 - m43 * m34) - m32 * (m23 * m44 - m43 * m24) + m42 * (m23 * m34 - m33 * m24));
		this1[1] = -d * (m12 * (m33 * m44 - m43 * m34) - m32 * (m13 * m44 - m43 * m14) + m42 * (m13 * m34 - m33 * m14));
		this1[2] = d * (m12 * (m23 * m44 - m43 * m24) - m22 * (m13 * m44 - m43 * m14) + m42 * (m13 * m24 - m23 * m14));
		this1[3] = -d * (m12 * (m23 * m34 - m33 * m24) - m22 * (m13 * m34 - m33 * m14) + m32 * (m13 * m24 - m23 * m14));
		this1[4] = -d * (m21 * (m33 * m44 - m43 * m34) - m31 * (m23 * m44 - m43 * m24) + m41 * (m23 * m34 - m33 * m24));
		this1[5] = d * (m11 * (m33 * m44 - m43 * m34) - m31 * (m13 * m44 - m43 * m14) + m41 * (m13 * m34 - m33 * m14));
		this1[6] = -d * (m11 * (m23 * m44 - m43 * m24) - m21 * (m13 * m44 - m43 * m14) + m41 * (m13 * m24 - m23 * m14));
		this1[7] = d * (m11 * (m23 * m34 - m33 * m24) - m21 * (m13 * m34 - m33 * m14) + m31 * (m13 * m24 - m23 * m14));
		this1[8] = d * (m21 * (m32 * m44 - m42 * m34) - m31 * (m22 * m44 - m42 * m24) + m41 * (m22 * m34 - m32 * m24));
		this1[9] = -d * (m11 * (m32 * m44 - m42 * m34) - m31 * (m12 * m44 - m42 * m14) + m41 * (m12 * m34 - m32 * m14));
		this1[10] = d * (m11 * (m22 * m44 - m42 * m24) - m21 * (m12 * m44 - m42 * m14) + m41 * (m12 * m24 - m22 * m14));
		this1[11] = -d * (m11 * (m22 * m34 - m32 * m24) - m21 * (m12 * m34 - m32 * m14) + m31 * (m12 * m24 - m22 * m14));
		this1[12] = -d * (m21 * (m32 * m43 - m42 * m33) - m31 * (m22 * m43 - m42 * m23) + m41 * (m22 * m33 - m32 * m23));
		this1[13] = d * (m11 * (m32 * m43 - m42 * m33) - m31 * (m12 * m43 - m42 * m13) + m41 * (m12 * m33 - m32 * m13));
		this1[14] = -d * (m11 * (m22 * m43 - m42 * m23) - m21 * (m12 * m43 - m42 * m13) + m41 * (m12 * m23 - m22 * m13));
		this1[15] = d * (m11 * (m22 * m33 - m32 * m23) - m21 * (m12 * m33 - m32 * m13) + m31 * (m12 * m23 - m22 * m13));
	}
	return invertable;
};
lime.math._Matrix4.Matrix4_Impl_.pointAt = function(this1,pos,at,up) {
	if(at == null) at = new lime.math.Vector4(0,0,-1);
	if(up == null) up = new lime.math.Vector4(0,-1,0);
	var dir = new lime.math.Vector4(at.x - pos.x,at.y - pos.y,at.z - pos.z);
	var vup = new lime.math.Vector4(up.x,up.y,up.z,up.w);
	var right;
	dir.normalize();
	vup.normalize();
	var dir2 = new lime.math.Vector4(dir.x,dir.y,dir.z,dir.w);
	dir2.scaleBy(vup.x * dir.x + vup.y * dir.y + vup.z * dir.z);
	vup = new lime.math.Vector4(vup.x - dir2.x,vup.y - dir2.y,vup.z - dir2.z);
	if(Math.sqrt(vup.x * vup.x + vup.y * vup.y + vup.z * vup.z) > 0) vup.normalize(); else if(dir.x != 0) vup = new lime.math.Vector4(-dir.y,dir.x,0); else vup = new lime.math.Vector4(1,0,0);
	right = new lime.math.Vector4(vup.y * dir.z - vup.z * dir.y,vup.z * dir.x - vup.x * dir.z,vup.x * dir.y - vup.y * dir.x,1);
	right.normalize();
	this1[0] = right.x;
	this1[4] = right.y;
	this1[8] = right.z;
	this1[12] = 0.0;
	this1[1] = vup.x;
	this1[5] = vup.y;
	this1[9] = vup.z;
	this1[13] = 0.0;
	this1[2] = dir.x;
	this1[6] = dir.y;
	this1[10] = dir.z;
	this1[14] = 0.0;
	this1[3] = pos.x;
	this1[7] = pos.y;
	this1[11] = pos.z;
	this1[15] = 1.0;
};
lime.math._Matrix4.Matrix4_Impl_.prepend = function(this1,rhs) {
	var m111 = lime.math._Matrix4.Matrix4_Impl_.get(rhs,0);
	var m121 = lime.math._Matrix4.Matrix4_Impl_.get(rhs,4);
	var m131 = lime.math._Matrix4.Matrix4_Impl_.get(rhs,8);
	var m141 = lime.math._Matrix4.Matrix4_Impl_.get(rhs,12);
	var m112 = lime.math._Matrix4.Matrix4_Impl_.get(rhs,1);
	var m122 = lime.math._Matrix4.Matrix4_Impl_.get(rhs,5);
	var m132 = lime.math._Matrix4.Matrix4_Impl_.get(rhs,9);
	var m142 = lime.math._Matrix4.Matrix4_Impl_.get(rhs,13);
	var m113 = lime.math._Matrix4.Matrix4_Impl_.get(rhs,2);
	var m123 = lime.math._Matrix4.Matrix4_Impl_.get(rhs,6);
	var m133 = lime.math._Matrix4.Matrix4_Impl_.get(rhs,10);
	var m143 = lime.math._Matrix4.Matrix4_Impl_.get(rhs,14);
	var m114 = lime.math._Matrix4.Matrix4_Impl_.get(rhs,3);
	var m124 = lime.math._Matrix4.Matrix4_Impl_.get(rhs,7);
	var m134 = lime.math._Matrix4.Matrix4_Impl_.get(rhs,11);
	var m144 = lime.math._Matrix4.Matrix4_Impl_.get(rhs,15);
	var m211 = this1[0];
	var m221 = this1[4];
	var m231 = this1[8];
	var m241 = this1[12];
	var m212 = this1[1];
	var m222 = this1[5];
	var m232 = this1[9];
	var m242 = this1[13];
	var m213 = this1[2];
	var m223 = this1[6];
	var m233 = this1[10];
	var m243 = this1[14];
	var m214 = this1[3];
	var m224 = this1[7];
	var m234 = this1[11];
	var m244 = this1[15];
	this1[0] = m111 * m211 + m112 * m221 + m113 * m231 + m114 * m241;
	this1[1] = m111 * m212 + m112 * m222 + m113 * m232 + m114 * m242;
	this1[2] = m111 * m213 + m112 * m223 + m113 * m233 + m114 * m243;
	this1[3] = m111 * m214 + m112 * m224 + m113 * m234 + m114 * m244;
	this1[4] = m121 * m211 + m122 * m221 + m123 * m231 + m124 * m241;
	this1[5] = m121 * m212 + m122 * m222 + m123 * m232 + m124 * m242;
	this1[6] = m121 * m213 + m122 * m223 + m123 * m233 + m124 * m243;
	this1[7] = m121 * m214 + m122 * m224 + m123 * m234 + m124 * m244;
	this1[8] = m131 * m211 + m132 * m221 + m133 * m231 + m134 * m241;
	this1[9] = m131 * m212 + m132 * m222 + m133 * m232 + m134 * m242;
	this1[10] = m131 * m213 + m132 * m223 + m133 * m233 + m134 * m243;
	this1[11] = m131 * m214 + m132 * m224 + m133 * m234 + m134 * m244;
	this1[12] = m141 * m211 + m142 * m221 + m143 * m231 + m144 * m241;
	this1[13] = m141 * m212 + m142 * m222 + m143 * m232 + m144 * m242;
	this1[14] = m141 * m213 + m142 * m223 + m143 * m233 + m144 * m243;
	this1[15] = m141 * m214 + m142 * m224 + m143 * m234 + m144 * m244;
};
lime.math._Matrix4.Matrix4_Impl_.prependRotation = function(this1,degrees,axis,pivotPoint) {
	var m = lime.math._Matrix4.Matrix4_Impl_.getAxisRotation(axis.x,axis.y,axis.z,degrees);
	if(pivotPoint != null) {
		var p = pivotPoint;
		lime.math._Matrix4.Matrix4_Impl_.appendTranslation(m,p.x,p.y,p.z);
	}
	lime.math._Matrix4.Matrix4_Impl_.prepend(this1,m);
};
lime.math._Matrix4.Matrix4_Impl_.prependScale = function(this1,xScale,yScale,zScale) {
	lime.math._Matrix4.Matrix4_Impl_.prepend(this1,lime.math._Matrix4.Matrix4_Impl_._new(new Float32Array([xScale,0.0,0.0,0.0,0.0,yScale,0.0,0.0,0.0,0.0,zScale,0.0,0.0,0.0,0.0,1.0])));
};
lime.math._Matrix4.Matrix4_Impl_.prependTranslation = function(this1,x,y,z) {
	var m = lime.math._Matrix4.Matrix4_Impl_._new();
	lime.math._Matrix4.Matrix4_Impl_.set_position(m,new lime.math.Vector4(x,y,z));
	lime.math._Matrix4.Matrix4_Impl_.prepend(this1,m);
};
lime.math._Matrix4.Matrix4_Impl_.transformVector = function(this1,v) {
	var x = v.x;
	var y = v.y;
	var z = v.z;
	return new lime.math.Vector4(x * this1[0] + y * this1[4] + z * this1[8] + this1[12],x * this1[1] + y * this1[5] + z * this1[9] + this1[13],x * this1[2] + y * this1[6] + z * this1[10] + this1[14],x * this1[3] + y * this1[7] + z * this1[11] + this1[15]);
};
lime.math._Matrix4.Matrix4_Impl_.transformVectors = function(this1,ain,aout) {
	var i = 0;
	while(i + 3 <= ain.length) {
		var x = ain[i];
		var y = ain[i + 1];
		var z = ain[i + 2];
		aout[i] = x * this1[0] + y * this1[4] + z * this1[8] + this1[12];
		aout[i + 1] = x * this1[1] + y * this1[5] + z * this1[9] + this1[13];
		aout[i + 2] = x * this1[2] + y * this1[6] + z * this1[10] + this1[14];
		i += 3;
	}
};
lime.math._Matrix4.Matrix4_Impl_.transpose = function(this1) {
	var othis = new Float32Array(this1);
	this1[1] = othis[4];
	this1[2] = othis[8];
	this1[3] = othis[12];
	this1[4] = othis[1];
	this1[6] = othis[9];
	this1[7] = othis[13];
	this1[8] = othis[2];
	this1[9] = othis[6];
	this1[11] = othis[14];
	this1[12] = othis[3];
	this1[13] = othis[7];
	this1[14] = othis[11];
};
lime.math._Matrix4.Matrix4_Impl_.getAxisRotation = function(x,y,z,degrees) {
	var m = lime.math._Matrix4.Matrix4_Impl_._new();
	var a1 = new lime.math.Vector4(x,y,z);
	var rad = -degrees * (Math.PI / 180);
	var c = Math.cos(rad);
	var s = Math.sin(rad);
	var t = 1.0 - c;
	lime.math._Matrix4.Matrix4_Impl_.set(m,0,c + a1.x * a1.x * t);
	lime.math._Matrix4.Matrix4_Impl_.set(m,5,c + a1.y * a1.y * t);
	lime.math._Matrix4.Matrix4_Impl_.set(m,10,c + a1.z * a1.z * t);
	var tmp1 = a1.x * a1.y * t;
	var tmp2 = a1.z * s;
	lime.math._Matrix4.Matrix4_Impl_.set(m,4,tmp1 + tmp2);
	lime.math._Matrix4.Matrix4_Impl_.set(m,1,tmp1 - tmp2);
	tmp1 = a1.x * a1.z * t;
	tmp2 = a1.y * s;
	lime.math._Matrix4.Matrix4_Impl_.set(m,8,tmp1 - tmp2);
	lime.math._Matrix4.Matrix4_Impl_.set(m,2,tmp1 + tmp2);
	tmp1 = a1.y * a1.z * t;
	tmp2 = a1.x * s;
	lime.math._Matrix4.Matrix4_Impl_.set(m,9,tmp1 + tmp2);
	lime.math._Matrix4.Matrix4_Impl_.set(m,6,tmp1 - tmp2);
	return m;
};
lime.math._Matrix4.Matrix4_Impl_.get_determinant = function(this1) {
	return (this1[0] * this1[5] - this1[4] * this1[1]) * (this1[10] * this1[15] - this1[14] * this1[11]) - (this1[0] * this1[9] - this1[8] * this1[1]) * (this1[6] * this1[15] - this1[14] * this1[7]) + (this1[0] * this1[13] - this1[12] * this1[1]) * (this1[6] * this1[11] - this1[10] * this1[7]) + (this1[4] * this1[9] - this1[8] * this1[5]) * (this1[2] * this1[15] - this1[14] * this1[3]) - (this1[4] * this1[13] - this1[12] * this1[5]) * (this1[2] * this1[11] - this1[10] * this1[3]) + (this1[8] * this1[13] - this1[12] * this1[9]) * (this1[2] * this1[7] - this1[6] * this1[3]);
};
lime.math._Matrix4.Matrix4_Impl_.get_position = function(this1) {
	return new lime.math.Vector4(this1[12],this1[13],this1[14]);
};
lime.math._Matrix4.Matrix4_Impl_.set_position = function(this1,val) {
	this1[12] = val.x;
	this1[13] = val.y;
	this1[14] = val.z;
	return val;
};
lime.math._Matrix4.Matrix4_Impl_.get = function(this1,index) {
	return this1[index];
};
lime.math._Matrix4.Matrix4_Impl_.set = function(this1,index,value) {
	this1[index] = value;
	return value;
};
lime.math.Rectangle = function(x,y,width,height) {
	if(height == null) height = 0;
	if(width == null) width = 0;
	if(y == null) y = 0;
	if(x == null) x = 0;
	this.x = x;
	this.y = y;
	this.width = width;
	this.height = height;
};
$hxClasses["lime.math.Rectangle"] = lime.math.Rectangle;
lime.math.Rectangle.__name__ = ["lime","math","Rectangle"];
lime.math.Rectangle.prototype = {
	height: null
	,width: null
	,x: null
	,y: null
	,clone: function() {
		return new lime.math.Rectangle(this.x,this.y,this.width,this.height);
	}
	,contains: function(x,y) {
		return x >= this.x && y >= this.y && x < this.get_right() && y < this.get_bottom();
	}
	,containsPoint: function(point) {
		return this.contains(point.x,point.y);
	}
	,containsRect: function(rect) {
		if(rect.width <= 0 || rect.height <= 0) return rect.x > this.x && rect.y > this.y && rect.get_right() < this.get_right() && rect.get_bottom() < this.get_bottom(); else return rect.x >= this.x && rect.y >= this.y && rect.get_right() <= this.get_right() && rect.get_bottom() <= this.get_bottom();
	}
	,copyFrom: function(sourceRect) {
		this.x = sourceRect.x;
		this.y = sourceRect.y;
		this.width = sourceRect.width;
		this.height = sourceRect.height;
	}
	,equals: function(toCompare) {
		return toCompare != null && this.x == toCompare.x && this.y == toCompare.y && this.width == toCompare.width && this.height == toCompare.height;
	}
	,inflate: function(dx,dy) {
		this.x -= dx;
		this.width += dx * 2;
		this.y -= dy;
		this.height += dy * 2;
	}
	,inflatePoint: function(point) {
		this.inflate(point.x,point.y);
	}
	,intersection: function(toIntersect) {
		var x0;
		if(this.x < toIntersect.x) x0 = toIntersect.x; else x0 = this.x;
		var x1;
		if(this.get_right() > toIntersect.get_right()) x1 = toIntersect.get_right(); else x1 = this.get_right();
		if(x1 <= x0) return new lime.math.Rectangle();
		var y0;
		if(this.y < toIntersect.y) y0 = toIntersect.y; else y0 = this.y;
		var y1;
		if(this.get_bottom() > toIntersect.get_bottom()) y1 = toIntersect.get_bottom(); else y1 = this.get_bottom();
		if(y1 <= y0) return new lime.math.Rectangle();
		return new lime.math.Rectangle(x0,y0,x1 - x0,y1 - y0);
	}
	,intersects: function(toIntersect) {
		var x0;
		if(this.x < toIntersect.x) x0 = toIntersect.x; else x0 = this.x;
		var x1;
		if(this.get_right() > toIntersect.get_right()) x1 = toIntersect.get_right(); else x1 = this.get_right();
		if(x1 <= x0) return false;
		var y0;
		if(this.y < toIntersect.y) y0 = toIntersect.y; else y0 = this.y;
		var y1;
		if(this.get_bottom() > toIntersect.get_bottom()) y1 = toIntersect.get_bottom(); else y1 = this.get_bottom();
		return y1 > y0;
	}
	,isEmpty: function() {
		return this.width <= 0 || this.height <= 0;
	}
	,offset: function(dx,dy) {
		this.x += dx;
		this.y += dy;
	}
	,offsetPoint: function(point) {
		this.x += point.x;
		this.y += point.y;
	}
	,setEmpty: function() {
		this.x = this.y = this.width = this.height = 0;
	}
	,setTo: function(xa,ya,widtha,heighta) {
		this.x = xa;
		this.y = ya;
		this.width = widtha;
		this.height = heighta;
	}
	,transform: function(m) {
		var tx0 = m.a * this.x + m.c * this.y;
		var tx1 = tx0;
		var ty0 = m.b * this.x + m.d * this.y;
		var ty1 = tx0;
		var tx = m.a * (this.x + this.width) + m.c * this.y;
		var ty = m.b * (this.x + this.width) + m.d * this.y;
		if(tx < tx0) tx0 = tx;
		if(ty < ty0) ty0 = ty;
		if(tx > tx1) tx1 = tx;
		if(ty > ty1) ty1 = ty;
		tx = m.a * (this.x + this.width) + m.c * (this.y + this.height);
		ty = m.b * (this.x + this.width) + m.d * (this.y + this.height);
		if(tx < tx0) tx0 = tx;
		if(ty < ty0) ty0 = ty;
		if(tx > tx1) tx1 = tx;
		if(ty > ty1) ty1 = ty;
		tx = m.a * this.x + m.c * (this.y + this.height);
		ty = m.b * this.x + m.d * (this.y + this.height);
		if(tx < tx0) tx0 = tx;
		if(ty < ty0) ty0 = ty;
		if(tx > tx1) tx1 = tx;
		if(ty > ty1) ty1 = ty;
		return new lime.math.Rectangle(tx0 + m.tx,ty0 + m.ty,tx1 - tx0,ty1 - ty0);
	}
	,union: function(toUnion) {
		if(this.width == 0 || this.height == 0) return toUnion.clone(); else if(toUnion.width == 0 || toUnion.height == 0) return this.clone();
		var x0;
		if(this.x > toUnion.x) x0 = toUnion.x; else x0 = this.x;
		var x1;
		if(this.get_right() < toUnion.get_right()) x1 = toUnion.get_right(); else x1 = this.get_right();
		var y0;
		if(this.y > toUnion.y) y0 = toUnion.y; else y0 = this.y;
		var y1;
		if(this.get_bottom() < toUnion.get_bottom()) y1 = toUnion.get_bottom(); else y1 = this.get_bottom();
		return new lime.math.Rectangle(x0,y0,x1 - x0,y1 - y0);
	}
	,__contract: function(x,y,width,height) {
		if(this.width == 0 && this.height == 0) return;
		var cacheRight = this.get_right();
		var cacheBottom = this.get_bottom();
		if(this.x < x) this.x = x;
		if(this.y < y) this.y = y;
		if(this.get_right() > x + width) this.width = x + width - this.x;
		if(this.get_bottom() > y + height) this.height = y + height - this.y;
	}
	,__expand: function(x,y,width,height) {
		if(this.width == 0 && this.height == 0) {
			this.x = x;
			this.y = y;
			this.width = width;
			this.height = height;
			return;
		}
		var cacheRight = this.get_right();
		var cacheBottom = this.get_bottom();
		if(this.x > x) this.x = x;
		if(this.y > y) this.y = y;
		if(cacheRight < x + width) this.width = x + width - this.x;
		if(cacheBottom < y + height) this.height = y + height - this.y;
	}
	,__toFlashRectangle: function() {
		return null;
	}
	,get_bottom: function() {
		return this.y + this.height;
	}
	,set_bottom: function(b) {
		this.height = b - this.y;
		return b;
	}
	,get_bottomRight: function() {
		return new lime.math.Vector2(this.x + this.width,this.y + this.height);
	}
	,set_bottomRight: function(p) {
		this.width = p.x - this.x;
		this.height = p.y - this.y;
		return p.clone();
	}
	,get_left: function() {
		return this.x;
	}
	,set_left: function(l) {
		this.width -= l - this.x;
		this.x = l;
		return l;
	}
	,get_right: function() {
		return this.x + this.width;
	}
	,set_right: function(r) {
		this.width = r - this.x;
		return r;
	}
	,get_size: function() {
		return new lime.math.Vector2(this.width,this.height);
	}
	,set_size: function(p) {
		this.width = p.x;
		this.height = p.y;
		return p.clone();
	}
	,get_top: function() {
		return this.y;
	}
	,set_top: function(t) {
		this.height -= t - this.y;
		this.y = t;
		return t;
	}
	,get_topLeft: function() {
		return new lime.math.Vector2(this.x,this.y);
	}
	,set_topLeft: function(p) {
		this.x = p.x;
		this.y = p.y;
		return p.clone();
	}
	,__class__: lime.math.Rectangle
	,__properties__: {set_topLeft:"set_topLeft",get_topLeft:"get_topLeft",set_top:"set_top",get_top:"get_top",set_size:"set_size",get_size:"get_size",set_right:"set_right",get_right:"get_right",set_left:"set_left",get_left:"get_left",set_bottomRight:"set_bottomRight",get_bottomRight:"get_bottomRight",set_bottom:"set_bottom",get_bottom:"get_bottom"}
};
lime.math.Vector2 = function(x,y) {
	if(y == null) y = 0;
	if(x == null) x = 0;
	this.x = x;
	this.y = y;
};
$hxClasses["lime.math.Vector2"] = lime.math.Vector2;
lime.math.Vector2.__name__ = ["lime","math","Vector2"];
lime.math.Vector2.distance = function(pt1,pt2) {
	var dx = pt1.x - pt2.x;
	var dy = pt1.y - pt2.y;
	return Math.sqrt(dx * dx + dy * dy);
};
lime.math.Vector2.interpolate = function(pt1,pt2,f) {
	return new lime.math.Vector2(pt2.x + f * (pt1.x - pt2.x),pt2.y + f * (pt1.y - pt2.y));
};
lime.math.Vector2.polar = function(len,angle) {
	return new lime.math.Vector2(len * Math.cos(angle),len * Math.sin(angle));
};
lime.math.Vector2.prototype = {
	length: null
	,x: null
	,y: null
	,add: function(v) {
		return new lime.math.Vector2(v.x + this.x,v.y + this.y);
	}
	,clone: function() {
		return new lime.math.Vector2(this.x,this.y);
	}
	,equals: function(toCompare) {
		return toCompare != null && toCompare.x == this.x && toCompare.y == this.y;
	}
	,normalize: function(thickness) {
		if(this.x == 0 && this.y == 0) return; else {
			var norm = thickness / Math.sqrt(this.x * this.x + this.y * this.y);
			this.x *= norm;
			this.y *= norm;
		}
	}
	,offset: function(dx,dy) {
		this.x += dx;
		this.y += dy;
	}
	,setTo: function(xa,ya) {
		this.x = xa;
		this.y = ya;
	}
	,subtract: function(v) {
		return new lime.math.Vector2(this.x - v.x,this.y - v.y);
	}
	,__toFlashPoint: function() {
		return null;
	}
	,get_length: function() {
		return Math.sqrt(this.x * this.x + this.y * this.y);
	}
	,__class__: lime.math.Vector2
	,__properties__: {get_length:"get_length"}
};
lime.math.Vector4 = function(x,y,z,w) {
	if(w == null) w = 0.;
	if(z == null) z = 0.;
	if(y == null) y = 0.;
	if(x == null) x = 0.;
	this.w = w;
	this.x = x;
	this.y = y;
	this.z = z;
};
$hxClasses["lime.math.Vector4"] = lime.math.Vector4;
lime.math.Vector4.__name__ = ["lime","math","Vector4"];
lime.math.Vector4.__properties__ = {get_Z_AXIS:"get_Z_AXIS",get_Y_AXIS:"get_Y_AXIS",get_X_AXIS:"get_X_AXIS"}
lime.math.Vector4.X_AXIS = null;
lime.math.Vector4.Y_AXIS = null;
lime.math.Vector4.Z_AXIS = null;
lime.math.Vector4.angleBetween = function(a,b) {
	var a0 = new lime.math.Vector4(a.x,a.y,a.z,a.w);
	a0.normalize();
	var b0 = new lime.math.Vector4(b.x,b.y,b.z,b.w);
	b0.normalize();
	return Math.acos(a0.x * b0.x + a0.y * b0.y + a0.z * b0.z);
};
lime.math.Vector4.distance = function(pt1,pt2) {
	var x = pt2.x - pt1.x;
	var y = pt2.y - pt1.y;
	var z = pt2.z - pt1.z;
	return Math.sqrt(x * x + y * y + z * z);
};
lime.math.Vector4.get_X_AXIS = function() {
	return new lime.math.Vector4(1,0,0);
};
lime.math.Vector4.get_Y_AXIS = function() {
	return new lime.math.Vector4(0,1,0);
};
lime.math.Vector4.get_Z_AXIS = function() {
	return new lime.math.Vector4(0,0,1);
};
lime.math.Vector4.prototype = {
	length: null
	,lengthSquared: null
	,w: null
	,x: null
	,y: null
	,z: null
	,add: function(a) {
		return new lime.math.Vector4(this.x + a.x,this.y + a.y,this.z + a.z);
	}
	,clone: function() {
		return new lime.math.Vector4(this.x,this.y,this.z,this.w);
	}
	,copyFrom: function(sourceVector4) {
		this.x = sourceVector4.x;
		this.y = sourceVector4.y;
		this.z = sourceVector4.z;
	}
	,crossProduct: function(a) {
		return new lime.math.Vector4(this.y * a.z - this.z * a.y,this.z * a.x - this.x * a.z,this.x * a.y - this.y * a.x,1);
	}
	,decrementBy: function(a) {
		this.x -= a.x;
		this.y -= a.y;
		this.z -= a.z;
	}
	,dotProduct: function(a) {
		return this.x * a.x + this.y * a.y + this.z * a.z;
	}
	,equals: function(toCompare,allFour) {
		if(allFour == null) allFour = false;
		return this.x == toCompare.x && this.y == toCompare.y && this.z == toCompare.z && (!allFour || this.w == toCompare.w);
	}
	,incrementBy: function(a) {
		this.x += a.x;
		this.y += a.y;
		this.z += a.z;
	}
	,nearEquals: function(toCompare,tolerance,allFour) {
		if(allFour == null) allFour = false;
		return Math.abs(this.x - toCompare.x) < tolerance && Math.abs(this.y - toCompare.y) < tolerance && Math.abs(this.z - toCompare.z) < tolerance && (!allFour || Math.abs(this.w - toCompare.w) < tolerance);
	}
	,negate: function() {
		this.x *= -1;
		this.y *= -1;
		this.z *= -1;
	}
	,normalize: function() {
		var l = Math.sqrt(this.x * this.x + this.y * this.y + this.z * this.z);
		if(l != 0) {
			this.x /= l;
			this.y /= l;
			this.z /= l;
		}
		return l;
	}
	,project: function() {
		this.x /= this.w;
		this.y /= this.w;
		this.z /= this.w;
	}
	,scaleBy: function(s) {
		this.x *= s;
		this.y *= s;
		this.z *= s;
	}
	,setTo: function(xa,ya,za) {
		this.x = xa;
		this.y = ya;
		this.z = za;
	}
	,subtract: function(a) {
		return new lime.math.Vector4(this.x - a.x,this.y - a.y,this.z - a.z);
	}
	,toString: function() {
		return "Vector4(" + this.x + ", " + this.y + ", " + this.z + ")";
	}
	,get_length: function() {
		return Math.sqrt(this.x * this.x + this.y * this.y + this.z * this.z);
	}
	,get_lengthSquared: function() {
		return this.x * this.x + this.y * this.y + this.z * this.z;
	}
	,__class__: lime.math.Vector4
	,__properties__: {get_lengthSquared:"get_lengthSquared",get_length:"get_length"}
};
lime.net = {};
lime.net.URLLoader = function(request) {
	this.onSecurityError = new lime.app.Event();
	this.onProgress = new lime.app.Event();
	this.onOpen = new lime.app.Event();
	this.onIOError = new lime.app.Event();
	this.onHTTPStatus = new lime.app.Event();
	this.onComplete = new lime.app.Event();
	this.bytesLoaded = 0;
	this.bytesTotal = 0;
	this.set_dataFormat(lime.net.URLLoaderDataFormat.TEXT);
	if(request != null) this.load(request);
};
$hxClasses["lime.net.URLLoader"] = lime.net.URLLoader;
lime.net.URLLoader.__name__ = ["lime","net","URLLoader"];
lime.net.URLLoader.prototype = {
	bytesLoaded: null
	,bytesTotal: null
	,data: null
	,dataFormat: null
	,onComplete: null
	,onHTTPStatus: null
	,onIOError: null
	,onOpen: null
	,onProgress: null
	,onSecurityError: null
	,close: function() {
	}
	,getData: function() {
		return null;
	}
	,load: function(request) {
		this.requestUrl(request.url,request.method,request.data,request.formatRequestHeaders());
	}
	,registerEvents: function(subject) {
		var _g = this;
		var self = this;
		if(typeof XMLHttpRequestProgressEvent != "undefined") subject.addEventListener("progress",$bind(this,this.__onProgress),false);
		subject.onreadystatechange = function() {
			if(subject.readyState != 4) return;
			var s;
			try {
				s = subject.status;
			} catch( e ) {
				s = null;
			}
			if(s == undefined) s = null;
			if(s != null) {
				var listeners = self.onHTTPStatus.listeners;
				var repeat = self.onHTTPStatus.repeat;
				var length = listeners.length;
				var i = 0;
				while(i < length) {
					listeners[i](_g,s);
					if(!repeat[i]) {
						self.onHTTPStatus.remove(listeners[i]);
						length--;
					} else i++;
				}
			}
			if(s != null && s >= 200 && s < 400) self.__onData(subject.response); else if(s == null) {
				var listeners1 = self.onIOError.listeners;
				var repeat1 = self.onIOError.repeat;
				var length1 = listeners1.length;
				var i1 = 0;
				while(i1 < length1) {
					listeners1[i1](_g,"Failed to connect or resolve host");
					if(!repeat1[i1]) {
						self.onIOError.remove(listeners1[i1]);
						length1--;
					} else i1++;
				}
			} else if(s == 12029) {
				var listeners2 = self.onIOError.listeners;
				var repeat2 = self.onIOError.repeat;
				var length2 = listeners2.length;
				var i2 = 0;
				while(i2 < length2) {
					listeners2[i2](_g,"Failed to connect to host");
					if(!repeat2[i2]) {
						self.onIOError.remove(listeners2[i2]);
						length2--;
					} else i2++;
				}
			} else if(s == 12007) {
				var listeners3 = self.onIOError.listeners;
				var repeat3 = self.onIOError.repeat;
				var length3 = listeners3.length;
				var i3 = 0;
				while(i3 < length3) {
					listeners3[i3](_g,"Unknown host");
					if(!repeat3[i3]) {
						self.onIOError.remove(listeners3[i3]);
						length3--;
					} else i3++;
				}
			} else if(s == 0) {
				var listeners4 = self.onIOError.listeners;
				var repeat4 = self.onIOError.repeat;
				var length4 = listeners4.length;
				var i4 = 0;
				while(i4 < length4) {
					listeners4[i4](_g,"Unable to make request (may be blocked due to cross-domain permissions)");
					if(!repeat4[i4]) {
						self.onIOError.remove(listeners4[i4]);
						length4--;
					} else i4++;
				}
				var listeners5 = self.onSecurityError.listeners;
				var repeat5 = self.onSecurityError.repeat;
				var length5 = listeners5.length;
				var i5 = 0;
				while(i5 < length5) {
					listeners5[i5](_g,"Unable to make request (may be blocked due to cross-domain permissions)");
					if(!repeat5[i5]) {
						self.onSecurityError.remove(listeners5[i5]);
						length5--;
					} else i5++;
				}
			} else {
				var listeners6 = self.onIOError.listeners;
				var repeat6 = self.onIOError.repeat;
				var length6 = listeners6.length;
				var i6 = 0;
				while(i6 < length6) {
					listeners6[i6](_g,"Http Error #" + subject.status);
					if(!repeat6[i6]) {
						self.onIOError.remove(listeners6[i6]);
						length6--;
					} else i6++;
				}
			}
		};
	}
	,requestUrl: function(url,method,data,requestHeaders) {
		var xmlHttpRequest = new XMLHttpRequest();
		this.registerEvents(xmlHttpRequest);
		var uri = "";
		if(js.Boot.__instanceof(data,lime.utils.ByteArray)) {
			var data1 = data;
			var _g = this.dataFormat;
			switch(_g[1]) {
			case 0:
				uri = data1.data.buffer;
				break;
			default:
				uri = data1.readUTFBytes(data1.length);
			}
		} else if(js.Boot.__instanceof(data,lime.net.URLVariables)) {
			var data2 = data;
			var _g1 = 0;
			var _g11 = Reflect.fields(data2);
			while(_g1 < _g11.length) {
				var p = _g11[_g1];
				++_g1;
				if(uri.length != 0) uri += "&";
				uri += encodeURIComponent(p) + "=" + StringTools.urlEncode(Reflect.field(data2,p));
			}
		} else if(data != null) uri = data.toString();
		try {
			if(method == "GET" && uri != null && uri != "") {
				var question = url.split("?").length <= 1;
				xmlHttpRequest.open("GET",url + (question?"?":"&") + Std.string(uri),true);
				uri = "";
			} else xmlHttpRequest.open(js.Boot.__cast(method , String),url,true);
		} catch( e ) {
			var listeners = this.onIOError.listeners;
			var repeat = this.onIOError.repeat;
			var length = listeners.length;
			var i = 0;
			while(i < length) {
				listeners[i](this,e.toString());
				if(!repeat[i]) {
					this.onIOError.remove(listeners[i]);
					length--;
				} else i++;
			}
			return;
		}
		var _g2 = this.dataFormat;
		switch(_g2[1]) {
		case 0:
			xmlHttpRequest.responseType = "arraybuffer";
			break;
		default:
		}
		var _g3 = 0;
		while(_g3 < requestHeaders.length) {
			var header = requestHeaders[_g3];
			++_g3;
			xmlHttpRequest.setRequestHeader(header.name,header.value);
		}
		xmlHttpRequest.send(uri);
		var listeners1 = this.onOpen.listeners;
		var repeat1 = this.onOpen.repeat;
		var length1 = listeners1.length;
		var i1 = 0;
		while(i1 < length1) {
			listeners1[i1](this);
			if(!repeat1[i1]) {
				this.onOpen.remove(listeners1[i1]);
				length1--;
			} else i1++;
		}
		this.getData = function() {
			if(xmlHttpRequest.response != null) return xmlHttpRequest.response; else return xmlHttpRequest.responseText;
		};
	}
	,__onData: function(_) {
		var content = this.getData();
		var _g = this.dataFormat;
		switch(_g[1]) {
		case 0:
			this.data = lime.utils.ByteArray.__ofBuffer(content);
			break;
		default:
			this.data = Std.string(content);
		}
		var listeners = this.onComplete.listeners;
		var repeat = this.onComplete.repeat;
		var length = listeners.length;
		var i = 0;
		while(i < length) {
			listeners[i](this);
			if(!repeat[i]) {
				this.onComplete.remove(listeners[i]);
				length--;
			} else i++;
		}
	}
	,__onProgress: function(event) {
		this.bytesLoaded = event.loaded;
		this.bytesTotal = event.total;
		var listeners = this.onProgress.listeners;
		var repeat = this.onProgress.repeat;
		var length = listeners.length;
		var i = 0;
		while(i < length) {
			listeners[i](this,this.bytesLoaded,this.bytesTotal);
			if(!repeat[i]) {
				this.onProgress.remove(listeners[i]);
				length--;
			} else i++;
		}
	}
	,set_dataFormat: function(inputVal) {
		if(inputVal == lime.net.URLLoaderDataFormat.BINARY && !Reflect.hasField(window,"ArrayBuffer")) this.dataFormat = lime.net.URLLoaderDataFormat.TEXT; else this.dataFormat = inputVal;
		return this.dataFormat;
	}
	,__class__: lime.net.URLLoader
	,__properties__: {set_dataFormat:"set_dataFormat"}
};
lime.net.URLLoaderDataFormat = $hxClasses["lime.net.URLLoaderDataFormat"] = { __ename__ : ["lime","net","URLLoaderDataFormat"], __constructs__ : ["BINARY","TEXT","VARIABLES"] };
lime.net.URLLoaderDataFormat.BINARY = ["BINARY",0];
lime.net.URLLoaderDataFormat.BINARY.toString = $estr;
lime.net.URLLoaderDataFormat.BINARY.__enum__ = lime.net.URLLoaderDataFormat;
lime.net.URLLoaderDataFormat.TEXT = ["TEXT",1];
lime.net.URLLoaderDataFormat.TEXT.toString = $estr;
lime.net.URLLoaderDataFormat.TEXT.__enum__ = lime.net.URLLoaderDataFormat;
lime.net.URLLoaderDataFormat.VARIABLES = ["VARIABLES",2];
lime.net.URLLoaderDataFormat.VARIABLES.toString = $estr;
lime.net.URLLoaderDataFormat.VARIABLES.__enum__ = lime.net.URLLoaderDataFormat;
lime.net.URLLoaderDataFormat.__empty_constructs__ = [lime.net.URLLoaderDataFormat.BINARY,lime.net.URLLoaderDataFormat.TEXT,lime.net.URLLoaderDataFormat.VARIABLES];
lime.net.URLRequest = function(inURL) {
	if(inURL != null) this.url = inURL;
	this.requestHeaders = [];
	this.method = "GET";
	this.contentType = null;
};
$hxClasses["lime.net.URLRequest"] = lime.net.URLRequest;
lime.net.URLRequest.__name__ = ["lime","net","URLRequest"];
lime.net.URLRequest.prototype = {
	contentType: null
	,data: null
	,method: null
	,requestHeaders: null
	,url: null
	,userAgent: null
	,formatRequestHeaders: function() {
		var res = this.requestHeaders;
		if(res == null) res = [];
		if(this.method == "GET" || this.data == null) return res;
		if(typeof(this.data) == "string" || js.Boot.__instanceof(this.data,lime.utils.ByteArray)) {
			res = res.slice();
			res.push(new lime.net.URLRequestHeader("Content-Type",this.contentType != null?this.contentType:"application/x-www-form-urlencoded"));
		}
		return res;
	}
	,__class__: lime.net.URLRequest
};
lime.net.URLRequestHeader = function(name,value) {
	if(value == null) value = "";
	if(name == null) name = "";
	this.name = name;
	this.value = value;
};
$hxClasses["lime.net.URLRequestHeader"] = lime.net.URLRequestHeader;
lime.net.URLRequestHeader.__name__ = ["lime","net","URLRequestHeader"];
lime.net.URLRequestHeader.prototype = {
	name: null
	,value: null
	,__class__: lime.net.URLRequestHeader
};
lime.net._URLRequestMethod = {};
lime.net._URLRequestMethod.URLRequestMethod_Impl_ = function() { };
$hxClasses["lime.net._URLRequestMethod.URLRequestMethod_Impl_"] = lime.net._URLRequestMethod.URLRequestMethod_Impl_;
lime.net._URLRequestMethod.URLRequestMethod_Impl_.__name__ = ["lime","net","_URLRequestMethod","URLRequestMethod_Impl_"];
lime.net.URLVariables = function(inEncoded) {
	if(inEncoded != null) this.decode(inEncoded);
};
$hxClasses["lime.net.URLVariables"] = lime.net.URLVariables;
lime.net.URLVariables.__name__ = ["lime","net","URLVariables"];
lime.net.URLVariables.prototype = {
	decode: function(inVars) {
		var fields = Reflect.fields(this);
		var _g = 0;
		while(_g < fields.length) {
			var f = fields[_g];
			++_g;
			Reflect.deleteField(this,f);
		}
		var fields1 = inVars.split(";").join("&").split("&");
		var _g1 = 0;
		while(_g1 < fields1.length) {
			var f1 = fields1[_g1];
			++_g1;
			var eq = f1.indexOf("=");
			if(eq > 0) Reflect.setField(this,StringTools.urlDecode(HxOverrides.substr(f1,0,eq)),StringTools.urlDecode(HxOverrides.substr(f1,eq + 1,null))); else if(eq != 0) Reflect.setField(this,decodeURIComponent(f1.split("+").join(" ")),"");
		}
	}
	,toString: function() {
		var result = new Array();
		var fields = Reflect.fields(this);
		var _g = 0;
		while(_g < fields.length) {
			var f = fields[_g];
			++_g;
			result.push(encodeURIComponent(f) + "=" + StringTools.urlEncode(Reflect.field(this,f)));
		}
		return result.join("&");
	}
	,__class__: lime.net.URLVariables
};
lime.system = {};
lime.system.System = function() { };
$hxClasses["lime.system.System"] = lime.system.System;
lime.system.System.__name__ = ["lime","system","System"];
lime.system.System.__properties__ = {get_userDirectory:"get_userDirectory",get_fontsDirectory:"get_fontsDirectory",get_documentsDirectory:"get_documentsDirectory",get_desktopDirectory:"get_desktopDirectory",get_applicationStorageDirectory:"get_applicationStorageDirectory",get_applicationDirectory:"get_applicationDirectory"}
lime.system.System.applicationDirectory = null;
lime.system.System.applicationStorageDirectory = null;
lime.system.System.desktopDirectory = null;
lime.system.System.disableCFFI = null;
lime.system.System.documentsDirectory = null;
lime.system.System.fontsDirectory = null;
lime.system.System.userDirectory = null;
lime.system.System.embed = $hx_exports.lime.embed = function(element,width,height,background,assetsPrefix) {
	var htmlElement = null;
	if(typeof(element) == "string") htmlElement = window.document.getElementById(js.Boot.__cast(element , String)); else if(element == null) htmlElement = window.document.createElement("div"); else htmlElement = element;
	var color = null;
	if(background != null) {
		background = StringTools.replace(background,"#","");
		if(background.indexOf("0x") > -1) color = Std.parseInt(background); else color = Std.parseInt("0x" + background);
	}
	if(width == null) width = 0;
	if(height == null) height = 0;
	ApplicationMain.config.background = color;
	ApplicationMain.config.element = htmlElement;
	ApplicationMain.config.width = width;
	ApplicationMain.config.height = height;
	ApplicationMain.config.assetsPrefix = assetsPrefix;
	ApplicationMain.create();
};
lime.system.System.exit = function(code) {
};
lime.system.System.findHaxeLib = function(library) {
	return "";
};
lime.system.System.getTimer = function() {
	return Std["int"](new Date().getTime());
};
lime.system.System.load = function(library,method,args,lazy) {
	if(lazy == null) lazy = false;
	if(args == null) args = 0;
	if(lime.system.System.disableCFFI) return Reflect.makeVarArgs(function(__) {
		return { };
	});
	if(lazy) {
	}
	var result = null;
	return result;
};
lime.system.System.sysName = function() {
	return null;
};
lime.system.System.tryLoad = function(name,library,func,args) {
	return null;
};
lime.system.System.loaderTrace = function(message) {
};
lime.system.System.get_applicationDirectory = function() {
	return null;
};
lime.system.System.get_applicationStorageDirectory = function() {
	var company = "MyCompany";
	var file = "MyApplication";
	if(lime.app.Application.current != null && lime.app.Application.current.config != null) {
		if(lime.app.Application.current.config.company != null) company = lime.app.Application.current.config.company;
		if(lime.app.Application.current.config.file != null) file = lime.app.Application.current.config.file;
	}
	return null;
};
lime.system.System.get_desktopDirectory = function() {
	return null;
};
lime.system.System.get_documentsDirectory = function() {
	return null;
};
lime.system.System.get_fontsDirectory = function() {
	return null;
};
lime.system.System.get_userDirectory = function() {
	return null;
};
lime.system._System = {};
lime.system._System.SystemDirectory_Impl_ = function() { };
$hxClasses["lime.system._System.SystemDirectory_Impl_"] = lime.system._System.SystemDirectory_Impl_;
lime.system._System.SystemDirectory_Impl_.__name__ = ["lime","system","_System","SystemDirectory_Impl_"];
lime.text._Glyph = {};
lime.text._Glyph.Glyph_Impl_ = function() { };
$hxClasses["lime.text._Glyph.Glyph_Impl_"] = lime.text._Glyph.Glyph_Impl_;
lime.text._Glyph.Glyph_Impl_.__name__ = ["lime","text","_Glyph","Glyph_Impl_"];
lime.text._Glyph.Glyph_Impl_._new = function(i) {
	return i;
};
lime.text.GlyphMetrics = function() {
};
$hxClasses["lime.text.GlyphMetrics"] = lime.text.GlyphMetrics;
lime.text.GlyphMetrics.__name__ = ["lime","text","GlyphMetrics"];
lime.text.GlyphMetrics.prototype = {
	advance: null
	,height: null
	,horizontalBearing: null
	,verticalBearing: null
	,__class__: lime.text.GlyphMetrics
};
lime.text.GlyphPosition = function(glyph,advance,offset) {
	this.glyph = glyph;
	this.advance = advance;
	if(offset != null) this.offset = offset; else this.offset = new lime.math.Vector2();
};
$hxClasses["lime.text.GlyphPosition"] = lime.text.GlyphPosition;
lime.text.GlyphPosition.__name__ = ["lime","text","GlyphPosition"];
lime.text.GlyphPosition.prototype = {
	advance: null
	,glyph: null
	,offset: null
	,__class__: lime.text.GlyphPosition
};
lime.text._TextDirection = {};
lime.text._TextDirection.TextDirection_Impl_ = function() { };
$hxClasses["lime.text._TextDirection.TextDirection_Impl_"] = lime.text._TextDirection.TextDirection_Impl_;
lime.text._TextDirection.TextDirection_Impl_.__name__ = ["lime","text","_TextDirection","TextDirection_Impl_"];
lime.text._TextDirection.TextDirection_Impl_.__properties__ = {get_vertical:"get_vertical",get_horizontal:"get_horizontal",get_forward:"get_forward",get_backward:"get_backward"}
lime.text._TextDirection.TextDirection_Impl_.reverse = function(this1) {
	this1 = this1 ^ 1;
};
lime.text._TextDirection.TextDirection_Impl_.toString = function(this1) {
	switch(this1) {
	case 4:
		return "leftToRight";
	case 5:
		return "rightToLeft";
	case 6:
		return "topToBottom";
	case 7:
		return "bottomToTop";
	default:
		return "";
	}
};
lime.text._TextDirection.TextDirection_Impl_.get_backward = function(this1) {
	return (this1 & -3) == 5;
};
lime.text._TextDirection.TextDirection_Impl_.get_forward = function(this1) {
	return (this1 & -3) == 4;
};
lime.text._TextDirection.TextDirection_Impl_.get_horizontal = function(this1) {
	return (this1 & -2) == 4;
};
lime.text._TextDirection.TextDirection_Impl_.get_vertical = function(this1) {
	return (this1 & -2) == 6;
};
lime.text.TextLayout = function(text,font,size,direction,script,language) {
	if(language == null) language = "en";
	if(script == null) script = "Zyyy";
	if(direction == null) direction = 4;
	if(size == null) size = 12;
	if(text == null) text = "";
	this.set_text(text);
	this.set_font(font);
	this.set_size(size);
	this.__direction = direction;
	this.__script = script;
	this.__language = language;
	this.__position();
};
$hxClasses["lime.text.TextLayout"] = lime.text.TextLayout;
lime.text.TextLayout.__name__ = ["lime","text","TextLayout"];
lime.text.TextLayout.prototype = {
	font: null
	,glyphs: null
	,positions: null
	,size: null
	,text: null
	,__buffer: null
	,__direction: null
	,__handle: null
	,__language: null
	,__script: null
	,__position: function() {
		this.positions = [];
	}
	,get_direction: function() {
		return this.__direction;
	}
	,set_direction: function(value) {
		if(value == this.__direction) return value;
		this.__direction = value;
		this.__position();
		return value;
	}
	,set_font: function(value) {
		if(value == this.font) return value;
		this.font = value;
		this.__position();
		return value;
	}
	,get_glyphs: function() {
		var glyphs = [];
		var _g = 0;
		var _g1 = this.positions;
		while(_g < _g1.length) {
			var position = _g1[_g];
			++_g;
			glyphs.push(position.glyph);
		}
		return glyphs;
	}
	,get_language: function() {
		return this.__language;
	}
	,set_language: function(value) {
		if(value == this.__language) return value;
		this.__language = value;
		this.__position();
		return value;
	}
	,get_script: function() {
		return this.__script;
	}
	,set_script: function(value) {
		if(value == this.__script) return value;
		this.__script = value;
		this.__position();
		return value;
	}
	,set_size: function(value) {
		if(value == this.size) return value;
		this.size = value;
		this.__position();
		return value;
	}
	,set_text: function(value) {
		if(value == this.text) return value;
		this.text = value;
		this.__position();
		return value;
	}
	,__class__: lime.text.TextLayout
	,__properties__: {set_text:"set_text",set_size:"set_size",set_script:"set_script",get_script:"get_script",set_language:"set_language",get_language:"get_language",get_glyphs:"get_glyphs",set_font:"set_font",set_direction:"set_direction",get_direction:"get_direction"}
};
lime.text._TextScript = {};
lime.text._TextScript.TextScript_Impl_ = function() { };
$hxClasses["lime.text._TextScript.TextScript_Impl_"] = lime.text._TextScript.TextScript_Impl_;
lime.text._TextScript.TextScript_Impl_.__name__ = ["lime","text","_TextScript","TextScript_Impl_"];
lime.text._TextScript.TextScript_Impl_.__properties__ = {get_rightToLeft:"get_rightToLeft"}
lime.text._TextScript.TextScript_Impl_.get_rightToLeft = function(this1) {
	switch(this1) {
	case "Hebr":case "Arab":case "Syrc":case "Thaa":case "Nkoo":case "Samr":case "Mand":case "Armi":case "Phnx":case "Lydi":case "Cprt":case "Khar":case "Sarb":case "Avst":case "Phli":case "Phlp":case "Orkh":
		return true;
	default:
		return false;
	}
};
lime.ui = {};
lime.ui.Gamepad = function(id) {
	this.id = id;
	this.connected = true;
};
$hxClasses["lime.ui.Gamepad"] = lime.ui.Gamepad;
lime.ui.Gamepad.__name__ = ["lime","ui","Gamepad"];
lime.ui.Gamepad.prototype = {
	connected: null
	,id: null
	,get_guid: function() {
		return null;
	}
	,get_name: function() {
		return null;
	}
	,__class__: lime.ui.Gamepad
	,__properties__: {get_name:"get_name",get_guid:"get_guid"}
};
lime.ui._GamepadAxis = {};
lime.ui._GamepadAxis.GamepadAxis_Impl_ = function() { };
$hxClasses["lime.ui._GamepadAxis.GamepadAxis_Impl_"] = lime.ui._GamepadAxis.GamepadAxis_Impl_;
lime.ui._GamepadAxis.GamepadAxis_Impl_.__name__ = ["lime","ui","_GamepadAxis","GamepadAxis_Impl_"];
lime.ui._GamepadAxis.GamepadAxis_Impl_.toString = function(this1) {
	switch(this1) {
	case 0:
		return "LEFT_X";
	case 1:
		return "LEFT_Y";
	case 2:
		return "RIGHT_X";
	case 3:
		return "RIGHT_Y";
	case 4:
		return "TRIGGER_LEFT";
	case 5:
		return "TRIGGER_RIGHT";
	default:
		return "UNKNOWN (" + this1 + ")";
	}
};
lime.ui._GamepadButton = {};
lime.ui._GamepadButton.GamepadButton_Impl_ = function() { };
$hxClasses["lime.ui._GamepadButton.GamepadButton_Impl_"] = lime.ui._GamepadButton.GamepadButton_Impl_;
lime.ui._GamepadButton.GamepadButton_Impl_.__name__ = ["lime","ui","_GamepadButton","GamepadButton_Impl_"];
lime.ui._GamepadButton.GamepadButton_Impl_.toString = function(this1) {
	switch(this1) {
	case 0:
		return "A";
	case 1:
		return "B";
	case 2:
		return "X";
	case 3:
		return "Y";
	case 4:
		return "BACK";
	case 5:
		return "GUIDE";
	case 6:
		return "START";
	case 7:
		return "LEFT_STICK";
	case 8:
		return "RIGHT_STICK";
	case 9:
		return "LEFT_SHOULDER";
	case 10:
		return "RIGHT_SHOULDER";
	case 11:
		return "DPAD_UP";
	case 12:
		return "DPAD_DOWN";
	case 13:
		return "DPAD_LEFT";
	case 14:
		return "DPAD_RIGHT";
	default:
		return "UNKNOWN (" + this1 + ")";
	}
};
lime.ui._KeyCode = {};
lime.ui._KeyCode.KeyCode_Impl_ = function() { };
$hxClasses["lime.ui._KeyCode.KeyCode_Impl_"] = lime.ui._KeyCode.KeyCode_Impl_;
lime.ui._KeyCode.KeyCode_Impl_.__name__ = ["lime","ui","_KeyCode","KeyCode_Impl_"];
lime.ui._KeyModifier = {};
lime.ui._KeyModifier.KeyModifier_Impl_ = function() { };
$hxClasses["lime.ui._KeyModifier.KeyModifier_Impl_"] = lime.ui._KeyModifier.KeyModifier_Impl_;
lime.ui._KeyModifier.KeyModifier_Impl_.__name__ = ["lime","ui","_KeyModifier","KeyModifier_Impl_"];
lime.ui._KeyModifier.KeyModifier_Impl_.__properties__ = {set_shiftKey:"set_shiftKey",get_shiftKey:"get_shiftKey",set_numLock:"set_numLock",get_numLock:"get_numLock",set_metaKey:"set_metaKey",get_metaKey:"get_metaKey",set_ctrlKey:"set_ctrlKey",get_ctrlKey:"get_ctrlKey",set_capsLock:"set_capsLock",get_capsLock:"get_capsLock",set_altKey:"set_altKey",get_altKey:"get_altKey"}
lime.ui._KeyModifier.KeyModifier_Impl_.get_altKey = function(this1) {
	return (this1 & 256) > 0 || (this1 & 512) > 0;
};
lime.ui._KeyModifier.KeyModifier_Impl_.set_altKey = function(this1,value) {
	if(value) this1 |= 768; else this1 &= 268435455 - 768;
	return value;
};
lime.ui._KeyModifier.KeyModifier_Impl_.get_capsLock = function(this1) {
	return (this1 & 8192) > 0 || (this1 & 8192) > 0;
};
lime.ui._KeyModifier.KeyModifier_Impl_.set_capsLock = function(this1,value) {
	if(value) this1 |= 8192; else this1 &= 268435455 - 8192;
	return value;
};
lime.ui._KeyModifier.KeyModifier_Impl_.get_ctrlKey = function(this1) {
	return (this1 & 64) > 0 || (this1 & 128) > 0;
};
lime.ui._KeyModifier.KeyModifier_Impl_.set_ctrlKey = function(this1,value) {
	if(value) this1 |= 192; else this1 &= 268435455 - 192;
	return value;
};
lime.ui._KeyModifier.KeyModifier_Impl_.get_metaKey = function(this1) {
	return (this1 & 1024) > 0 || (this1 & 2048) > 0;
};
lime.ui._KeyModifier.KeyModifier_Impl_.set_metaKey = function(this1,value) {
	if(value) this1 |= 3072; else this1 &= 268435455 - 3072;
	return value;
};
lime.ui._KeyModifier.KeyModifier_Impl_.get_numLock = function(this1) {
	return (this1 & 4096) > 0 || (this1 & 4096) > 0;
};
lime.ui._KeyModifier.KeyModifier_Impl_.set_numLock = function(this1,value) {
	if(value) this1 |= 4096; else this1 &= 268435455 - 4096;
	return value;
};
lime.ui._KeyModifier.KeyModifier_Impl_.get_shiftKey = function(this1) {
	return (this1 & 1) > 0 || (this1 & 2) > 0;
};
lime.ui._KeyModifier.KeyModifier_Impl_.set_shiftKey = function(this1,value) {
	if(value) this1 |= 3; else this1 &= 268435455 - 3;
	return value;
};
lime.ui.Mouse = function() { };
$hxClasses["lime.ui.Mouse"] = lime.ui.Mouse;
lime.ui.Mouse.__name__ = ["lime","ui","Mouse"];
lime.ui.Mouse.__properties__ = {set_lock:"set_lock",get_lock:"get_lock",set_cursor:"set_cursor",get_cursor:"get_cursor"}
lime.ui.Mouse.hide = function() {
	lime._backend.html5.HTML5Mouse.hide();
};
lime.ui.Mouse.show = function() {
	lime._backend.html5.HTML5Mouse.show();
};
lime.ui.Mouse.warp = function(x,y,window) {
	lime._backend.html5.HTML5Mouse.warp(x,y,window);
};
lime.ui.Mouse.get_cursor = function() {
	return lime._backend.html5.HTML5Mouse.get_cursor();
};
lime.ui.Mouse.set_cursor = function(value) {
	return lime._backend.html5.HTML5Mouse.set_cursor(value);
};
lime.ui.Mouse.get_lock = function() {
	return lime._backend.html5.HTML5Mouse.get_lock();
};
lime.ui.Mouse.set_lock = function(value) {
	return lime._backend.html5.HTML5Mouse.set_lock(value);
};
lime.ui.MouseCursor = $hxClasses["lime.ui.MouseCursor"] = { __ename__ : ["lime","ui","MouseCursor"], __constructs__ : ["ARROW","CROSSHAIR","DEFAULT","MOVE","POINTER","RESIZE_NESW","RESIZE_NS","RESIZE_NWSE","RESIZE_WE","TEXT","WAIT","WAIT_ARROW","CUSTOM"] };
lime.ui.MouseCursor.ARROW = ["ARROW",0];
lime.ui.MouseCursor.ARROW.toString = $estr;
lime.ui.MouseCursor.ARROW.__enum__ = lime.ui.MouseCursor;
lime.ui.MouseCursor.CROSSHAIR = ["CROSSHAIR",1];
lime.ui.MouseCursor.CROSSHAIR.toString = $estr;
lime.ui.MouseCursor.CROSSHAIR.__enum__ = lime.ui.MouseCursor;
lime.ui.MouseCursor.DEFAULT = ["DEFAULT",2];
lime.ui.MouseCursor.DEFAULT.toString = $estr;
lime.ui.MouseCursor.DEFAULT.__enum__ = lime.ui.MouseCursor;
lime.ui.MouseCursor.MOVE = ["MOVE",3];
lime.ui.MouseCursor.MOVE.toString = $estr;
lime.ui.MouseCursor.MOVE.__enum__ = lime.ui.MouseCursor;
lime.ui.MouseCursor.POINTER = ["POINTER",4];
lime.ui.MouseCursor.POINTER.toString = $estr;
lime.ui.MouseCursor.POINTER.__enum__ = lime.ui.MouseCursor;
lime.ui.MouseCursor.RESIZE_NESW = ["RESIZE_NESW",5];
lime.ui.MouseCursor.RESIZE_NESW.toString = $estr;
lime.ui.MouseCursor.RESIZE_NESW.__enum__ = lime.ui.MouseCursor;
lime.ui.MouseCursor.RESIZE_NS = ["RESIZE_NS",6];
lime.ui.MouseCursor.RESIZE_NS.toString = $estr;
lime.ui.MouseCursor.RESIZE_NS.__enum__ = lime.ui.MouseCursor;
lime.ui.MouseCursor.RESIZE_NWSE = ["RESIZE_NWSE",7];
lime.ui.MouseCursor.RESIZE_NWSE.toString = $estr;
lime.ui.MouseCursor.RESIZE_NWSE.__enum__ = lime.ui.MouseCursor;
lime.ui.MouseCursor.RESIZE_WE = ["RESIZE_WE",8];
lime.ui.MouseCursor.RESIZE_WE.toString = $estr;
lime.ui.MouseCursor.RESIZE_WE.__enum__ = lime.ui.MouseCursor;
lime.ui.MouseCursor.TEXT = ["TEXT",9];
lime.ui.MouseCursor.TEXT.toString = $estr;
lime.ui.MouseCursor.TEXT.__enum__ = lime.ui.MouseCursor;
lime.ui.MouseCursor.WAIT = ["WAIT",10];
lime.ui.MouseCursor.WAIT.toString = $estr;
lime.ui.MouseCursor.WAIT.__enum__ = lime.ui.MouseCursor;
lime.ui.MouseCursor.WAIT_ARROW = ["WAIT_ARROW",11];
lime.ui.MouseCursor.WAIT_ARROW.toString = $estr;
lime.ui.MouseCursor.WAIT_ARROW.__enum__ = lime.ui.MouseCursor;
lime.ui.MouseCursor.CUSTOM = ["CUSTOM",12];
lime.ui.MouseCursor.CUSTOM.toString = $estr;
lime.ui.MouseCursor.CUSTOM.__enum__ = lime.ui.MouseCursor;
lime.ui.MouseCursor.__empty_constructs__ = [lime.ui.MouseCursor.ARROW,lime.ui.MouseCursor.CROSSHAIR,lime.ui.MouseCursor.DEFAULT,lime.ui.MouseCursor.MOVE,lime.ui.MouseCursor.POINTER,lime.ui.MouseCursor.RESIZE_NESW,lime.ui.MouseCursor.RESIZE_NS,lime.ui.MouseCursor.RESIZE_NWSE,lime.ui.MouseCursor.RESIZE_WE,lime.ui.MouseCursor.TEXT,lime.ui.MouseCursor.WAIT,lime.ui.MouseCursor.WAIT_ARROW,lime.ui.MouseCursor.CUSTOM];
lime.ui.Window = function(config) {
	this.onWindowRestore = new lime.app.Event();
	this.onWindowResize = new lime.app.Event();
	this.onWindowMove = new lime.app.Event();
	this.onWindowMinimize = new lime.app.Event();
	this.onWindowFullscreen = new lime.app.Event();
	this.onWindowFocusOut = new lime.app.Event();
	this.onWindowFocusIn = new lime.app.Event();
	this.onWindowDeactivate = new lime.app.Event();
	this.onWindowClose = new lime.app.Event();
	this.onWindowActivate = new lime.app.Event();
	this.onTouchStart = new lime.app.Event();
	this.onTouchMove = new lime.app.Event();
	this.onTouchEnd = new lime.app.Event();
	this.onMouseWheel = new lime.app.Event();
	this.onMouseUp = new lime.app.Event();
	this.onMouseMoveRelative = new lime.app.Event();
	this.onMouseMove = new lime.app.Event();
	this.onMouseDown = new lime.app.Event();
	this.onKeyUp = new lime.app.Event();
	this.onKeyDown = new lime.app.Event();
	this.onGamepadDisconnect = new lime.app.Event();
	this.onGamepadConnect = new lime.app.Event();
	this.onGamepadButtonUp = new lime.app.Event();
	this.onGamepadButtonDown = new lime.app.Event();
	this.onGamepadAxisMove = new lime.app.Event();
	this.config = config;
	this.__width = 0;
	this.__height = 0;
	this.__fullscreen = false;
	this.__x = 0;
	this.__y = 0;
	if(config != null) {
		if(Object.prototype.hasOwnProperty.call(config,"width")) this.__width = config.width;
		if(Object.prototype.hasOwnProperty.call(config,"height")) this.__height = config.height;
		if(Object.prototype.hasOwnProperty.call(config,"fullscreen")) this.__fullscreen = config.fullscreen;
	}
	this.backend = new lime._backend.html5.HTML5Window(this);
};
$hxClasses["lime.ui.Window"] = lime.ui.Window;
lime.ui.Window.__name__ = ["lime","ui","Window"];
lime.ui.Window.prototype = {
	currentRenderer: null
	,config: null
	,onGamepadAxisMove: null
	,onGamepadButtonDown: null
	,onGamepadButtonUp: null
	,onGamepadConnect: null
	,onGamepadDisconnect: null
	,onKeyDown: null
	,onKeyUp: null
	,onMouseDown: null
	,onMouseMove: null
	,onMouseMoveRelative: null
	,onMouseUp: null
	,onMouseWheel: null
	,onTouchEnd: null
	,onTouchMove: null
	,onTouchStart: null
	,onWindowActivate: null
	,onWindowClose: null
	,onWindowDeactivate: null
	,onWindowFocusIn: null
	,onWindowFocusOut: null
	,onWindowFullscreen: null
	,onWindowMinimize: null
	,onWindowMove: null
	,onWindowResize: null
	,onWindowRestore: null
	,backend: null
	,__fullscreen: null
	,__height: null
	,__minimized: null
	,__width: null
	,__x: null
	,__y: null
	,close: function() {
		this.backend.close();
	}
	,create: function(application) {
		this.backend.create(application);
		if(this.currentRenderer != null) this.currentRenderer.create();
	}
	,move: function(x,y) {
		this.backend.move(x,y);
		this.__x = x;
		this.__y = y;
	}
	,resize: function(width,height) {
		this.backend.resize(width,height);
		this.__width = width;
		this.__height = height;
	}
	,setIcon: function(image) {
		if(image == null) return;
		this.backend.setIcon(image);
	}
	,get_fullscreen: function() {
		return this.__fullscreen;
	}
	,set_fullscreen: function(value) {
		return this.__fullscreen = this.backend.setFullscreen(value);
	}
	,get_height: function() {
		return this.__height;
	}
	,set_height: function(value) {
		this.resize(this.__width,value);
		return this.__height;
	}
	,get_minimized: function() {
		return this.__minimized;
	}
	,set_minimized: function(value) {
		return this.__minimized = this.backend.setMinimized(value);
	}
	,get_width: function() {
		return this.__width;
	}
	,set_width: function(value) {
		this.resize(value,this.__height);
		return this.__width;
	}
	,get_x: function() {
		return this.__x;
	}
	,set_x: function(value) {
		this.move(value,this.__y);
		return this.__x;
	}
	,get_y: function() {
		return this.__y;
	}
	,set_y: function(value) {
		this.move(this.__x,value);
		return this.__y;
	}
	,__class__: lime.ui.Window
	,__properties__: {set_y:"set_y",get_y:"get_y",set_x:"set_x",get_x:"get_x",set_width:"set_width",get_width:"get_width",set_minimized:"set_minimized",get_minimized:"get_minimized",set_height:"set_height",get_height:"get_height",set_fullscreen:"set_fullscreen",get_fullscreen:"get_fullscreen"}
};
lime.utils = {};
lime.utils.ByteArray = function(size) {
	if(size == null) size = 0;
	this.littleEndian = false;
	this.allocated = 0;
	this.position = 0;
	this.length = 0;
	if(size > 0) this.allocated = size;
	this.___resizeBuffer(this.allocated);
	this.set_length(this.allocated);
};
$hxClasses["lime.utils.ByteArray"] = lime.utils.ByteArray;
lime.utils.ByteArray.__name__ = ["lime","utils","ByteArray"];
lime.utils.ByteArray.fromBytes = function(bytes) {
	var result = new lime.utils.ByteArray();
	result.byteView = new Uint8Array(bytes.b);
	result.set_length(result.byteView.length);
	result.allocated = result.length;
	return result;
};
lime.utils.ByteArray.readFile = function(path) {
	return null;
};
lime.utils.ByteArray.__ofBuffer = function(buffer) {
	var bytes = new lime.utils.ByteArray();
	bytes.set_length(bytes.allocated = buffer.byteLength);
	bytes.data = new DataView(buffer);
	bytes.byteView = new Uint8Array(buffer);
	return bytes;
};
lime.utils.ByteArray.prototype = {
	bytesAvailable: null
	,length: null
	,objectEncoding: null
	,position: null
	,allocated: null
	,littleEndian: null
	,byteView: null
	,data: null
	,clear: function() {
		if(this.allocated < 0) this.___resizeBuffer(this.allocated = Std["int"](Math.max(0,this.allocated * 2))); else if(this.allocated > 0) this.___resizeBuffer(this.allocated = 0);
		this.length = 0;
		0;
		this.position = 0;
	}
	,compress: function(algorithm) {
	}
	,deflate: function() {
		this.compress(lime.utils.CompressionAlgorithm.DEFLATE);
	}
	,inflate: function() {
		this.uncompress(lime.utils.CompressionAlgorithm.DEFLATE);
	}
	,readBoolean: function() {
		return this.readByte() != 0;
	}
	,readByte: function() {
		var data = this.data;
		return data.getInt8(this.position++);
	}
	,readBytes: function(bytes,offset,length) {
		if(length == null) length = 0;
		if(offset == null) offset = 0;
		if(offset < 0 || length < 0) throw "Read error - Out of bounds";
		if(length == 0) length = this.length - this.position;
		var lengthToEnsure = offset + length;
		if(bytes.length < lengthToEnsure) {
			if(bytes.allocated < lengthToEnsure) bytes.___resizeBuffer(bytes.allocated = Std["int"](Math.max(lengthToEnsure,bytes.allocated * 2))); else if(bytes.allocated > lengthToEnsure * 2) bytes.___resizeBuffer(bytes.allocated = lengthToEnsure);
			bytes.length = lengthToEnsure;
			lengthToEnsure;
		}
		bytes.byteView.set(this.byteView.subarray(this.position,this.position + length),offset);
		bytes.position = offset;
		this.position += length;
		if(bytes.position + length > bytes.length) bytes.set_length(bytes.position + length);
	}
	,readDouble: function() {
		var $double = this.data.getFloat64(this.position,this.littleEndian);
		this.position += 8;
		return $double;
	}
	,readFloat: function() {
		var $float = this.data.getFloat32(this.position,this.littleEndian);
		this.position += 4;
		return $float;
	}
	,readInt: function() {
		var $int = this.data.getInt32(this.position,this.littleEndian);
		this.position += 4;
		return $int;
	}
	,readMultiByte: function(length,charSet) {
		return this.readUTFBytes(length);
	}
	,readShort: function() {
		var $short = this.data.getInt16(this.position,this.littleEndian);
		this.position += 2;
		return $short;
	}
	,readUnsignedByte: function() {
		var data = this.data;
		return data.getUint8(this.position++);
	}
	,readUnsignedInt: function() {
		var uInt = this.data.getUint32(this.position,this.littleEndian);
		this.position += 4;
		return uInt;
	}
	,readUnsignedShort: function() {
		var uShort = this.data.getUint16(this.position,this.littleEndian);
		this.position += 2;
		return uShort;
	}
	,readUTF: function() {
		var bytesCount = this.readUnsignedShort();
		return this.readUTFBytes(bytesCount);
	}
	,readUTFBytes: function(len) {
		var value = "";
		var max = this.position + len;
		while(this.position < max) {
			var data = this.data;
			var c = data.getUint8(this.position++);
			if(c < 128) {
				if(c == 0) break;
				value += String.fromCharCode(c);
			} else if(c < 224) value += String.fromCharCode((c & 63) << 6 | data.getUint8(this.position++) & 127); else if(c < 240) {
				var c2 = data.getUint8(this.position++);
				value += String.fromCharCode((c & 31) << 12 | (c2 & 127) << 6 | data.getUint8(this.position++) & 127);
			} else {
				var c21 = data.getUint8(this.position++);
				var c3 = data.getUint8(this.position++);
				value += String.fromCharCode((c & 15) << 18 | (c21 & 127) << 12 | c3 << 6 & 127 | data.getUint8(this.position++) & 127);
			}
		}
		return value;
	}
	,toString: function() {
		var cachePosition = this.position;
		this.position = 0;
		var value = this.readUTFBytes(this.length);
		this.position = cachePosition;
		return value;
	}
	,uncompress: function(algorithm) {
		haxe.Log.trace("Warning: ByteArray.uncompress on JS target requires the 'format' haxelib",{ fileName : "ByteArray.hx", lineNumber : 660, className : "lime.utils.ByteArray", methodName : "uncompress"});
	}
	,write_uncheck: function($byte) {
	}
	,writeBoolean: function(value) {
		this.writeByte(value?1:0);
	}
	,writeByte: function(value) {
		var lengthToEnsure = this.position + 1;
		if(this.length < lengthToEnsure) {
			if(this.allocated < lengthToEnsure) this.___resizeBuffer(this.allocated = Std["int"](Math.max(lengthToEnsure,this.allocated * 2))); else if(this.allocated > lengthToEnsure * 2) this.___resizeBuffer(this.allocated = lengthToEnsure);
			this.length = lengthToEnsure;
			lengthToEnsure;
		}
		var data = this.data;
		data.setInt8(this.position,value);
		this.position += 1;
	}
	,writeBytes: function(bytes,offset,length) {
		if(length == null) length = 0;
		if(offset == null) offset = 0;
		if(bytes.length == 0) return;
		if((function($this) {
			var $r;
			var aNeg = 0 < 0;
			var bNeg = offset < 0;
			$r = aNeg != bNeg?aNeg:0 > offset;
			return $r;
		}(this)) || (function($this) {
			var $r;
			var aNeg1 = 0 < 0;
			var bNeg1 = length < 0;
			$r = aNeg1 != bNeg1?aNeg1:0 > length;
			return $r;
		}(this))) throw "Write error - Out of bounds";
		if((function($this) {
			var $r;
			var $int = length;
			$r = $int < 0?4294967296.0 + $int:$int + 0.0;
			return $r;
		}(this)) == 0) length = bytes.length;
		var lengthToEnsure = this.position + length;
		if(this.length < lengthToEnsure) {
			if(this.allocated < lengthToEnsure) this.___resizeBuffer(this.allocated = Std["int"](Math.max(lengthToEnsure,this.allocated * 2))); else if(this.allocated > lengthToEnsure * 2) this.___resizeBuffer(this.allocated = lengthToEnsure);
			this.length = lengthToEnsure;
			lengthToEnsure;
		}
		this.byteView.set(bytes.byteView.subarray(offset,offset + length),this.position);
		this.position = this.position + length;
	}
	,writeDouble: function(x) {
		var lengthToEnsure = this.position + 8;
		if(this.length < lengthToEnsure) {
			if(this.allocated < lengthToEnsure) this.___resizeBuffer(this.allocated = Std["int"](Math.max(lengthToEnsure,this.allocated * 2))); else if(this.allocated > lengthToEnsure * 2) this.___resizeBuffer(this.allocated = lengthToEnsure);
			this.length = lengthToEnsure;
			lengthToEnsure;
		}
		this.data.setFloat64(this.position,x,this.littleEndian);
		this.position += 8;
	}
	,writeFile: function(path) {
	}
	,writeFloat: function(x) {
		var lengthToEnsure = this.position + 4;
		if(this.length < lengthToEnsure) {
			if(this.allocated < lengthToEnsure) this.___resizeBuffer(this.allocated = Std["int"](Math.max(lengthToEnsure,this.allocated * 2))); else if(this.allocated > lengthToEnsure * 2) this.___resizeBuffer(this.allocated = lengthToEnsure);
			this.length = lengthToEnsure;
			lengthToEnsure;
		}
		this.data.setFloat32(this.position,x,this.littleEndian);
		this.position += 4;
	}
	,writeInt: function(value) {
		var lengthToEnsure = this.position + 4;
		if(this.length < lengthToEnsure) {
			if(this.allocated < lengthToEnsure) this.___resizeBuffer(this.allocated = Std["int"](Math.max(lengthToEnsure,this.allocated * 2))); else if(this.allocated > lengthToEnsure * 2) this.___resizeBuffer(this.allocated = lengthToEnsure);
			this.length = lengthToEnsure;
			lengthToEnsure;
		}
		this.data.setInt32(this.position,value,this.littleEndian);
		this.position += 4;
	}
	,writeShort: function(value) {
		var lengthToEnsure = this.position + 2;
		if(this.length < lengthToEnsure) {
			if(this.allocated < lengthToEnsure) this.___resizeBuffer(this.allocated = Std["int"](Math.max(lengthToEnsure,this.allocated * 2))); else if(this.allocated > lengthToEnsure * 2) this.___resizeBuffer(this.allocated = lengthToEnsure);
			this.length = lengthToEnsure;
			lengthToEnsure;
		}
		this.data.setInt16(this.position,value,this.littleEndian);
		this.position += 2;
	}
	,writeUnsignedInt: function(value) {
		var lengthToEnsure = this.position + 4;
		if(this.length < lengthToEnsure) {
			if(this.allocated < lengthToEnsure) this.___resizeBuffer(this.allocated = Std["int"](Math.max(lengthToEnsure,this.allocated * 2))); else if(this.allocated > lengthToEnsure * 2) this.___resizeBuffer(this.allocated = lengthToEnsure);
			this.length = lengthToEnsure;
			lengthToEnsure;
		}
		this.data.setUint32(this.position,value,this.littleEndian);
		this.position += 4;
	}
	,writeUnsignedShort: function(value) {
		var lengthToEnsure = this.position + 2;
		if(this.length < lengthToEnsure) {
			if(this.allocated < lengthToEnsure) this.___resizeBuffer(this.allocated = Std["int"](Math.max(lengthToEnsure,this.allocated * 2))); else if(this.allocated > lengthToEnsure * 2) this.___resizeBuffer(this.allocated = lengthToEnsure);
			this.length = lengthToEnsure;
			lengthToEnsure;
		}
		this.data.setUint16(this.position,value,this.littleEndian);
		this.position += 2;
	}
	,writeUTF: function(value) {
		this.writeUnsignedShort(this.__getUTFBytesCount(value));
		this.writeUTFBytes(value);
	}
	,writeUTFBytes: function(value) {
		var _g1 = 0;
		var _g = value.length;
		while(_g1 < _g) {
			var i = _g1++;
			var c = value.charCodeAt(i);
			if(c <= 127) this.writeByte(c); else if(c <= 2047) {
				this.writeByte(192 | c >> 6);
				this.writeByte(128 | c & 63);
			} else if(c <= 65535) {
				this.writeByte(224 | c >> 12);
				this.writeByte(128 | c >> 6 & 63);
				this.writeByte(128 | c & 63);
			} else {
				this.writeByte(240 | c >> 18);
				this.writeByte(128 | c >> 12 & 63);
				this.writeByte(128 | c >> 6 & 63);
				this.writeByte(128 | c & 63);
			}
		}
	}
	,__fromBytes: function(bytes) {
		this.byteView = new Uint8Array(bytes.b);
		this.set_length(this.byteView.length);
		this.allocated = this.length;
	}
	,__get: function(pos) {
		return this.data.getInt8(pos);
	}
	,__getBuffer: function() {
		return this.data.buffer;
	}
	,__getUTFBytesCount: function(value) {
		var count = 0;
		var _g1 = 0;
		var _g = value.length;
		while(_g1 < _g) {
			var i = _g1++;
			var c = value.charCodeAt(i);
			if(c <= 127) count += 1; else if(c <= 2047) count += 2; else if(c <= 65535) count += 3; else count += 4;
		}
		return count;
	}
	,___resizeBuffer: function(len) {
		var oldByteView = this.byteView;
		var newByteView = new Uint8Array(len);
		if(oldByteView != null) {
			if(oldByteView.length <= len) newByteView.set(oldByteView); else newByteView.set(oldByteView.subarray(0,len));
		}
		this.byteView = newByteView;
		this.data = new DataView(newByteView.buffer);
	}
	,__set: function(pos,v) {
		this.data.setUint8(pos,v);
	}
	,get_bytesAvailable: function() {
		return this.length - this.position;
	}
	,get_endian: function() {
		if(this.littleEndian) return "littleEndian"; else return "bigEndian";
	}
	,set_endian: function(endian) {
		this.littleEndian = endian == "littleEndian";
		return endian;
	}
	,set_length: function(value) {
		if(this.allocated < value) this.___resizeBuffer(this.allocated = Std["int"](Math.max(value,this.allocated * 2))); else if(this.allocated > value * 2) this.___resizeBuffer(this.allocated = value);
		this.length = value;
		return value;
	}
	,__class__: lime.utils.ByteArray
	,__properties__: {set_length:"set_length",set_endian:"set_endian",get_endian:"get_endian",get_bytesAvailable:"get_bytesAvailable"}
};
lime.utils.CompressionAlgorithm = $hxClasses["lime.utils.CompressionAlgorithm"] = { __ename__ : ["lime","utils","CompressionAlgorithm"], __constructs__ : ["DEFLATE","ZLIB","LZMA","GZIP"] };
lime.utils.CompressionAlgorithm.DEFLATE = ["DEFLATE",0];
lime.utils.CompressionAlgorithm.DEFLATE.toString = $estr;
lime.utils.CompressionAlgorithm.DEFLATE.__enum__ = lime.utils.CompressionAlgorithm;
lime.utils.CompressionAlgorithm.ZLIB = ["ZLIB",1];
lime.utils.CompressionAlgorithm.ZLIB.toString = $estr;
lime.utils.CompressionAlgorithm.ZLIB.__enum__ = lime.utils.CompressionAlgorithm;
lime.utils.CompressionAlgorithm.LZMA = ["LZMA",2];
lime.utils.CompressionAlgorithm.LZMA.toString = $estr;
lime.utils.CompressionAlgorithm.LZMA.__enum__ = lime.utils.CompressionAlgorithm;
lime.utils.CompressionAlgorithm.GZIP = ["GZIP",3];
lime.utils.CompressionAlgorithm.GZIP.toString = $estr;
lime.utils.CompressionAlgorithm.GZIP.__enum__ = lime.utils.CompressionAlgorithm;
lime.utils.CompressionAlgorithm.__empty_constructs__ = [lime.utils.CompressionAlgorithm.DEFLATE,lime.utils.CompressionAlgorithm.ZLIB,lime.utils.CompressionAlgorithm.LZMA,lime.utils.CompressionAlgorithm.GZIP];
lime.utils.GLUtils = function() { };
$hxClasses["lime.utils.GLUtils"] = lime.utils.GLUtils;
lime.utils.GLUtils.__name__ = ["lime","utils","GLUtils"];
lime.utils.GLUtils.compileShader = function(source,type) {
	var shader = lime.graphics.opengl.GL.context.createShader(type);
	lime.graphics.opengl.GL.context.shaderSource(shader,source);
	lime.graphics.opengl.GL.context.compileShader(shader);
	if(lime.graphics.opengl.GL.context.getShaderParameter(shader,35713) == 0) switch(type) {
	case 35633:
		throw "Error compiling vertex shader";
		break;
	case 35632:
		throw "Error compiling fragment shader";
		break;
	default:
		throw "Error compiling unknown shader type";
	}
	return shader;
};
lime.utils.GLUtils.createProgram = function(vertexSource,fragmentSource) {
	var vertexShader = lime.utils.GLUtils.compileShader(vertexSource,35633);
	var fragmentShader = lime.utils.GLUtils.compileShader(fragmentSource,35632);
	var program = lime.graphics.opengl.GL.context.createProgram();
	lime.graphics.opengl.GL.context.attachShader(program,vertexShader);
	lime.graphics.opengl.GL.context.attachShader(program,fragmentShader);
	lime.graphics.opengl.GL.context.linkProgram(program);
	if(lime.graphics.opengl.GL.context.getProgramParameter(program,35714) == 0) throw "Unable to initialize the shader program.";
	return program;
};
lime.utils.IDataInput = function() { };
$hxClasses["lime.utils.IDataInput"] = lime.utils.IDataInput;
lime.utils.IDataInput.__name__ = ["lime","utils","IDataInput"];
lime.utils.IDataInput.prototype = {
	bytesAvailable: null
	,readBoolean: null
	,readByte: null
	,readBytes: null
	,readDouble: null
	,readFloat: null
	,readInt: null
	,readShort: null
	,readUnsignedByte: null
	,readUnsignedInt: null
	,readUnsignedShort: null
	,readUTF: null
	,readUTFBytes: null
	,get_bytesAvailable: null
	,get_endian: null
	,set_endian: null
	,__class__: lime.utils.IDataInput
	,__properties__: {set_endian:"set_endian",get_endian:"get_endian",get_bytesAvailable:"get_bytesAvailable"}
};
lime.utils.IMemoryRange = function() { };
$hxClasses["lime.utils.IMemoryRange"] = lime.utils.IMemoryRange;
lime.utils.IMemoryRange.__name__ = ["lime","utils","IMemoryRange"];
lime.utils.IMemoryRange.prototype = {
	getByteBuffer: null
	,getStart: null
	,getLength: null
	,__class__: lime.utils.IMemoryRange
};
openfl.IAssetCache = function() { };
$hxClasses["openfl.IAssetCache"] = openfl.IAssetCache;
openfl.IAssetCache.__name__ = ["openfl","IAssetCache"];
openfl.IAssetCache.prototype = {
	clear: null
	,getBitmapData: null
	,getFont: null
	,getSound: null
	,hasBitmapData: null
	,hasFont: null
	,hasSound: null
	,removeBitmapData: null
	,removeFont: null
	,removeSound: null
	,setBitmapData: null
	,setFont: null
	,setSound: null
	,__class__: openfl.IAssetCache
	,__properties__: {set_enabled:"set_enabled",get_enabled:"get_enabled"}
};
openfl.AssetCache = function() {
	this.__enabled = true;
	this.bitmapData = new haxe.ds.StringMap();
	this.font = new haxe.ds.StringMap();
	this.sound = new haxe.ds.StringMap();
};
$hxClasses["openfl.AssetCache"] = openfl.AssetCache;
openfl.AssetCache.__name__ = ["openfl","AssetCache"];
openfl.AssetCache.__interfaces__ = [openfl.IAssetCache];
openfl.AssetCache.prototype = {
	bitmapData: null
	,font: null
	,sound: null
	,__enabled: null
	,clear: function(prefix) {
		if(prefix == null) {
			this.bitmapData = new haxe.ds.StringMap();
			this.font = new haxe.ds.StringMap();
			this.sound = new haxe.ds.StringMap();
		} else {
			var keys = this.bitmapData.keys();
			while( keys.hasNext() ) {
				var key = keys.next();
				if(StringTools.startsWith(key,prefix)) this.bitmapData.remove(key);
			}
			var keys1 = this.font.keys();
			while( keys1.hasNext() ) {
				var key1 = keys1.next();
				if(StringTools.startsWith(key1,prefix)) this.font.remove(key1);
			}
			var keys2 = this.sound.keys();
			while( keys2.hasNext() ) {
				var key2 = keys2.next();
				if(StringTools.startsWith(key2,prefix)) this.sound.remove(key2);
			}
		}
	}
	,getBitmapData: function(id) {
		return this.bitmapData.get(id);
	}
	,getFont: function(id) {
		return this.font.get(id);
	}
	,getSound: function(id) {
		return this.sound.get(id);
	}
	,hasBitmapData: function(id) {
		return this.bitmapData.exists(id);
	}
	,hasFont: function(id) {
		return this.font.exists(id);
	}
	,hasSound: function(id) {
		return this.sound.exists(id);
	}
	,removeBitmapData: function(id) {
		return this.bitmapData.remove(id);
	}
	,removeFont: function(id) {
		return this.font.remove(id);
	}
	,removeSound: function(id) {
		return this.sound.remove(id);
	}
	,setBitmapData: function(id,bitmapData) {
		this.bitmapData.set(id,bitmapData);
	}
	,setFont: function(id,font) {
		this.font.set(id,font);
	}
	,setSound: function(id,sound) {
		this.sound.set(id,sound);
	}
	,get_enabled: function() {
		return this.__enabled;
	}
	,set_enabled: function(value) {
		return this.__enabled = value;
	}
	,__class__: openfl.AssetCache
	,__properties__: {set_enabled:"set_enabled",get_enabled:"get_enabled"}
};
openfl.Assets = function() { };
$hxClasses["openfl.Assets"] = openfl.Assets;
openfl.Assets.__name__ = ["openfl","Assets"];
openfl.Assets.addEventListener = function(type,listener,useCapture,priority,useWeakReference) {
	if(useWeakReference == null) useWeakReference = false;
	if(priority == null) priority = 0;
	if(useCapture == null) useCapture = false;
	openfl.Assets.dispatcher.addEventListener(type,listener,useCapture,priority,useWeakReference);
};
openfl.Assets.dispatchEvent = function(event) {
	return openfl.Assets.dispatcher.dispatchEvent(event);
};
openfl.Assets.exists = function(id,type) {
	return lime.Assets.exists(id,type);
};
openfl.Assets.getBitmapData = function(id,useCache) {
	if(useCache == null) useCache = true;
	if(useCache && openfl.Assets.cache.get_enabled() && openfl.Assets.cache.hasBitmapData(id)) {
		var bitmapData = openfl.Assets.cache.getBitmapData(id);
		if(openfl.Assets.isValidBitmapData(bitmapData)) return bitmapData;
	}
	var image = lime.Assets.getImage(id,false);
	if(image != null) {
		var bitmapData1 = openfl.display.BitmapData.fromImage(image);
		if(useCache && openfl.Assets.cache.get_enabled()) openfl.Assets.cache.setBitmapData(id,bitmapData1);
		return bitmapData1;
	}
	return null;
};
openfl.Assets.getBytes = function(id) {
	return lime.Assets.getBytes(id);
};
openfl.Assets.getFont = function(id,useCache) {
	if(useCache == null) useCache = true;
	if(useCache && openfl.Assets.cache.get_enabled() && openfl.Assets.cache.hasFont(id)) return openfl.Assets.cache.getFont(id);
	var limeFont = lime.Assets.getFont(id,false);
	if(limeFont != null) {
		var font = openfl.text.Font.__fromLimeFont(limeFont);
		if(useCache && openfl.Assets.cache.get_enabled()) openfl.Assets.cache.setFont(id,font);
		return font;
	}
	return new openfl.text.Font();
};
openfl.Assets.getLibrary = function(name) {
	if(name == null || name == "") name = "default";
	return lime.Assets.libraries.get(name);
};
openfl.Assets.getMovieClip = function(id) {
	var libraryName = id.substring(0,id.indexOf(":"));
	var symbolName;
	var pos = id.indexOf(":") + 1;
	symbolName = HxOverrides.substr(id,pos,null);
	var library = openfl.Assets.getLibrary(libraryName);
	if(library != null) {
		if(library.exists(symbolName,"MOVIE_CLIP")) {
			if(library.isLocal(symbolName,"MOVIE_CLIP")) return library.getMovieClip(symbolName); else haxe.Log.trace("[openfl.Assets] MovieClip asset \"" + id + "\" exists, but only asynchronously",{ fileName : "Assets.hx", lineNumber : 221, className : "openfl.Assets", methodName : "getMovieClip"});
		} else haxe.Log.trace("[openfl.Assets] There is no MovieClip asset with an ID of \"" + id + "\"",{ fileName : "Assets.hx", lineNumber : 227, className : "openfl.Assets", methodName : "getMovieClip"});
	} else haxe.Log.trace("[openfl.Assets] There is no asset library named \"" + libraryName + "\"",{ fileName : "Assets.hx", lineNumber : 233, className : "openfl.Assets", methodName : "getMovieClip"});
	return null;
};
openfl.Assets.getMusic = function(id,useCache) {
	if(useCache == null) useCache = true;
	var path = lime.Assets.getPath(id);
	if(path != null) return new openfl.media.Sound(new openfl.net.URLRequest(path));
	return null;
};
openfl.Assets.getPath = function(id) {
	return lime.Assets.getPath(id);
};
openfl.Assets.getSound = function(id,useCache) {
	if(useCache == null) useCache = true;
	if(useCache && openfl.Assets.cache.get_enabled() && openfl.Assets.cache.hasSound(id)) {
		var sound = openfl.Assets.cache.getSound(id);
		if(openfl.Assets.isValidSound(sound)) return sound;
	}
	var path = lime.Assets.getPath(id);
	if(path != null) return new openfl.media.Sound(new openfl.net.URLRequest(path));
	return null;
};
openfl.Assets.getText = function(id) {
	return lime.Assets.getText(id);
};
openfl.Assets.hasEventListener = function(type) {
	return openfl.Assets.dispatcher.hasEventListener(type);
};
openfl.Assets.isLocal = function(id,type,useCache) {
	if(useCache == null) useCache = true;
	if(useCache && openfl.Assets.cache.get_enabled()) {
		if(type == "IMAGE" || type == null) {
			if(openfl.Assets.cache.hasBitmapData(id)) return true;
		}
		if(type == "FONT" || type == null) {
			if(openfl.Assets.cache.hasFont(id)) return true;
		}
		if(type == "SOUND" || type == "MUSIC" || type == null) {
			if(openfl.Assets.cache.hasSound(id)) return true;
		}
	}
	var libraryName = id.substring(0,id.indexOf(":"));
	var symbolName;
	var pos = id.indexOf(":") + 1;
	symbolName = HxOverrides.substr(id,pos,null);
	var library = openfl.Assets.getLibrary(libraryName);
	if(library != null) return library.isLocal(symbolName,type);
	return false;
};
openfl.Assets.isValidBitmapData = function(bitmapData) {
	return bitmapData != null;
	return true;
};
openfl.Assets.isValidSound = function(sound) {
	return true;
};
openfl.Assets.list = function(type) {
	return lime.Assets.list(type);
};
openfl.Assets.loadBitmapData = function(id,handler,useCache) {
	if(useCache == null) useCache = true;
	if(useCache && openfl.Assets.cache.get_enabled() && openfl.Assets.cache.hasBitmapData(id)) {
		var bitmapData = openfl.Assets.cache.getBitmapData(id);
		if(openfl.Assets.isValidBitmapData(bitmapData)) {
			handler(bitmapData);
			return;
		}
	}
	lime.Assets.loadImage(id,function(image) {
		if(image != null) {
			var bitmapData1 = openfl.display.BitmapData.fromImage(image);
			if(useCache && openfl.Assets.cache.get_enabled()) openfl.Assets.cache.setBitmapData(id,bitmapData1);
			handler(bitmapData1);
		}
	},false);
};
openfl.Assets.loadBytes = function(id,handler) {
	var libraryName = id.substring(0,id.indexOf(":"));
	var symbolName;
	var pos = id.indexOf(":") + 1;
	symbolName = HxOverrides.substr(id,pos,null);
	var library = openfl.Assets.getLibrary(libraryName);
	if(library != null) {
		if(library.exists(symbolName,"BINARY")) {
			library.loadBytes(symbolName,handler);
			return;
		} else haxe.Log.trace("[openfl.Assets] There is no String or ByteArray asset with an ID of \"" + id + "\"",{ fileName : "Assets.hx", lineNumber : 546, className : "openfl.Assets", methodName : "loadBytes"});
	} else haxe.Log.trace("[openfl.Assets] There is no asset library named \"" + libraryName + "\"",{ fileName : "Assets.hx", lineNumber : 552, className : "openfl.Assets", methodName : "loadBytes"});
	handler(null);
};
openfl.Assets.loadFont = function(id,handler,useCache) {
	if(useCache == null) useCache = true;
	if(useCache && openfl.Assets.cache.get_enabled() && openfl.Assets.cache.hasFont(id)) {
		handler(openfl.Assets.cache.getFont(id));
		return;
	}
	var libraryName = id.substring(0,id.indexOf(":"));
	var symbolName;
	var pos = id.indexOf(":") + 1;
	symbolName = HxOverrides.substr(id,pos,null);
	var library = openfl.Assets.getLibrary(libraryName);
	if(library != null) {
		if(library.exists(symbolName,"FONT")) {
			library.loadFont(symbolName,function(limeFont) {
				var font = openfl.text.Font.__fromLimeFont(limeFont);
				if(useCache && openfl.Assets.cache.get_enabled()) openfl.Assets.cache.setFont(id,font);
				handler(font);
			});
			return;
		} else haxe.Log.trace("[openfl.Assets] There is no Font asset with an ID of \"" + id + "\"",{ fileName : "Assets.hx", lineNumber : 611, className : "openfl.Assets", methodName : "loadFont"});
	} else haxe.Log.trace("[openfl.Assets] There is no asset library named \"" + libraryName + "\"",{ fileName : "Assets.hx", lineNumber : 617, className : "openfl.Assets", methodName : "loadFont"});
	handler(null);
};
openfl.Assets.loadLibrary = function(name,handler) {
	lime.Assets.loadLibrary(name,handler);
};
openfl.Assets.loadMusic = function(id,handler,useCache) {
	if(useCache == null) useCache = true;
	handler(openfl.Assets.getMusic(id,useCache));
};
openfl.Assets.loadMovieClip = function(id,handler) {
	var libraryName = id.substring(0,id.indexOf(":"));
	var symbolName;
	var pos = id.indexOf(":") + 1;
	symbolName = HxOverrides.substr(id,pos,null);
	var library = openfl.Assets.getLibrary(libraryName);
	if(library != null) {
		if(library.exists(symbolName,"MOVIE_CLIP")) {
			library.loadMovieClip(symbolName,handler);
			return;
		} else haxe.Log.trace("[openfl.Assets] There is no MovieClip asset with an ID of \"" + id + "\"",{ fileName : "Assets.hx", lineNumber : 695, className : "openfl.Assets", methodName : "loadMovieClip"});
	} else haxe.Log.trace("[openfl.Assets] There is no asset library named \"" + libraryName + "\"",{ fileName : "Assets.hx", lineNumber : 701, className : "openfl.Assets", methodName : "loadMovieClip"});
	handler(null);
};
openfl.Assets.loadSound = function(id,handler,useCache) {
	if(useCache == null) useCache = true;
	handler(openfl.Assets.getSound(id,useCache));
};
openfl.Assets.loadText = function(id,handler) {
	lime.Assets.loadText(id,handler);
};
openfl.Assets.registerLibrary = function(name,library) {
	lime.Assets.registerLibrary(name,library);
};
openfl.Assets.removeEventListener = function(type,listener,capture) {
	if(capture == null) capture = false;
	openfl.Assets.dispatcher.removeEventListener(type,listener,capture);
};
openfl.Assets.resolveClass = function(name) {
	return Type.resolveClass(name);
};
openfl.Assets.resolveEnum = function(name) {
	var value = Type.resolveEnum(name);
	return value;
};
openfl.Assets.unloadLibrary = function(name) {
	lime.Assets.unloadLibrary(name);
};
openfl.Assets.library_onEvent = function(library,type) {
	if(type == "change") {
		openfl.Assets.cache.clear();
		openfl.Assets.dispatchEvent(new openfl.events.Event(openfl.events.Event.CHANGE));
	}
};
openfl.AssetLibrary = function() {
	lime.AssetLibrary.call(this);
};
$hxClasses["openfl.AssetLibrary"] = openfl.AssetLibrary;
openfl.AssetLibrary.__name__ = ["openfl","AssetLibrary"];
openfl.AssetLibrary.__super__ = lime.AssetLibrary;
openfl.AssetLibrary.prototype = $extend(lime.AssetLibrary.prototype,{
	getMovieClip: function(id) {
		return null;
	}
	,getMusic: function(id) {
		return this.getSound(id);
	}
	,getSound: function(id) {
		return null;
	}
	,loadMovieClip: function(id,handler) {
		handler(this.getMovieClip(id));
	}
	,loadMusic: function(id,handler) {
		handler(this.getMusic(id));
	}
	,loadSound: function(id,handler) {
		handler(this.getSound(id));
	}
	,__class__: openfl.AssetLibrary
});
openfl._Assets = {};
openfl._Assets.AssetType_Impl_ = function() { };
$hxClasses["openfl._Assets.AssetType_Impl_"] = openfl._Assets.AssetType_Impl_;
openfl._Assets.AssetType_Impl_.__name__ = ["openfl","_Assets","AssetType_Impl_"];
openfl.display.MovieClip = function() {
	openfl.display.Sprite.call(this);
	this.__currentFrame = 0;
	this.__currentLabels = [];
	this.__totalFrames = 0;
	this.enabled = true;
};
$hxClasses["openfl.display.MovieClip"] = openfl.display.MovieClip;
openfl.display.MovieClip.__name__ = ["openfl","display","MovieClip"];
openfl.display.MovieClip.__super__ = openfl.display.Sprite;
openfl.display.MovieClip.prototype = $extend(openfl.display.Sprite.prototype,{
	currentFrame: null
	,currentFrameLabel: null
	,currentLabel: null
	,currentLabels: null
	,enabled: null
	,framesLoaded: null
	,totalFrames: null
	,__currentFrame: null
	,__currentFrameLabel: null
	,__currentLabel: null
	,__currentLabels: null
	,__totalFrames: null
	,gotoAndPlay: function(frame,scene) {
	}
	,gotoAndStop: function(frame,scene) {
	}
	,nextFrame: function() {
	}
	,play: function() {
	}
	,prevFrame: function() {
	}
	,stop: function() {
	}
	,get_currentFrame: function() {
		return this.__currentFrame;
	}
	,get_currentFrameLabel: function() {
		return this.__currentFrameLabel;
	}
	,get_currentLabel: function() {
		return this.__currentLabel;
	}
	,get_currentLabels: function() {
		return this.__currentLabels;
	}
	,get_framesLoaded: function() {
		return this.__totalFrames;
	}
	,get_totalFrames: function() {
		return this.__totalFrames;
	}
	,__class__: openfl.display.MovieClip
	,__properties__: $extend(openfl.display.Sprite.prototype.__properties__,{get_totalFrames:"get_totalFrames",get_framesLoaded:"get_framesLoaded",get_currentLabels:"get_currentLabels",get_currentLabel:"get_currentLabel",get_currentFrameLabel:"get_currentFrameLabel",get_currentFrame:"get_currentFrame"})
});
openfl.display.LoaderInfo = function() {
	openfl.events.EventDispatcher.call(this);
	this.applicationDomain = openfl.system.ApplicationDomain.currentDomain;
	this.bytesLoaded = 0;
	this.bytesTotal = 0;
	this.childAllowsParent = true;
	this.parameters = { };
};
$hxClasses["openfl.display.LoaderInfo"] = openfl.display.LoaderInfo;
openfl.display.LoaderInfo.__name__ = ["openfl","display","LoaderInfo"];
openfl.display.LoaderInfo.create = function(loader) {
	var loaderInfo = new openfl.display.LoaderInfo();
	loaderInfo.uncaughtErrorEvents = new openfl.events.UncaughtErrorEvents();
	if(loader != null) loaderInfo.loader = loader; else loaderInfo.url = openfl.display.LoaderInfo.__rootURL;
	return loaderInfo;
};
openfl.display.LoaderInfo.__super__ = openfl.events.EventDispatcher;
openfl.display.LoaderInfo.prototype = $extend(openfl.events.EventDispatcher.prototype,{
	applicationDomain: null
	,bytes: null
	,bytesLoaded: null
	,bytesTotal: null
	,childAllowsParent: null
	,content: null
	,contentType: null
	,frameRate: null
	,height: null
	,loader: null
	,loaderURL: null
	,parameters: null
	,parentAllowsChild: null
	,sameDomain: null
	,sharedEvents: null
	,uncaughtErrorEvents: null
	,url: null
	,width: null
	,__class__: openfl.display.LoaderInfo
});
openfl.system = {};
openfl.system.ApplicationDomain = function(parentDomain) {
	if(parentDomain != null) this.parentDomain = parentDomain; else this.parentDomain = openfl.system.ApplicationDomain.currentDomain;
};
$hxClasses["openfl.system.ApplicationDomain"] = openfl.system.ApplicationDomain;
openfl.system.ApplicationDomain.__name__ = ["openfl","system","ApplicationDomain"];
openfl.system.ApplicationDomain.prototype = {
	parentDomain: null
	,getDefinition: function(name) {
		return Type.resolveClass(name);
	}
	,hasDefinition: function(name) {
		return Type.resolveClass(name) != null;
	}
	,__class__: openfl.system.ApplicationDomain
};
openfl.events.UncaughtErrorEvents = function(target) {
	openfl.events.EventDispatcher.call(this,target);
};
$hxClasses["openfl.events.UncaughtErrorEvents"] = openfl.events.UncaughtErrorEvents;
openfl.events.UncaughtErrorEvents.__name__ = ["openfl","events","UncaughtErrorEvents"];
openfl.events.UncaughtErrorEvents.__super__ = openfl.events.EventDispatcher;
openfl.events.UncaughtErrorEvents.prototype = $extend(openfl.events.EventDispatcher.prototype,{
	__class__: openfl.events.UncaughtErrorEvents
});
openfl.geom.ColorTransform = function(redMultiplier,greenMultiplier,blueMultiplier,alphaMultiplier,redOffset,greenOffset,blueOffset,alphaOffset) {
	if(alphaOffset == null) alphaOffset = 0;
	if(blueOffset == null) blueOffset = 0;
	if(greenOffset == null) greenOffset = 0;
	if(redOffset == null) redOffset = 0;
	if(alphaMultiplier == null) alphaMultiplier = 1;
	if(blueMultiplier == null) blueMultiplier = 1;
	if(greenMultiplier == null) greenMultiplier = 1;
	if(redMultiplier == null) redMultiplier = 1;
	this.redMultiplier = redMultiplier;
	this.greenMultiplier = greenMultiplier;
	this.blueMultiplier = blueMultiplier;
	this.alphaMultiplier = alphaMultiplier;
	this.redOffset = redOffset;
	this.greenOffset = greenOffset;
	this.blueOffset = blueOffset;
	this.alphaOffset = alphaOffset;
};
$hxClasses["openfl.geom.ColorTransform"] = openfl.geom.ColorTransform;
openfl.geom.ColorTransform.__name__ = ["openfl","geom","ColorTransform"];
openfl.geom.ColorTransform.prototype = {
	alphaMultiplier: null
	,alphaOffset: null
	,blueMultiplier: null
	,blueOffset: null
	,greenMultiplier: null
	,greenOffset: null
	,redMultiplier: null
	,redOffset: null
	,concat: function(second) {
		this.redMultiplier += second.redMultiplier;
		this.greenMultiplier += second.greenMultiplier;
		this.blueMultiplier += second.blueMultiplier;
		this.alphaMultiplier += second.alphaMultiplier;
	}
	,__combine: function(ct) {
		this.redMultiplier *= ct.redMultiplier;
		this.greenMultiplier *= ct.greenMultiplier;
		this.blueMultiplier *= ct.blueMultiplier;
		this.alphaMultiplier *= ct.alphaMultiplier;
		this.redOffset += ct.redOffset;
		this.greenOffset += ct.greenOffset;
		this.blueOffset += ct.blueOffset;
		this.alphaOffset += ct.alphaOffset;
	}
	,__equals: function(ct,skipAlphaMultiplier) {
		if(skipAlphaMultiplier == null) skipAlphaMultiplier = false;
		return ct != null && this.redMultiplier == ct.redMultiplier && this.greenMultiplier == ct.greenMultiplier && this.blueMultiplier == ct.blueMultiplier && (skipAlphaMultiplier || this.alphaMultiplier == ct.alphaMultiplier) && this.redOffset == ct.redOffset && this.greenOffset == ct.greenOffset && this.blueOffset == ct.blueOffset && this.alphaOffset == ct.alphaOffset;
	}
	,__clone: function() {
		return new openfl.geom.ColorTransform(this.redMultiplier,this.greenMultiplier,this.blueMultiplier,this.alphaMultiplier,this.redOffset,this.greenOffset,this.blueOffset,this.alphaOffset);
	}
	,get_color: function() {
		return (this.redOffset | 0) << 16 | (this.greenOffset | 0) << 8 | (this.blueOffset | 0);
	}
	,set_color: function(value) {
		this.redOffset = value >> 16 & 255;
		this.greenOffset = value >> 8 & 255;
		this.blueOffset = value & 255;
		this.redMultiplier = 0;
		this.greenMultiplier = 0;
		this.blueMultiplier = 0;
		return this.get_color();
	}
	,__toLimeColorMatrix: function() {
		return new Float32Array([this.redMultiplier,0,0,0,this.redOffset / 255,0,this.greenMultiplier,0,0,this.greenOffset / 255,0,0,this.blueMultiplier,0,this.blueOffset / 255,0,0,0,this.alphaMultiplier,this.alphaOffset / 255]);
	}
	,__class__: openfl.geom.ColorTransform
	,__properties__: {set_color:"set_color",get_color:"get_color"}
};
openfl.Lib = function() { };
$hxClasses["openfl.Lib"] = openfl.Lib;
openfl.Lib.__name__ = ["openfl","Lib"];
openfl.Lib.application = null;
openfl.Lib["as"] = function(v,c) {
	if(js.Boot.__instanceof(v,c)) return v; else return null;
};
openfl.Lib.attach = function(name) {
	return new openfl.display.MovieClip();
};
openfl.Lib.embed = $hx_exports.openfl.embed = function(elementName,width,height,background,assetsPrefix) {
	lime.system.System.embed(elementName,width,height,background,assetsPrefix);
};
openfl.Lib.getTimer = function() {
	return lime.system.System.getTimer();
};
openfl.Lib.getURL = function(request,target) {
	if(target == null) target = "_blank";
	window.open(request.url,target);
};
openfl.Lib.notImplemented = function(api) {
	if(!openfl.Lib.__sentWarnings.exists(api)) {
		openfl.Lib.__sentWarnings.set(api,true);
		haxe.Log.trace("Warning: " + api + " is not implemented",{ fileName : "Lib.hx", lineNumber : 114, className : "openfl.Lib", methodName : "notImplemented"});
	}
};
openfl.Lib.preventDefaultTouchMove = function() {
	window.document.addEventListener("touchmove",function(evt) {
		evt.preventDefault();
	},false);
};
openfl.Lib.trace = function(arg) {
	haxe.Log.trace(arg,{ fileName : "Lib.hx", lineNumber : 145, className : "openfl.Lib", methodName : "trace"});
};
openfl.Memory = function() { };
$hxClasses["openfl.Memory"] = openfl.Memory;
openfl.Memory.__name__ = ["openfl","Memory"];
openfl.Memory.gcRef = null;
openfl.Memory.len = null;
openfl.Memory._setPositionTemporarily = function(position,action) {
	var oldPosition = openfl.Memory.gcRef.position;
	openfl.Memory.gcRef.position = position;
	var value = action();
	openfl.Memory.gcRef.position = oldPosition;
	return value;
};
openfl.Memory.getByte = function(addr) {
	return openfl.Memory.gcRef.data.getInt8(addr);
};
openfl.Memory.getDouble = function(addr) {
	return openfl.Memory._setPositionTemporarily(addr,function() {
		return openfl.Memory.gcRef.readDouble();
	});
};
openfl.Memory.getFloat = function(addr) {
	return openfl.Memory._setPositionTemporarily(addr,function() {
		return openfl.Memory.gcRef.readFloat();
	});
};
openfl.Memory.getI32 = function(addr) {
	return openfl.Memory._setPositionTemporarily(addr,function() {
		return openfl.Memory.gcRef.readInt();
	});
};
openfl.Memory.getUI16 = function(addr) {
	return openfl.Memory._setPositionTemporarily(addr,function() {
		return openfl.Memory.gcRef.readUnsignedShort();
	});
};
openfl.Memory.select = function(inBytes) {
	openfl.Memory.gcRef = inBytes;
	if(inBytes != null) openfl.Memory.len = inBytes.length; else openfl.Memory.len = 0;
};
openfl.Memory.setByte = function(addr,v) {
	openfl.Memory.gcRef.data.setUint8(addr,v);
};
openfl.Memory.setDouble = function(addr,v) {
	openfl.Memory._setPositionTemporarily(addr,function() {
		openfl.Memory.gcRef.writeDouble(v);
	});
};
openfl.Memory.setFloat = function(addr,v) {
	openfl.Memory._setPositionTemporarily(addr,function() {
		openfl.Memory.gcRef.writeFloat(v);
	});
};
openfl.Memory.setI16 = function(addr,v) {
	openfl.Memory._setPositionTemporarily(addr,function() {
		openfl.Memory.gcRef.writeUnsignedShort(v);
	});
};
openfl.Memory.setI32 = function(addr,v) {
	openfl.Memory._setPositionTemporarily(addr,function() {
		openfl.Memory.gcRef.writeInt(v);
	});
};
openfl._Vector = {};
openfl._Vector.Vector_Impl_ = function() { };
$hxClasses["openfl._Vector.Vector_Impl_"] = openfl._Vector.Vector_Impl_;
openfl._Vector.Vector_Impl_.__name__ = ["openfl","_Vector","Vector_Impl_"];
openfl._Vector.Vector_Impl_.__properties__ = {set_fixed:"set_fixed",get_fixed:"get_fixed",set_length:"set_length",get_length:"get_length"}
openfl._Vector.Vector_Impl_._new = function(length,fixed) {
	if(fixed == null) fixed = false;
	if(length == null) length = 0;
	var this1;
	this1 = new openfl.VectorData();
	var this2;
	this2 = new Array(length);
	this1.data = this2;
	this1.length = length;
	this1.fixed = fixed;
	return this1;
};
openfl._Vector.Vector_Impl_.concat = function(this1,a) {
	var vectorData = new openfl.VectorData();
	if(a != null) vectorData.length = this1.length + a.length; else vectorData.length = this1.length;
	vectorData.fixed = false;
	var this2;
	this2 = new Array(vectorData.length);
	vectorData.data = this2;
	haxe.ds._Vector.Vector_Impl_.blit(this1.data,0,vectorData.data,0,this1.length);
	if(a != null) haxe.ds._Vector.Vector_Impl_.blit(a.data,0,vectorData.data,this1.length,a.length);
	return vectorData;
};
openfl._Vector.Vector_Impl_.copy = function(this1) {
	var vectorData = new openfl.VectorData();
	vectorData.length = this1.length;
	vectorData.fixed = this1.fixed;
	var this2;
	this2 = new Array(this1.length);
	vectorData.data = this2;
	haxe.ds._Vector.Vector_Impl_.blit(this1.data,0,vectorData.data,0,this1.length);
	return vectorData;
};
openfl._Vector.Vector_Impl_.iterator = function(this1) {
	return new openfl.VectorDataIterator(this1);
};
openfl._Vector.Vector_Impl_.join = function(this1,sep) {
	var output = "";
	var _g1 = 0;
	var _g = this1.length;
	while(_g1 < _g) {
		var i = _g1++;
		if(i > 0) output += sep;
		output += Std.string(this1.data[i]);
	}
	return output;
};
openfl._Vector.Vector_Impl_.pop = function(this1) {
	var value = null;
	if(!this1.fixed) {
		if(this1.length > 0) {
			this1.length--;
			value = this1.data[this1.length];
		}
	}
	return value;
};
openfl._Vector.Vector_Impl_.push = function(this1,x) {
	if(!this1.fixed) {
		this1.length++;
		if(this1.data.length < this1.length) {
			var data;
			var this2;
			this2 = new Array(this1.data.length + 10);
			data = this2;
			haxe.ds._Vector.Vector_Impl_.blit(this1.data,0,data,0,this1.data.length);
			this1.data = data;
		}
		this1.data[this1.length - 1] = x;
	}
	return this1.length;
};
openfl._Vector.Vector_Impl_.reverse = function(this1) {
	var data;
	var this2;
	this2 = new Array(this1.length);
	data = this2;
	var _g1 = 0;
	var _g = this1.length;
	while(_g1 < _g) {
		var i = _g1++;
		data[this1.length - 1 - i] = this1.data[i];
	}
	this1.data = data;
};
openfl._Vector.Vector_Impl_.shift = function(this1) {
	if(!this1.fixed && this1.length > 0) {
		this1.length--;
		var value = this1.data[0];
		haxe.ds._Vector.Vector_Impl_.blit(this1.data,1,this1.data,0,this1.length);
		return value;
	}
	return null;
};
openfl._Vector.Vector_Impl_.unshift = function(this1,x) {
	if(!this1.fixed) {
		this1.length++;
		if(this1.data.length < this1.length) {
			var data;
			var this2;
			this2 = new Array(this1.length + 10);
			data = this2;
			haxe.ds._Vector.Vector_Impl_.blit(this1.data,0,data,1,this1.data.length);
			this1.data = data;
		} else haxe.ds._Vector.Vector_Impl_.blit(this1.data,0,this1.data,1,this1.length - 1);
		this1.data[0] = x;
	}
};
openfl._Vector.Vector_Impl_.slice = function(this1,pos,end) {
	if(end == null) end = 0;
	if(pos == null) pos = 0;
	if(pos < 0) pos += this1.length;
	if(end <= 0) end += this1.length;
	if(end > this1.length) end = this1.length;
	var length = end - pos;
	if(length <= 0 || length > this1.length) length = this1.length;
	var vectorData = new openfl.VectorData();
	vectorData.length = end - pos;
	vectorData.fixed = true;
	var this2;
	this2 = new Array(length);
	vectorData.data = this2;
	haxe.ds._Vector.Vector_Impl_.blit(this1.data,pos,vectorData.data,0,length);
	return vectorData;
};
openfl._Vector.Vector_Impl_.sort = function(this1,f) {
	var array = haxe.ds._Vector.Vector_Impl_.toArray(this1.data);
	array.sort(f);
	var vec;
	var this2;
	this2 = new Array(array.length);
	vec = this2;
	var _g1 = 0;
	var _g = array.length;
	while(_g1 < _g) {
		var i = _g1++;
		vec[i] = array[i];
	}
	this1.data = vec;
};
openfl._Vector.Vector_Impl_.splice = function(this1,pos,len) {
	if(pos < 0) pos += this1.length;
	if(pos + len > this1.length) len = this1.length - pos;
	if(len < 0) len = 0;
	var vectorData = new openfl.VectorData();
	vectorData.length = len;
	vectorData.fixed = false;
	var this2;
	this2 = new Array(len);
	vectorData.data = this2;
	haxe.ds._Vector.Vector_Impl_.blit(this1.data,pos,vectorData.data,0,len);
	if(len > 0) {
		this1.length -= len;
		haxe.ds._Vector.Vector_Impl_.blit(this1.data,pos + len,this1.data,pos,this1.length - pos);
	}
	return vectorData;
};
openfl._Vector.Vector_Impl_.toString = function(this1) {
	return haxe.ds._Vector.Vector_Impl_.toArray(this1.data).toString();
};
openfl._Vector.Vector_Impl_.indexOf = function(this1,x,from) {
	if(from == null) from = 0;
	var value = -1;
	var _g1 = from;
	var _g = this1.length;
	while(_g1 < _g) {
		var i = _g1++;
		if(this1.data[i] == x) {
			value = i;
			break;
		}
	}
	return value;
};
openfl._Vector.Vector_Impl_.lastIndexOf = function(this1,x,from) {
	if(from == null) from = 0;
	var value = -1;
	var i = this1.length - 1;
	while(i >= from) {
		if(this1.data[i] == x) {
			value = i;
			break;
		}
		i--;
	}
	return value;
};
openfl._Vector.Vector_Impl_.ofArray = function(a) {
	var vectorData = new openfl.VectorData();
	vectorData.length = a.length;
	vectorData.fixed = true;
	var vec;
	var this1;
	this1 = new Array(a.length);
	vec = this1;
	var _g1 = 0;
	var _g = a.length;
	while(_g1 < _g) {
		var i = _g1++;
		vec[i] = a[i];
	}
	vectorData.data = vec;
	return vectorData;
};
openfl._Vector.Vector_Impl_.convert = function(v) {
	return v;
};
openfl._Vector.Vector_Impl_.get = function(this1,index) {
	return this1.data[index];
};
openfl._Vector.Vector_Impl_.set = function(this1,key,value) {
	if(!this1.fixed) {
		if(key >= this1.length) this1.length = key + 1;
		if(this1.data.length < this1.length) {
			var data;
			var this2;
			this2 = new Array(this1.data.length + 10);
			data = this2;
			haxe.ds._Vector.Vector_Impl_.blit(this1.data,0,data,0,this1.data.length);
			this1.data = data;
		}
	}
	return this1.data[key] = value;
};
openfl._Vector.Vector_Impl_.fromArray = function(value) {
	var vectorData = new openfl.VectorData();
	vectorData.length = value.length;
	vectorData.fixed = true;
	var vec;
	var this1;
	this1 = new Array(value.length);
	vec = this1;
	var _g1 = 0;
	var _g = value.length;
	while(_g1 < _g) {
		var i = _g1++;
		vec[i] = value[i];
	}
	vectorData.data = vec;
	return vectorData;
};
openfl._Vector.Vector_Impl_.toArray = function(this1) {
	var value = new Array();
	var _g1 = 0;
	var _g = this1.data.length;
	while(_g1 < _g) {
		var i = _g1++;
		value.push(this1.data[i]);
	}
	return value;
};
openfl._Vector.Vector_Impl_.fromHaxeVector = function(value) {
	var vectorData = new openfl.VectorData();
	vectorData.length = value.length;
	vectorData.fixed = true;
	vectorData.data = value;
	return vectorData;
};
openfl._Vector.Vector_Impl_.toHaxeVector = function(this1) {
	return this1.data;
};
openfl._Vector.Vector_Impl_.fromVectorData = function(value) {
	return value;
};
openfl._Vector.Vector_Impl_.toVectorData = function(this1) {
	return this1;
};
openfl._Vector.Vector_Impl_.get_length = function(this1) {
	return this1.length;
};
openfl._Vector.Vector_Impl_.set_length = function(this1,value) {
	if(!this1.fixed) {
		if(value > this1.length) {
			var data;
			var this2;
			this2 = new Array(value);
			data = this2;
			haxe.ds._Vector.Vector_Impl_.blit(this1.data,0,data,0,Std["int"](Math.min(this1.data.length,value)));
			this1.data = data;
		}
		this1.length = value;
	}
	return value;
};
openfl._Vector.Vector_Impl_.get_fixed = function(this1) {
	return this1.fixed;
};
openfl._Vector.Vector_Impl_.set_fixed = function(this1,value) {
	return this1.fixed = value;
};
openfl.VectorDataIterator = function(data) {
	this.index = 0;
	this.vectorData = data;
};
$hxClasses["openfl.VectorDataIterator"] = openfl.VectorDataIterator;
openfl.VectorDataIterator.__name__ = ["openfl","VectorDataIterator"];
openfl.VectorDataIterator.prototype = {
	index: null
	,vectorData: null
	,hasNext: function() {
		return this.index < this.vectorData.length;
	}
	,next: function() {
		var index = this.index++;
		return this.vectorData.data[index];
	}
	,__class__: openfl.VectorDataIterator
};
openfl._internal = {};
openfl._internal.aglsl = {};
openfl._internal.aglsl.AGALTokenizer = function() {
};
$hxClasses["openfl._internal.aglsl.AGALTokenizer"] = openfl._internal.aglsl.AGALTokenizer;
openfl._internal.aglsl.AGALTokenizer.__name__ = ["openfl","_internal","aglsl","AGALTokenizer"];
openfl._internal.aglsl.AGALTokenizer.prototype = {
	decribeAGALByteArray: function(bytes) {
		var header = new openfl._internal.aglsl.Header();
		bytes.position = 0;
		if(bytes.readUnsignedByte() != 160) throw "Bad AGAL: Missing 0xa0 magic byte.";
		header.version = bytes.readUnsignedInt();
		if(header.version >= 16) {
			bytes.readUnsignedByte();
			header.version >>= 1;
		}
		if(bytes.readUnsignedByte() != 161) throw "Bad AGAL: Missing 0xa1 magic byte.";
		header.progid = bytes.readUnsignedByte();
		var _sw0_ = header.progid;
		switch(_sw0_) {
		case 1:
			header.type = "fragment";
			break;
		case 0:
			header.type = "vertex";
			break;
		case 2:
			header.type = "cpu";
			break;
		default:
			header.type = "";
		}
		var desc = new openfl._internal.aglsl.Description();
		var tokens = new Array();
		var agal2glsllut = openfl._internal.aglsl.Mapping.get_agal2glsllut();
		while(bytes.position < bytes.length) {
			var token = new openfl._internal.aglsl.Token();
			token.opcode = bytes.readUnsignedInt();
			var lutentry = openfl._internal.aglsl.Mapping.get_agal2glsllut()[token.opcode];
			if(lutentry == null) throw "Opcode not valid or not implemented yet: " + token.opcode;
			if(lutentry.matrixheight == 0) desc.hasmatrix = true;
			if(lutentry.dest) {
				token.dest.regnum = bytes.readUnsignedShort();
				token.dest.mask = bytes.readUnsignedByte();
				token.dest.regtype = bytes.readUnsignedByte();
				if(desc.regwrite[token.dest.regtype][token.dest.regnum] == null) desc.regwrite[token.dest.regtype][token.dest.regnum] = token.dest.mask; else desc.regwrite[token.dest.regtype][token.dest.regnum] |= token.dest.mask;
			} else {
				token.dest = null;
				bytes.readUnsignedInt();
			}
			if(lutentry.a) this.readReg(token.a,1,desc,bytes); else {
				token.a = null;
				bytes.readUnsignedInt();
				bytes.readUnsignedInt();
			}
			if(lutentry.b) this.readReg(token.b,lutentry.matrixheight | 0,desc,bytes); else {
				token.b = null;
				bytes.readUnsignedInt();
				bytes.readUnsignedInt();
			}
			tokens.push(token);
		}
		desc.header = header;
		desc.tokens = tokens;
		return desc;
	}
	,readReg: function(s,mh,desc,bytes) {
		s.regnum = bytes.readUnsignedShort();
		s.indexoffset = bytes.readByte();
		s.swizzle = bytes.readUnsignedByte();
		s.regtype = bytes.readUnsignedByte();
		desc.regread[s.regtype][s.regnum] = 15;
		if((function($this) {
			var $r;
			var $int = s.regtype;
			$r = $int < 0?4294967296.0 + $int:$int + 0.0;
			return $r;
		}(this)) == 5) {
			s.lodbiad = s.indexoffset;
			s.indexoffset = 0;
			s.swizzle = 0;
			s.readmode = bytes.readUnsignedByte();
			s.dim = s.readmode >> 4;
			s.readmode &= 15;
			s.special = bytes.readUnsignedByte();
			s.wrap = s.special >> 4;
			s.special &= 15;
			s.mipmap = bytes.readUnsignedByte();
			s.filter = s.mipmap >> 4;
			s.mipmap &= 15;
			desc.samplers[s.regnum] = s;
		} else {
			s.indexregtype = bytes.readUnsignedByte();
			s.indexselect = bytes.readUnsignedByte();
			s.indirectflag = bytes.readUnsignedByte();
		}
		if(s.indirectflag == 1) desc.hasindirect = true;
		if(s.indirectflag == 0 && mh > 0) {
			var mhi = 0;
			while(mhi < mh) {
				desc.regread[s.regtype][s.regnum + mhi] = desc.regread[s.regtype][s.regnum];
				mhi++;
			}
		}
	}
	,__class__: openfl._internal.aglsl.AGALTokenizer
};
openfl._internal.aglsl.AGLSLCompiler = function() {
};
$hxClasses["openfl._internal.aglsl.AGLSLCompiler"] = openfl._internal.aglsl.AGLSLCompiler;
openfl._internal.aglsl.AGLSLCompiler.__name__ = ["openfl","_internal","aglsl","AGLSLCompiler"];
openfl._internal.aglsl.AGLSLCompiler.prototype = {
	glsl: null
	,compile: function(programType,source) {
		var agalMiniAssembler = new openfl.utils.AGALMiniAssembler();
		var tokenizer = new openfl._internal.aglsl.AGALTokenizer();
		var data;
		var concatSource;
		switch(programType) {
		case "vertex":
			concatSource = "part vertex 1 \n" + source + "\nendpart\n";
			agalMiniAssembler.assemble(concatSource);
			data = agalMiniAssembler.r.get("vertex").data;
			break;
		case "fragment":
			concatSource = "part fragment 1 \n" + source + "\nendpart\n";
			agalMiniAssembler.assemble(concatSource);
			data = agalMiniAssembler.r.get("fragment").data;
			break;
		default:
			throw "Unknown Context3DProgramType";
		}
		var description = tokenizer.decribeAGALByteArray(data);
		var parser = new openfl._internal.aglsl.AGLSLParser();
		this.glsl = parser.parse(description);
		return this.glsl;
	}
	,__class__: openfl._internal.aglsl.AGLSLCompiler
};
openfl._internal.aglsl.AGLSLParser = function() {
};
$hxClasses["openfl._internal.aglsl.AGLSLParser"] = openfl._internal.aglsl.AGLSLParser;
openfl._internal.aglsl.AGLSLParser.__name__ = ["openfl","_internal","aglsl","AGLSLParser"];
openfl._internal.aglsl.AGLSLParser.prototype = {
	parse: function(desc) {
		var header = "";
		var body = "";
		var i = 0;
		header += "precision highp float;\n";
		var tag = desc.header.type.charAt(0);
		if(desc.header.type == "vertex") header += "uniform float yflip;\n";
		if(!desc.hasindirect) {
			i = 0;
			while(i < desc.regread[1].length) {
				if(desc.regread[1][i] > 0) header += "uniform vec4 " + tag + "c" + i + ";\n";
				i++;
			}
		} else header += "uniform vec4 " + tag + "carrr[" + openfl._internal.aglsl.Context3D.maxvertexconstants + "];\n";
		i = 0;
		while(i < desc.regread[2].length || i < desc.regwrite[2].length) {
			if(desc.regread[2][i] > 0 || desc.regwrite[2][i] > 0) header += "vec4 " + tag + "t" + i + ";\n";
			i++;
		}
		i = 0;
		while(i < desc.regread[0].length) {
			if(desc.regread[0][i] > 0) header += "attribute vec4 va" + i + ";\n";
			i++;
		}
		i = 0;
		while(i < desc.regread[4].length || i < desc.regwrite[4].length) {
			if(desc.regread[4][i] > 0 || desc.regwrite[4][i] > 0) header += "varying vec4 vi" + i + ";\n";
			i++;
		}
		var samptype = ["2D","Cube","3D",""];
		i = 0;
		while(i < desc.samplers.length) {
			if(desc.samplers[i] != null) header += "uniform sampler" + samptype[desc.samplers[i].dim & 3] + " fs" + i + ";\n";
			i++;
		}
		if(desc.header.type == "vertex") header += "vec4 outpos;\n";
		if(desc.writedepth) header += "vec4 tmp_FragDepth;\n";
		body += "void main() {\n";
		i = 0;
		while(i < desc.tokens.length) {
			var lutentry = openfl._internal.aglsl.Mapping.get_agal2glsllut()[desc.tokens[i].opcode];
			if(lutentry == null) throw "Opcode not valid or not implemented yet: ";
			var sublines = Std["int"](Math.max(lutentry.matrixheight,1));
			var _g = 0;
			while(_g < sublines) {
				var sl = _g++;
				var line = "  " + lutentry.s;
				var destregstring;
				var destcaststring;
				var destmaskstring;
				if(desc.tokens[i].dest != null) {
					if(lutentry.matrixheight > 0) {
						if((desc.tokens[i].dest.mask >> sl & 1) != 1) continue;
						destregstring = this.regtostring(desc.tokens[i].dest.regtype,desc.tokens[i].dest.regnum,desc,tag);
						destcaststring = "float";
						destmaskstring = ["x","y","z","w"][sl];
						destregstring += "." + destmaskstring;
					} else {
						destregstring = this.regtostring(desc.tokens[i].dest.regtype,desc.tokens[i].dest.regnum,desc,tag);
						if(desc.tokens[i].dest.mask != 15) {
							var ndest = 0;
							destmaskstring = "";
							if((desc.tokens[i].dest.mask & 1) != 0) {
								ndest++;
								destmaskstring += "x";
							}
							if((desc.tokens[i].dest.mask & 2) != 0) {
								ndest++;
								destmaskstring += "y";
							}
							if((desc.tokens[i].dest.mask & 4) != 0) {
								ndest++;
								destmaskstring += "z";
							}
							if((desc.tokens[i].dest.mask & 8) != 0) {
								ndest++;
								destmaskstring += "w";
							}
							destregstring += "." + destmaskstring;
							switch(ndest) {
							case 1:
								destcaststring = "float";
								break;
							case 2:
								destcaststring = "vec2";
								break;
							case 3:
								destcaststring = "vec3";
								break;
							default:
								throw "Unexpected destination mask" + desc.tokens[i].dest.mask;
							}
						} else {
							destcaststring = "vec4";
							destmaskstring = "xyzw";
						}
					}
					line = StringTools.replace(line,"%dest",destregstring);
					line = StringTools.replace(line,"%cast",destcaststring);
					line = StringTools.replace(line,"%dm",destmaskstring);
				}
				var dwm = 15;
				if(!lutentry.ndwm && lutentry.dest && desc.tokens[i].dest != null) dwm = desc.tokens[i].dest.mask;
				if(desc.tokens[i].a != null) line = StringTools.replace(line,"%a",this.sourcetostring(desc.tokens[i].a,0,dwm,lutentry.scalar,desc,tag));
				if(desc.tokens[i].b != null) {
					line = StringTools.replace(line,"%b",this.sourcetostring(desc.tokens[i].b,sl,dwm,lutentry.scalar,desc,tag));
					if(desc.tokens[i].b.regtype == 5) {
						var texdim = ["2D","Cube","3D"][desc.tokens[i].b.dim];
						var texsize = ["vec2","vec3","vec3"][desc.tokens[i].b.dim];
						line = StringTools.replace(line,"%texdim",texdim);
						line = StringTools.replace(line,"%texsize",texsize);
						var texlod = "";
						line = StringTools.replace(line,"%lod",texlod);
					}
				}
				body += line;
			}
			i++;
		}
		if(desc.header.type == "vertex") body += "  gl_Position = vec4(outpos.x, yflip*outpos.y, outpos.z*2.0 - outpos.w, outpos.w);\n";
		if(desc.writedepth) body += "  gl_FragDepth = clamp(tmp_FragDepth,0.0,1.0);\n";
		body += "}\n";
		return header + body;
	}
	,regtostring: function(regtype,regnum,desc,tag) {
		switch(regtype) {
		case 0:
			return "va" + regnum;
		case 1:
			if(desc.hasindirect && desc.header.type == "vertex") return "vcarrr[" + regnum + "]"; else return tag + "c" + regnum;
			break;
		case 2:
			return tag + "t" + regnum;
		case 3:
			if(desc.header.type == "vertex") return "outpos"; else return "gl_FragColor";
			break;
		case 4:
			return "vi" + regnum;
		case 5:
			return "fs" + regnum;
		case 6:
			return "tmp_FragDepth";
		default:
			throw "Unknown register type";
		}
	}
	,sourcetostring: function(s,subline,dwm,isscalar,desc,tag) {
		var swiz = ["x","y","z","w"];
		var r;
		if(s.indirectflag == 1) {
			r = "vcarrr[int(" + this.regtostring(s.indexregtype,s.regnum,desc,tag) + "." + swiz[s.indexselect] + ")";
			var realofs = subline + s.indexoffset;
			if(realofs < 0) if(realofs == null) r += "null"; else r += "" + realofs;
			if(realofs > 0) r += "+" + (realofs == null?"null":"" + realofs);
			r += "]";
		} else r = this.regtostring(s.regtype,s.regnum + subline,desc,tag);
		if((function($this) {
			var $r;
			var $int = s.regtype;
			$r = $int < 0?4294967296.0 + $int:$int + 0.0;
			return $r;
		}(this)) == 5) return r;
		if(isscalar) return r + "." + swiz[s.swizzle & 3];
		if(s.swizzle == 228 && dwm == 15) return r;
		r += ".";
		if((dwm & 1) != 0) r += swiz[s.swizzle & 3];
		if((dwm & 2) != 0) r += swiz[s.swizzle >> 2 & 3];
		if((dwm & 4) != 0) r += swiz[s.swizzle >> 4 & 3];
		if((dwm & 8) != 0) r += swiz[s.swizzle >> 6 & 3];
		return r;
	}
	,__class__: openfl._internal.aglsl.AGLSLParser
};
openfl._internal.aglsl.Sampler = function() {
	this.lodbias = 0;
	this.dim = 0;
	this.readmode = 0;
	this.special = 0;
	this.wrap = 0;
	this.mipmap = 0;
	this.filter = 0;
};
$hxClasses["openfl._internal.aglsl.Sampler"] = openfl._internal.aglsl.Sampler;
openfl._internal.aglsl.Sampler.__name__ = ["openfl","_internal","aglsl","Sampler"];
openfl._internal.aglsl.Sampler.prototype = {
	dim: null
	,filter: null
	,lodbias: null
	,mipmap: null
	,readmode: null
	,special: null
	,wrap: null
	,__class__: openfl._internal.aglsl.Sampler
};
openfl._internal.aglsl.Context3D = function() { };
$hxClasses["openfl._internal.aglsl.Context3D"] = openfl._internal.aglsl.Context3D;
openfl._internal.aglsl.Context3D.__name__ = ["openfl","_internal","aglsl","Context3D"];
openfl._internal.aglsl.Description = function() {
	this.regread = [[],[],[],[],[],[],[]];
	this.regwrite = [[],[],[],[],[],[],[]];
	this.hasindirect = false;
	this.writedepth = false;
	this.hasmatrix = false;
	this.samplers = [];
	this.tokens = [];
	this.header = new openfl._internal.aglsl.Header();
};
$hxClasses["openfl._internal.aglsl.Description"] = openfl._internal.aglsl.Description;
openfl._internal.aglsl.Description.__name__ = ["openfl","_internal","aglsl","Description"];
openfl._internal.aglsl.Description.prototype = {
	hasindirect: null
	,hasmatrix: null
	,header: null
	,regread: null
	,regwrite: null
	,samplers: null
	,tokens: null
	,writedepth: null
	,__class__: openfl._internal.aglsl.Description
};
openfl._internal.aglsl.Destination = function() {
	this.mask = 0;
	this.regnum = 0;
	this.regtype = 0;
	this.dim = 0;
};
$hxClasses["openfl._internal.aglsl.Destination"] = openfl._internal.aglsl.Destination;
openfl._internal.aglsl.Destination.__name__ = ["openfl","_internal","aglsl","Destination"];
openfl._internal.aglsl.Destination.prototype = {
	dim: null
	,filter: null
	,indexoffset: null
	,indexregtype: null
	,indexselect: null
	,indirectflag: null
	,lodbiad: null
	,mask: null
	,mipmap: null
	,readmode: null
	,regnum: null
	,regtype: null
	,special: null
	,swizzle: null
	,wrap: null
	,__class__: openfl._internal.aglsl.Destination
};
openfl._internal.aglsl.Header = function() {
	this.progid = 0;
	this.version = 0;
	this.type = "";
};
$hxClasses["openfl._internal.aglsl.Header"] = openfl._internal.aglsl.Header;
openfl._internal.aglsl.Header.__name__ = ["openfl","_internal","aglsl","Header"];
openfl._internal.aglsl.Header.prototype = {
	progid: null
	,type: null
	,version: null
	,__class__: openfl._internal.aglsl.Header
};
openfl._internal.aglsl.Mapping = function() { };
$hxClasses["openfl._internal.aglsl.Mapping"] = openfl._internal.aglsl.Mapping;
openfl._internal.aglsl.Mapping.__name__ = ["openfl","_internal","aglsl","Mapping"];
openfl._internal.aglsl.Mapping.__properties__ = {get_agal2glsllut:"get_agal2glsllut"}
openfl._internal.aglsl.Mapping._agal2glsllut = null;
openfl._internal.aglsl.Mapping.get_agal2glsllut = function() {
	if(openfl._internal.aglsl.Mapping._agal2glsllut == null) openfl._internal.aglsl.Mapping._agal2glsllut = [new openfl._internal.aglsl.OpLUT("%dest = %cast(%a);\n",0,true,true,false,null,null,null,null,null,null),new openfl._internal.aglsl.OpLUT("%dest = %cast(%a + %b);\n",0,true,true,true,null,null,null,null,null,null),new openfl._internal.aglsl.OpLUT("%dest = %cast(%a - %b);\n",0,true,true,true,null,null,null,null,null,null),new openfl._internal.aglsl.OpLUT("%dest = %cast(%a * %b);\n",0,true,true,true,null,null,null,null,null,null),new openfl._internal.aglsl.OpLUT("%dest = %cast(%a / %b);\n",0,true,true,true,null,null,null,null,null,null),new openfl._internal.aglsl.OpLUT("%dest = %cast(1.0) / %a;\n",0,true,true,false,null,null,null,null,null,null),new openfl._internal.aglsl.OpLUT("%dest = %cast(min(%a,%b));\n",0,true,true,true,null,null,null,null,null,null),new openfl._internal.aglsl.OpLUT("%dest = %cast(max(%a,%b));\n",0,true,true,true,null,null,null,null,null,null),new openfl._internal.aglsl.OpLUT("%dest = %cast(fract(%a));\n",0,true,true,false,null,null,null,null,null,null),new openfl._internal.aglsl.OpLUT("%dest = %cast(sqrt(abs(%a)));\n",0,true,true,false,null,null,null,null,null,null),new openfl._internal.aglsl.OpLUT("%dest = %cast(inversesqrt(abs(%a)));\n",0,true,true,false,null,null,null,null,null,null),new openfl._internal.aglsl.OpLUT("%dest = %cast(pow(abs(%a),%b));\n",0,true,true,true,null,null,null,null,null,null),new openfl._internal.aglsl.OpLUT("%dest = %cast(log2(abs(%a)));\n",0,true,true,false,null,null,null,null,null,null),new openfl._internal.aglsl.OpLUT("%dest = %cast(exp2(%a));\n",0,true,true,false,null,null,null,null,null,null),new openfl._internal.aglsl.OpLUT("%dest = %cast(normalize(vec3( %a ) ));\n",0,true,true,false,null,null,true,null,null,null),new openfl._internal.aglsl.OpLUT("%dest = %cast(sin(%a));\n",0,true,true,false,null,null,null,null,null,null),new openfl._internal.aglsl.OpLUT("%dest = %cast(cos(%a));\n",0,true,true,false,null,null,null,null,null,null),new openfl._internal.aglsl.OpLUT("%dest = %cast(cross(vec3(%a),vec3(%b)));\n",0,true,true,true,null,null,true,null,null,null),new openfl._internal.aglsl.OpLUT("%dest = %cast(dot(vec3(%a),vec3(%b)));\n",0,true,true,true,null,null,true,null,null,null),new openfl._internal.aglsl.OpLUT("%dest = %cast(dot(vec4(%a),vec4(%b)));\n",0,true,true,true,null,null,true,null,null,null),new openfl._internal.aglsl.OpLUT("%dest = %cast(abs(%a));\n",0,true,true,false,null,null,null,null,null,null),new openfl._internal.aglsl.OpLUT("%dest = %cast(%a * -1.0);\n",0,true,true,false,null,null,null,null,null,null),new openfl._internal.aglsl.OpLUT("%dest = %cast(clamp(%a,0.0,1.0));\n",0,true,true,false,null,null,null,null,null,null),new openfl._internal.aglsl.OpLUT("%dest = %cast(dot(vec3(%a),vec3(%b)));\n",null,true,true,true,3,3,true,null,null,null),new openfl._internal.aglsl.OpLUT("%dest = %cast(dot(vec4(%a),vec4(%b)));\n",null,true,true,true,4,4,true,null,null,null),new openfl._internal.aglsl.OpLUT("%dest = %cast(dot(vec4(%a),vec4(%b)));\n",null,true,true,true,4,3,true,null,null,null),new openfl._internal.aglsl.OpLUT("%dest = %cast(dFdx(%a));\n",0,true,true,false,null,null,null,null,null,null),new openfl._internal.aglsl.OpLUT("%dest = %cast(dFdx(%a));\n",0,true,true,false,null,null,null,null,null,null),new openfl._internal.aglsl.OpLUT("if (float(%a)==float(%b)) {;\n",0,false,true,true,null,null,null,true,null,null),new openfl._internal.aglsl.OpLUT("if (float(%a)!=float(%b)) {;\n",0,false,true,true,null,null,null,true,null,null),new openfl._internal.aglsl.OpLUT("if (float(%a)>=float(%b)) {;\n",0,false,true,true,null,null,null,true,null,null),new openfl._internal.aglsl.OpLUT("if (float(%a)<float(%b)) {;\n",0,false,true,true,null,null,null,true,null,null),new openfl._internal.aglsl.OpLUT("} else {;\n",0,false,false,false,null,null,null,null,null,null),new openfl._internal.aglsl.OpLUT("};\n",0,false,false,false,null,null,null,null,null,null),new openfl._internal.aglsl.OpLUT(null,null,null,null,false,null,null,null,null,null,null),new openfl._internal.aglsl.OpLUT(null,null,null,null,false,null,null,null,null,null,null),new openfl._internal.aglsl.OpLUT(null,null,null,null,false,null,null,null,null,null,null),new openfl._internal.aglsl.OpLUT(null,null,null,null,false,null,null,null,null,null,null),new openfl._internal.aglsl.OpLUT("%dest = %cast(texture%texdimLod(%b,%texsize(%a)).%dm);\n",null,true,true,true,null,null,null,null,true,null),new openfl._internal.aglsl.OpLUT("if ( float(%a)<0.0 ) discard;\n",null,false,true,false,null,null,null,true,null,null),new openfl._internal.aglsl.OpLUT("%dest = %cast(texture%texdim(%b,%texsize(%a)%lod).%dm);\n",null,true,true,true,null,null,true,null,true,true),new openfl._internal.aglsl.OpLUT("%dest = %cast(greaterThanEqual(%a,%b).%dm);\n",0,true,true,true,null,null,true,null,true,null),new openfl._internal.aglsl.OpLUT("%dest = %cast(lessThan(%a,%b).%dm);\n",0,true,true,true,null,null,true,null,true,null),new openfl._internal.aglsl.OpLUT("%dest = %cast(sign(%a));\n",0,true,true,false,null,null,null,null,null,null),new openfl._internal.aglsl.OpLUT("%dest = %cast(equal(%a,%b).%dm);\n",0,true,true,true,null,null,true,null,true,null),new openfl._internal.aglsl.OpLUT("%dest = %cast(notEqual(%a,%b).%dm);\n",0,true,true,true,null,null,true,null,true,null)];
	return openfl._internal.aglsl.Mapping._agal2glsllut;
};
openfl._internal.aglsl.OpLUT = function(s,flags,dest,a,b,matrixwidth,matrixheight,ndwm,scaler,dm,lod) {
	if(lod == null) lod = false;
	if(dm == null) dm = false;
	if(scaler == null) scaler = false;
	if(ndwm == null) ndwm = false;
	if(matrixheight == null) matrixheight = 0;
	if(matrixwidth == null) matrixwidth = 0;
	if(b == null) b = false;
	if(a == null) a = false;
	if(dest == null) dest = false;
	if(flags == null) flags = 0;
	this.s = s;
	this.flags = flags;
	this.dest = dest;
	this.a = a;
	this.b = b;
	this.matrixwidth = matrixwidth;
	this.matrixheight = matrixheight;
	this.ndwm = ndwm;
	this.scalar = scaler;
	this.dm = dm;
	this.lod = lod;
};
$hxClasses["openfl._internal.aglsl.OpLUT"] = openfl._internal.aglsl.OpLUT;
openfl._internal.aglsl.OpLUT.__name__ = ["openfl","_internal","aglsl","OpLUT"];
openfl._internal.aglsl.OpLUT.prototype = {
	a: null
	,b: null
	,dest: null
	,dm: null
	,flags: null
	,lod: null
	,matrixwidth: null
	,matrixheight: null
	,ndwm: null
	,s: null
	,scalar: null
	,__class__: openfl._internal.aglsl.OpLUT
};
openfl._internal.aglsl.Token = function() {
	this.dest = new openfl._internal.aglsl.Destination();
	this.opcode = 0;
	this.a = new openfl._internal.aglsl.Destination();
	this.b = new openfl._internal.aglsl.Destination();
};
$hxClasses["openfl._internal.aglsl.Token"] = openfl._internal.aglsl.Token;
openfl._internal.aglsl.Token.__name__ = ["openfl","_internal","aglsl","Token"];
openfl._internal.aglsl.Token.prototype = {
	a: null
	,b: null
	,dest: null
	,opcode: null
	,__class__: openfl._internal.aglsl.Token
};
openfl._internal.aglsl.assembler = {};
openfl._internal.aglsl.assembler.FS = function() {
};
$hxClasses["openfl._internal.aglsl.assembler.FS"] = openfl._internal.aglsl.assembler.FS;
openfl._internal.aglsl.assembler.FS.__name__ = ["openfl","_internal","aglsl","assembler","FS"];
openfl._internal.aglsl.assembler.FS.prototype = {
	format: null
	,size: null
	,__class__: openfl._internal.aglsl.assembler.FS
};
openfl._internal.aglsl.assembler.Flags = function() {
};
$hxClasses["openfl._internal.aglsl.assembler.Flags"] = openfl._internal.aglsl.assembler.Flags;
openfl._internal.aglsl.assembler.Flags.__name__ = ["openfl","_internal","aglsl","assembler","Flags"];
openfl._internal.aglsl.assembler.Flags.prototype = {
	fragonly: null
	,horizontal: null
	,matrix: null
	,simple: null
	,__class__: openfl._internal.aglsl.assembler.Flags
};
openfl._internal.aglsl.assembler.Opcode = function(dest,aformat,asize,bformat,bsize,opcode,simple,horizontal,fragonly,matrix) {
	if(matrix == null) matrix = false;
	if(fragonly == null) fragonly = false;
	if(horizontal == null) horizontal = false;
	this.a = new openfl._internal.aglsl.assembler.FS();
	this.b = new openfl._internal.aglsl.assembler.FS();
	this.flags = new openfl._internal.aglsl.assembler.Flags();
	this.dest = dest;
	this.a.format = aformat;
	this.a.size = asize;
	this.b.format = bformat;
	this.b.size = bsize;
	this.opcode = opcode;
	this.flags.simple = simple;
	this.flags.horizontal = horizontal;
	this.flags.fragonly = fragonly;
	this.flags.matrix = matrix;
};
$hxClasses["openfl._internal.aglsl.assembler.Opcode"] = openfl._internal.aglsl.assembler.Opcode;
openfl._internal.aglsl.assembler.Opcode.__name__ = ["openfl","_internal","aglsl","assembler","Opcode"];
openfl._internal.aglsl.assembler.Opcode.prototype = {
	a: null
	,b: null
	,dest: null
	,flags: null
	,opcode: null
	,__class__: openfl._internal.aglsl.assembler.Opcode
};
openfl._internal.aglsl.assembler.OpcodeMap = function() { };
$hxClasses["openfl._internal.aglsl.assembler.OpcodeMap"] = openfl._internal.aglsl.assembler.OpcodeMap;
openfl._internal.aglsl.assembler.OpcodeMap.__name__ = ["openfl","_internal","aglsl","assembler","OpcodeMap"];
openfl._internal.aglsl.assembler.OpcodeMap.__properties__ = {get_map:"get_map"}
openfl._internal.aglsl.assembler.OpcodeMap._map = null;
openfl._internal.aglsl.assembler.OpcodeMap.get_map = function() {
	if(openfl._internal.aglsl.assembler.OpcodeMap._map == null) {
		openfl._internal.aglsl.assembler.OpcodeMap._map = new haxe.ds.StringMap();
		var value = new openfl._internal.aglsl.assembler.Opcode("vector","vector",4,"none",0,0,true,false,false,false);
		openfl._internal.aglsl.assembler.OpcodeMap._map.set("mov",value);
		var value1 = new openfl._internal.aglsl.assembler.Opcode("vector","vector",4,"vector",4,1,true,false,false,false);
		openfl._internal.aglsl.assembler.OpcodeMap._map.set("add",value1);
		var value2 = new openfl._internal.aglsl.assembler.Opcode("vector","vector",4,"vector",4,2,true,false,false,false);
		openfl._internal.aglsl.assembler.OpcodeMap._map.set("sub",value2);
		var value3 = new openfl._internal.aglsl.assembler.Opcode("vector","vector",4,"vector",4,3,true,false,false,false);
		openfl._internal.aglsl.assembler.OpcodeMap._map.set("mul",value3);
		var value4 = new openfl._internal.aglsl.assembler.Opcode("vector","vector",4,"vector",4,4,true,false,false,false);
		openfl._internal.aglsl.assembler.OpcodeMap._map.set("div",value4);
		var value5 = new openfl._internal.aglsl.assembler.Opcode("vector","vector",4,"none",0,5,true,false,false,false);
		openfl._internal.aglsl.assembler.OpcodeMap._map.set("rcp",value5);
		var value6 = new openfl._internal.aglsl.assembler.Opcode("vector","vector",4,"vector",4,6,true,false,false,false);
		openfl._internal.aglsl.assembler.OpcodeMap._map.set("min",value6);
		var value7 = new openfl._internal.aglsl.assembler.Opcode("vector","vector",4,"vector",4,7,true,false,false,false);
		openfl._internal.aglsl.assembler.OpcodeMap._map.set("max",value7);
		var value8 = new openfl._internal.aglsl.assembler.Opcode("vector","vector",4,"none",0,8,true,false,false,false);
		openfl._internal.aglsl.assembler.OpcodeMap._map.set("frc",value8);
		var value9 = new openfl._internal.aglsl.assembler.Opcode("vector","vector",4,"none",0,9,true,false,false,false);
		openfl._internal.aglsl.assembler.OpcodeMap._map.set("sqt",value9);
		var value10 = new openfl._internal.aglsl.assembler.Opcode("vector","vector",4,"none",0,10,true,false,false,false);
		openfl._internal.aglsl.assembler.OpcodeMap._map.set("rsq",value10);
		var value11 = new openfl._internal.aglsl.assembler.Opcode("vector","vector",4,"vector",4,11,true,false,false,false);
		openfl._internal.aglsl.assembler.OpcodeMap._map.set("pow",value11);
		var value12 = new openfl._internal.aglsl.assembler.Opcode("vector","vector",4,"none",0,12,true,false,false,false);
		openfl._internal.aglsl.assembler.OpcodeMap._map.set("log",value12);
		var value13 = new openfl._internal.aglsl.assembler.Opcode("vector","vector",4,"none",0,13,true,false,false,false);
		openfl._internal.aglsl.assembler.OpcodeMap._map.set("exp",value13);
		var value14 = new openfl._internal.aglsl.assembler.Opcode("vector","vector",4,"none",0,14,true,false,false,false);
		openfl._internal.aglsl.assembler.OpcodeMap._map.set("nrm",value14);
		var value15 = new openfl._internal.aglsl.assembler.Opcode("vector","vector",4,"none",0,15,true,false,false,false);
		openfl._internal.aglsl.assembler.OpcodeMap._map.set("sin",value15);
		var value16 = new openfl._internal.aglsl.assembler.Opcode("vector","vector",4,"none",0,16,true,false,false,false);
		openfl._internal.aglsl.assembler.OpcodeMap._map.set("cos",value16);
		var value17 = new openfl._internal.aglsl.assembler.Opcode("vector","vector",4,"vector",4,17,true,true,false,false);
		openfl._internal.aglsl.assembler.OpcodeMap._map.set("crs",value17);
		var value18 = new openfl._internal.aglsl.assembler.Opcode("vector","vector",4,"vector",4,18,true,true,false,false);
		openfl._internal.aglsl.assembler.OpcodeMap._map.set("dp3",value18);
		var value19 = new openfl._internal.aglsl.assembler.Opcode("vector","vector",4,"vector",4,19,true,true,false,false);
		openfl._internal.aglsl.assembler.OpcodeMap._map.set("dp4",value19);
		var value20 = new openfl._internal.aglsl.assembler.Opcode("vector","vector",4,"none",0,20,true,false,false,false);
		openfl._internal.aglsl.assembler.OpcodeMap._map.set("abs",value20);
		var value21 = new openfl._internal.aglsl.assembler.Opcode("vector","vector",4,"none",0,21,true,false,false,false);
		openfl._internal.aglsl.assembler.OpcodeMap._map.set("neg",value21);
		var value22 = new openfl._internal.aglsl.assembler.Opcode("vector","vector",4,"none",0,22,true,false,false,false);
		openfl._internal.aglsl.assembler.OpcodeMap._map.set("sat",value22);
		var value23 = new openfl._internal.aglsl.assembler.Opcode("vector","vector",4,"sampler",1,38,true,false,true,false);
		openfl._internal.aglsl.assembler.OpcodeMap._map.set("ted",value23);
		var value24 = new openfl._internal.aglsl.assembler.Opcode("none","scalar",1,"none",0,39,true,false,true,false);
		openfl._internal.aglsl.assembler.OpcodeMap._map.set("kil",value24);
		var value25 = new openfl._internal.aglsl.assembler.Opcode("vector","vector",4,"sampler",1,40,true,false,true,false);
		openfl._internal.aglsl.assembler.OpcodeMap._map.set("tex",value25);
		var value26 = new openfl._internal.aglsl.assembler.Opcode("vector","matrix",3,"vector",3,23,true,false,false,true);
		openfl._internal.aglsl.assembler.OpcodeMap._map.set("m33",value26);
		var value27 = new openfl._internal.aglsl.assembler.Opcode("vector","matrix",4,"vector",4,24,true,false,false,true);
		openfl._internal.aglsl.assembler.OpcodeMap._map.set("m44",value27);
		var value28 = new openfl._internal.aglsl.assembler.Opcode("vector","matrix",3,"vector",4,25,true,false,false,true);
		openfl._internal.aglsl.assembler.OpcodeMap._map.set("m43",value28);
		var value29 = new openfl._internal.aglsl.assembler.Opcode("vector","vector",4,"vector",4,41,true,false,false,false);
		openfl._internal.aglsl.assembler.OpcodeMap._map.set("sge",value29);
		var value30 = new openfl._internal.aglsl.assembler.Opcode("vector","vector",4,"vector",4,42,true,false,false,false);
		openfl._internal.aglsl.assembler.OpcodeMap._map.set("slt",value30);
		var value31 = new openfl._internal.aglsl.assembler.Opcode("vector","vector",4,"vector",4,43,true,false,false,false);
		openfl._internal.aglsl.assembler.OpcodeMap._map.set("sgn",value31);
		var value32 = new openfl._internal.aglsl.assembler.Opcode("vector","vector",4,"vector",4,44,true,false,false,false);
		openfl._internal.aglsl.assembler.OpcodeMap._map.set("seq",value32);
		var value33 = new openfl._internal.aglsl.assembler.Opcode("vector","vector",4,"vector",4,45,true,false,false,false);
		openfl._internal.aglsl.assembler.OpcodeMap._map.set("sne",value33);
	}
	return openfl._internal.aglsl.assembler.OpcodeMap._map;
};
openfl._internal.aglsl.assembler.Part = function(name,version) {
	if(version == null) version = 0;
	if(name == null) name = "";
	this.name = name;
	this.version = version;
	this.data = new lime.utils.ByteArray();
	this.data.littleEndian = true;
	"littleEndian";
};
$hxClasses["openfl._internal.aglsl.assembler.Part"] = openfl._internal.aglsl.assembler.Part;
openfl._internal.aglsl.assembler.Part.__name__ = ["openfl","_internal","aglsl","assembler","Part"];
openfl._internal.aglsl.assembler.Part.prototype = {
	data: null
	,name: null
	,version: null
	,__class__: openfl._internal.aglsl.assembler.Part
};
openfl._internal.aglsl.assembler.Reg = function(code,desc) {
	this.code = code;
	this.desc = desc;
};
$hxClasses["openfl._internal.aglsl.assembler.Reg"] = openfl._internal.aglsl.assembler.Reg;
openfl._internal.aglsl.assembler.Reg.__name__ = ["openfl","_internal","aglsl","assembler","Reg"];
openfl._internal.aglsl.assembler.Reg.prototype = {
	code: null
	,desc: null
	,__class__: openfl._internal.aglsl.assembler.Reg
};
openfl._internal.aglsl.assembler.RegMap = function() { };
$hxClasses["openfl._internal.aglsl.assembler.RegMap"] = openfl._internal.aglsl.assembler.RegMap;
openfl._internal.aglsl.assembler.RegMap.__name__ = ["openfl","_internal","aglsl","assembler","RegMap"];
openfl._internal.aglsl.assembler.RegMap.__properties__ = {get_map:"get_map"}
openfl._internal.aglsl.assembler.RegMap._map = null;
openfl._internal.aglsl.assembler.RegMap.get_map = function() {
	if(openfl._internal.aglsl.assembler.RegMap._map == null) {
		openfl._internal.aglsl.assembler.RegMap._map = new haxe.ds.StringMap();
		openfl._internal.aglsl.assembler.RegMap._map.set("va",new openfl._internal.aglsl.assembler.Reg(0,"vertex attribute"));
		openfl._internal.aglsl.assembler.RegMap._map.set("fc",new openfl._internal.aglsl.assembler.Reg(1,"fragment constant"));
		openfl._internal.aglsl.assembler.RegMap._map.set("vc",new openfl._internal.aglsl.assembler.Reg(1,"vertex constant"));
		openfl._internal.aglsl.assembler.RegMap._map.set("ft",new openfl._internal.aglsl.assembler.Reg(2,"fragment temporary"));
		openfl._internal.aglsl.assembler.RegMap._map.set("vt",new openfl._internal.aglsl.assembler.Reg(2,"vertex temporary"));
		openfl._internal.aglsl.assembler.RegMap._map.set("vo",new openfl._internal.aglsl.assembler.Reg(3,"vertex output"));
		openfl._internal.aglsl.assembler.RegMap._map.set("op",new openfl._internal.aglsl.assembler.Reg(3,"vertex output"));
		openfl._internal.aglsl.assembler.RegMap._map.set("fd",new openfl._internal.aglsl.assembler.Reg(3,"fragment depth output"));
		openfl._internal.aglsl.assembler.RegMap._map.set("fo",new openfl._internal.aglsl.assembler.Reg(3,"fragment output"));
		openfl._internal.aglsl.assembler.RegMap._map.set("oc",new openfl._internal.aglsl.assembler.Reg(3,"fragment output"));
		openfl._internal.aglsl.assembler.RegMap._map.set("v",new openfl._internal.aglsl.assembler.Reg(4,"varying"));
		openfl._internal.aglsl.assembler.RegMap._map.set("vi",new openfl._internal.aglsl.assembler.Reg(4,"varying output"));
		openfl._internal.aglsl.assembler.RegMap._map.set("fi",new openfl._internal.aglsl.assembler.Reg(4,"varying input"));
		openfl._internal.aglsl.assembler.RegMap._map.set("fs",new openfl._internal.aglsl.assembler.Reg(5,"sampler"));
	}
	return openfl._internal.aglsl.assembler.RegMap._map;
};
openfl._internal.aglsl.assembler.Sampler = function(shift,mask,value) {
	this.shift = shift;
	this.mask = mask;
	this.value = value;
};
$hxClasses["openfl._internal.aglsl.assembler.Sampler"] = openfl._internal.aglsl.assembler.Sampler;
openfl._internal.aglsl.assembler.Sampler.__name__ = ["openfl","_internal","aglsl","assembler","Sampler"];
openfl._internal.aglsl.assembler.Sampler.prototype = {
	mask: null
	,shift: null
	,value: null
	,__class__: openfl._internal.aglsl.assembler.Sampler
};
openfl._internal.aglsl.assembler.SamplerMap = function() { };
$hxClasses["openfl._internal.aglsl.assembler.SamplerMap"] = openfl._internal.aglsl.assembler.SamplerMap;
openfl._internal.aglsl.assembler.SamplerMap.__name__ = ["openfl","_internal","aglsl","assembler","SamplerMap"];
openfl._internal.aglsl.assembler.SamplerMap.__properties__ = {get_map:"get_map"}
openfl._internal.aglsl.assembler.SamplerMap._map = null;
openfl._internal.aglsl.assembler.SamplerMap.get_map = function() {
	if(openfl._internal.aglsl.assembler.SamplerMap._map == null) {
		openfl._internal.aglsl.assembler.SamplerMap._map = new haxe.ds.StringMap();
		openfl._internal.aglsl.assembler.SamplerMap._map.set("rgba",new openfl._internal.aglsl.assembler.Sampler(8,15,0));
		openfl._internal.aglsl.assembler.SamplerMap._map.set("rg",new openfl._internal.aglsl.assembler.Sampler(8,15,5));
		openfl._internal.aglsl.assembler.SamplerMap._map.set("r",new openfl._internal.aglsl.assembler.Sampler(8,15,4));
		openfl._internal.aglsl.assembler.SamplerMap._map.set("compressed",new openfl._internal.aglsl.assembler.Sampler(8,15,1));
		openfl._internal.aglsl.assembler.SamplerMap._map.set("compressed_alpha",new openfl._internal.aglsl.assembler.Sampler(8,15,2));
		openfl._internal.aglsl.assembler.SamplerMap._map.set("dxt1",new openfl._internal.aglsl.assembler.Sampler(8,15,1));
		openfl._internal.aglsl.assembler.SamplerMap._map.set("dxt5",new openfl._internal.aglsl.assembler.Sampler(8,15,2));
		openfl._internal.aglsl.assembler.SamplerMap._map.set("2d",new openfl._internal.aglsl.assembler.Sampler(12,15,0));
		openfl._internal.aglsl.assembler.SamplerMap._map.set("cube",new openfl._internal.aglsl.assembler.Sampler(12,15,1));
		openfl._internal.aglsl.assembler.SamplerMap._map.set("3d",new openfl._internal.aglsl.assembler.Sampler(12,15,2));
		openfl._internal.aglsl.assembler.SamplerMap._map.set("centroid",new openfl._internal.aglsl.assembler.Sampler(16,1,1));
		openfl._internal.aglsl.assembler.SamplerMap._map.set("ignoresampler",new openfl._internal.aglsl.assembler.Sampler(16,4,4));
		openfl._internal.aglsl.assembler.SamplerMap._map.set("clamp",new openfl._internal.aglsl.assembler.Sampler(20,15,0));
		openfl._internal.aglsl.assembler.SamplerMap._map.set("repeat",new openfl._internal.aglsl.assembler.Sampler(20,15,1));
		openfl._internal.aglsl.assembler.SamplerMap._map.set("wrap",new openfl._internal.aglsl.assembler.Sampler(20,15,1));
		openfl._internal.aglsl.assembler.SamplerMap._map.set("nomip",new openfl._internal.aglsl.assembler.Sampler(24,15,0));
		openfl._internal.aglsl.assembler.SamplerMap._map.set("mipnone",new openfl._internal.aglsl.assembler.Sampler(24,15,0));
		openfl._internal.aglsl.assembler.SamplerMap._map.set("mipnearest",new openfl._internal.aglsl.assembler.Sampler(24,15,1));
		openfl._internal.aglsl.assembler.SamplerMap._map.set("miplinear",new openfl._internal.aglsl.assembler.Sampler(24,15,2));
		openfl._internal.aglsl.assembler.SamplerMap._map.set("nearest",new openfl._internal.aglsl.assembler.Sampler(28,15,0));
		openfl._internal.aglsl.assembler.SamplerMap._map.set("linear",new openfl._internal.aglsl.assembler.Sampler(28,15,1));
	}
	return openfl._internal.aglsl.assembler.SamplerMap._map;
};
openfl._internal.renderer = {};
openfl._internal.renderer.AbstractRenderer = function(width,height) {
	this.width = width;
	this.height = height;
};
$hxClasses["openfl._internal.renderer.AbstractRenderer"] = openfl._internal.renderer.AbstractRenderer;
openfl._internal.renderer.AbstractRenderer.__name__ = ["openfl","_internal","renderer","AbstractRenderer"];
openfl._internal.renderer.AbstractRenderer.prototype = {
	height: null
	,width: null
	,transparent: null
	,renderSession: null
	,render: function(stage) {
	}
	,renderShape: function(shape) {
	}
	,resize: function(width,height) {
	}
	,__class__: openfl._internal.renderer.AbstractRenderer
};
openfl._internal.renderer.RenderSession = function() {
};
$hxClasses["openfl._internal.renderer.RenderSession"] = openfl._internal.renderer.RenderSession;
openfl._internal.renderer.RenderSession.__name__ = ["openfl","_internal","renderer","RenderSession"];
openfl._internal.renderer.RenderSession.prototype = {
	context: null
	,element: null
	,gl: null
	,projectionMatrix: null
	,renderer: null
	,roundPixels: null
	,transformProperty: null
	,transformOriginProperty: null
	,vendorPrefix: null
	,z: null
	,drawCount: null
	,currentBlendMode: null
	,projection: null
	,offset: null
	,shaderManager: null
	,maskManager: null
	,filterManager: null
	,blendModeManager: null
	,spriteBatch: null
	,stencilManager: null
	,__class__: openfl._internal.renderer.RenderSession
};
openfl._internal.renderer.canvas = {};
openfl._internal.renderer.canvas.CanvasBitmap = function() { };
$hxClasses["openfl._internal.renderer.canvas.CanvasBitmap"] = openfl._internal.renderer.canvas.CanvasBitmap;
openfl._internal.renderer.canvas.CanvasBitmap.__name__ = ["openfl","_internal","renderer","canvas","CanvasBitmap"];
openfl._internal.renderer.canvas.CanvasBitmap.render = function(bitmap,renderSession) {
	if(!bitmap.__renderable || bitmap.__worldAlpha <= 0) return;
	var context = renderSession.context;
	if(bitmap.bitmapData != null && bitmap.bitmapData.__isValid) {
		if(bitmap.__mask != null) renderSession.maskManager.pushMask(bitmap.__mask);
		bitmap.bitmapData.__sync();
		context.globalAlpha = bitmap.__worldAlpha;
		var transform = bitmap.__worldTransform;
		var scrollRect = bitmap.get_scrollRect();
		if(renderSession.roundPixels) context.setTransform(transform.a,transform.b,transform.c,transform.d,transform.tx | 0,transform.ty | 0); else context.setTransform(transform.a,transform.b,transform.c,transform.d,transform.tx,transform.ty);
		if(!bitmap.smoothing) {
			context.mozImageSmoothingEnabled = false;
			context.webkitImageSmoothingEnabled = false;
			context.imageSmoothingEnabled = false;
		}
		if(scrollRect == null) context.drawImage(bitmap.bitmapData.__image.get_src(),0,0); else context.drawImage(bitmap.bitmapData.__image.get_src(),scrollRect.x,scrollRect.y,scrollRect.width,scrollRect.height,scrollRect.x,scrollRect.y,scrollRect.width,scrollRect.height);
		if(!bitmap.smoothing) {
			context.mozImageSmoothingEnabled = true;
			context.webkitImageSmoothingEnabled = true;
			context.imageSmoothingEnabled = true;
		}
		if(bitmap.__mask != null) renderSession.maskManager.popMask();
	}
};
openfl._internal.renderer.canvas.CanvasGraphics = function() { };
$hxClasses["openfl._internal.renderer.canvas.CanvasGraphics"] = openfl._internal.renderer.canvas.CanvasGraphics;
openfl._internal.renderer.canvas.CanvasGraphics.__name__ = ["openfl","_internal","renderer","canvas","CanvasGraphics"];
openfl._internal.renderer.canvas.CanvasGraphics.bounds = null;
openfl._internal.renderer.canvas.CanvasGraphics.hasFill = null;
openfl._internal.renderer.canvas.CanvasGraphics.hasStroke = null;
openfl._internal.renderer.canvas.CanvasGraphics.inPath = null;
openfl._internal.renderer.canvas.CanvasGraphics.inversePendingMatrix = null;
openfl._internal.renderer.canvas.CanvasGraphics.pendingMatrix = null;
openfl._internal.renderer.canvas.CanvasGraphics.positionX = null;
openfl._internal.renderer.canvas.CanvasGraphics.positionY = null;
openfl._internal.renderer.canvas.CanvasGraphics.setFill = null;
openfl._internal.renderer.canvas.CanvasGraphics.context = null;
openfl._internal.renderer.canvas.CanvasGraphics.pattern = null;
openfl._internal.renderer.canvas.CanvasGraphics.beginPath = function() {
	if(!openfl._internal.renderer.canvas.CanvasGraphics.inPath) {
		openfl._internal.renderer.canvas.CanvasGraphics.context.beginPath();
		openfl._internal.renderer.canvas.CanvasGraphics.inPath = true;
	}
};
openfl._internal.renderer.canvas.CanvasGraphics.beginPatternFill = function(bitmapFill,bitmapRepeat) {
	if(openfl._internal.renderer.canvas.CanvasGraphics.setFill || bitmapFill == null) return;
	if(openfl._internal.renderer.canvas.CanvasGraphics.pattern == null) openfl._internal.renderer.canvas.CanvasGraphics.pattern = openfl._internal.renderer.canvas.CanvasGraphics.context.createPattern(bitmapFill.__image.get_src(),bitmapRepeat?"repeat":"no-repeat");
	openfl._internal.renderer.canvas.CanvasGraphics.context.fillStyle = openfl._internal.renderer.canvas.CanvasGraphics.pattern;
	openfl._internal.renderer.canvas.CanvasGraphics.setFill = true;
};
openfl._internal.renderer.canvas.CanvasGraphics.closePath = function(closeFill) {
	if(openfl._internal.renderer.canvas.CanvasGraphics.inPath) {
		if(openfl._internal.renderer.canvas.CanvasGraphics.hasFill) {
			openfl._internal.renderer.canvas.CanvasGraphics.context.translate(-openfl._internal.renderer.canvas.CanvasGraphics.bounds.x,-openfl._internal.renderer.canvas.CanvasGraphics.bounds.y);
			if(openfl._internal.renderer.canvas.CanvasGraphics.pendingMatrix != null) {
				openfl._internal.renderer.canvas.CanvasGraphics.context.transform(openfl._internal.renderer.canvas.CanvasGraphics.pendingMatrix.a,openfl._internal.renderer.canvas.CanvasGraphics.pendingMatrix.b,openfl._internal.renderer.canvas.CanvasGraphics.pendingMatrix.c,openfl._internal.renderer.canvas.CanvasGraphics.pendingMatrix.d,openfl._internal.renderer.canvas.CanvasGraphics.pendingMatrix.tx,openfl._internal.renderer.canvas.CanvasGraphics.pendingMatrix.ty);
				openfl._internal.renderer.canvas.CanvasGraphics.context.fill();
				openfl._internal.renderer.canvas.CanvasGraphics.context.transform(openfl._internal.renderer.canvas.CanvasGraphics.inversePendingMatrix.a,openfl._internal.renderer.canvas.CanvasGraphics.inversePendingMatrix.b,openfl._internal.renderer.canvas.CanvasGraphics.inversePendingMatrix.c,openfl._internal.renderer.canvas.CanvasGraphics.inversePendingMatrix.d,openfl._internal.renderer.canvas.CanvasGraphics.inversePendingMatrix.tx,openfl._internal.renderer.canvas.CanvasGraphics.inversePendingMatrix.ty);
			} else openfl._internal.renderer.canvas.CanvasGraphics.context.fill();
			openfl._internal.renderer.canvas.CanvasGraphics.context.translate(openfl._internal.renderer.canvas.CanvasGraphics.bounds.x,openfl._internal.renderer.canvas.CanvasGraphics.bounds.y);
		}
		openfl._internal.renderer.canvas.CanvasGraphics.context.closePath();
		if(openfl._internal.renderer.canvas.CanvasGraphics.hasStroke) openfl._internal.renderer.canvas.CanvasGraphics.context.stroke();
	}
	openfl._internal.renderer.canvas.CanvasGraphics.inPath = false;
	if(closeFill) {
		openfl._internal.renderer.canvas.CanvasGraphics.hasFill = false;
		openfl._internal.renderer.canvas.CanvasGraphics.hasStroke = false;
		openfl._internal.renderer.canvas.CanvasGraphics.pendingMatrix = null;
		openfl._internal.renderer.canvas.CanvasGraphics.inversePendingMatrix = null;
	}
};
openfl._internal.renderer.canvas.CanvasGraphics.drawRoundRect = function(x,y,width,height,rx,ry) {
	if(ry == -1) ry = rx;
	rx *= 0.5;
	ry *= 0.5;
	if(rx > width / 2) rx = width / 2;
	if(ry > height / 2) ry = height / 2;
	var xe = x + width;
	var ye = y + height;
	var cx1 = -rx + rx * openfl._internal.renderer.canvas.CanvasGraphics.SIN45;
	var cx2 = -rx + rx * openfl._internal.renderer.canvas.CanvasGraphics.TAN22;
	var cy1 = -ry + ry * openfl._internal.renderer.canvas.CanvasGraphics.SIN45;
	var cy2 = -ry + ry * openfl._internal.renderer.canvas.CanvasGraphics.TAN22;
	openfl._internal.renderer.canvas.CanvasGraphics.context.moveTo(xe,ye - ry);
	openfl._internal.renderer.canvas.CanvasGraphics.context.quadraticCurveTo(xe,ye + cy2,xe + cx1,ye + cy1);
	openfl._internal.renderer.canvas.CanvasGraphics.context.quadraticCurveTo(xe + cx2,ye,xe - rx,ye);
	openfl._internal.renderer.canvas.CanvasGraphics.context.lineTo(x + rx,ye);
	openfl._internal.renderer.canvas.CanvasGraphics.context.quadraticCurveTo(x - cx2,ye,x - cx1,ye + cy1);
	openfl._internal.renderer.canvas.CanvasGraphics.context.quadraticCurveTo(x,ye + cy2,x,ye - ry);
	openfl._internal.renderer.canvas.CanvasGraphics.context.lineTo(x,y + ry);
	openfl._internal.renderer.canvas.CanvasGraphics.context.quadraticCurveTo(x,y - cy2,x - cx1,y - cy1);
	openfl._internal.renderer.canvas.CanvasGraphics.context.quadraticCurveTo(x - cx2,y,x + rx,y);
	openfl._internal.renderer.canvas.CanvasGraphics.context.lineTo(xe - rx,y);
	openfl._internal.renderer.canvas.CanvasGraphics.context.quadraticCurveTo(xe + cx2,y,xe + cx1,y - cy1);
	openfl._internal.renderer.canvas.CanvasGraphics.context.quadraticCurveTo(xe,y - cy2,xe,y + ry);
	openfl._internal.renderer.canvas.CanvasGraphics.context.lineTo(xe,ye - ry);
};
openfl._internal.renderer.canvas.CanvasGraphics.render = function(graphics,renderSession) {
	if(graphics.__dirty) {
		openfl._internal.renderer.canvas.CanvasGraphics.bounds = graphics.__bounds;
		openfl._internal.renderer.canvas.CanvasGraphics.hasFill = false;
		openfl._internal.renderer.canvas.CanvasGraphics.hasStroke = false;
		openfl._internal.renderer.canvas.CanvasGraphics.inPath = false;
		openfl._internal.renderer.canvas.CanvasGraphics.positionX = 0;
		openfl._internal.renderer.canvas.CanvasGraphics.positionY = 0;
		if(!graphics.__visible || graphics.__commands.length == 0 || openfl._internal.renderer.canvas.CanvasGraphics.bounds == null || openfl._internal.renderer.canvas.CanvasGraphics.bounds.width == 0 || openfl._internal.renderer.canvas.CanvasGraphics.bounds.height == 0) {
			graphics.__canvas = null;
			graphics.__context = null;
		} else {
			if(graphics.__canvas == null) {
				graphics.__canvas = window.document.createElement("canvas");
				graphics.__context = graphics.__canvas.getContext("2d");
			}
			openfl._internal.renderer.canvas.CanvasGraphics.context = graphics.__context;
			graphics.__canvas.width = Math.ceil(openfl._internal.renderer.canvas.CanvasGraphics.bounds.width);
			graphics.__canvas.height = Math.ceil(openfl._internal.renderer.canvas.CanvasGraphics.bounds.height);
			var offsetX = openfl._internal.renderer.canvas.CanvasGraphics.bounds.x;
			var offsetY = openfl._internal.renderer.canvas.CanvasGraphics.bounds.y;
			var bitmapFill = null;
			var bitmapRepeat = false;
			var _g = 0;
			var _g1 = graphics.__commands;
			try {
				while(_g < _g1.length) {
					var command = _g1[_g];
					++_g;
					switch(command[1]) {
					case 0:
						var smooth = command[5];
						var repeat = command[4];
						var matrix = command[3];
						var bitmap = command[2];
						openfl._internal.renderer.canvas.CanvasGraphics.closePath(false);
						if(bitmap != bitmapFill || repeat != bitmapRepeat) {
							bitmapFill = bitmap;
							bitmapRepeat = repeat;
							openfl._internal.renderer.canvas.CanvasGraphics.pattern = null;
							openfl._internal.renderer.canvas.CanvasGraphics.setFill = false;
							bitmap.__sync();
						}
						if(matrix != null) {
							openfl._internal.renderer.canvas.CanvasGraphics.pendingMatrix = matrix;
							openfl._internal.renderer.canvas.CanvasGraphics.inversePendingMatrix = new openfl.geom.Matrix(matrix.a,matrix.b,matrix.c,matrix.d,matrix.tx,matrix.ty);
							openfl._internal.renderer.canvas.CanvasGraphics.inversePendingMatrix.invert();
						} else {
							openfl._internal.renderer.canvas.CanvasGraphics.pendingMatrix = null;
							openfl._internal.renderer.canvas.CanvasGraphics.inversePendingMatrix = null;
						}
						openfl._internal.renderer.canvas.CanvasGraphics.hasFill = true;
						break;
					case 1:
						var alpha = command[3];
						var rgb = command[2];
						openfl._internal.renderer.canvas.CanvasGraphics.closePath(false);
						if(alpha == 1) openfl._internal.renderer.canvas.CanvasGraphics.context.fillStyle = "#" + StringTools.hex(rgb,6); else {
							var r = (rgb & 16711680) >>> 16;
							var g = (rgb & 65280) >>> 8;
							var b = rgb & 255;
							openfl._internal.renderer.canvas.CanvasGraphics.context.fillStyle = "rgba(" + r + ", " + g + ", " + b + ", " + alpha + ")";
						}
						bitmapFill = null;
						openfl._internal.renderer.canvas.CanvasGraphics.setFill = true;
						openfl._internal.renderer.canvas.CanvasGraphics.hasFill = true;
						break;
					case 2:
						var y = command[7];
						var x = command[6];
						var cy2 = command[5];
						var cx2 = command[4];
						var cy1 = command[3];
						var cx1 = command[2];
						openfl._internal.renderer.canvas.CanvasGraphics.beginPatternFill(bitmapFill,bitmapRepeat);
						openfl._internal.renderer.canvas.CanvasGraphics.beginPath();
						openfl._internal.renderer.canvas.CanvasGraphics.context.bezierCurveTo(cx1 - offsetX,cy1 - offsetY,cx2 - offsetX,cy2 - offsetY,x - offsetX,y - offsetY);
						openfl._internal.renderer.canvas.CanvasGraphics.positionX = x;
						openfl._internal.renderer.canvas.CanvasGraphics.positionY = y;
						break;
					case 3:
						var y1 = command[5];
						var x1 = command[4];
						var cy = command[3];
						var cx = command[2];
						openfl._internal.renderer.canvas.CanvasGraphics.beginPatternFill(bitmapFill,bitmapRepeat);
						openfl._internal.renderer.canvas.CanvasGraphics.beginPath();
						openfl._internal.renderer.canvas.CanvasGraphics.context.quadraticCurveTo(cx - offsetX,cy - offsetY,x1 - offsetX,y1 - offsetY);
						openfl._internal.renderer.canvas.CanvasGraphics.positionX = x1;
						openfl._internal.renderer.canvas.CanvasGraphics.positionY = y1;
						break;
					case 4:
						var radius = command[4];
						var y2 = command[3];
						var x2 = command[2];
						openfl._internal.renderer.canvas.CanvasGraphics.beginPatternFill(bitmapFill,bitmapRepeat);
						openfl._internal.renderer.canvas.CanvasGraphics.beginPath();
						openfl._internal.renderer.canvas.CanvasGraphics.context.moveTo(x2 - offsetX + radius,y2 - offsetY);
						openfl._internal.renderer.canvas.CanvasGraphics.context.arc(x2 - offsetX,y2 - offsetY,radius,0,Math.PI * 2,true);
						break;
					case 5:
						var height = command[5];
						var width = command[4];
						var y3 = command[3];
						var x3 = command[2];
						x3 -= offsetX;
						y3 -= offsetY;
						var kappa = .5522848;
						var ox = width / 2 * kappa;
						var oy = height / 2 * kappa;
						var xe = x3 + width;
						var ye = y3 + height;
						var xm = x3 + width / 2;
						var ym = y3 + height / 2;
						openfl._internal.renderer.canvas.CanvasGraphics.beginPatternFill(bitmapFill,bitmapRepeat);
						openfl._internal.renderer.canvas.CanvasGraphics.beginPath();
						openfl._internal.renderer.canvas.CanvasGraphics.context.moveTo(x3,ym);
						openfl._internal.renderer.canvas.CanvasGraphics.context.bezierCurveTo(x3,ym - oy,xm - ox,y3,xm,y3);
						openfl._internal.renderer.canvas.CanvasGraphics.context.bezierCurveTo(xm + ox,y3,xe,ym - oy,xe,ym);
						openfl._internal.renderer.canvas.CanvasGraphics.context.bezierCurveTo(xe,ym + oy,xm + ox,ye,xm,ye);
						openfl._internal.renderer.canvas.CanvasGraphics.context.bezierCurveTo(xm - ox,ye,x3,ym + oy,x3,ym);
						break;
					case 6:
						var height1 = command[5];
						var width1 = command[4];
						var y4 = command[3];
						var x4 = command[2];
						var optimizationUsed = false;
						if(bitmapFill != null) {
							var st = 0;
							var sr = 0;
							var sb = 0;
							var sl = 0;
							var canOptimizeMatrix = true;
							if(openfl._internal.renderer.canvas.CanvasGraphics.pendingMatrix != null) {
								if(openfl._internal.renderer.canvas.CanvasGraphics.pendingMatrix.b != 0 || openfl._internal.renderer.canvas.CanvasGraphics.pendingMatrix.c != 0) canOptimizeMatrix = false; else {
									var stl = openfl._internal.renderer.canvas.CanvasGraphics.inversePendingMatrix.transformPoint(new openfl.geom.Point(x4,y4));
									var sbr = openfl._internal.renderer.canvas.CanvasGraphics.inversePendingMatrix.transformPoint(new openfl.geom.Point(x4 + width1,y4 + height1));
									st = stl.y;
									sl = stl.x;
									sb = sbr.y;
									sr = sbr.x;
								}
							} else {
								st = y4;
								sl = x4;
								sb = y4 + height1;
								sr = x4 + width1;
							}
							if(canOptimizeMatrix && st >= 0 && sl >= 0 && sr <= bitmapFill.width && sb <= bitmapFill.height) {
								optimizationUsed = true;
								openfl._internal.renderer.canvas.CanvasGraphics.context.drawImage(bitmapFill.__image.get_src(),sl,st,sr - sl,sb - st,x4 - offsetX,y4 - offsetY,width1,height1);
							}
						}
						if(!optimizationUsed) {
							openfl._internal.renderer.canvas.CanvasGraphics.beginPatternFill(bitmapFill,bitmapRepeat);
							openfl._internal.renderer.canvas.CanvasGraphics.beginPath();
							openfl._internal.renderer.canvas.CanvasGraphics.context.rect(x4 - offsetX,y4 - offsetY,width1,height1);
						}
						break;
					case 7:
						var ry = command[7];
						var rx = command[6];
						var height2 = command[5];
						var width2 = command[4];
						var y5 = command[3];
						var x5 = command[2];
						openfl._internal.renderer.canvas.CanvasGraphics.beginPatternFill(bitmapFill,bitmapRepeat);
						openfl._internal.renderer.canvas.CanvasGraphics.beginPath();
						openfl._internal.renderer.canvas.CanvasGraphics.drawRoundRect(x5 - offsetX,y5 - offsetY,width2,height2,rx,ry);
						break;
					case 8:
						var count = command[6];
						var flags = command[5];
						var smooth1 = command[4];
						var tileData = command[3];
						var sheet = command[2];
						openfl._internal.renderer.canvas.CanvasGraphics.closePath(false);
						var useScale = (flags & 1) > 0;
						var useRotation = (flags & 2) > 0;
						var useTransform = (flags & 16) > 0;
						var useRGB = (flags & 4) > 0;
						var useAlpha = (flags & 8) > 0;
						var useRect = (flags & 32) > 0;
						var useOrigin = (flags & 64) > 0;
						var useBlendAdd = (flags & 65536) > 0;
						if(useTransform) {
							useScale = false;
							useRotation = false;
						}
						var scaleIndex = 0;
						var rotationIndex = 0;
						var rgbIndex = 0;
						var alphaIndex = 0;
						var transformIndex = 0;
						var numValues = 3;
						if(useRect) if(useOrigin) numValues = 8; else numValues = 6;
						if(useScale) {
							scaleIndex = numValues;
							numValues++;
						}
						if(useRotation) {
							rotationIndex = numValues;
							numValues++;
						}
						if(useTransform) {
							transformIndex = numValues;
							numValues += 4;
						}
						if(useRGB) {
							rgbIndex = numValues;
							numValues += 3;
						}
						if(useAlpha) {
							alphaIndex = numValues;
							numValues++;
						}
						var totalCount = tileData.length;
						if(count >= 0 && totalCount > count) totalCount = count;
						var itemCount = totalCount / numValues | 0;
						var index = 0;
						var rect = null;
						var center = null;
						var previousTileID = -1;
						var surface;
						sheet.__bitmap.__sync();
						surface = sheet.__bitmap.__image.get_src();
						if(useBlendAdd) openfl._internal.renderer.canvas.CanvasGraphics.context.globalCompositeOperation = "lighter";
						while(index < totalCount) {
							var tileID;
							if(!useRect) tileID = tileData[index + 2] | 0; else tileID = -1;
							if(!useRect && tileID != previousTileID) {
								rect = sheet.__tileRects[tileID];
								center = sheet.__centerPoints[tileID];
								previousTileID = tileID;
							} else if(useRect) {
								rect = sheet.__rectTile;
								rect.setTo(tileData[index + 2],tileData[index + 3],tileData[index + 4],tileData[index + 5]);
								center = sheet.__point;
								if(useOrigin) {
									center.x = tileData[index + 6];
									center.y = tileData[index + 7];
								} else {
									center.x = 0;
									center.y = 0;
								}
							}
							if(rect != null && rect.width > 0 && rect.height > 0 && center != null) {
								openfl._internal.renderer.canvas.CanvasGraphics.context.save();
								openfl._internal.renderer.canvas.CanvasGraphics.context.translate(tileData[index],tileData[index + 1]);
								if(useRotation) openfl._internal.renderer.canvas.CanvasGraphics.context.rotate(tileData[index + rotationIndex]);
								var scale = 1.0;
								if(useScale) scale = tileData[index + scaleIndex];
								if(useTransform) openfl._internal.renderer.canvas.CanvasGraphics.context.transform(tileData[index + transformIndex],tileData[index + transformIndex + 1],tileData[index + transformIndex + 2],tileData[index + transformIndex + 3],0,0);
								if(useAlpha) openfl._internal.renderer.canvas.CanvasGraphics.context.globalAlpha = tileData[index + alphaIndex];
								openfl._internal.renderer.canvas.CanvasGraphics.context.drawImage(surface,rect.x,rect.y,rect.width,rect.height,-center.x * scale,-center.y * scale,rect.width * scale,rect.height * scale);
								openfl._internal.renderer.canvas.CanvasGraphics.context.restore();
							}
							index += numValues;
						}
						if(useBlendAdd) openfl._internal.renderer.canvas.CanvasGraphics.context.globalCompositeOperation = "source-over";
						break;
					case 10:
						openfl._internal.renderer.canvas.CanvasGraphics.closePath(true);
						break;
					case 11:
						var miterLimit = command[9];
						var joints = command[8];
						var caps = command[7];
						var scaleMode = command[6];
						var pixelHinting = command[5];
						var alpha1 = command[4];
						var color = command[3];
						var thickness = command[2];
						openfl._internal.renderer.canvas.CanvasGraphics.closePath(false);
						if(thickness == null) openfl._internal.renderer.canvas.CanvasGraphics.hasStroke = false; else {
							openfl._internal.renderer.canvas.CanvasGraphics.context.lineWidth = thickness;
							if(joints == null) openfl._internal.renderer.canvas.CanvasGraphics.context.lineJoin = "round"; else openfl._internal.renderer.canvas.CanvasGraphics.context.lineJoin = Std.string(joints).toLowerCase();
							if(caps == null) openfl._internal.renderer.canvas.CanvasGraphics.context.lineCap = "round"; else switch(caps[1]) {
							case 0:
								openfl._internal.renderer.canvas.CanvasGraphics.context.lineCap = "butt";
								break;
							default:
								openfl._internal.renderer.canvas.CanvasGraphics.context.lineCap = Std.string(caps).toLowerCase();
							}
							if(miterLimit == null) openfl._internal.renderer.canvas.CanvasGraphics.context.miterLimit = 3; else openfl._internal.renderer.canvas.CanvasGraphics.context.miterLimit = miterLimit;
							if(alpha1 == 1 || alpha1 == null) if(color == null) openfl._internal.renderer.canvas.CanvasGraphics.context.strokeStyle = "#000000"; else openfl._internal.renderer.canvas.CanvasGraphics.context.strokeStyle = "#" + StringTools.hex(color & 16777215,6); else {
								var r1 = (color & 16711680) >>> 16;
								var g1 = (color & 65280) >>> 8;
								var b1 = color & 255;
								if(color == null) openfl._internal.renderer.canvas.CanvasGraphics.context.strokeStyle = "#000000"; else openfl._internal.renderer.canvas.CanvasGraphics.context.strokeStyle = "rgba(" + r1 + ", " + g1 + ", " + b1 + ", " + alpha1 + ")";
							}
							openfl._internal.renderer.canvas.CanvasGraphics.hasStroke = true;
						}
						break;
					case 12:
						var y6 = command[3];
						var x6 = command[2];
						openfl._internal.renderer.canvas.CanvasGraphics.beginPatternFill(bitmapFill,bitmapRepeat);
						openfl._internal.renderer.canvas.CanvasGraphics.beginPath();
						openfl._internal.renderer.canvas.CanvasGraphics.context.lineTo(x6 - offsetX,y6 - offsetY);
						openfl._internal.renderer.canvas.CanvasGraphics.positionX = x6;
						openfl._internal.renderer.canvas.CanvasGraphics.positionY = y6;
						break;
					case 13:
						var y7 = command[3];
						var x7 = command[2];
						openfl._internal.renderer.canvas.CanvasGraphics.beginPath();
						openfl._internal.renderer.canvas.CanvasGraphics.context.moveTo(x7 - offsetX,y7 - offsetY);
						openfl._internal.renderer.canvas.CanvasGraphics.positionX = x7;
						openfl._internal.renderer.canvas.CanvasGraphics.positionY = y7;
						break;
					case 9:
						var culling = command[5];
						var uvtData = command[4];
						var indices = command[3];
						var vertices = command[2];
						openfl._internal.renderer.canvas.CanvasGraphics.closePath(false);
						var v = vertices;
						var ind = indices;
						var uvt = uvtData;
						var pattern = null;
						var colorFill = bitmapFill == null;
						if(colorFill && uvt != null) throw "__break__";
						if(!colorFill) {
							if(uvtData == null) {
								var this1;
								this1 = new openfl.VectorData();
								var this2;
								this2 = new Array(0);
								this1.data = this2;
								this1.length = 0;
								this1.fixed = false;
								uvtData = this1;
								var _g3 = 0;
								var _g2 = v.length / 2 | 0;
								while(_g3 < _g2) {
									var i = _g3++;
									if(!uvtData.fixed) {
										uvtData.length++;
										if(uvtData.data.length < uvtData.length) {
											var data;
											var this3;
											this3 = new Array(uvtData.data.length + 10);
											data = this3;
											haxe.ds._Vector.Vector_Impl_.blit(uvtData.data,0,data,0,uvtData.data.length);
											uvtData.data = data;
										}
										uvtData.data[uvtData.length - 1] = v.data[i * 2] / bitmapFill.width;
									}
									uvtData.length;
									if(!uvtData.fixed) {
										uvtData.length++;
										if(uvtData.data.length < uvtData.length) {
											var data1;
											var this4;
											this4 = new Array(uvtData.data.length + 10);
											data1 = this4;
											haxe.ds._Vector.Vector_Impl_.blit(uvtData.data,0,data1,0,uvtData.data.length);
											uvtData.data = data1;
										}
										uvtData.data[uvtData.length - 1] = v.data[i * 2 + 1] / bitmapFill.height;
									}
									uvtData.length;
								}
							}
							var skipT = uvtData.length != v.length;
							var normalizedUvt = openfl._internal.renderer.canvas.CanvasGraphics.normalizeUvt(uvtData,skipT);
							var maxUvt = normalizedUvt.max;
							uvt = normalizedUvt.uvt;
							if(maxUvt > 1) pattern = openfl._internal.renderer.canvas.CanvasGraphics.createTempPatternCanvas(bitmapFill,bitmapRepeat,openfl._internal.renderer.canvas.CanvasGraphics.bounds.width,openfl._internal.renderer.canvas.CanvasGraphics.bounds.height); else pattern = openfl._internal.renderer.canvas.CanvasGraphics.createTempPatternCanvas(bitmapFill,bitmapRepeat,bitmapFill.width,bitmapFill.height);
						}
						var i1 = 0;
						var l = ind.length;
						var a;
						var b2;
						var c;
						var iax;
						var iay;
						var ibx;
						var iby;
						var icx;
						var icy;
						var x11;
						var y11;
						var x21;
						var y21;
						var x31;
						var y31;
						var uvx1;
						var uvy1;
						var uvx2;
						var uvy2;
						var uvx3;
						var uvy3;
						var denom;
						var t1;
						var t2;
						var t3;
						var t4;
						var dx;
						var dy;
						while(i1 < l) {
							a = i1;
							b2 = i1 + 1;
							c = i1 + 2;
							iax = ind.data[a] * 2;
							iay = ind.data[a] * 2 + 1;
							ibx = ind.data[b2] * 2;
							iby = ind.data[b2] * 2 + 1;
							icx = ind.data[c] * 2;
							icy = ind.data[c] * 2 + 1;
							x11 = v.data[iax];
							y11 = v.data[iay];
							x21 = v.data[ibx];
							y21 = v.data[iby];
							x31 = v.data[icx];
							y31 = v.data[icy];
							switch(culling[1]) {
							case 2:
								if(!((x21 - x11) * (y31 - y11) - (y21 - y11) * (x31 - x11) < 0)) {
									i1 += 3;
									continue;
								}
								break;
							case 0:
								if((x21 - x11) * (y31 - y11) - (y21 - y11) * (x31 - x11) < 0) {
									i1 += 3;
									continue;
								}
								break;
							default:
							}
							if(colorFill) {
								openfl._internal.renderer.canvas.CanvasGraphics.context.beginPath();
								openfl._internal.renderer.canvas.CanvasGraphics.context.moveTo(x11,y11);
								openfl._internal.renderer.canvas.CanvasGraphics.context.lineTo(x21,y21);
								openfl._internal.renderer.canvas.CanvasGraphics.context.lineTo(x31,y31);
								openfl._internal.renderer.canvas.CanvasGraphics.context.closePath();
								openfl._internal.renderer.canvas.CanvasGraphics.context.fill();
								i1 += 3;
								continue;
							}
							openfl._internal.renderer.canvas.CanvasGraphics.context.save();
							openfl._internal.renderer.canvas.CanvasGraphics.context.beginPath();
							openfl._internal.renderer.canvas.CanvasGraphics.context.moveTo(x11,y11);
							openfl._internal.renderer.canvas.CanvasGraphics.context.lineTo(x21,y21);
							openfl._internal.renderer.canvas.CanvasGraphics.context.lineTo(x31,y31);
							openfl._internal.renderer.canvas.CanvasGraphics.context.closePath();
							openfl._internal.renderer.canvas.CanvasGraphics.context.clip();
							uvx1 = uvt.data[iax] * pattern.width;
							uvx2 = uvt.data[ibx] * pattern.width;
							uvx3 = uvt.data[icx] * pattern.width;
							uvy1 = uvt.data[iay] * pattern.height;
							uvy2 = uvt.data[iby] * pattern.height;
							uvy3 = uvt.data[icy] * pattern.height;
							denom = uvx1 * (uvy3 - uvy2) - uvx2 * uvy3 + uvx3 * uvy2 + (uvx2 - uvx3) * uvy1;
							if(denom == 0) {
								i1 += 3;
								continue;
							}
							t1 = -(uvy1 * (x31 - x21) - uvy2 * x31 + uvy3 * x21 + (uvy2 - uvy3) * x11) / denom;
							t2 = (uvy2 * y31 + uvy1 * (y21 - y31) - uvy3 * y21 + (uvy3 - uvy2) * y11) / denom;
							t3 = (uvx1 * (x31 - x21) - uvx2 * x31 + uvx3 * x21 + (uvx2 - uvx3) * x11) / denom;
							t4 = -(uvx2 * y31 + uvx1 * (y21 - y31) - uvx3 * y21 + (uvx3 - uvx2) * y11) / denom;
							dx = (uvx1 * (uvy3 * x21 - uvy2 * x31) + uvy1 * (uvx2 * x31 - uvx3 * x21) + (uvx3 * uvy2 - uvx2 * uvy3) * x11) / denom;
							dy = (uvx1 * (uvy3 * y21 - uvy2 * y31) + uvy1 * (uvx2 * y31 - uvx3 * y21) + (uvx3 * uvy2 - uvx2 * uvy3) * y11) / denom;
							openfl._internal.renderer.canvas.CanvasGraphics.context.transform(t1,t2,t3,t4,dx,dy);
							openfl._internal.renderer.canvas.CanvasGraphics.context.drawImage(pattern,0,0);
							openfl._internal.renderer.canvas.CanvasGraphics.context.restore();
							i1 += 3;
						}
						break;
					default:
						openfl.Lib.notImplemented("CanvasGraphics");
					}
				}
			} catch( e ) { if( e != "__break__" ) throw e; }
		}
		graphics.set___dirty(false);
		openfl._internal.renderer.canvas.CanvasGraphics.closePath(false);
	}
};
openfl._internal.renderer.canvas.CanvasGraphics.renderMask = function(graphics,renderSession) {
	if(graphics.__commands.length != 0) {
		var context = renderSession.context;
		var positionX = 0.0;
		var positionY = 0.0;
		var offsetX = 0;
		var offsetY = 0;
		var _g = 0;
		var _g1 = graphics.__commands;
		while(_g < _g1.length) {
			var command = _g1[_g];
			++_g;
			switch(command[1]) {
			case 2:
				var y = command[7];
				var x = command[6];
				var cy2 = command[5];
				var cy1 = command[4];
				var cx2 = command[3];
				var cx1 = command[2];
				context.bezierCurveTo(cx1 - offsetX,cy1 - offsetY,cx2 - offsetX,cy2 - offsetY,x - offsetX,y - offsetY);
				positionX = x;
				positionY = y;
				break;
			case 3:
				var y1 = command[5];
				var x1 = command[4];
				var cy = command[3];
				var cx = command[2];
				context.quadraticCurveTo(cx - offsetX,cy - offsetY,x1 - offsetX,y1 - offsetY);
				positionX = x1;
				positionY = y1;
				break;
			case 4:
				var radius = command[4];
				var y2 = command[3];
				var x2 = command[2];
				context.arc(x2 - offsetX,y2 - offsetY,radius,0,Math.PI * 2,true);
				break;
			case 5:
				var height = command[5];
				var width = command[4];
				var y3 = command[3];
				var x3 = command[2];
				x3 -= offsetX;
				y3 -= offsetY;
				var kappa = .5522848;
				var ox = width / 2 * kappa;
				var oy = height / 2 * kappa;
				var xe = x3 + width;
				var ye = y3 + height;
				var xm = x3 + width / 2;
				var ym = y3 + height / 2;
				context.moveTo(x3,ym);
				context.bezierCurveTo(x3,ym - oy,xm - ox,y3,xm,y3);
				context.bezierCurveTo(xm + ox,y3,xe,ym - oy,xe,ym);
				context.bezierCurveTo(xe,ym + oy,xm + ox,ye,xm,ye);
				context.bezierCurveTo(xm - ox,ye,x3,ym + oy,x3,ym);
				break;
			case 6:
				var height1 = command[5];
				var width1 = command[4];
				var y4 = command[3];
				var x4 = command[2];
				context.rect(x4 - offsetX,y4 - offsetY,width1,height1);
				break;
			case 7:
				var ry = command[7];
				var rx = command[6];
				var height2 = command[5];
				var width2 = command[4];
				var y5 = command[3];
				var x5 = command[2];
				openfl._internal.renderer.canvas.CanvasGraphics.drawRoundRect(x5 - offsetX,y5 - offsetY,width2,height2,rx,ry);
				break;
			case 12:
				var y6 = command[3];
				var x6 = command[2];
				context.lineTo(x6 - offsetX,y6 - offsetY);
				positionX = x6;
				positionY = y6;
				break;
			case 13:
				var y7 = command[3];
				var x7 = command[2];
				context.moveTo(x7 - offsetX,y7 - offsetY);
				positionX = x7;
				positionY = y7;
				break;
			default:
			}
		}
	}
};
openfl._internal.renderer.canvas.CanvasGraphics.createTempPatternCanvas = function(bitmap,repeat,width,height) {
	var canvas = window.document.createElement("canvas");
	var context = canvas.getContext("2d");
	canvas.width = Math.ceil(width);
	canvas.height = Math.ceil(height);
	context.fillStyle = context.createPattern(bitmap.__image.get_src(),repeat?"repeat":"no-repeat");
	context.beginPath();
	context.moveTo(0,0);
	context.lineTo(0,height);
	context.lineTo(width,height);
	context.lineTo(width,0);
	context.lineTo(0,0);
	context.closePath();
	context.fill();
	return canvas;
};
openfl._internal.renderer.canvas.CanvasGraphics.isCCW = function(x1,y1,x2,y2,x3,y3) {
	return (x2 - x1) * (y3 - y1) - (y2 - y1) * (x3 - x1) < 0;
};
openfl._internal.renderer.canvas.CanvasGraphics.normalizeUvt = function(uvt,skipT) {
	if(skipT == null) skipT = false;
	var max = Math.NEGATIVE_INFINITY;
	var tmp = Math.NEGATIVE_INFINITY;
	var len = uvt.length;
	var _g1 = 1;
	var _g = len + 1;
	while(_g1 < _g) {
		var t = _g1++;
		if(skipT && t % 3 == 0) continue;
		tmp = uvt.data[t - 1];
		if(max < tmp) max = tmp;
	}
	var result;
	var this1;
	this1 = new openfl.VectorData();
	var this2;
	this2 = new Array(0);
	this1.data = this2;
	this1.length = 0;
	this1.fixed = false;
	result = this1;
	var _g11 = 1;
	var _g2 = len + 1;
	while(_g11 < _g2) {
		var t1 = _g11++;
		if(skipT && t1 % 3 == 0) continue;
		if(!result.fixed) {
			result.length++;
			if(result.data.length < result.length) {
				var data;
				var this3;
				this3 = new Array(result.data.length + 10);
				data = this3;
				haxe.ds._Vector.Vector_Impl_.blit(result.data,0,data,0,result.data.length);
				result.data = data;
			}
			result.data[result.length - 1] = uvt.data[t1 - 1] / max;
		}
		result.length;
	}
	return { max : max, uvt : result};
};
openfl._internal.renderer.canvas.CanvasRenderer = function(width,height,context) {
	openfl._internal.renderer.AbstractRenderer.call(this,width,height);
	this.context = context;
	this.renderSession = new openfl._internal.renderer.RenderSession();
	this.renderSession.context = context;
	this.renderSession.roundPixels = true;
	this.renderSession.renderer = this;
	this.renderSession.maskManager = new openfl._internal.renderer.canvas.MaskManager(this.renderSession);
};
$hxClasses["openfl._internal.renderer.canvas.CanvasRenderer"] = openfl._internal.renderer.canvas.CanvasRenderer;
openfl._internal.renderer.canvas.CanvasRenderer.__name__ = ["openfl","_internal","renderer","canvas","CanvasRenderer"];
openfl._internal.renderer.canvas.CanvasRenderer.__super__ = openfl._internal.renderer.AbstractRenderer;
openfl._internal.renderer.canvas.CanvasRenderer.prototype = $extend(openfl._internal.renderer.AbstractRenderer.prototype,{
	context: null
	,render: function(stage) {
		this.context.setTransform(1,0,0,1,0,0);
		this.context.globalAlpha = 1;
		if(!stage.__transparent && stage.__clearBeforeRender) {
			this.context.fillStyle = stage.__colorString;
			this.context.fillRect(0,0,stage.stageWidth,stage.stageHeight);
		} else if(stage.__transparent && stage.__clearBeforeRender) this.context.clearRect(0,0,stage.stageWidth,stage.stageHeight);
		stage.__renderCanvas(this.renderSession);
	}
	,__class__: openfl._internal.renderer.canvas.CanvasRenderer
});
openfl._internal.renderer.canvas.CanvasShape = function() { };
$hxClasses["openfl._internal.renderer.canvas.CanvasShape"] = openfl._internal.renderer.canvas.CanvasShape;
openfl._internal.renderer.canvas.CanvasShape.__name__ = ["openfl","_internal","renderer","canvas","CanvasShape"];
openfl._internal.renderer.canvas.CanvasShape.render = function(shape,renderSession) {
	if(!shape.__renderable || shape.__worldAlpha <= 0) return;
	var graphics = shape.__graphics;
	if(graphics != null) {
		openfl._internal.renderer.canvas.CanvasGraphics.render(graphics,renderSession);
		if(graphics.__canvas != null) {
			if(shape.__mask != null) renderSession.maskManager.pushMask(shape.__mask);
			var context = renderSession.context;
			var scrollRect = shape.get_scrollRect();
			context.globalAlpha = shape.__worldAlpha;
			var transform = shape.__worldTransform;
			if(renderSession.roundPixels) context.setTransform(transform.a,transform.b,transform.c,transform.d,transform.tx | 0,transform.ty | 0); else context.setTransform(transform.a,transform.b,transform.c,transform.d,transform.tx,transform.ty);
			if(scrollRect == null) context.drawImage(graphics.__canvas,graphics.__bounds.x,graphics.__bounds.y); else context.drawImage(graphics.__canvas,scrollRect.x - graphics.__bounds.x,scrollRect.y - graphics.__bounds.y,scrollRect.width,scrollRect.height,graphics.__bounds.x + scrollRect.x,graphics.__bounds.y + scrollRect.y,scrollRect.width,scrollRect.height);
			if(shape.__mask != null) renderSession.maskManager.popMask();
		}
	}
};
openfl._internal.renderer.canvas.CanvasTextField = function() { };
$hxClasses["openfl._internal.renderer.canvas.CanvasTextField"] = openfl._internal.renderer.canvas.CanvasTextField;
openfl._internal.renderer.canvas.CanvasTextField.__name__ = ["openfl","_internal","renderer","canvas","CanvasTextField"];
openfl._internal.renderer.canvas.CanvasTextField.context = null;
openfl._internal.renderer.canvas.CanvasTextField.render = function(textField,renderSession) {
	if(!textField.__renderable || textField.__worldAlpha <= 0) return;
	openfl._internal.renderer.canvas.CanvasTextField.update(textField);
	if(textField.__canvas != null) {
		var context = renderSession.context;
		context.globalAlpha = textField.__worldAlpha;
		var transform = textField.__worldTransform;
		var scrollRect = textField.get_scrollRect();
		if(renderSession.roundPixels) context.setTransform(transform.a,transform.b,transform.c,transform.d,transform.tx | 0,transform.ty | 0); else context.setTransform(transform.a,transform.b,transform.c,transform.d,transform.tx,transform.ty);
		if(scrollRect == null) context.drawImage(textField.__canvas,0,0); else context.drawImage(textField.__canvas,scrollRect.x,scrollRect.y,scrollRect.width,scrollRect.height,scrollRect.x,scrollRect.y,scrollRect.width,scrollRect.height);
	}
};
openfl._internal.renderer.canvas.CanvasTextField.renderText = function(textField,text,format,offsetX) {
	openfl._internal.renderer.canvas.CanvasTextField.context.font = textField.__getFont(format);
	openfl._internal.renderer.canvas.CanvasTextField.context.textBaseline = "top";
	openfl._internal.renderer.canvas.CanvasTextField.context.fillStyle = "#" + StringTools.hex(format.color,6);
	var lines = text.split("\n");
	var yOffset = 0;
	var _g = 0;
	while(_g < lines.length) {
		var line = lines[_g];
		++_g;
		var _g1 = format.align;
		switch(_g1[1]) {
		case 3:
			openfl._internal.renderer.canvas.CanvasTextField.context.textAlign = "center";
			openfl._internal.renderer.canvas.CanvasTextField.context.fillText(line,textField.__width / 2,2 + yOffset,textField.__width - 4);
			break;
		case 1:
			openfl._internal.renderer.canvas.CanvasTextField.context.textAlign = "end";
			openfl._internal.renderer.canvas.CanvasTextField.context.fillText(line,textField.__width - 2,2 + yOffset,textField.__width - 4);
			break;
		default:
			openfl._internal.renderer.canvas.CanvasTextField.context.textAlign = "start";
			openfl._internal.renderer.canvas.CanvasTextField.context.fillText(line,2 + offsetX,2 + yOffset,textField.__width - 4);
		}
		yOffset += textField.get_textHeight();
	}
};
openfl._internal.renderer.canvas.CanvasTextField.update = function(textField) {
	if(textField.__dirty) {
		if((textField.__text == null || textField.__text == "") && !textField.background && !textField.border || (textField.get_width() <= 0 || textField.get_height() <= 0) && textField.autoSize != openfl.text.TextFieldAutoSize.LEFT) {
			textField.__canvas = null;
			textField.__context = null;
			textField.__dirty = false;
		} else {
			if(textField.__canvas == null) {
				textField.__canvas = window.document.createElement("canvas");
				textField.__context = textField.__canvas.getContext("2d");
			}
			openfl._internal.renderer.canvas.CanvasTextField.context = textField.__context;
			if(textField.__text != null && textField.__text != "") {
				var text = textField.get_text();
				if(textField.displayAsPassword) {
					var length = text.length;
					var mask = "";
					var _g = 0;
					while(_g < length) {
						var i = _g++;
						mask += "*";
					}
					text = mask;
				}
				var measurements = textField.__measureText();
				var textWidth = 0.0;
				var _g1 = 0;
				while(_g1 < measurements.length) {
					var measurement = measurements[_g1];
					++_g1;
					textWidth += measurement;
				}
				if(textField.autoSize == openfl.text.TextFieldAutoSize.LEFT) textField.__width = textWidth + 4;
				textField.__canvas.width = Math.ceil(textField.__width);
				textField.__canvas.height = Math.ceil(textField.__height);
				if(textField.border || textField.background) {
					textField.__context.rect(0.5,0.5,textField.__width - 1,textField.__height - 1);
					if(textField.background) {
						openfl._internal.renderer.canvas.CanvasTextField.context.fillStyle = "#" + StringTools.hex(textField.backgroundColor,6);
						openfl._internal.renderer.canvas.CanvasTextField.context.fill();
					}
					if(textField.border) {
						openfl._internal.renderer.canvas.CanvasTextField.context.lineWidth = 1;
						openfl._internal.renderer.canvas.CanvasTextField.context.strokeStyle = "#" + StringTools.hex(textField.borderColor,6);
						openfl._internal.renderer.canvas.CanvasTextField.context.stroke();
					}
				}
				if(textField.__hasFocus && textField.__selectionStart == textField.__cursorPosition && textField.__showCursor) {
					var cursorOffset = textField.__getTextWidth(text.substring(0,textField.__cursorPosition));
					openfl._internal.renderer.canvas.CanvasTextField.context.fillStyle = "#" + StringTools.hex(textField.__textFormat.color,6);
					openfl._internal.renderer.canvas.CanvasTextField.context.fillRect(cursorOffset,5,1,textField.__textFormat.size - 5);
				} else if(textField.__hasFocus && Math.abs(textField.__selectionStart - textField.__cursorPosition) > 0 && !textField.__isKeyDown) {
					var lowPos = Std["int"](Math.min(textField.__selectionStart,textField.__cursorPosition));
					var highPos = Std["int"](Math.max(textField.__selectionStart,textField.__cursorPosition));
					var xPos = textField.__getTextWidth(text.substring(0,lowPos));
					var widthPos = textField.__getTextWidth(text.substring(lowPos,highPos));
					openfl._internal.renderer.canvas.CanvasTextField.context.fillStyle = "#" + StringTools.hex(textField.__textFormat.color,6);
					openfl._internal.renderer.canvas.CanvasTextField.context.fillRect(xPos,5,widthPos,textField.__textFormat.size - 5);
				}
				if(textField.__ranges == null) openfl._internal.renderer.canvas.CanvasTextField.renderText(textField,text,textField.__textFormat,0); else {
					var currentIndex = 0;
					var range;
					var offsetX = 0.0;
					var _g11 = 0;
					var _g2 = textField.__ranges.length;
					while(_g11 < _g2) {
						var i1 = _g11++;
						range = textField.__ranges[i1];
						openfl._internal.renderer.canvas.CanvasTextField.renderText(textField,text.substring(range.start,range.end),range.format,offsetX);
						offsetX += measurements[i1];
					}
				}
			} else {
				if(textField.autoSize == openfl.text.TextFieldAutoSize.LEFT) textField.__width = 4;
				textField.__canvas.width = Math.ceil(textField.__width);
				textField.__canvas.height = Math.ceil(textField.__height);
				if(textField.border || textField.background) {
					if(textField.border) openfl._internal.renderer.canvas.CanvasTextField.context.rect(0.5,0.5,textField.__width - 1,textField.__height - 1); else textField.__context.rect(0,0,textField.__width,textField.__height);
					if(textField.background) {
						openfl._internal.renderer.canvas.CanvasTextField.context.fillStyle = "#" + StringTools.hex(textField.backgroundColor,6);
						openfl._internal.renderer.canvas.CanvasTextField.context.fill();
					}
					if(textField.border) {
						openfl._internal.renderer.canvas.CanvasTextField.context.lineWidth = 1;
						openfl._internal.renderer.canvas.CanvasTextField.context.lineCap = "square";
						openfl._internal.renderer.canvas.CanvasTextField.context.strokeStyle = "#" + StringTools.hex(textField.borderColor,6);
						openfl._internal.renderer.canvas.CanvasTextField.context.stroke();
					}
				}
			}
			textField.__dirty = false;
			return true;
		}
	}
	return false;
};
openfl._internal.renderer.canvas.MaskManager = function(renderSession) {
	this.renderSession = renderSession;
};
$hxClasses["openfl._internal.renderer.canvas.MaskManager"] = openfl._internal.renderer.canvas.MaskManager;
openfl._internal.renderer.canvas.MaskManager.__name__ = ["openfl","_internal","renderer","canvas","MaskManager"];
openfl._internal.renderer.canvas.MaskManager.prototype = {
	renderSession: null
	,pushMask: function(mask) {
		var context = this.renderSession.context;
		context.save();
		var transform = mask.__getTransform();
		context.setTransform(transform.a,transform.c,transform.b,transform.d,transform.tx,transform.ty);
		context.beginPath();
		mask.__renderMask(this.renderSession);
		context.clip();
	}
	,pushRect: function(rect,transform) {
		var context = this.renderSession.context;
		context.save();
		context.setTransform(transform.a,transform.c,transform.b,transform.d,transform.tx,transform.ty);
		context.beginPath();
		context.rect(rect.x,rect.y,rect.width,rect.height);
		context.clip();
	}
	,popMask: function() {
		this.renderSession.context.restore();
	}
	,__class__: openfl._internal.renderer.canvas.MaskManager
};
openfl._internal.renderer.dom = {};
openfl._internal.renderer.dom.DOMBitmap = function() { };
$hxClasses["openfl._internal.renderer.dom.DOMBitmap"] = openfl._internal.renderer.dom.DOMBitmap;
openfl._internal.renderer.dom.DOMBitmap.__name__ = ["openfl","_internal","renderer","dom","DOMBitmap"];
openfl._internal.renderer.dom.DOMBitmap.render = function(bitmap,renderSession) {
	if(bitmap.stage != null && bitmap.__worldVisible && bitmap.__renderable && bitmap.bitmapData != null && bitmap.bitmapData.__isValid) {
		if(bitmap.bitmapData.__image.buffer.__srcImage != null) openfl._internal.renderer.dom.DOMBitmap.renderImage(bitmap,renderSession); else openfl._internal.renderer.dom.DOMBitmap.renderCanvas(bitmap,renderSession);
	} else {
		if(bitmap.__image != null) {
			renderSession.element.removeChild(bitmap.__image);
			bitmap.__image = null;
			bitmap.__style = null;
		}
		if(bitmap.__canvas != null) {
			renderSession.element.removeChild(bitmap.__canvas);
			bitmap.__canvas = null;
			bitmap.__style = null;
		}
	}
};
openfl._internal.renderer.dom.DOMBitmap.renderCanvas = function(bitmap,renderSession) {
	if(bitmap.__image != null) {
		renderSession.element.removeChild(bitmap.__image);
		bitmap.__image = null;
	}
	if(bitmap.__canvas == null) {
		bitmap.__canvas = window.document.createElement("canvas");
		bitmap.__context = bitmap.__canvas.getContext("2d");
		if(!bitmap.smoothing) {
			bitmap.__context.mozImageSmoothingEnabled = false;
			bitmap.__context.webkitImageSmoothingEnabled = false;
			bitmap.__context.imageSmoothingEnabled = false;
		}
		openfl._internal.renderer.dom.DOMRenderer.initializeElement(bitmap,bitmap.__canvas,renderSession);
	}
	bitmap.bitmapData.__sync();
	bitmap.__canvas.width = bitmap.bitmapData.width;
	bitmap.__canvas.height = bitmap.bitmapData.height;
	bitmap.__context.globalAlpha = bitmap.__worldAlpha;
	bitmap.__context.drawImage(bitmap.bitmapData.__image.buffer.__srcCanvas,0,0);
	openfl._internal.renderer.dom.DOMRenderer.applyStyle(bitmap,renderSession,true,false,true);
};
openfl._internal.renderer.dom.DOMBitmap.renderImage = function(bitmap,renderSession) {
	if(bitmap.__canvas != null) {
		renderSession.element.removeChild(bitmap.__canvas);
		bitmap.__canvas = null;
	}
	if(bitmap.__image == null) {
		bitmap.__image = window.document.createElement("img");
		bitmap.__image.src = bitmap.bitmapData.__image.buffer.__srcImage.src;
		openfl._internal.renderer.dom.DOMRenderer.initializeElement(bitmap,bitmap.__image,renderSession);
	}
	openfl._internal.renderer.dom.DOMRenderer.applyStyle(bitmap,renderSession,true,true,true);
};
openfl._internal.renderer.dom.DOMRenderer = function(width,height,element) {
	openfl._internal.renderer.AbstractRenderer.call(this,width,height);
	this.element = element;
	this.renderSession = new openfl._internal.renderer.RenderSession();
	this.renderSession.element = element;
	this.renderSession.roundPixels = true;
	var prefix = (function () {
		  var styles = window.getComputedStyle(document.documentElement, ''),
			pre = (Array.prototype.slice
			  .call(styles)
			  .join('') 
			  .match(/-(moz|webkit|ms)-/) || (styles.OLink === '' && ['', 'o'])
			)[1],
			dom = ('WebKit|Moz|MS|O').match(new RegExp('(' + pre + ')', 'i'))[1];
		  return {
			dom: dom,
			lowercase: pre,
			css: '-' + pre + '-',
			js: pre[0].toUpperCase() + pre.substr(1)
		  };
		})();
	this.renderSession.vendorPrefix = prefix.lowercase;
	if(prefix.lowercase == "webkit") this.renderSession.transformProperty = "-webkit-transform"; else this.renderSession.transformProperty = "transform";
	if(prefix.lowercase == "webkit") this.renderSession.transformOriginProperty = "-webkit-transform-origin"; else this.renderSession.transformOriginProperty = "transform-origin";
	this.renderSession.renderer = this;
};
$hxClasses["openfl._internal.renderer.dom.DOMRenderer"] = openfl._internal.renderer.dom.DOMRenderer;
openfl._internal.renderer.dom.DOMRenderer.__name__ = ["openfl","_internal","renderer","dom","DOMRenderer"];
openfl._internal.renderer.dom.DOMRenderer.applyStyle = function(displayObject,renderSession,setTransform,setAlpha,setClip) {
	var style = displayObject.__style;
	if(setTransform && displayObject.__worldTransformChanged) style.setProperty(renderSession.transformProperty,displayObject.__worldTransform.to3DString(renderSession.roundPixels),null);
	if(displayObject.__worldZ != ++renderSession.z) {
		displayObject.__worldZ = renderSession.z;
		style.setProperty("z-index",displayObject.__worldZ == null?"null":"" + displayObject.__worldZ,null);
	}
	if(setAlpha && displayObject.__worldAlphaChanged) {
		if(displayObject.__worldAlpha < 1) style.setProperty("opacity",displayObject.__worldAlpha == null?"null":"" + displayObject.__worldAlpha,null); else style.removeProperty("opacity");
	}
	if(setClip && displayObject.__worldClipChanged) {
		if(displayObject.__worldClip == null) style.removeProperty("clip"); else {
			var clip = displayObject.__worldClip.transform(displayObject.__worldTransform.clone().invert());
			style.setProperty("clip","rect(" + clip.y + "px, " + clip.get_right() + "px, " + clip.get_bottom() + "px, " + clip.x + "px)",null);
		}
	}
};
openfl._internal.renderer.dom.DOMRenderer.initializeElement = function(displayObject,element,renderSession) {
	var style = displayObject.__style = element.style;
	style.setProperty("position","absolute",null);
	style.setProperty("top","0",null);
	style.setProperty("left","0",null);
	style.setProperty(renderSession.transformOriginProperty,"0 0 0",null);
	renderSession.element.appendChild(element);
	displayObject.__worldAlphaChanged = true;
	displayObject.__worldClipChanged = true;
	displayObject.__worldTransformChanged = true;
	displayObject.__worldVisibleChanged = true;
	displayObject.__worldZ = -1;
};
openfl._internal.renderer.dom.DOMRenderer.__super__ = openfl._internal.renderer.AbstractRenderer;
openfl._internal.renderer.dom.DOMRenderer.prototype = $extend(openfl._internal.renderer.AbstractRenderer.prototype,{
	element: null
	,render: function(stage) {
		this.element.style.background = stage.__colorString;
		this.renderSession.z = 1;
		stage.__renderDOM(this.renderSession);
	}
	,__class__: openfl._internal.renderer.dom.DOMRenderer
});
openfl._internal.renderer.dom.DOMShape = function() { };
$hxClasses["openfl._internal.renderer.dom.DOMShape"] = openfl._internal.renderer.dom.DOMShape;
openfl._internal.renderer.dom.DOMShape.__name__ = ["openfl","_internal","renderer","dom","DOMShape"];
openfl._internal.renderer.dom.DOMShape.render = function(shape,renderSession) {
	var graphics = shape.__graphics;
	if(shape.stage != null && shape.__worldVisible && shape.__renderable && graphics != null) {
		if(graphics.__dirty || shape.__worldAlphaChanged || shape.__canvas == null && graphics.__canvas != null) {
			openfl._internal.renderer.canvas.CanvasGraphics.render(graphics,renderSession);
			if(graphics.__canvas != null) {
				if(shape.__canvas == null) {
					shape.__canvas = window.document.createElement("canvas");
					shape.__context = shape.__canvas.getContext("2d");
					openfl._internal.renderer.dom.DOMRenderer.initializeElement(shape,shape.__canvas,renderSession);
				}
				shape.__canvas.width = graphics.__canvas.width;
				shape.__canvas.height = graphics.__canvas.height;
				shape.__context.globalAlpha = shape.__worldAlpha;
				shape.__context.drawImage(graphics.__canvas,0,0);
			} else if(shape.__canvas != null) {
				renderSession.element.removeChild(shape.__canvas);
				shape.__canvas = null;
				shape.__style = null;
			}
		}
		if(shape.__canvas != null) {
			if(shape.__worldTransformChanged || graphics.__transformDirty) {
				graphics.__transformDirty = false;
				var transform = new openfl.geom.Matrix();
				transform.translate(graphics.__bounds.x,graphics.__bounds.y);
				transform = transform.mult(shape.__worldTransform);
				shape.__style.setProperty(renderSession.transformProperty,renderSession.roundPixels?"matrix3d(" + transform.a + ", " + transform.b + ", " + "0, 0, " + transform.c + ", " + transform.d + ", " + "0, 0, 0, 0, 1, 0, " + (transform.tx | 0) + ", " + (transform.ty | 0) + ", 0, 1)":"matrix3d(" + transform.a + ", " + transform.b + ", " + "0, 0, " + transform.c + ", " + transform.d + ", " + "0, 0, 0, 0, 1, 0, " + transform.tx + ", " + transform.ty + ", 0, 1)",null);
			}
			openfl._internal.renderer.dom.DOMRenderer.applyStyle(shape,renderSession,false,false,true);
		}
	} else if(shape.__canvas != null) {
		renderSession.element.removeChild(shape.__canvas);
		shape.__canvas = null;
		shape.__style = null;
	}
};
openfl._internal.renderer.dom.DOMTextField = function() { };
$hxClasses["openfl._internal.renderer.dom.DOMTextField"] = openfl._internal.renderer.dom.DOMTextField;
openfl._internal.renderer.dom.DOMTextField.__name__ = ["openfl","_internal","renderer","dom","DOMTextField"];
openfl._internal.renderer.dom.DOMTextField.render = function(textField,renderSession) {
	if(textField.stage != null && textField.__worldVisible && textField.__renderable) {
		if(textField.__dirty || textField.__div == null) {
			if(textField.__text != "" || textField.background || textField.border) {
				if(textField.__div == null) {
					textField.__div = window.document.createElement("div");
					openfl._internal.renderer.dom.DOMRenderer.initializeElement(textField,textField.__div,renderSession);
					textField.__style.setProperty("cursor","inherit",null);
				}
				var style = textField.__style;
				textField.__div.innerHTML = textField.__text;
				if(textField.background) style.setProperty("background-color","#" + StringTools.hex(textField.backgroundColor,6),null); else style.removeProperty("background-color");
				if(textField.border) style.setProperty("border","solid 1px #" + StringTools.hex(textField.borderColor,6),null); else style.removeProperty("border");
				style.setProperty("font",textField.__getFont(textField.__textFormat),null);
				style.setProperty("color","#" + StringTools.hex(textField.__textFormat.color,6),null);
				if(textField.autoSize != openfl.text.TextFieldAutoSize.NONE) style.setProperty("width","auto",null); else style.setProperty("width",textField.__width + "px",null);
				style.setProperty("height",textField.__height + "px",null);
				var _g = textField.__textFormat.align;
				switch(_g[1]) {
				case 3:
					style.setProperty("text-align","center",null);
					break;
				case 1:
					style.setProperty("text-align","right",null);
					break;
				default:
					style.setProperty("text-align","left",null);
				}
				textField.__dirty = false;
			} else if(textField.__div != null) {
				renderSession.element.removeChild(textField.__div);
				textField.__div = null;
			}
		}
		if(textField.__div != null) openfl._internal.renderer.dom.DOMRenderer.applyStyle(textField,renderSession,true,true,false);
	} else if(textField.__div != null) {
		renderSession.element.removeChild(textField.__div);
		textField.__div = null;
		textField.__style = null;
	}
};
openfl._internal.renderer.opengl = {};
openfl._internal.renderer.opengl.GLBitmap = function() { };
$hxClasses["openfl._internal.renderer.opengl.GLBitmap"] = openfl._internal.renderer.opengl.GLBitmap;
openfl._internal.renderer.opengl.GLBitmap.__name__ = ["openfl","_internal","renderer","opengl","GLBitmap"];
openfl._internal.renderer.opengl.GLBitmap.render = function(bitmap,renderSession) {
	if(!bitmap.__renderable || bitmap.__worldAlpha <= 0 || bitmap.bitmapData == null || !bitmap.bitmapData.__isValid) return;
	renderSession.spriteBatch.renderBitmapData(bitmap.bitmapData,bitmap.smoothing,bitmap.__worldTransform,bitmap.__worldColorTransform,bitmap.__worldAlpha,bitmap.blendMode);
};
openfl._internal.renderer.opengl.GLRenderer = function(width,height,gl,transparent,antialias,preserveDrawingBuffer) {
	if(preserveDrawingBuffer == null) preserveDrawingBuffer = false;
	if(antialias == null) antialias = false;
	if(transparent == null) transparent = false;
	if(height == null) height = 600;
	if(width == null) width = 800;
	openfl._internal.renderer.AbstractRenderer.call(this,width,height);
	this.transparent = transparent;
	this.preserveDrawingBuffer = preserveDrawingBuffer;
	this.width = width;
	this.height = height;
	this.options = { alpha : transparent, antialias : antialias, premultipliedAlpha : transparent, stencil : true, preserveDrawingBuffer : preserveDrawingBuffer};
	this._glContextId = openfl._internal.renderer.opengl.GLRenderer.glContextId++;
	this.gl = gl;
	this.defaultFramebuffer = null;
	openfl._internal.renderer.opengl.GLRenderer.glContexts[this._glContextId] = gl;
	if(openfl._internal.renderer.opengl.GLRenderer.blendModesWebGL == null) {
		openfl._internal.renderer.opengl.GLRenderer.blendModesWebGL = new haxe.ds.EnumValueMap();
		openfl._internal.renderer.opengl.GLRenderer.blendModesWebGL.set(openfl.display.BlendMode.NORMAL,[gl.ONE,gl.ONE_MINUS_SRC_ALPHA]);
		openfl._internal.renderer.opengl.GLRenderer.blendModesWebGL.set(openfl.display.BlendMode.ADD,[gl.SRC_ALPHA,gl.DST_ALPHA]);
		openfl._internal.renderer.opengl.GLRenderer.blendModesWebGL.set(openfl.display.BlendMode.MULTIPLY,[gl.DST_COLOR,gl.ONE_MINUS_SRC_ALPHA]);
		openfl._internal.renderer.opengl.GLRenderer.blendModesWebGL.set(openfl.display.BlendMode.SCREEN,[gl.SRC_ALPHA,gl.ONE]);
		openfl._internal.renderer.opengl.GLRenderer.blendModesWebGL.set(openfl.display.BlendMode.ALPHA,[gl.ONE,gl.ONE_MINUS_SRC_ALPHA]);
		openfl._internal.renderer.opengl.GLRenderer.blendModesWebGL.set(openfl.display.BlendMode.DARKEN,[gl.ONE,gl.ONE_MINUS_SRC_ALPHA]);
		openfl._internal.renderer.opengl.GLRenderer.blendModesWebGL.set(openfl.display.BlendMode.DIFFERENCE,[gl.ONE,gl.ONE_MINUS_SRC_ALPHA]);
		openfl._internal.renderer.opengl.GLRenderer.blendModesWebGL.set(openfl.display.BlendMode.ERASE,[gl.ONE,gl.ONE_MINUS_SRC_ALPHA]);
		openfl._internal.renderer.opengl.GLRenderer.blendModesWebGL.set(openfl.display.BlendMode.HARDLIGHT,[gl.ONE,gl.ONE_MINUS_SRC_ALPHA]);
		openfl._internal.renderer.opengl.GLRenderer.blendModesWebGL.set(openfl.display.BlendMode.INVERT,[gl.ONE,gl.ONE_MINUS_SRC_ALPHA]);
		openfl._internal.renderer.opengl.GLRenderer.blendModesWebGL.set(openfl.display.BlendMode.LAYER,[gl.ONE,gl.ONE_MINUS_SRC_ALPHA]);
		openfl._internal.renderer.opengl.GLRenderer.blendModesWebGL.set(openfl.display.BlendMode.LIGHTEN,[gl.ONE,gl.ONE_MINUS_SRC_ALPHA]);
		openfl._internal.renderer.opengl.GLRenderer.blendModesWebGL.set(openfl.display.BlendMode.OVERLAY,[gl.ONE,gl.ONE_MINUS_SRC_ALPHA]);
		openfl._internal.renderer.opengl.GLRenderer.blendModesWebGL.set(openfl.display.BlendMode.SUBTRACT,[gl.ONE,gl.ONE_MINUS_SRC_ALPHA]);
	}
	this.projection = new openfl.geom.Point();
	this.projection.x = this.width / 2;
	this.projection.y = -this.height / 2;
	this.offset = new openfl.geom.Point(0,0);
	this.resize(this.width,this.height);
	this.contextLost = false;
	this.shaderManager = new openfl._internal.renderer.opengl.utils.ShaderManager(gl);
	this.spriteBatch = new openfl._internal.renderer.opengl.utils.SpriteBatch(gl);
	this.maskManager = new openfl._internal.renderer.opengl.utils.MaskManager(gl);
	this.filterManager = new openfl._internal.renderer.opengl.utils.FilterManager(gl,this.transparent);
	this.stencilManager = new openfl._internal.renderer.opengl.utils.StencilManager(gl);
	this.blendModeManager = new openfl._internal.renderer.opengl.utils.BlendModeManager(gl);
	this.renderSession = new openfl._internal.renderer.RenderSession();
	this.renderSession.gl = this.gl;
	this.renderSession.drawCount = 0;
	this.renderSession.shaderManager = this.shaderManager;
	this.renderSession.maskManager = this.maskManager;
	this.renderSession.filterManager = this.filterManager;
	this.renderSession.blendModeManager = this.blendModeManager;
	this.renderSession.spriteBatch = this.spriteBatch;
	this.renderSession.stencilManager = this.stencilManager;
	this.renderSession.renderer = this;
	this.renderSession.projection = this.projection;
	this.renderSession.offset = this.offset;
	this.shaderManager.setShader(this.shaderManager.defaultShader);
	gl.disable(gl.DEPTH_TEST);
	gl.disable(gl.CULL_FACE);
	gl.enable(gl.BLEND);
	gl.colorMask(true,true,true,this.transparent);
};
$hxClasses["openfl._internal.renderer.opengl.GLRenderer"] = openfl._internal.renderer.opengl.GLRenderer;
openfl._internal.renderer.opengl.GLRenderer.__name__ = ["openfl","_internal","renderer","opengl","GLRenderer"];
openfl._internal.renderer.opengl.GLRenderer.__super__ = openfl._internal.renderer.AbstractRenderer;
openfl._internal.renderer.opengl.GLRenderer.prototype = $extend(openfl._internal.renderer.AbstractRenderer.prototype,{
	blendModeManager: null
	,contextLost: null
	,defaultFramebuffer: null
	,filterManager: null
	,gl: null
	,_glContextId: null
	,maskManager: null
	,offset: null
	,options: null
	,preserveDrawingBuffer: null
	,projection: null
	,shaderManager: null
	,spriteBatch: null
	,stencilManager: null
	,view: null
	,__stage: null
	,destroy: function() {
		openfl._internal.renderer.opengl.GLRenderer.glContexts[this._glContextId] = null;
		this.projection = null;
		this.offset = null;
		this.shaderManager.destroy();
		this.spriteBatch.destroy();
		this.maskManager.destroy();
		this.filterManager.destroy();
		this.shaderManager = null;
		this.spriteBatch = null;
		this.maskManager = null;
		this.filterManager = null;
		this.gl = null;
		this.renderSession = null;
	}
	,handleContextLost: function(event) {
		event.preventDefault();
		this.contextLost = true;
	}
	,handleContextRestored: function() {
		var gl = this.gl;
		openfl._internal.renderer.opengl.GLRenderer.glContextId++;
		this.shaderManager.setContext(gl);
		this.spriteBatch.setContext(gl);
		this.maskManager.setContext(gl);
		this.filterManager.setContext(gl);
		this.renderSession.gl = gl;
		this.defaultFramebuffer = null;
		gl.disable(gl.DEPTH_TEST);
		gl.disable(gl.CULL_FACE);
		gl.enable(gl.BLEND);
		gl.colorMask(true,true,true,this.transparent);
		gl.viewport(0,0,this.width,this.height);
		this.contextLost = false;
	}
	,render: function(stage) {
		if(this.contextLost) return;
		var gl = this.gl;
		gl.viewport(0,0,this.width,this.height);
		gl.bindFramebuffer(gl.FRAMEBUFFER,this.defaultFramebuffer);
		if(this.transparent) gl.clearColor(0,0,0,0); else gl.clearColor(stage.__colorSplit[0],stage.__colorSplit[1],stage.__colorSplit[2],1);
		gl.clear(gl.COLOR_BUFFER_BIT);
		this.renderDisplayObject(stage,this.projection);
	}
	,renderDisplayObject: function(displayObject,projection,buffer) {
		this.renderSession.blendModeManager.setBlendMode(openfl.display.BlendMode.NORMAL);
		this.renderSession.drawCount = 0;
		this.renderSession.currentBlendMode = null;
		this.renderSession.projection = projection;
		this.renderSession.offset = this.offset;
		this.spriteBatch.begin(this.renderSession);
		this.filterManager.begin(this.renderSession,buffer);
		displayObject.__renderGL(this.renderSession);
		this.spriteBatch.finish();
	}
	,resize: function(width,height) {
		this.width = width;
		this.height = height;
		openfl._internal.renderer.AbstractRenderer.prototype.resize.call(this,width,height);
		this.gl.viewport(0,0,width,height);
		this.projection.x = width / 2;
		this.projection.y = -height / 2;
	}
	,__class__: openfl._internal.renderer.opengl.GLRenderer
});
openfl._internal.renderer.opengl.GLTextField = function() { };
$hxClasses["openfl._internal.renderer.opengl.GLTextField"] = openfl._internal.renderer.opengl.GLTextField;
openfl._internal.renderer.opengl.GLTextField.__name__ = ["openfl","_internal","renderer","opengl","GLTextField"];
openfl._internal.renderer.opengl.GLTextField.render = function(textField,renderSession) {
	if(!textField.__renderable || textField.__worldAlpha <= 0) return;
	openfl._internal.renderer.opengl.GLTextField.update(textField);
	if(textField.__graphics == null) textField.__graphics = new openfl.display.Graphics();
	var graphics = textField.__graphics;
	graphics.clear();
	if(textField.border || textField.background) {
		if(textField.border) graphics.lineStyle(1,textField.borderColor);
		if(textField.background) graphics.beginFill(textField.backgroundColor);
		graphics.drawRect(0.5,0.5,textField.__width - 1,textField.__height - 1);
	}
	if(textField.__tilesheets != null) {
		var _g1 = 0;
		var _g = textField.__tilesheets.length;
		while(_g1 < _g) {
			var i = _g1++;
			graphics.drawTiles(textField.__tilesheets[i],textField.__tileData[i],true,4);
		}
	}
	openfl._internal.renderer.opengl.utils.GraphicsRenderer.render(textField,renderSession);
};
openfl._internal.renderer.opengl.GLTextField.renderText = function(textField,text,format,offsetX,textWidth) {
	var font = textField.__getFontInstance(format);
	if(font != null && format.size != null) {
		if(!(openfl._internal.renderer.opengl.GLTextField.glyphs.h.__keys__[font.__id__] != null)) {
			var value = new haxe.ds.IntMap();
			openfl._internal.renderer.opengl.GLTextField.glyphs.set(font,value);
		}
		var size = format.size | 0;
		var fontGlyphs = openfl._internal.renderer.opengl.GLTextField.glyphs.h[font.__id__];
		if(!fontGlyphs.exists(size)) {
			var value1 = font.renderGlyphs(font.getGlyphs(),size);
			fontGlyphs.set(size,value1);
		}
		var images = fontGlyphs.get(size);
		if(!(openfl._internal.renderer.opengl.GLTextField.bitmapData.h.__keys__[font.__id__] != null)) {
			var value2 = new haxe.ds.IntMap();
			openfl._internal.renderer.opengl.GLTextField.bitmapData.set(font,value2);
		}
		var fontBitmapData = openfl._internal.renderer.opengl.GLTextField.bitmapData.h[font.__id__];
		if(!fontBitmapData.exists(size)) {
			var width;
			var height;
			var data;
			var $it0 = images.iterator();
			while( $it0.hasNext() ) {
				var image = $it0.next();
				width = image.buffer.width;
				height = image.buffer.height;
				data = image.get_data();
				break;
			}
			var bitmapData = new openfl.display.BitmapData(width,height);
			var _g = 0;
			while(_g < width) {
				var x = _g++;
				var _g1 = 0;
				while(_g1 < height) {
					var y = _g1++;
					var alpha = data[y * width + x];
					var color = alpha << 24 | 16711680 | 65280 | 255;
					bitmapData.setPixel32(x,y,color);
				}
			}
			fontBitmapData.set(size,bitmapData);
		}
		var bitmapData1 = fontBitmapData.get(size);
		if(!(openfl._internal.renderer.opengl.GLTextField.tilesheets.h.__keys__[bitmapData1.__id__] != null)) {
			var tilesheet = new openfl.display.Tilesheet(bitmapData1);
			var tileID = new haxe.ds.IntMap();
			var image1;
			var index;
			var $it1 = images.keys();
			while( $it1.hasNext() ) {
				var key = $it1.next();
				image1 = images.get(key);
				index = tilesheet.addTileRect(new openfl.geom.Rectangle(image1.offsetX,image1.offsetY,image1.width,image1.height));
				tileID.set(key,index);
			}
			openfl._internal.renderer.opengl.GLTextField.tileIDs.set(bitmapData1,tileID);
			openfl._internal.renderer.opengl.GLTextField.tilesheets.set(bitmapData1,tilesheet);
		}
		var tilesheet1 = openfl._internal.renderer.opengl.GLTextField.tilesheets.h[bitmapData1.__id__];
		var tileID1 = openfl._internal.renderer.opengl.GLTextField.tileIDs.h[bitmapData1.__id__];
		var r = (format.color >> 16 & 255) / 255;
		var g = (format.color >> 8 & 255) / 255;
		var b = (format.color & 255) / 255;
		var image2;
		var x1 = offsetX;
		var y1 = size;
		if(format.align == openfl.text.TextFormatAlign.RIGHT) x1 += textField.__width - textWidth; else if(format.align == openfl.text.TextFormatAlign.CENTER) x1 += (textField.__width - textWidth) / 2;
		var tileData;
		if(textField.__tilesheets.length == 0 || textField.__tilesheets[textField.__tilesheets.length - 1] != tilesheet1) {
			tileData = new Array();
			textField.__tilesheets.push(tilesheet1);
			textField.__tileData.push(tileData);
		} else tileData = textField.__tileData[textField.__tileData.length - 1];
		var offsetY = 0;
		var lines = text.split("\n");
		if(textField.__textLayout == null) textField.__textLayout = new lime.text.TextLayout();
		var textLayout = textField.__textLayout;
		var _g2 = 0;
		while(_g2 < lines.length) {
			var line = lines[_g2];
			++_g2;
			textLayout.set_text(null);
			textLayout.set_font(font);
			textLayout.set_size(size);
			textLayout.set_text(line);
			var _g11 = 0;
			var _g21 = textLayout.positions;
			while(_g11 < _g21.length) {
				var position = _g21[_g11];
				++_g11;
				image2 = images.get(position.glyph);
				if(image2 != null) {
					tileData.push(x1 + position.offset.x + image2.x);
					tileData.push(y1 + position.offset.y - image2.y);
					tileData.push(tileID1.get(position.glyph));
					tileData.push(r);
					tileData.push(g);
					tileData.push(b);
				}
				x1 += position.advance.x;
				y1 -= position.advance.y;
			}
			x1 = 0;
			y1 += size * 1.185;
		}
	}
};
openfl._internal.renderer.opengl.GLTextField.update = function(textField) {
	if(textField.__dirty) {
		if((textField.__text == null || textField.__text == "") && !textField.background && !textField.border || (textField.get_width() <= 0 || textField.get_height() <= 0) && textField.autoSize != openfl.text.TextFieldAutoSize.LEFT) {
			textField.__tilesheets = null;
			textField.__tileData = null;
			textField.__dirty = false;
		} else {
			textField.__tilesheets = new Array();
			textField.__tileData = new Array();
			if(textField.__text != null && textField.__text != "") {
				var text = textField.get_text();
				if(textField.displayAsPassword) {
					var length = text.length;
					var mask = "";
					var _g = 0;
					while(_g < length) {
						var i = _g++;
						mask += "*";
					}
					text = mask;
				}
				var measurements = textField.__measureText();
				var textWidth = 0.0;
				var _g1 = 0;
				while(_g1 < measurements.length) {
					var measurement = measurements[_g1];
					++_g1;
					textWidth += measurement;
				}
				if(textField.autoSize == openfl.text.TextFieldAutoSize.LEFT) textField.__width = textWidth + 4;
				if(textField.__ranges == null) openfl._internal.renderer.opengl.GLTextField.renderText(textField,text,textField.__textFormat,0,textWidth); else {
					var currentIndex = 0;
					var range;
					var offsetX = 0.0;
					var _g11 = 0;
					var _g2 = textField.__ranges.length;
					while(_g11 < _g2) {
						var i1 = _g11++;
						range = textField.__ranges[i1];
						openfl._internal.renderer.opengl.GLTextField.renderText(textField,text.substring(range.start,range.end),range.format,offsetX,textWidth);
						offsetX += measurements[i1];
					}
				}
			} else if(textField.autoSize == openfl.text.TextFieldAutoSize.LEFT) textField.__width = 4;
			textField.__dirty = false;
			return true;
		}
	}
	return false;
};
openfl._internal.renderer.opengl.shaders2 = {};
openfl._internal.renderer.opengl.shaders2.Shader = function(gl) {
	this.uniforms = new haxe.ds.StringMap();
	this.attributes = new haxe.ds.StringMap();
	this.ID = openfl._internal.renderer.opengl.shaders2.Shader.UID++;
	this.gl = gl;
	this.program = null;
};
$hxClasses["openfl._internal.renderer.opengl.shaders2.Shader"] = openfl._internal.renderer.opengl.shaders2.Shader;
openfl._internal.renderer.opengl.shaders2.Shader.__name__ = ["openfl","_internal","renderer","opengl","shaders2","Shader"];
openfl._internal.renderer.opengl.shaders2.Shader.compileProgram = function(gl,vertexSrc,fragmentSrc) {
	var vertexShader = openfl._internal.renderer.opengl.shaders2.Shader.compileShader(gl,vertexSrc,gl.VERTEX_SHADER);
	var fragmentShader = openfl._internal.renderer.opengl.shaders2.Shader.compileShader(gl,fragmentSrc,gl.FRAGMENT_SHADER);
	var program = gl.createProgram();
	if(vertexShader != null && fragmentShader != null) {
		gl.attachShader(program,vertexShader);
		gl.attachShader(program,fragmentShader);
		gl.linkProgram(program);
		if(gl.getProgramParameter(program,gl.LINK_STATUS) == 0) haxe.Log.trace("Could not initialize shaders",{ fileName : "Shader.hx", lineNumber : 127, className : "openfl._internal.renderer.opengl.shaders2.Shader", methodName : "compileProgram"});
	}
	return program;
};
openfl._internal.renderer.opengl.shaders2.Shader.compileShader = function(gl,shaderSrc,type) {
	var src = shaderSrc.join("\n");
	var shader = gl.createShader(type);
	gl.shaderSource(shader,src);
	gl.compileShader(shader);
	if(gl.getShaderParameter(shader,gl.COMPILE_STATUS) == 0) {
		haxe.Log.trace(gl.getShaderInfoLog(shader),{ fileName : "Shader.hx", lineNumber : 141, className : "openfl._internal.renderer.opengl.shaders2.Shader", methodName : "compileShader"});
		return null;
	}
	return shader;
};
openfl._internal.renderer.opengl.shaders2.Shader.prototype = {
	gl: null
	,vertexSrc: null
	,fragmentSrc: null
	,attributes: null
	,uniforms: null
	,ID: null
	,program: null
	,init: function() {
		this.program = openfl._internal.renderer.opengl.shaders2.Shader.compileProgram(this.gl,this.vertexSrc,this.fragmentSrc);
		this.gl.useProgram(this.program);
	}
	,destroy: function() {
		if(this.program != null) this.gl.deleteProgram(this.program);
		this.attributes = null;
	}
	,getAttribLocation: function(attribute) {
		if(this.program == null) throw "Shader isn't initialized";
		if(this.attributes.exists(attribute)) return this.attributes.get(attribute); else {
			var location = this.gl.getAttribLocation(this.program,attribute);
			this.attributes.set(attribute,location);
			return location;
		}
	}
	,getUniformLocation: function(uniform) {
		if(this.program == null) throw "Shader isn't initialized";
		if(this.uniforms.exists(uniform)) return this.uniforms.get(uniform); else {
			var location = this.gl.getUniformLocation(this.program,uniform);
			this.uniforms.set(uniform,location);
			return location;
		}
	}
	,enableVertexAttribute: function(attribute,stride,offset) {
		var location = this.getAttribLocation(attribute.name);
		this.gl.enableVertexAttribArray(location);
		this.gl.vertexAttribPointer(location,attribute.components,attribute.type,attribute.normalized,stride,offset * 4);
	}
	,disableVertexAttribute: function(attribute,setDefault) {
		if(setDefault == null) setDefault = true;
		var location = this.getAttribLocation(attribute.name);
		this.gl.disableVertexAttribArray(location);
		if(setDefault) {
			var _g = attribute.components;
			switch(_g) {
			case 1:
				this.gl.vertexAttrib1fv(location,attribute.defaultValue.subarray(0,1));
				break;
			case 2:
				this.gl.vertexAttrib2fv(location,attribute.defaultValue.subarray(0,2));
				break;
			case 3:
				this.gl.vertexAttrib3fv(location,attribute.defaultValue.subarray(0,3));
				break;
			default:
				this.gl.vertexAttrib4fv(location,attribute.defaultValue.subarray(0,4));
			}
		}
	}
	,bindVertexArray: function(va) {
		var offset = 0;
		var stride = va.get_stride();
		var _g = 0;
		var _g1 = va.attributes;
		while(_g < _g1.length) {
			var attribute = _g1[_g];
			++_g;
			if(attribute.enabled) {
				this.enableVertexAttribute(attribute,stride,offset);
				offset += Math.floor(attribute.components * attribute.getElementsBytes() / 4);
			} else this.disableVertexAttribute(attribute,true);
		}
	}
	,unbindVertexArray: function(va) {
		var _g = 0;
		var _g1 = va.attributes;
		while(_g < _g1.length) {
			var attribute = _g1[_g];
			++_g;
			this.disableVertexAttribute(attribute,false);
		}
	}
	,__class__: openfl._internal.renderer.opengl.shaders2.Shader
};
openfl._internal.renderer.opengl.shaders2.DefaultShader = function(gl) {
	openfl._internal.renderer.opengl.shaders2.Shader.call(this,gl);
	this.vertexSrc = ["attribute vec2 " + Std.string("aPosition") + ";","attribute vec2 " + Std.string("aTexCoord0") + ";","attribute vec4 " + Std.string("aColor") + ";","uniform vec2 " + Std.string("uProjectionVector") + ";","uniform vec2 " + Std.string("uOffsetVector") + ";","varying vec2 vTexCoord;","varying vec4 vColor;","const vec2 center = vec2(-1.0, 1.0);","void main(void) {","   gl_Position = vec4( ((" + Std.string("aPosition") + " + " + Std.string("uOffsetVector") + ") / " + Std.string("uProjectionVector") + ") + center , 0.0, 1.0);","   vTexCoord = " + Std.string("aTexCoord0") + ";","   vColor = " + Std.string("aColor") + ";","}"];
	this.fragmentSrc = ["#ifdef GL_ES","precision lowp float;","#endif","uniform sampler2D " + Std.string("uSampler0") + ";","uniform vec4 " + Std.string("uColorMultiplier") + ";","uniform vec4 " + Std.string("uColorOffset") + ";","varying vec2 vTexCoord;","varying vec4 vColor;","vec4 colorTransform(const vec4 color, const vec4 tint, const vec4 multiplier, const vec4 offset) {","   vec4 unmultiply = vec4(color.rgb / color.a, color.a);","   vec4 result = unmultiply * tint * multiplier;","   result = result + offset;","   result = clamp(result, 0., 1.);","   result = vec4(result.rgb * result.a, result.a);","   return result;","}","void main(void) {","   vec4 tc = texture2D(" + Std.string("uSampler0") + ", vTexCoord);","   gl_FragColor = colorTransform(tc, vColor, " + Std.string("uColorMultiplier") + ", " + Std.string("uColorOffset") + ");","}"];
	this.init();
};
$hxClasses["openfl._internal.renderer.opengl.shaders2.DefaultShader"] = openfl._internal.renderer.opengl.shaders2.DefaultShader;
openfl._internal.renderer.opengl.shaders2.DefaultShader.__name__ = ["openfl","_internal","renderer","opengl","shaders2","DefaultShader"];
openfl._internal.renderer.opengl.shaders2.DefaultShader.__super__ = openfl._internal.renderer.opengl.shaders2.Shader;
openfl._internal.renderer.opengl.shaders2.DefaultShader.prototype = $extend(openfl._internal.renderer.opengl.shaders2.Shader.prototype,{
	init: function() {
		openfl._internal.renderer.opengl.shaders2.Shader.prototype.init.call(this);
		this.getAttribLocation("aPosition");
		this.getAttribLocation("aTexCoord0");
		this.getAttribLocation("aColor");
		this.getUniformLocation("uProjectionVector");
		this.getUniformLocation("uOffsetVector");
		this.getUniformLocation("uSampler0");
		this.getUniformLocation("uColorMultiplier");
		this.getUniformLocation("uColorOffset");
	}
	,__class__: openfl._internal.renderer.opengl.shaders2.DefaultShader
});
openfl._internal.renderer.opengl.shaders2._DefaultShader = {};
openfl._internal.renderer.opengl.shaders2._DefaultShader.Attrib_Impl_ = function() { };
$hxClasses["openfl._internal.renderer.opengl.shaders2._DefaultShader.Attrib_Impl_"] = openfl._internal.renderer.opengl.shaders2._DefaultShader.Attrib_Impl_;
openfl._internal.renderer.opengl.shaders2._DefaultShader.Attrib_Impl_.__name__ = ["openfl","_internal","renderer","opengl","shaders2","_DefaultShader","Attrib_Impl_"];
openfl._internal.renderer.opengl.shaders2._DefaultShader.Uniform_Impl_ = function() { };
$hxClasses["openfl._internal.renderer.opengl.shaders2._DefaultShader.Uniform_Impl_"] = openfl._internal.renderer.opengl.shaders2._DefaultShader.Uniform_Impl_;
openfl._internal.renderer.opengl.shaders2._DefaultShader.Uniform_Impl_.__name__ = ["openfl","_internal","renderer","opengl","shaders2","_DefaultShader","Uniform_Impl_"];
openfl._internal.renderer.opengl.shaders2.DrawTrianglesShader = function(gl) {
	openfl._internal.renderer.opengl.shaders2.Shader.call(this,gl);
	this.vertexSrc = ["attribute vec2 " + Std.string("aPosition") + ";","attribute vec2 " + Std.string("aTexCoord0") + ";","attribute vec4 " + Std.string("aColor") + ";","uniform vec2 " + Std.string("uProjectionVector") + ";","uniform vec2 " + Std.string("uOffsetVector") + ";","varying vec2 vTexCoord;","varying vec4 vColor;","const vec2 center = vec2(-1.0, 1.0);","void main(void) {","   gl_Position = vec4( ((" + Std.string("aPosition") + " + " + Std.string("uOffsetVector") + ") / " + Std.string("uProjectionVector") + ") + center , 0.0, 1.0);","   vTexCoord = " + Std.string("aTexCoord0") + ";","   vColor = " + Std.string("aColor") + ".bgra;","}"];
	this.fragmentSrc = ["#ifdef GL_ES","precision lowp float;","#endif","uniform sampler2D " + Std.string("uSampler0") + ";","uniform vec3 " + Std.string("uColor") + ";","uniform bool " + Std.string("uUseTexture") + ";","uniform float " + Std.string("uAlpha") + ";","uniform vec4 " + Std.string("uColorMultiplier") + ";","uniform vec4 " + Std.string("uColorOffset") + ";","varying vec2 vTexCoord;","varying vec4 vColor;","vec4 tmp;","vec4 colorTransform(const vec4 color, const vec4 tint, const vec4 multiplier, const vec4 offset) {","   vec4 unmultiply = vec4(color.rgb / color.a, color.a);","   vec4 result = unmultiply * tint * multiplier;","   result = result + offset;","   result = clamp(result, 0., 1.);","   result = vec4(result.rgb * result.a, result.a);","   return result;","}","void main(void) {","   if(" + Std.string("uUseTexture") + ") {","       tmp = texture2D(" + Std.string("uSampler0") + ", vTexCoord);","   } else {","       tmp = vec4(" + Std.string("uColor") + ", 1.);","   }","   gl_FragColor = colorTransform(tmp, vColor, " + Std.string("uColorMultiplier") + ", " + Std.string("uColorOffset") + ");","}"];
	this.init();
};
$hxClasses["openfl._internal.renderer.opengl.shaders2.DrawTrianglesShader"] = openfl._internal.renderer.opengl.shaders2.DrawTrianglesShader;
openfl._internal.renderer.opengl.shaders2.DrawTrianglesShader.__name__ = ["openfl","_internal","renderer","opengl","shaders2","DrawTrianglesShader"];
openfl._internal.renderer.opengl.shaders2.DrawTrianglesShader.__super__ = openfl._internal.renderer.opengl.shaders2.Shader;
openfl._internal.renderer.opengl.shaders2.DrawTrianglesShader.prototype = $extend(openfl._internal.renderer.opengl.shaders2.Shader.prototype,{
	init: function() {
		openfl._internal.renderer.opengl.shaders2.Shader.prototype.init.call(this);
		this.getAttribLocation("aPosition");
		this.getAttribLocation("aTexCoord0");
		this.getAttribLocation("aColor");
		this.getUniformLocation("uSampler0");
		this.getUniformLocation("uProjectionVector");
		this.getUniformLocation("uOffsetVector");
		this.getUniformLocation("uColor");
		this.getUniformLocation("uAlpha");
		this.getUniformLocation("uUseTexture");
		this.getUniformLocation("uColorMultiplier");
		this.getUniformLocation("uColorOffset");
	}
	,__class__: openfl._internal.renderer.opengl.shaders2.DrawTrianglesShader
});
openfl._internal.renderer.opengl.shaders2._DrawTrianglesShader = {};
openfl._internal.renderer.opengl.shaders2._DrawTrianglesShader.Attrib_Impl_ = function() { };
$hxClasses["openfl._internal.renderer.opengl.shaders2._DrawTrianglesShader.Attrib_Impl_"] = openfl._internal.renderer.opengl.shaders2._DrawTrianglesShader.Attrib_Impl_;
openfl._internal.renderer.opengl.shaders2._DrawTrianglesShader.Attrib_Impl_.__name__ = ["openfl","_internal","renderer","opengl","shaders2","_DrawTrianglesShader","Attrib_Impl_"];
openfl._internal.renderer.opengl.shaders2._DrawTrianglesShader.Uniform_Impl_ = function() { };
$hxClasses["openfl._internal.renderer.opengl.shaders2._DrawTrianglesShader.Uniform_Impl_"] = openfl._internal.renderer.opengl.shaders2._DrawTrianglesShader.Uniform_Impl_;
openfl._internal.renderer.opengl.shaders2._DrawTrianglesShader.Uniform_Impl_.__name__ = ["openfl","_internal","renderer","opengl","shaders2","_DrawTrianglesShader","Uniform_Impl_"];
openfl._internal.renderer.opengl.shaders2.FillShader = function(gl) {
	openfl._internal.renderer.opengl.shaders2.Shader.call(this,gl);
	this.vertexSrc = ["attribute vec2 " + Std.string("aPosition") + ";","uniform mat3 " + Std.string("uTranslationMatrix") + ";","uniform vec2 " + Std.string("uProjectionVector") + ";","uniform vec2 " + Std.string("uOffsetVector") + ";","uniform vec4 " + Std.string("uColor") + ";","uniform float " + Std.string("uAlpha") + ";","uniform vec4 " + Std.string("uColorMultiplier") + ";","uniform vec4 " + Std.string("uColorOffset") + ";","varying vec4 vColor;","vec4 colorTransform(const vec4 color, const float alpha, const vec4 multiplier, const vec4 offset) {","   vec4 result = color * multiplier;","   result.a *= alpha;","   result = result + offset;","   result = clamp(result, 0., 1.);","   result = vec4(result.rgb * result.a, result.a);","   return result;","}","void main(void) {","   vec3 v = " + Std.string("uTranslationMatrix") + " * vec3(" + Std.string("aPosition") + ", 1.0);","   v -= " + Std.string("uOffsetVector") + ".xyx;","   gl_Position = vec4( v.x / " + Std.string("uProjectionVector") + ".x -1.0, v.y / - " + Std.string("uProjectionVector") + ".y + 1.0 , 0.0, 1.0);","   vColor = colorTransform(" + Std.string("uColor") + ", " + Std.string("uAlpha") + ", " + Std.string("uColorMultiplier") + ", " + Std.string("uColorOffset") + ");","}"];
	this.fragmentSrc = ["#ifdef GL_ES","precision lowp float;","#endif","varying vec4 vColor;","void main(void) {","   gl_FragColor = vColor;","}"];
	this.init();
};
$hxClasses["openfl._internal.renderer.opengl.shaders2.FillShader"] = openfl._internal.renderer.opengl.shaders2.FillShader;
openfl._internal.renderer.opengl.shaders2.FillShader.__name__ = ["openfl","_internal","renderer","opengl","shaders2","FillShader"];
openfl._internal.renderer.opengl.shaders2.FillShader.__super__ = openfl._internal.renderer.opengl.shaders2.Shader;
openfl._internal.renderer.opengl.shaders2.FillShader.prototype = $extend(openfl._internal.renderer.opengl.shaders2.Shader.prototype,{
	init: function() {
		openfl._internal.renderer.opengl.shaders2.Shader.prototype.init.call(this);
		this.getAttribLocation("aPosition");
		this.getUniformLocation("uTranslationMatrix");
		this.getUniformLocation("uProjectionVector");
		this.getUniformLocation("uOffsetVector");
		this.getUniformLocation("uColor");
		this.getUniformLocation("uColorMultiplier");
		this.getUniformLocation("uColorOffset");
	}
	,__class__: openfl._internal.renderer.opengl.shaders2.FillShader
});
openfl._internal.renderer.opengl.shaders2._FillShader = {};
openfl._internal.renderer.opengl.shaders2._FillShader.Attrib_Impl_ = function() { };
$hxClasses["openfl._internal.renderer.opengl.shaders2._FillShader.Attrib_Impl_"] = openfl._internal.renderer.opengl.shaders2._FillShader.Attrib_Impl_;
openfl._internal.renderer.opengl.shaders2._FillShader.Attrib_Impl_.__name__ = ["openfl","_internal","renderer","opengl","shaders2","_FillShader","Attrib_Impl_"];
openfl._internal.renderer.opengl.shaders2._FillShader.Uniform_Impl_ = function() { };
$hxClasses["openfl._internal.renderer.opengl.shaders2._FillShader.Uniform_Impl_"] = openfl._internal.renderer.opengl.shaders2._FillShader.Uniform_Impl_;
openfl._internal.renderer.opengl.shaders2._FillShader.Uniform_Impl_.__name__ = ["openfl","_internal","renderer","opengl","shaders2","_FillShader","Uniform_Impl_"];
openfl._internal.renderer.opengl.shaders2.PatternFillShader = function(gl) {
	openfl._internal.renderer.opengl.shaders2.Shader.call(this,gl);
	this.vertexSrc = ["attribute vec2 " + Std.string("aPosition") + ";","uniform mat3 " + Std.string("uTranslationMatrix") + ";","uniform vec2 " + Std.string("uProjectionVector") + ";","uniform vec2 " + Std.string("uOffsetVector") + ";","uniform mat3 " + Std.string("uPatternMatrix") + ";","varying vec2 vPosition;","void main(void) {","   vec3 v = " + Std.string("uTranslationMatrix") + " * vec3(" + Std.string("aPosition") + " , 1.0);","   v -= " + Std.string("uOffsetVector") + ".xyx;","   gl_Position = vec4( v.x / " + Std.string("uProjectionVector") + ".x -1.0, v.y / - " + Std.string("uProjectionVector") + ".y + 1.0 , 0.0, 1.0);","   vPosition = (" + Std.string("uPatternMatrix") + " * vec3(" + Std.string("aPosition") + ", 1)).xy;","}"];
	this.fragmentSrc = ["#ifdef GL_ES","precision lowp float;","#endif","uniform float " + Std.string("uAlpha") + ";","uniform vec2 " + Std.string("uPatternTL") + ";","uniform vec2 " + Std.string("uPatternBR") + ";","uniform sampler2D " + Std.string("uSampler0") + ";","uniform vec4 " + Std.string("uColorMultiplier") + ";","uniform vec4 " + Std.string("uColorOffset") + ";","varying vec2 vPosition;","vec4 colorTransform(const vec4 color, const float alpha, const vec4 multiplier, const vec4 offset) {","   vec4 unmultiply = vec4(color.rgb / color.a, color.a);","   vec4 result = unmultiply * multiplier;","   result.a *= alpha;","   result = result + offset;","   result = clamp(result, 0., 1.);","   result = vec4(result.rgb * result.a, result.a);","   return result;","}","void main(void) {","   vec2 pos = mix(" + Std.string("uPatternTL") + ", " + Std.string("uPatternBR") + ", vPosition);","   vec4 tcol = texture2D(" + Std.string("uSampler0") + ", pos);","   gl_FragColor = colorTransform(tcol, " + Std.string("uAlpha") + ", " + Std.string("uColorMultiplier") + ", " + Std.string("uColorOffset") + ");","}"];
	this.init();
};
$hxClasses["openfl._internal.renderer.opengl.shaders2.PatternFillShader"] = openfl._internal.renderer.opengl.shaders2.PatternFillShader;
openfl._internal.renderer.opengl.shaders2.PatternFillShader.__name__ = ["openfl","_internal","renderer","opengl","shaders2","PatternFillShader"];
openfl._internal.renderer.opengl.shaders2.PatternFillShader.__super__ = openfl._internal.renderer.opengl.shaders2.Shader;
openfl._internal.renderer.opengl.shaders2.PatternFillShader.prototype = $extend(openfl._internal.renderer.opengl.shaders2.Shader.prototype,{
	init: function() {
		openfl._internal.renderer.opengl.shaders2.Shader.prototype.init.call(this);
		this.getAttribLocation("aPosition");
		this.getUniformLocation("uTranslationMatrix");
		this.getUniformLocation("uPatternMatrix");
		this.getUniformLocation("uProjectionVector");
		this.getUniformLocation("uOffsetVector");
		this.getUniformLocation("uSampler0");
		this.getUniformLocation("uPatternTL");
		this.getUniformLocation("uPatternBR");
		this.getUniformLocation("uAlpha");
		this.getUniformLocation("uColorMultiplier");
		this.getUniformLocation("uColorOffset");
	}
	,__class__: openfl._internal.renderer.opengl.shaders2.PatternFillShader
});
openfl._internal.renderer.opengl.shaders2._PatternFillShader = {};
openfl._internal.renderer.opengl.shaders2._PatternFillShader.Attrib_Impl_ = function() { };
$hxClasses["openfl._internal.renderer.opengl.shaders2._PatternFillShader.Attrib_Impl_"] = openfl._internal.renderer.opengl.shaders2._PatternFillShader.Attrib_Impl_;
openfl._internal.renderer.opengl.shaders2._PatternFillShader.Attrib_Impl_.__name__ = ["openfl","_internal","renderer","opengl","shaders2","_PatternFillShader","Attrib_Impl_"];
openfl._internal.renderer.opengl.shaders2._PatternFillShader.Uniform_Impl_ = function() { };
$hxClasses["openfl._internal.renderer.opengl.shaders2._PatternFillShader.Uniform_Impl_"] = openfl._internal.renderer.opengl.shaders2._PatternFillShader.Uniform_Impl_;
openfl._internal.renderer.opengl.shaders2._PatternFillShader.Uniform_Impl_.__name__ = ["openfl","_internal","renderer","opengl","shaders2","_PatternFillShader","Uniform_Impl_"];
openfl._internal.renderer.opengl.shaders2.PrimitiveShader = function(gl) {
	openfl._internal.renderer.opengl.shaders2.Shader.call(this,gl);
	this.vertexSrc = ["attribute vec2 " + Std.string("aPosition") + ";","attribute vec4 " + Std.string("aColor") + ";","uniform mat3 " + Std.string("uTranslationMatrix") + ";","uniform vec2 " + Std.string("uProjectionVector") + ";","uniform vec2 " + Std.string("uOffsetVector") + ";","uniform vec4 " + Std.string("uColorMultiplier") + ";","uniform vec4 " + Std.string("uColorOffset") + ";","uniform float " + Std.string("uAlpha") + ";","varying vec4 vColor;","vec4 colorTransform(const vec4 color, const float alpha, const vec4 multiplier, const vec4 offset) {","   vec4 result = color * multiplier;","   result.a *= alpha;","   result = result + offset;","   result = clamp(result, 0., 1.);","   result = vec4(result.rgb * result.a, result.a);","   return result;","}","void main(void) {","   vec3 v = " + Std.string("uTranslationMatrix") + " * vec3(" + Std.string("aPosition") + " , 1.0);","   v -= " + Std.string("uOffsetVector") + ".xyx;","   gl_Position = vec4( v.x / " + Std.string("uProjectionVector") + ".x -1.0, v.y / -" + Std.string("uProjectionVector") + ".y + 1.0 , 0.0, 1.0);","   vColor = colorTransform(" + Std.string("aColor") + ", " + Std.string("uAlpha") + ", " + Std.string("uColorMultiplier") + ", " + Std.string("uColorOffset") + ");","}"];
	this.fragmentSrc = ["#ifdef GL_ES","precision lowp float;","#endif","varying vec4 vColor;","void main(void) {","   gl_FragColor = vColor;","}"];
	this.init();
};
$hxClasses["openfl._internal.renderer.opengl.shaders2.PrimitiveShader"] = openfl._internal.renderer.opengl.shaders2.PrimitiveShader;
openfl._internal.renderer.opengl.shaders2.PrimitiveShader.__name__ = ["openfl","_internal","renderer","opengl","shaders2","PrimitiveShader"];
openfl._internal.renderer.opengl.shaders2.PrimitiveShader.__super__ = openfl._internal.renderer.opengl.shaders2.Shader;
openfl._internal.renderer.opengl.shaders2.PrimitiveShader.prototype = $extend(openfl._internal.renderer.opengl.shaders2.Shader.prototype,{
	init: function() {
		openfl._internal.renderer.opengl.shaders2.Shader.prototype.init.call(this);
		this.getAttribLocation("aPosition");
		this.getAttribLocation("aColor");
		this.getUniformLocation("uTranslationMatrix");
		this.getUniformLocation("uProjectionVector");
		this.getUniformLocation("uOffsetVector");
		this.getUniformLocation("uAlpha");
		this.getUniformLocation("uColorMultiplier");
		this.getUniformLocation("uColorOffset");
	}
	,__class__: openfl._internal.renderer.opengl.shaders2.PrimitiveShader
});
openfl._internal.renderer.opengl.shaders2._PrimitiveShader = {};
openfl._internal.renderer.opengl.shaders2._PrimitiveShader.Attrib_Impl_ = function() { };
$hxClasses["openfl._internal.renderer.opengl.shaders2._PrimitiveShader.Attrib_Impl_"] = openfl._internal.renderer.opengl.shaders2._PrimitiveShader.Attrib_Impl_;
openfl._internal.renderer.opengl.shaders2._PrimitiveShader.Attrib_Impl_.__name__ = ["openfl","_internal","renderer","opengl","shaders2","_PrimitiveShader","Attrib_Impl_"];
openfl._internal.renderer.opengl.shaders2._PrimitiveShader.Uniform_Impl_ = function() { };
$hxClasses["openfl._internal.renderer.opengl.shaders2._PrimitiveShader.Uniform_Impl_"] = openfl._internal.renderer.opengl.shaders2._PrimitiveShader.Uniform_Impl_;
openfl._internal.renderer.opengl.shaders2._PrimitiveShader.Uniform_Impl_.__name__ = ["openfl","_internal","renderer","opengl","shaders2","_PrimitiveShader","Uniform_Impl_"];
openfl._internal.renderer.opengl.utils = {};
openfl._internal.renderer.opengl.utils.BlendModeManager = function(gl) {
	this.gl = gl;
	this.currentBlendMode = null;
};
$hxClasses["openfl._internal.renderer.opengl.utils.BlendModeManager"] = openfl._internal.renderer.opengl.utils.BlendModeManager;
openfl._internal.renderer.opengl.utils.BlendModeManager.__name__ = ["openfl","_internal","renderer","opengl","utils","BlendModeManager"];
openfl._internal.renderer.opengl.utils.BlendModeManager.prototype = {
	currentBlendMode: null
	,gl: null
	,destroy: function() {
		this.gl = null;
	}
	,setBlendMode: function(blendMode) {
		if(blendMode == null) blendMode = openfl.display.BlendMode.NORMAL;
		if(this.currentBlendMode == blendMode) return false;
		this.currentBlendMode = blendMode;
		var blendModeWebGL = openfl._internal.renderer.opengl.GLRenderer.blendModesWebGL.get(this.currentBlendMode);
		this.gl.blendFunc(blendModeWebGL[0],blendModeWebGL[1]);
		return true;
	}
	,__class__: openfl._internal.renderer.opengl.utils.BlendModeManager
};
openfl._internal.renderer.opengl.utils.DrawPath = function() {
	this.type = openfl._internal.renderer.opengl.utils.GraphicType.Polygon;
	this.points = [];
	this.winding = 0;
	this.isRemovable = true;
	this.fillIndex = 0;
	this.line = new openfl._internal.renderer.opengl.utils.LineStyle();
	this.fill = openfl._internal.renderer.opengl.utils.FillType.None;
};
$hxClasses["openfl._internal.renderer.opengl.utils.DrawPath"] = openfl._internal.renderer.opengl.utils.DrawPath;
openfl._internal.renderer.opengl.utils.DrawPath.__name__ = ["openfl","_internal","renderer","opengl","utils","DrawPath"];
openfl._internal.renderer.opengl.utils.DrawPath.getStack = function(graphics,gl) {
	return openfl._internal.renderer.opengl.utils.PathBuiler.build(graphics,gl);
};
openfl._internal.renderer.opengl.utils.DrawPath.prototype = {
	line: null
	,fill: null
	,fillIndex: null
	,isRemovable: null
	,winding: null
	,points: null
	,type: null
	,update: function(line,fill,fillIndex,winding) {
		this.updateLine(line);
		this.fill = fill;
		this.fillIndex = fillIndex;
		this.winding = winding;
	}
	,updateLine: function(line) {
		this.line.width = line.width;
		this.line.color = line.color;
		if(line.alpha == null) this.line.alpha = 1; else this.line.alpha = line.alpha;
		if(line.scaleMode == null) this.line.scaleMode = openfl.display.LineScaleMode.NORMAL; else this.line.scaleMode = line.scaleMode;
		if(line.caps == null) this.line.caps = openfl.display.CapsStyle.ROUND; else this.line.caps = line.caps;
		if(line.joints == null) this.line.joints = openfl.display.JointStyle.ROUND; else this.line.joints = line.joints;
		this.line.miterLimit = line.miterLimit;
	}
	,__class__: openfl._internal.renderer.opengl.utils.DrawPath
};
openfl._internal.renderer.opengl.utils.PathBuiler = function() { };
$hxClasses["openfl._internal.renderer.opengl.utils.PathBuiler"] = openfl._internal.renderer.opengl.utils.PathBuiler;
openfl._internal.renderer.opengl.utils.PathBuiler.__name__ = ["openfl","_internal","renderer","opengl","utils","PathBuiler"];
openfl._internal.renderer.opengl.utils.PathBuiler.__currentPath = null;
openfl._internal.renderer.opengl.utils.PathBuiler.__drawPaths = null;
openfl._internal.renderer.opengl.utils.PathBuiler.__line = null;
openfl._internal.renderer.opengl.utils.PathBuiler.__fill = null;
openfl._internal.renderer.opengl.utils.PathBuiler.closePath = function() {
	var l = openfl._internal.renderer.opengl.utils.PathBuiler.__currentPath.points.length;
	if(l <= 0) return;
	if(openfl._internal.renderer.opengl.utils.PathBuiler.__currentPath.type == openfl._internal.renderer.opengl.utils.GraphicType.Polygon && openfl._internal.renderer.opengl.utils.PathBuiler.__currentPath.fill != openfl._internal.renderer.opengl.utils.FillType.None) {
		var sx = openfl._internal.renderer.opengl.utils.PathBuiler.__currentPath.points[0];
		var sy = openfl._internal.renderer.opengl.utils.PathBuiler.__currentPath.points[1];
		var ex = openfl._internal.renderer.opengl.utils.PathBuiler.__currentPath.points[l - 2];
		var ey = openfl._internal.renderer.opengl.utils.PathBuiler.__currentPath.points[l - 1];
		if(!(sx == ex && sy == ey)) {
			openfl._internal.renderer.opengl.utils.PathBuiler.__currentPath.points.push(sx);
			openfl._internal.renderer.opengl.utils.PathBuiler.__currentPath.points.push(sy);
		}
	}
};
openfl._internal.renderer.opengl.utils.PathBuiler.endFill = function() {
	openfl._internal.renderer.opengl.utils.PathBuiler.__fill = openfl._internal.renderer.opengl.utils.FillType.None;
	openfl._internal.renderer.opengl.utils.PathBuiler.__fillIndex++;
};
openfl._internal.renderer.opengl.utils.PathBuiler.moveTo = function(x,y) {
	if(openfl._internal.renderer.opengl.utils.PathBuiler.__currentPath.isRemovable && openfl._internal.renderer.opengl.utils.PathBuiler.__currentPath.points.length == 0) openfl._internal.renderer.opengl.utils.PathBuiler.__drawPaths.pop(); else openfl._internal.renderer.opengl.utils.PathBuiler.closePath();
	openfl._internal.renderer.opengl.utils.PathBuiler.__currentPath = new openfl._internal.renderer.opengl.utils.DrawPath();
	openfl._internal.renderer.opengl.utils.PathBuiler.__currentPath.update(openfl._internal.renderer.opengl.utils.PathBuiler.__line,openfl._internal.renderer.opengl.utils.PathBuiler.__fill,openfl._internal.renderer.opengl.utils.PathBuiler.__fillIndex,openfl._internal.renderer.opengl.utils.PathBuiler.__currentWinding);
	openfl._internal.renderer.opengl.utils.PathBuiler.__currentPath.type = openfl._internal.renderer.opengl.utils.GraphicType.Polygon;
	openfl._internal.renderer.opengl.utils.PathBuiler.__currentPath.points.push(x);
	openfl._internal.renderer.opengl.utils.PathBuiler.__currentPath.points.push(y);
	openfl._internal.renderer.opengl.utils.PathBuiler.__drawPaths.push(openfl._internal.renderer.opengl.utils.PathBuiler.__currentPath);
};
openfl._internal.renderer.opengl.utils.PathBuiler.lineTo = function(x,y) {
	openfl._internal.renderer.opengl.utils.PathBuiler.__currentPath.points.push(x);
	openfl._internal.renderer.opengl.utils.PathBuiler.__currentPath.points.push(y);
};
openfl._internal.renderer.opengl.utils.PathBuiler.curveTo = function(cx,cy,x,y) {
	if(openfl._internal.renderer.opengl.utils.PathBuiler.__currentPath.points.length == 0) {
		if(openfl._internal.renderer.opengl.utils.PathBuiler.__currentPath.isRemovable && openfl._internal.renderer.opengl.utils.PathBuiler.__currentPath.points.length == 0) openfl._internal.renderer.opengl.utils.PathBuiler.__drawPaths.pop(); else openfl._internal.renderer.opengl.utils.PathBuiler.closePath();
		openfl._internal.renderer.opengl.utils.PathBuiler.__currentPath = new openfl._internal.renderer.opengl.utils.DrawPath();
		openfl._internal.renderer.opengl.utils.PathBuiler.__currentPath.update(openfl._internal.renderer.opengl.utils.PathBuiler.__line,openfl._internal.renderer.opengl.utils.PathBuiler.__fill,openfl._internal.renderer.opengl.utils.PathBuiler.__fillIndex,openfl._internal.renderer.opengl.utils.PathBuiler.__currentWinding);
		openfl._internal.renderer.opengl.utils.PathBuiler.__currentPath.type = openfl._internal.renderer.opengl.utils.GraphicType.Polygon;
		openfl._internal.renderer.opengl.utils.PathBuiler.__currentPath.points.push(0);
		openfl._internal.renderer.opengl.utils.PathBuiler.__currentPath.points.push(0);
		openfl._internal.renderer.opengl.utils.PathBuiler.__drawPaths.push(openfl._internal.renderer.opengl.utils.PathBuiler.__currentPath);
	}
	var xa = 0;
	var ya = 0;
	var n = 20;
	var points = openfl._internal.renderer.opengl.utils.PathBuiler.__currentPath.points;
	var fromX = points[points.length - 2];
	var fromY = points[points.length - 1];
	var px = 0;
	var py = 0;
	var tmp = 0;
	var _g1 = 1;
	var _g = n + 1;
	while(_g1 < _g) {
		var i = _g1++;
		tmp = i / n;
		xa = fromX + (cx - fromX) * tmp;
		ya = fromY + (cy - fromY) * tmp;
		px = xa + (cx + (x - cx) * tmp - xa) * tmp;
		py = ya + (cy + (y - cy) * tmp - ya) * tmp;
		points.push(px);
		points.push(py);
	}
};
openfl._internal.renderer.opengl.utils.PathBuiler.cubicCurveTo = function(cx,cy,cx2,cy2,x,y) {
	if(openfl._internal.renderer.opengl.utils.PathBuiler.__currentPath.points.length == 0) {
		if(openfl._internal.renderer.opengl.utils.PathBuiler.__currentPath.isRemovable && openfl._internal.renderer.opengl.utils.PathBuiler.__currentPath.points.length == 0) openfl._internal.renderer.opengl.utils.PathBuiler.__drawPaths.pop(); else openfl._internal.renderer.opengl.utils.PathBuiler.closePath();
		openfl._internal.renderer.opengl.utils.PathBuiler.__currentPath = new openfl._internal.renderer.opengl.utils.DrawPath();
		openfl._internal.renderer.opengl.utils.PathBuiler.__currentPath.update(openfl._internal.renderer.opengl.utils.PathBuiler.__line,openfl._internal.renderer.opengl.utils.PathBuiler.__fill,openfl._internal.renderer.opengl.utils.PathBuiler.__fillIndex,openfl._internal.renderer.opengl.utils.PathBuiler.__currentWinding);
		openfl._internal.renderer.opengl.utils.PathBuiler.__currentPath.type = openfl._internal.renderer.opengl.utils.GraphicType.Polygon;
		openfl._internal.renderer.opengl.utils.PathBuiler.__currentPath.points.push(0);
		openfl._internal.renderer.opengl.utils.PathBuiler.__currentPath.points.push(0);
		openfl._internal.renderer.opengl.utils.PathBuiler.__drawPaths.push(openfl._internal.renderer.opengl.utils.PathBuiler.__currentPath);
	}
	var n = 20;
	var dt = 0;
	var dt2 = 0;
	var dt3 = 0;
	var t2 = 0;
	var t3 = 0;
	var points = openfl._internal.renderer.opengl.utils.PathBuiler.__currentPath.points;
	var fromX = points[points.length - 2];
	var fromY = points[points.length - 1];
	var px = 0;
	var py = 0;
	var tmp = 0;
	var _g1 = 1;
	var _g = n + 1;
	while(_g1 < _g) {
		var i = _g1++;
		tmp = i / n;
		dt = 1 - tmp;
		dt2 = dt * dt;
		dt3 = dt2 * dt;
		t2 = tmp * tmp;
		t3 = t2 * tmp;
		px = dt3 * fromX + 3 * dt2 * tmp * cx + 3 * dt * t2 * cx2 + t3 * x;
		py = dt3 * fromY + 3 * dt2 * tmp * cy + 3 * dt * t2 * cy2 + t3 * y;
		points.push(px);
		points.push(py);
	}
};
openfl._internal.renderer.opengl.utils.PathBuiler.graphicDataPop = function() {
	if(openfl._internal.renderer.opengl.utils.PathBuiler.__currentPath.isRemovable && openfl._internal.renderer.opengl.utils.PathBuiler.__currentPath.points.length == 0) openfl._internal.renderer.opengl.utils.PathBuiler.__drawPaths.pop(); else openfl._internal.renderer.opengl.utils.PathBuiler.closePath();
};
openfl._internal.renderer.opengl.utils.PathBuiler.build = function(graphics,gl) {
	var glStack = null;
	var bounds = graphics.__bounds;
	openfl._internal.renderer.opengl.utils.PathBuiler.__drawPaths = new Array();
	openfl._internal.renderer.opengl.utils.PathBuiler.__currentPath = new openfl._internal.renderer.opengl.utils.DrawPath();
	openfl._internal.renderer.opengl.utils.PathBuiler.__line = new openfl._internal.renderer.opengl.utils.LineStyle();
	openfl._internal.renderer.opengl.utils.PathBuiler.__fill = openfl._internal.renderer.opengl.utils.FillType.None;
	openfl._internal.renderer.opengl.utils.PathBuiler.__fillIndex = 0;
	glStack = graphics.__glStack[openfl._internal.renderer.opengl.GLRenderer.glContextId];
	if(glStack == null) glStack = graphics.__glStack[openfl._internal.renderer.opengl.GLRenderer.glContextId] = new openfl._internal.renderer.opengl.utils.GLStack(gl);
	if(!graphics.__visible || graphics.__commands.length == 0 || bounds == null || bounds.width == 0 || bounds.height == 0) {
	} else {
		var _g = 0;
		var _g1 = graphics.__commands;
		while(_g < _g1.length) {
			var command = _g1[_g];
			++_g;
			switch(command[1]) {
			case 0:
				var smooth = command[5];
				var repeat = command[4];
				var matrix = command[3];
				var bitmap = command[2];
				openfl._internal.renderer.opengl.utils.PathBuiler.endFill();
				if(bitmap != null) openfl._internal.renderer.opengl.utils.PathBuiler.__fill = openfl._internal.renderer.opengl.utils.FillType.Texture(bitmap,matrix,repeat,smooth); else openfl._internal.renderer.opengl.utils.PathBuiler.__fill = openfl._internal.renderer.opengl.utils.FillType.None;
				if(openfl._internal.renderer.opengl.utils.PathBuiler.__currentPath.points.length == 0) {
					if(openfl._internal.renderer.opengl.utils.PathBuiler.__currentPath.isRemovable && openfl._internal.renderer.opengl.utils.PathBuiler.__currentPath.points.length == 0) openfl._internal.renderer.opengl.utils.PathBuiler.__drawPaths.pop(); else openfl._internal.renderer.opengl.utils.PathBuiler.closePath();
					openfl._internal.renderer.opengl.utils.PathBuiler.__currentPath = new openfl._internal.renderer.opengl.utils.DrawPath();
					openfl._internal.renderer.opengl.utils.PathBuiler.__currentPath.update(openfl._internal.renderer.opengl.utils.PathBuiler.__line,openfl._internal.renderer.opengl.utils.PathBuiler.__fill,openfl._internal.renderer.opengl.utils.PathBuiler.__fillIndex,openfl._internal.renderer.opengl.utils.PathBuiler.__currentWinding);
					openfl._internal.renderer.opengl.utils.PathBuiler.__currentPath.points = [];
					openfl._internal.renderer.opengl.utils.PathBuiler.__currentPath.type = openfl._internal.renderer.opengl.utils.GraphicType.Polygon;
					openfl._internal.renderer.opengl.utils.PathBuiler.__drawPaths.push(openfl._internal.renderer.opengl.utils.PathBuiler.__currentPath);
				}
				break;
			case 1:
				var alpha = command[3];
				var rgb = command[2];
				openfl._internal.renderer.opengl.utils.PathBuiler.endFill();
				if(alpha > 0) openfl._internal.renderer.opengl.utils.PathBuiler.__fill = openfl._internal.renderer.opengl.utils.FillType.Color(rgb & 16777215,alpha); else openfl._internal.renderer.opengl.utils.PathBuiler.__fill = openfl._internal.renderer.opengl.utils.FillType.None;
				if(openfl._internal.renderer.opengl.utils.PathBuiler.__currentPath.points.length == 0) {
					if(openfl._internal.renderer.opengl.utils.PathBuiler.__currentPath.isRemovable && openfl._internal.renderer.opengl.utils.PathBuiler.__currentPath.points.length == 0) openfl._internal.renderer.opengl.utils.PathBuiler.__drawPaths.pop(); else openfl._internal.renderer.opengl.utils.PathBuiler.closePath();
					openfl._internal.renderer.opengl.utils.PathBuiler.__currentPath = new openfl._internal.renderer.opengl.utils.DrawPath();
					openfl._internal.renderer.opengl.utils.PathBuiler.__currentPath.update(openfl._internal.renderer.opengl.utils.PathBuiler.__line,openfl._internal.renderer.opengl.utils.PathBuiler.__fill,openfl._internal.renderer.opengl.utils.PathBuiler.__fillIndex,openfl._internal.renderer.opengl.utils.PathBuiler.__currentWinding);
					openfl._internal.renderer.opengl.utils.PathBuiler.__currentPath.points = [];
					openfl._internal.renderer.opengl.utils.PathBuiler.__currentPath.type = openfl._internal.renderer.opengl.utils.GraphicType.Polygon;
					openfl._internal.renderer.opengl.utils.PathBuiler.__drawPaths.push(openfl._internal.renderer.opengl.utils.PathBuiler.__currentPath);
				}
				break;
			case 2:
				var y = command[7];
				var x = command[6];
				var cy2 = command[5];
				var cx2 = command[4];
				var cy = command[3];
				var cx = command[2];
				openfl._internal.renderer.opengl.utils.PathBuiler.cubicCurveTo(cx,cy,cx2,cy2,x,y);
				break;
			case 3:
				var y1 = command[5];
				var x1 = command[4];
				var cy1 = command[3];
				var cx1 = command[2];
				openfl._internal.renderer.opengl.utils.PathBuiler.curveTo(cx1,cy1,x1,y1);
				break;
			case 4:
				var radius = command[4];
				var y2 = command[3];
				var x2 = command[2];
				if(openfl._internal.renderer.opengl.utils.PathBuiler.__currentPath.isRemovable && openfl._internal.renderer.opengl.utils.PathBuiler.__currentPath.points.length == 0) openfl._internal.renderer.opengl.utils.PathBuiler.__drawPaths.pop(); else openfl._internal.renderer.opengl.utils.PathBuiler.closePath();
				openfl._internal.renderer.opengl.utils.PathBuiler.__currentPath = new openfl._internal.renderer.opengl.utils.DrawPath();
				openfl._internal.renderer.opengl.utils.PathBuiler.__currentPath.update(openfl._internal.renderer.opengl.utils.PathBuiler.__line,openfl._internal.renderer.opengl.utils.PathBuiler.__fill,openfl._internal.renderer.opengl.utils.PathBuiler.__fillIndex,openfl._internal.renderer.opengl.utils.PathBuiler.__currentWinding);
				openfl._internal.renderer.opengl.utils.PathBuiler.__currentPath.type = openfl._internal.renderer.opengl.utils.GraphicType.Circle;
				openfl._internal.renderer.opengl.utils.PathBuiler.__currentPath.points = [x2,y2,radius];
				openfl._internal.renderer.opengl.utils.PathBuiler.__drawPaths.push(openfl._internal.renderer.opengl.utils.PathBuiler.__currentPath);
				break;
			case 5:
				var height = command[5];
				var width = command[4];
				var y3 = command[3];
				var x3 = command[2];
				if(openfl._internal.renderer.opengl.utils.PathBuiler.__currentPath.isRemovable && openfl._internal.renderer.opengl.utils.PathBuiler.__currentPath.points.length == 0) openfl._internal.renderer.opengl.utils.PathBuiler.__drawPaths.pop(); else openfl._internal.renderer.opengl.utils.PathBuiler.closePath();
				openfl._internal.renderer.opengl.utils.PathBuiler.__currentPath = new openfl._internal.renderer.opengl.utils.DrawPath();
				openfl._internal.renderer.opengl.utils.PathBuiler.__currentPath.update(openfl._internal.renderer.opengl.utils.PathBuiler.__line,openfl._internal.renderer.opengl.utils.PathBuiler.__fill,openfl._internal.renderer.opengl.utils.PathBuiler.__fillIndex,openfl._internal.renderer.opengl.utils.PathBuiler.__currentWinding);
				openfl._internal.renderer.opengl.utils.PathBuiler.__currentPath.type = openfl._internal.renderer.opengl.utils.GraphicType.Ellipse;
				openfl._internal.renderer.opengl.utils.PathBuiler.__currentPath.points = [x3,y3,width,height];
				openfl._internal.renderer.opengl.utils.PathBuiler.__drawPaths.push(openfl._internal.renderer.opengl.utils.PathBuiler.__currentPath);
				break;
			case 6:
				var height1 = command[5];
				var width1 = command[4];
				var y4 = command[3];
				var x4 = command[2];
				if(openfl._internal.renderer.opengl.utils.PathBuiler.__currentPath.isRemovable && openfl._internal.renderer.opengl.utils.PathBuiler.__currentPath.points.length == 0) openfl._internal.renderer.opengl.utils.PathBuiler.__drawPaths.pop(); else openfl._internal.renderer.opengl.utils.PathBuiler.closePath();
				openfl._internal.renderer.opengl.utils.PathBuiler.__currentPath = new openfl._internal.renderer.opengl.utils.DrawPath();
				openfl._internal.renderer.opengl.utils.PathBuiler.__currentPath.update(openfl._internal.renderer.opengl.utils.PathBuiler.__line,openfl._internal.renderer.opengl.utils.PathBuiler.__fill,openfl._internal.renderer.opengl.utils.PathBuiler.__fillIndex,openfl._internal.renderer.opengl.utils.PathBuiler.__currentWinding);
				openfl._internal.renderer.opengl.utils.PathBuiler.__currentPath.type = openfl._internal.renderer.opengl.utils.GraphicType.Rectangle(false);
				openfl._internal.renderer.opengl.utils.PathBuiler.__currentPath.points = [x4,y4,width1,height1];
				openfl._internal.renderer.opengl.utils.PathBuiler.__drawPaths.push(openfl._internal.renderer.opengl.utils.PathBuiler.__currentPath);
				break;
			case 7:
				var ry = command[7];
				var rx = command[6];
				var height2 = command[5];
				var width2 = command[4];
				var y5 = command[3];
				var x5 = command[2];
				if(ry == -1) ry = rx;
				rx *= 0.5;
				ry *= 0.5;
				if(rx > width2 / 2) rx = width2 / 2;
				if(ry > height2 / 2) ry = height2 / 2;
				if(openfl._internal.renderer.opengl.utils.PathBuiler.__currentPath.isRemovable && openfl._internal.renderer.opengl.utils.PathBuiler.__currentPath.points.length == 0) openfl._internal.renderer.opengl.utils.PathBuiler.__drawPaths.pop(); else openfl._internal.renderer.opengl.utils.PathBuiler.closePath();
				openfl._internal.renderer.opengl.utils.PathBuiler.__currentPath = new openfl._internal.renderer.opengl.utils.DrawPath();
				openfl._internal.renderer.opengl.utils.PathBuiler.__currentPath.update(openfl._internal.renderer.opengl.utils.PathBuiler.__line,openfl._internal.renderer.opengl.utils.PathBuiler.__fill,openfl._internal.renderer.opengl.utils.PathBuiler.__fillIndex,openfl._internal.renderer.opengl.utils.PathBuiler.__currentWinding);
				openfl._internal.renderer.opengl.utils.PathBuiler.__currentPath.type = openfl._internal.renderer.opengl.utils.GraphicType.Rectangle(true);
				openfl._internal.renderer.opengl.utils.PathBuiler.__currentPath.points = [x5,y5,width2,height2,rx,ry];
				openfl._internal.renderer.opengl.utils.PathBuiler.__drawPaths.push(openfl._internal.renderer.opengl.utils.PathBuiler.__currentPath);
				break;
			case 10:
				openfl._internal.renderer.opengl.utils.PathBuiler.endFill();
				break;
			case 11:
				var miterLimit = command[9];
				var joints = command[8];
				var caps = command[7];
				var scaleMode = command[6];
				var pixelHinting = command[5];
				var alpha1 = command[4];
				var color = command[3];
				var thickness = command[2];
				openfl._internal.renderer.opengl.utils.PathBuiler.__line = new openfl._internal.renderer.opengl.utils.LineStyle();
				if(thickness == null || Math.isNaN(thickness) || thickness < 0) openfl._internal.renderer.opengl.utils.PathBuiler.__line.width = 0; else if(thickness == 0) openfl._internal.renderer.opengl.utils.PathBuiler.__line.width = 1; else openfl._internal.renderer.opengl.utils.PathBuiler.__line.width = thickness;
				if(openfl._internal.renderer.opengl.utils.PathBuiler.__currentPath.isRemovable && openfl._internal.renderer.opengl.utils.PathBuiler.__currentPath.points.length == 0) openfl._internal.renderer.opengl.utils.PathBuiler.__drawPaths.pop(); else openfl._internal.renderer.opengl.utils.PathBuiler.closePath();
				openfl._internal.renderer.opengl.utils.PathBuiler.__line.color = color;
				openfl._internal.renderer.opengl.utils.PathBuiler.__line.alpha = alpha1;
				openfl._internal.renderer.opengl.utils.PathBuiler.__line.scaleMode = scaleMode;
				openfl._internal.renderer.opengl.utils.PathBuiler.__line.caps = caps;
				openfl._internal.renderer.opengl.utils.PathBuiler.__line.joints = joints;
				openfl._internal.renderer.opengl.utils.PathBuiler.__line.miterLimit = miterLimit;
				openfl._internal.renderer.opengl.utils.PathBuiler.__currentPath = new openfl._internal.renderer.opengl.utils.DrawPath();
				openfl._internal.renderer.opengl.utils.PathBuiler.__currentPath.update(openfl._internal.renderer.opengl.utils.PathBuiler.__line,openfl._internal.renderer.opengl.utils.PathBuiler.__fill,openfl._internal.renderer.opengl.utils.PathBuiler.__fillIndex,openfl._internal.renderer.opengl.utils.PathBuiler.__currentWinding);
				openfl._internal.renderer.opengl.utils.PathBuiler.__currentPath.points = [];
				openfl._internal.renderer.opengl.utils.PathBuiler.__currentPath.type = openfl._internal.renderer.opengl.utils.GraphicType.Polygon;
				openfl._internal.renderer.opengl.utils.PathBuiler.__drawPaths.push(openfl._internal.renderer.opengl.utils.PathBuiler.__currentPath);
				break;
			case 12:
				var y6 = command[3];
				var x6 = command[2];
				openfl._internal.renderer.opengl.utils.PathBuiler.__currentPath.points.push(x6);
				openfl._internal.renderer.opengl.utils.PathBuiler.__currentPath.points.push(y6);
				break;
			case 13:
				var y7 = command[3];
				var x7 = command[2];
				if(openfl._internal.renderer.opengl.utils.PathBuiler.__currentPath.isRemovable && openfl._internal.renderer.opengl.utils.PathBuiler.__currentPath.points.length == 0) openfl._internal.renderer.opengl.utils.PathBuiler.__drawPaths.pop(); else openfl._internal.renderer.opengl.utils.PathBuiler.closePath();
				openfl._internal.renderer.opengl.utils.PathBuiler.__currentPath = new openfl._internal.renderer.opengl.utils.DrawPath();
				openfl._internal.renderer.opengl.utils.PathBuiler.__currentPath.update(openfl._internal.renderer.opengl.utils.PathBuiler.__line,openfl._internal.renderer.opengl.utils.PathBuiler.__fill,openfl._internal.renderer.opengl.utils.PathBuiler.__fillIndex,openfl._internal.renderer.opengl.utils.PathBuiler.__currentWinding);
				openfl._internal.renderer.opengl.utils.PathBuiler.__currentPath.type = openfl._internal.renderer.opengl.utils.GraphicType.Polygon;
				openfl._internal.renderer.opengl.utils.PathBuiler.__currentPath.points.push(x7);
				openfl._internal.renderer.opengl.utils.PathBuiler.__currentPath.points.push(y7);
				openfl._internal.renderer.opengl.utils.PathBuiler.__drawPaths.push(openfl._internal.renderer.opengl.utils.PathBuiler.__currentPath);
				break;
			case 9:
				var blendMode = command[7];
				var colors = command[6];
				var culling = command[5];
				var uvtData = command[4];
				var indices = command[3];
				var vertices = command[2];
				var isColor;
				{
					var _g2 = openfl._internal.renderer.opengl.utils.PathBuiler.__fill;
					switch(_g2[1]) {
					case 1:
						isColor = true;
						break;
					default:
						isColor = false;
					}
				}
				if(isColor && uvtData != null) continue;
				if(openfl._internal.renderer.opengl.utils.PathBuiler.__currentPath.isRemovable && openfl._internal.renderer.opengl.utils.PathBuiler.__currentPath.points.length == 0) openfl._internal.renderer.opengl.utils.PathBuiler.__drawPaths.pop(); else openfl._internal.renderer.opengl.utils.PathBuiler.closePath();
				openfl._internal.renderer.opengl.utils.PathBuiler.__currentPath = new openfl._internal.renderer.opengl.utils.DrawPath();
				openfl._internal.renderer.opengl.utils.PathBuiler.__currentPath.update(openfl._internal.renderer.opengl.utils.PathBuiler.__line,openfl._internal.renderer.opengl.utils.PathBuiler.__fill,openfl._internal.renderer.opengl.utils.PathBuiler.__fillIndex,openfl._internal.renderer.opengl.utils.PathBuiler.__currentWinding);
				if(uvtData == null) {
					var this1;
					this1 = new openfl.VectorData();
					var this2;
					this2 = new Array(0);
					this1.data = this2;
					this1.length = 0;
					this1.fixed = false;
					uvtData = this1;
					{
						var _g21 = openfl._internal.renderer.opengl.utils.PathBuiler.__fill;
						switch(_g21[1]) {
						case 2:
							var b = _g21[2];
							var _g4 = 0;
							var _g3 = vertices.length / 2 | 0;
							while(_g4 < _g3) {
								var i = _g4++;
								if(!uvtData.fixed) {
									uvtData.length++;
									if(uvtData.data.length < uvtData.length) {
										var data;
										var this3;
										this3 = new Array(uvtData.data.length + 10);
										data = this3;
										haxe.ds._Vector.Vector_Impl_.blit(uvtData.data,0,data,0,uvtData.data.length);
										uvtData.data = data;
									}
									uvtData.data[uvtData.length - 1] = vertices.data[i * 2] / b.width;
								}
								uvtData.length;
								if(!uvtData.fixed) {
									uvtData.length++;
									if(uvtData.data.length < uvtData.length) {
										var data1;
										var this4;
										this4 = new Array(uvtData.data.length + 10);
										data1 = this4;
										haxe.ds._Vector.Vector_Impl_.blit(uvtData.data,0,data1,0,uvtData.data.length);
										uvtData.data = data1;
									}
									uvtData.data[uvtData.length - 1] = vertices.data[i * 2 + 1] / b.height;
								}
								uvtData.length;
							}
							break;
						default:
						}
					}
				}
				openfl._internal.renderer.opengl.utils.PathBuiler.__currentPath.type = openfl._internal.renderer.opengl.utils.GraphicType.DrawTriangles(vertices,indices,uvtData,culling,colors,blendMode);
				openfl._internal.renderer.opengl.utils.PathBuiler.__currentPath.isRemovable = false;
				openfl._internal.renderer.opengl.utils.PathBuiler.__drawPaths.push(openfl._internal.renderer.opengl.utils.PathBuiler.__currentPath);
				break;
			case 8:
				var count = command[6];
				var flags = command[5];
				var smooth1 = command[4];
				var tileData = command[3];
				var sheet = command[2];
				if(openfl._internal.renderer.opengl.utils.PathBuiler.__currentPath.isRemovable && openfl._internal.renderer.opengl.utils.PathBuiler.__currentPath.points.length == 0) openfl._internal.renderer.opengl.utils.PathBuiler.__drawPaths.pop(); else openfl._internal.renderer.opengl.utils.PathBuiler.closePath();
				openfl._internal.renderer.opengl.utils.PathBuiler.__fillIndex++;
				openfl._internal.renderer.opengl.utils.PathBuiler.__currentPath = new openfl._internal.renderer.opengl.utils.DrawPath();
				openfl._internal.renderer.opengl.utils.PathBuiler.__currentPath.update(openfl._internal.renderer.opengl.utils.PathBuiler.__line,openfl._internal.renderer.opengl.utils.PathBuiler.__fill,openfl._internal.renderer.opengl.utils.PathBuiler.__fillIndex,openfl._internal.renderer.opengl.utils.PathBuiler.__currentWinding);
				openfl._internal.renderer.opengl.utils.PathBuiler.__currentPath.type = openfl._internal.renderer.opengl.utils.GraphicType.DrawTiles(sheet,tileData,smooth1,flags,count);
				openfl._internal.renderer.opengl.utils.PathBuiler.__currentPath.isRemovable = false;
				openfl._internal.renderer.opengl.utils.PathBuiler.__drawPaths.push(openfl._internal.renderer.opengl.utils.PathBuiler.__currentPath);
				break;
			case 14:
				var winding = command[4];
				var data2 = command[3];
				var commands = command[2];
				if(openfl._internal.renderer.opengl.utils.PathBuiler.__currentPath.isRemovable && openfl._internal.renderer.opengl.utils.PathBuiler.__currentPath.points.length == 0) openfl._internal.renderer.opengl.utils.PathBuiler.__drawPaths.pop(); else openfl._internal.renderer.opengl.utils.PathBuiler.closePath();
				switch(winding) {
				case openfl.display.GraphicsPathWinding.EVEN_ODD:
					openfl._internal.renderer.opengl.utils.PathBuiler.__currentWinding = 0;
					break;
				case openfl.display.GraphicsPathWinding.NON_ZERO:
					openfl._internal.renderer.opengl.utils.PathBuiler.__currentWinding = 1;
					break;
				default:
					openfl._internal.renderer.opengl.utils.PathBuiler.__currentWinding = 0;
				}
				var command1;
				var cx3;
				var cy3;
				var cx21;
				var cy21;
				var ax;
				var ay;
				var idx = 0;
				var _g31 = 0;
				var _g22 = commands.length;
				while(_g31 < _g22) {
					var i1 = _g31++;
					command1 = commands.data[i1];
					switch(command1) {
					case 1:
						ax = data2.data[idx];
						ay = data2.data[idx + 1];
						idx += 2;
						if(openfl._internal.renderer.opengl.utils.PathBuiler.__currentPath.isRemovable && openfl._internal.renderer.opengl.utils.PathBuiler.__currentPath.points.length == 0) openfl._internal.renderer.opengl.utils.PathBuiler.__drawPaths.pop(); else openfl._internal.renderer.opengl.utils.PathBuiler.closePath();
						openfl._internal.renderer.opengl.utils.PathBuiler.__currentPath = new openfl._internal.renderer.opengl.utils.DrawPath();
						openfl._internal.renderer.opengl.utils.PathBuiler.__currentPath.update(openfl._internal.renderer.opengl.utils.PathBuiler.__line,openfl._internal.renderer.opengl.utils.PathBuiler.__fill,openfl._internal.renderer.opengl.utils.PathBuiler.__fillIndex,openfl._internal.renderer.opengl.utils.PathBuiler.__currentWinding);
						openfl._internal.renderer.opengl.utils.PathBuiler.__currentPath.type = openfl._internal.renderer.opengl.utils.GraphicType.Polygon;
						openfl._internal.renderer.opengl.utils.PathBuiler.__currentPath.points.push(ax);
						openfl._internal.renderer.opengl.utils.PathBuiler.__currentPath.points.push(ay);
						openfl._internal.renderer.opengl.utils.PathBuiler.__drawPaths.push(openfl._internal.renderer.opengl.utils.PathBuiler.__currentPath);
						break;
					case 4:
						ax = data2.data[idx + 2];
						ay = data2.data[idx + 3];
						idx += 4;
						if(openfl._internal.renderer.opengl.utils.PathBuiler.__currentPath.isRemovable && openfl._internal.renderer.opengl.utils.PathBuiler.__currentPath.points.length == 0) openfl._internal.renderer.opengl.utils.PathBuiler.__drawPaths.pop(); else openfl._internal.renderer.opengl.utils.PathBuiler.closePath();
						openfl._internal.renderer.opengl.utils.PathBuiler.__currentPath = new openfl._internal.renderer.opengl.utils.DrawPath();
						openfl._internal.renderer.opengl.utils.PathBuiler.__currentPath.update(openfl._internal.renderer.opengl.utils.PathBuiler.__line,openfl._internal.renderer.opengl.utils.PathBuiler.__fill,openfl._internal.renderer.opengl.utils.PathBuiler.__fillIndex,openfl._internal.renderer.opengl.utils.PathBuiler.__currentWinding);
						openfl._internal.renderer.opengl.utils.PathBuiler.__currentPath.type = openfl._internal.renderer.opengl.utils.GraphicType.Polygon;
						openfl._internal.renderer.opengl.utils.PathBuiler.__currentPath.points.push(ax);
						openfl._internal.renderer.opengl.utils.PathBuiler.__currentPath.points.push(ay);
						openfl._internal.renderer.opengl.utils.PathBuiler.__drawPaths.push(openfl._internal.renderer.opengl.utils.PathBuiler.__currentPath);
						break;
					case 2:
						ax = data2.data[idx];
						ay = data2.data[idx + 1];
						idx += 2;
						openfl._internal.renderer.opengl.utils.PathBuiler.__currentPath.points.push(ax);
						openfl._internal.renderer.opengl.utils.PathBuiler.__currentPath.points.push(ay);
						break;
					case 5:
						ax = data2.data[idx + 2];
						ay = data2.data[idx + 3];
						idx += 4;
						openfl._internal.renderer.opengl.utils.PathBuiler.__currentPath.points.push(ax);
						openfl._internal.renderer.opengl.utils.PathBuiler.__currentPath.points.push(ay);
						break;
					case 3:
						cx3 = data2.data[idx];
						cy3 = data2.data[idx + 1];
						ax = data2.data[idx + 2];
						ay = data2.data[idx + 3];
						idx += 4;
						openfl._internal.renderer.opengl.utils.PathBuiler.curveTo(cx3,cy3,ax,ay);
						break;
					case 6:
						cx3 = data2.data[idx];
						cy3 = data2.data[idx + 1];
						cx21 = data2.data[idx + 2];
						cy21 = data2.data[idx + 3];
						ax = data2.data[idx + 4];
						ay = data2.data[idx + 5];
						idx += 6;
						openfl._internal.renderer.opengl.utils.PathBuiler.cubicCurveTo(cx3,cy3,cx21,cy21,ax,ay);
						break;
					default:
					}
				}
				openfl._internal.renderer.opengl.utils.PathBuiler.__currentWinding = 0;
				break;
			case 15:
				var m = command[2];
				if(openfl._internal.renderer.opengl.utils.PathBuiler.__currentPath.isRemovable && openfl._internal.renderer.opengl.utils.PathBuiler.__currentPath.points.length == 0) openfl._internal.renderer.opengl.utils.PathBuiler.__drawPaths.pop(); else openfl._internal.renderer.opengl.utils.PathBuiler.closePath();
				openfl._internal.renderer.opengl.utils.PathBuiler.__currentPath = new openfl._internal.renderer.opengl.utils.DrawPath();
				openfl._internal.renderer.opengl.utils.PathBuiler.__currentPath.update(openfl._internal.renderer.opengl.utils.PathBuiler.__line,openfl._internal.renderer.opengl.utils.PathBuiler.__fill,openfl._internal.renderer.opengl.utils.PathBuiler.__fillIndex,openfl._internal.renderer.opengl.utils.PathBuiler.__currentWinding);
				openfl._internal.renderer.opengl.utils.PathBuiler.__currentPath.type = openfl._internal.renderer.opengl.utils.GraphicType.OverrideMatrix(m);
				openfl._internal.renderer.opengl.utils.PathBuiler.__currentPath.isRemovable = false;
				openfl._internal.renderer.opengl.utils.PathBuiler.__drawPaths.push(openfl._internal.renderer.opengl.utils.PathBuiler.__currentPath);
				break;
			}
		}
		openfl._internal.renderer.opengl.utils.PathBuiler.closePath();
	}
	graphics.__drawPaths = openfl._internal.renderer.opengl.utils.PathBuiler.__drawPaths;
	return glStack;
};
openfl._internal.renderer.opengl.utils.LineStyle = function() {
	this.width = 0;
	this.color = 0;
	this.alpha = 1;
	this.scaleMode = openfl.display.LineScaleMode.NORMAL;
	this.caps = openfl.display.CapsStyle.ROUND;
	this.joints = openfl.display.JointStyle.ROUND;
	this.miterLimit = 3;
};
$hxClasses["openfl._internal.renderer.opengl.utils.LineStyle"] = openfl._internal.renderer.opengl.utils.LineStyle;
openfl._internal.renderer.opengl.utils.LineStyle.__name__ = ["openfl","_internal","renderer","opengl","utils","LineStyle"];
openfl._internal.renderer.opengl.utils.LineStyle.prototype = {
	width: null
	,color: null
	,alpha: null
	,scaleMode: null
	,caps: null
	,joints: null
	,miterLimit: null
	,__class__: openfl._internal.renderer.opengl.utils.LineStyle
};
openfl._internal.renderer.opengl.utils._DrawPath = {};
openfl._internal.renderer.opengl.utils._DrawPath.WindingRule_Impl_ = function() { };
$hxClasses["openfl._internal.renderer.opengl.utils._DrawPath.WindingRule_Impl_"] = openfl._internal.renderer.opengl.utils._DrawPath.WindingRule_Impl_;
openfl._internal.renderer.opengl.utils._DrawPath.WindingRule_Impl_.__name__ = ["openfl","_internal","renderer","opengl","utils","_DrawPath","WindingRule_Impl_"];
openfl._internal.renderer.opengl.utils.FillType = $hxClasses["openfl._internal.renderer.opengl.utils.FillType"] = { __ename__ : ["openfl","_internal","renderer","opengl","utils","FillType"], __constructs__ : ["None","Color","Texture","Gradient"] };
openfl._internal.renderer.opengl.utils.FillType.None = ["None",0];
openfl._internal.renderer.opengl.utils.FillType.None.toString = $estr;
openfl._internal.renderer.opengl.utils.FillType.None.__enum__ = openfl._internal.renderer.opengl.utils.FillType;
openfl._internal.renderer.opengl.utils.FillType.Color = function(color,alpha) { var $x = ["Color",1,color,alpha]; $x.__enum__ = openfl._internal.renderer.opengl.utils.FillType; $x.toString = $estr; return $x; };
openfl._internal.renderer.opengl.utils.FillType.Texture = function(bitmap,matrix,repeat,smooth) { var $x = ["Texture",2,bitmap,matrix,repeat,smooth]; $x.__enum__ = openfl._internal.renderer.opengl.utils.FillType; $x.toString = $estr; return $x; };
openfl._internal.renderer.opengl.utils.FillType.Gradient = ["Gradient",3];
openfl._internal.renderer.opengl.utils.FillType.Gradient.toString = $estr;
openfl._internal.renderer.opengl.utils.FillType.Gradient.__enum__ = openfl._internal.renderer.opengl.utils.FillType;
openfl._internal.renderer.opengl.utils.FillType.__empty_constructs__ = [openfl._internal.renderer.opengl.utils.FillType.None,openfl._internal.renderer.opengl.utils.FillType.Gradient];
openfl._internal.renderer.opengl.utils.FilterManager = function(gl,transparent) {
	this.transparent = transparent;
	this.filterStack = [];
	this.offsetX = 0;
	this.offsetY = 0;
	this.setContext(gl);
};
$hxClasses["openfl._internal.renderer.opengl.utils.FilterManager"] = openfl._internal.renderer.opengl.utils.FilterManager;
openfl._internal.renderer.opengl.utils.FilterManager.__name__ = ["openfl","_internal","renderer","opengl","utils","FilterManager"];
openfl._internal.renderer.opengl.utils.FilterManager.prototype = {
	buffer: null
	,colorArray: null
	,colorBuffer: null
	,defaultShader: null
	,filterStack: null
	,gl: null
	,height: null
	,indexBuffer: null
	,offsetX: null
	,offsetY: null
	,renderSession: null
	,texturePool: null
	,transparent: null
	,uvArray: null
	,uvBuffer: null
	,vertexArray: null
	,vertexBuffer: null
	,width: null
	,applyFilterPass: function(filter,filterArea,width,height) {
	}
	,begin: function(renderSession,buffer) {
		this.renderSession = renderSession;
		this.defaultShader = renderSession.shaderManager.defaultShader;
		var projection = renderSession.projection;
		this.width = projection.x * 2 | 0;
		this.height = -projection.y * 2 | 0;
		this.buffer = buffer;
	}
	,destroy: function() {
		var gl = this.gl;
		this.filterStack = null;
		this.offsetX = 0;
		this.offsetY = 0;
		var _g = 0;
		var _g1 = this.texturePool;
		while(_g < _g1.length) {
			var texture = _g1[_g];
			++_g;
			texture.destroy();
		}
		this.texturePool = null;
		gl.deleteBuffer(this.vertexBuffer);
		gl.deleteBuffer(this.uvBuffer);
		gl.deleteBuffer(this.colorBuffer);
		gl.deleteBuffer(this.indexBuffer);
	}
	,initShaderBuffers: function() {
		var gl = this.gl;
		this.vertexBuffer = gl.createBuffer();
		this.uvBuffer = gl.createBuffer();
		this.colorBuffer = gl.createBuffer();
		this.indexBuffer = gl.createBuffer();
		this.vertexArray = new Float32Array([0.0,0.0,1.0,0.0,0.0,1.0,1.0,1.0]);
		gl.bindBuffer(gl.ARRAY_BUFFER,this.vertexBuffer);
		gl.bufferData(gl.ARRAY_BUFFER,this.vertexArray,gl.STATIC_DRAW);
		this.uvArray = new Float32Array([0.0,0.0,1.0,0.0,0.0,1.0,1.0,1.0]);
		gl.bindBuffer(gl.ARRAY_BUFFER,this.uvBuffer);
		gl.bufferData(gl.ARRAY_BUFFER,this.uvArray,gl.STATIC_DRAW);
		this.colorArray = new Float32Array([1.0,16777215,1.0,16777215,1.0,16777215,1.0,16777215]);
		gl.bindBuffer(gl.ARRAY_BUFFER,this.colorBuffer);
		gl.bufferData(gl.ARRAY_BUFFER,this.colorArray,gl.STATIC_DRAW);
		gl.bindBuffer(gl.ELEMENT_ARRAY_BUFFER,this.indexBuffer);
		gl.bufferData(gl.ELEMENT_ARRAY_BUFFER,new Uint16Array([0,1,2,1,3,2]),gl.STATIC_DRAW);
	}
	,popFilter: function() {
	}
	,pushFilter: function(filterBlock) {
	}
	,setContext: function(gl) {
		this.gl = gl;
		this.texturePool = [];
		this.initShaderBuffers();
	}
	,__class__: openfl._internal.renderer.opengl.utils.FilterManager
};
openfl._internal.renderer.opengl.utils.FilterTexture = function(gl,width,height,smoothing) {
	if(smoothing == null) smoothing = true;
	this.gl = gl;
	this.frameBuffer = gl.createFramebuffer();
	this.texture = gl.createTexture();
	gl.bindTexture(gl.TEXTURE_2D,this.texture);
	gl.texParameteri(gl.TEXTURE_2D,gl.TEXTURE_MAG_FILTER,smoothing?gl.LINEAR:gl.NEAREST);
	gl.texParameteri(gl.TEXTURE_2D,gl.TEXTURE_MIN_FILTER,smoothing?gl.LINEAR:gl.NEAREST);
	gl.texParameteri(gl.TEXTURE_2D,gl.TEXTURE_WRAP_S,gl.CLAMP_TO_EDGE);
	gl.texParameteri(gl.TEXTURE_2D,gl.TEXTURE_WRAP_T,gl.CLAMP_TO_EDGE);
	gl.bindFramebuffer(gl.FRAMEBUFFER,this.frameBuffer);
	gl.framebufferTexture2D(gl.FRAMEBUFFER,gl.COLOR_ATTACHMENT0,gl.TEXTURE_2D,this.texture,0);
	this.renderBuffer = gl.createRenderbuffer();
	gl.bindRenderbuffer(gl.RENDERBUFFER,this.renderBuffer);
	gl.framebufferRenderbuffer(gl.FRAMEBUFFER,gl.DEPTH_STENCIL_ATTACHMENT,gl.RENDERBUFFER,this.renderBuffer);
	this.resize(width,height);
};
$hxClasses["openfl._internal.renderer.opengl.utils.FilterTexture"] = openfl._internal.renderer.opengl.utils.FilterTexture;
openfl._internal.renderer.opengl.utils.FilterTexture.__name__ = ["openfl","_internal","renderer","opengl","utils","FilterTexture"];
openfl._internal.renderer.opengl.utils.FilterTexture.prototype = {
	frameBuffer: null
	,gl: null
	,renderBuffer: null
	,smoothing: null
	,texture: null
	,width: null
	,height: null
	,clear: function() {
		this.gl.clearColor(0,0,0,0);
		this.gl.clear(this.gl.COLOR_BUFFER_BIT);
	}
	,destroy: function() {
		this.gl.deleteFramebuffer(this.frameBuffer);
		this.gl.deleteTexture(this.texture);
		this.frameBuffer = null;
		this.texture = null;
	}
	,resize: function(width,height) {
		if(this.width == width && this.height == height) return;
		this.width = width;
		this.height = height;
		this.gl.bindTexture(this.gl.TEXTURE_2D,this.texture);
		this.gl.texImage2D(this.gl.TEXTURE_2D,0,this.gl.RGBA,width,height,0,this.gl.RGBA,this.gl.UNSIGNED_BYTE,null);
		this.gl.bindRenderbuffer(this.gl.RENDERBUFFER,this.renderBuffer);
		this.gl.renderbufferStorage(this.gl.RENDERBUFFER,this.gl.DEPTH_STENCIL,width,height);
	}
	,__class__: openfl._internal.renderer.opengl.utils.FilterTexture
};
openfl._internal.renderer.opengl.utils.VertexAttribute = function(components,type,normalized,name,defaultValue) {
	if(normalized == null) normalized = false;
	this.enabled = true;
	this.normalized = false;
	this.components = components;
	this.type = type;
	this.normalized = normalized;
	this.name = name;
	if(defaultValue == null) this.defaultValue = new Float32Array(components); else this.defaultValue = defaultValue;
};
$hxClasses["openfl._internal.renderer.opengl.utils.VertexAttribute"] = openfl._internal.renderer.opengl.utils.VertexAttribute;
openfl._internal.renderer.opengl.utils.VertexAttribute.__name__ = ["openfl","_internal","renderer","opengl","utils","VertexAttribute"];
openfl._internal.renderer.opengl.utils.VertexAttribute.prototype = {
	components: null
	,normalized: null
	,type: null
	,name: null
	,enabled: null
	,defaultValue: null
	,copy: function() {
		return new openfl._internal.renderer.opengl.utils.VertexAttribute(this.components,this.type,this.normalized,this.name,this.defaultValue);
	}
	,getElementsBytes: function() {
		var _g = this.type;
		switch(_g) {
		case 5120:case 5121:
			return 1;
		case 5122:case 5123:
			return 2;
		default:
			return 4;
		}
	}
	,get_elements: function() {
		return Math.floor(this.components * this.getElementsBytes() / 4);
	}
	,__class__: openfl._internal.renderer.opengl.utils.VertexAttribute
	,__properties__: {get_elements:"get_elements"}
};
openfl._internal.renderer.opengl.utils.GraphicsRenderer = function() { };
$hxClasses["openfl._internal.renderer.opengl.utils.GraphicsRenderer"] = openfl._internal.renderer.opengl.utils.GraphicsRenderer;
openfl._internal.renderer.opengl.utils.GraphicsRenderer.__name__ = ["openfl","_internal","renderer","opengl","utils","GraphicsRenderer"];
openfl._internal.renderer.opengl.utils.GraphicsRenderer.lastVertsBuffer = null;
openfl._internal.renderer.opengl.utils.GraphicsRenderer.lastBucketMode = null;
openfl._internal.renderer.opengl.utils.GraphicsRenderer.lastTexture = null;
openfl._internal.renderer.opengl.utils.GraphicsRenderer.lastTextureRepeat = null;
openfl._internal.renderer.opengl.utils.GraphicsRenderer.lastTextureSmooth = null;
openfl._internal.renderer.opengl.utils.GraphicsRenderer.overrideMatrix = null;
openfl._internal.renderer.opengl.utils.GraphicsRenderer.buildCircle = function(path,glStack,localCoords) {
	if(localCoords == null) localCoords = false;
	var rectData = path.points;
	var x = rectData[0];
	var y = rectData[1];
	var width = rectData[2];
	var height;
	if(rectData.length == 3) height = width; else height = rectData[3];
	if(path.type == openfl._internal.renderer.opengl.utils.GraphicType.Ellipse) {
		width /= 2;
		height /= 2;
		x += width;
		y += height;
	}
	if(localCoords) {
		x -= openfl._internal.renderer.opengl.utils.GraphicsRenderer.objectBounds.x;
		y -= openfl._internal.renderer.opengl.utils.GraphicsRenderer.objectBounds.y;
	}
	var totalSegs = 40;
	var seg = Math.PI * 2 / totalSegs;
	var bucket = openfl._internal.renderer.opengl.utils.GraphicsRenderer.prepareBucket(path,glStack);
	var fill = bucket.getData(openfl._internal.renderer.opengl.utils.BucketDataType.Fill);
	if(fill != null) {
		var verts = fill.verts;
		var indices = fill.indices;
		var vertPos = verts.length / 2 | 0;
		indices.push(vertPos);
		var _g1 = 0;
		var _g = totalSegs + 1;
		while(_g1 < _g) {
			var i = _g1++;
			verts.push(x);
			verts.push(y);
			verts.push(x + Math.sin(seg * i) * width);
			verts.push(y + Math.cos(seg * i) * height);
			indices.push(vertPos++);
			indices.push(vertPos++);
		}
		indices.push(vertPos - 1);
	}
	if(path.line.width > 0) {
		var tempPoints = path.points;
		path.points = [];
		var _g11 = 0;
		var _g2 = totalSegs + 1;
		while(_g11 < _g2) {
			var i1 = _g11++;
			path.points.push(x + Math.sin(seg * i1) * width);
			path.points.push(y + Math.cos(seg * i1) * height);
		}
		openfl._internal.renderer.opengl.utils.GraphicsRenderer.buildLine(path,bucket);
		path.points = tempPoints;
	}
};
openfl._internal.renderer.opengl.utils.GraphicsRenderer.buildComplexPoly = function(path,glStack,localCoords) {
	if(localCoords == null) localCoords = false;
	var bucket = null;
	if(path.points.length >= 6) {
		var points = path.points.slice();
		if(localCoords) {
			var _g1 = 0;
			var _g = points.length / 2 | 0;
			while(_g1 < _g) {
				var i = _g1++;
				points[i * 2] -= openfl._internal.renderer.opengl.utils.GraphicsRenderer.objectBounds.x;
				points[i * 2 + 1] -= openfl._internal.renderer.opengl.utils.GraphicsRenderer.objectBounds.y;
			}
		}
		bucket = openfl._internal.renderer.opengl.utils.GraphicsRenderer.prepareBucket(path,glStack);
		var fill = bucket.getData(openfl._internal.renderer.opengl.utils.BucketDataType.Fill);
		fill.drawMode = glStack.gl.TRIANGLE_FAN;
		fill.verts = points;
		var indices = fill.indices;
		var length = points.length / 2 | 0;
		var _g2 = 0;
		while(_g2 < length) {
			var i1 = _g2++;
			indices.push(i1);
		}
	}
	if(path.line.width > 0) {
		if(bucket == null) bucket = openfl._internal.renderer.opengl.utils.GraphicsRenderer.prepareBucket(path,glStack);
		openfl._internal.renderer.opengl.utils.GraphicsRenderer.buildLine(path,bucket,localCoords);
	}
};
openfl._internal.renderer.opengl.utils.GraphicsRenderer.buildLine = function(path,bucket,localCoords) {
	if(localCoords == null) localCoords = false;
	var points = path.points;
	if(points.length == 0) return;
	var line = bucket.getData(openfl._internal.renderer.opengl.utils.BucketDataType.Line);
	if(localCoords) {
		var _g1 = 0;
		var _g = points.length / 2 | 0;
		while(_g1 < _g) {
			var i = _g1++;
			points[i * 2] -= openfl._internal.renderer.opengl.utils.GraphicsRenderer.objectBounds.x;
			points[i * 2 + 1] -= openfl._internal.renderer.opengl.utils.GraphicsRenderer.objectBounds.y;
		}
	}
	if(path.line.width % 2 > 0) {
		var _g11 = 0;
		var _g2 = points.length;
		while(_g11 < _g2) {
			var i1 = _g11++;
			points[i1] += 0.5;
		}
	}
	var firstPoint = new openfl.geom.Point(points[0],points[1]);
	var lastPoint = new openfl.geom.Point(points[points.length - 2 | 0],points[points.length - 1 | 0]);
	if(firstPoint.x == lastPoint.x && firstPoint.y == lastPoint.y) {
		points = points.slice();
		points.pop();
		points.pop();
		lastPoint = new openfl.geom.Point(points[points.length - 2 | 0],points[points.length - 1 | 0]);
		var midPointX = lastPoint.x + (firstPoint.x - lastPoint.x) * 0.5;
		var midPointY = lastPoint.y + (firstPoint.y - lastPoint.y) * 0.5;
		points.unshift(midPointY);
		points.unshift(midPointX);
		points.push(midPointX);
		points.push(midPointY);
	}
	var verts = line.verts;
	var indices = line.indices;
	var length = points.length / 2 | 0;
	var indexCount = points.length;
	var indexStart = verts.length / 6 | 0;
	var width = path.line.width / 2;
	var color = openfl._internal.renderer.opengl.utils.GraphicsRenderer.hex2rgb(path.line.color);
	var alpha = path.line.alpha;
	var r = color[0] * alpha;
	var g = color[1] * alpha;
	var b = color[2] * alpha;
	var px;
	var py;
	var p1x;
	var p1y;
	var p2x;
	var p2y;
	var p3x;
	var p3y;
	var perpx;
	var perpy;
	var perp2x;
	var perp2y;
	var perp3x;
	var perp3y;
	var a1;
	var b1;
	var c1;
	var a2;
	var b2;
	var c2;
	var denom;
	var pdist;
	var dist;
	p1x = points[0];
	p1y = points[1];
	p2x = points[2];
	p2y = points[3];
	perpx = -(p1y - p2y);
	perpy = p1x - p2x;
	dist = Math.sqrt(Math.abs(perpx * perpx + perpy * perpy));
	perpx = perpx / dist;
	perpy = perpy / dist;
	perpx = perpx * width;
	perpy = perpy * width;
	verts.push(p1x - perpx);
	verts.push(p1y - perpy);
	verts.push(r);
	verts.push(g);
	verts.push(b);
	verts.push(alpha);
	verts.push(p1x + perpx);
	verts.push(p1y + perpy);
	verts.push(r);
	verts.push(g);
	verts.push(b);
	verts.push(alpha);
	var _g12 = 1;
	var _g3 = length - 1;
	while(_g12 < _g3) {
		var i2 = _g12++;
		p1x = points[(i2 - 1) * 2];
		p1y = points[(i2 - 1) * 2 + 1];
		p2x = points[i2 * 2];
		p2y = points[i2 * 2 + 1];
		p3x = points[(i2 + 1) * 2];
		p3y = points[(i2 + 1) * 2 + 1];
		perpx = -(p1y - p2y);
		perpy = p1x - p2x;
		dist = Math.sqrt(Math.abs(perpx * perpx + perpy * perpy));
		perpx = perpx / dist;
		perpy = perpy / dist;
		perpx = perpx * width;
		perpy = perpy * width;
		perp2x = -(p2y - p3y);
		perp2y = p2x - p3x;
		dist = Math.sqrt(Math.abs(perp2x * perp2x + perp2y * perp2y));
		perp2x = perp2x / dist;
		perp2y = perp2y / dist;
		perp2x = perp2x * width;
		perp2y = perp2y * width;
		a1 = -perpy + p1y - (-perpy + p2y);
		b1 = -perpx + p2x - (-perpx + p1x);
		c1 = (-perpx + p1x) * (-perpy + p2y) - (-perpx + p2x) * (-perpy + p1y);
		a2 = -perp2y + p3y - (-perp2y + p2y);
		b2 = -perp2x + p2x - (-perp2x + p3x);
		c2 = (-perp2x + p3x) * (-perp2y + p2y) - (-perp2x + p2x) * (-perp2y + p3y);
		denom = a1 * b2 - a2 * b1;
		if(Math.abs(denom) < 0.1) {
			denom += 10.1;
			verts.push(p2x - perpx);
			verts.push(p2y - perpy);
			verts.push(r);
			verts.push(g);
			verts.push(b);
			verts.push(alpha);
			verts.push(p2x + perpx);
			verts.push(p2y + perpy);
			verts.push(r);
			verts.push(g);
			verts.push(b);
			verts.push(alpha);
			continue;
		}
		px = (b1 * c2 - b2 * c1) / denom;
		py = (a2 * c1 - a1 * c2) / denom;
		pdist = (px - p2x) * (px - p2x) + (py - p2y) + (py - p2y);
		if(pdist > 19600) {
			perp3x = perpx - perp2x;
			perp3y = perpy - perp2y;
			dist = Math.sqrt(Math.abs(perp3x * perp3x + perp3y * perp3y));
			perp3x = perp3x / dist;
			perp3y = perp3y / dist;
			perp3x = perp3x * width;
			perp3y = perp3y * width;
			verts.push(p2x - perp3x);
			verts.push(p2y - perp3y);
			verts.push(r);
			verts.push(g);
			verts.push(b);
			verts.push(alpha);
			verts.push(p2x + perp3x);
			verts.push(p2y + perp3y);
			verts.push(r);
			verts.push(g);
			verts.push(b);
			verts.push(alpha);
			verts.push(p2x - perp3x);
			verts.push(p2y - perp3y);
			verts.push(r);
			verts.push(g);
			verts.push(b);
			verts.push(alpha);
			indexCount++;
		} else {
			verts.push(px);
			verts.push(py);
			verts.push(r);
			verts.push(g);
			verts.push(b);
			verts.push(alpha);
			verts.push(p2x - (px - p2x));
			verts.push(p2y - (py - p2y));
			verts.push(r);
			verts.push(g);
			verts.push(b);
			verts.push(alpha);
		}
	}
	p1x = points[(length - 2) * 2];
	p1y = points[(length - 2) * 2 + 1];
	p2x = points[(length - 1) * 2];
	p2y = points[(length - 1) * 2 + 1];
	perpx = -(p1y - p2y);
	perpy = p1x - p2x;
	dist = Math.sqrt(Math.abs(perpx * perpx + perpy * perpy));
	if(!Math.isFinite(dist)) haxe.Log.trace(perpx * perpx + perpy * perpy,{ fileName : "GraphicsRenderer.hx", lineNumber : 405, className : "openfl._internal.renderer.opengl.utils.GraphicsRenderer", methodName : "buildLine"});
	perpx = perpx / dist;
	perpy = perpy / dist;
	perpx = perpx * width;
	perpy = perpy * width;
	verts.push(p2x - perpx);
	verts.push(p2y - perpy);
	verts.push(r);
	verts.push(g);
	verts.push(b);
	verts.push(alpha);
	verts.push(p2x + perpx);
	verts.push(p2y + perpy);
	verts.push(r);
	verts.push(g);
	verts.push(b);
	verts.push(alpha);
	indices.push(indexStart);
	var _g4 = 0;
	while(_g4 < indexCount) {
		var i3 = _g4++;
		indices.push(indexStart++);
	}
	indices.push(indexStart - 1);
};
openfl._internal.renderer.opengl.utils.GraphicsRenderer.buildPoly = function(path,glStack) {
	if(path.points.length < 6) return;
	var points = path.points;
	var l = points.length;
	var sx = points[0];
	var sy = points[1];
	var ex = points[l - 2];
	var ey = points[l - 1];
	if(sx != ex || sy != ey) {
		points.push(sx);
		points.push(sy);
	}
	var length = points.length / 2 | 0;
	var bucket = openfl._internal.renderer.opengl.utils.GraphicsRenderer.prepareBucket(path,glStack);
	var fill = bucket.getData(openfl._internal.renderer.opengl.utils.BucketDataType.Fill);
	var verts = fill.verts;
	var indices = fill.indices;
	if(fill != null) {
		var triangles = openfl._internal.renderer.opengl.utils.PolyK.triangulate(points);
		var vertPos = verts.length / 2;
		var i = 0;
		while(i < triangles.length) {
			indices.push(triangles[i] + vertPos | 0);
			indices.push(triangles[i] + vertPos | 0);
			indices.push(triangles[i + 1] + vertPos | 0);
			indices.push(triangles[i + 2] + vertPos | 0);
			indices.push(triangles[i + 2] + vertPos | 0);
			i += 3;
		}
		var _g = 0;
		while(_g < length) {
			var i1 = _g++;
			verts.push(points[i1 * 2]);
			verts.push(points[i1 * 2 + 1]);
		}
	}
	if(path.line.width > 0) openfl._internal.renderer.opengl.utils.GraphicsRenderer.buildLine(path,bucket);
};
openfl._internal.renderer.opengl.utils.GraphicsRenderer.buildRectangle = function(path,glStack,localCoords) {
	if(localCoords == null) localCoords = false;
	var rectData = path.points;
	var x = rectData[0];
	var y = rectData[1];
	var width = rectData[2];
	var height = rectData[3];
	if(localCoords) {
		x -= openfl._internal.renderer.opengl.utils.GraphicsRenderer.objectBounds.x;
		y -= openfl._internal.renderer.opengl.utils.GraphicsRenderer.objectBounds.y;
	}
	var bucket = openfl._internal.renderer.opengl.utils.GraphicsRenderer.prepareBucket(path,glStack);
	var fill = bucket.getData(openfl._internal.renderer.opengl.utils.BucketDataType.Fill);
	if(fill != null) {
		var verts = fill.verts;
		var indices = fill.indices;
		var vertPos = verts.length / 2 | 0;
		verts.push(x);
		verts.push(y);
		verts.push(x + width);
		verts.push(y);
		verts.push(x);
		verts.push(y + height);
		verts.push(x + width);
		verts.push(y + height);
		indices.push(vertPos);
		indices.push(vertPos);
		indices.push(vertPos + 1);
		indices.push(vertPos + 2);
		indices.push(vertPos + 3);
		indices.push(vertPos + 3);
	}
	if(path.line.width > 0) {
		var tempPoints = path.points;
		path.points = [x,y,x + width,y,x + width,y + height,x,y + height,x,y];
		openfl._internal.renderer.opengl.utils.GraphicsRenderer.buildLine(path,bucket);
		path.points = tempPoints;
	}
};
openfl._internal.renderer.opengl.utils.GraphicsRenderer.buildRoundedRectangle = function(path,glStack,localCoords) {
	if(localCoords == null) localCoords = false;
	var points = path.points.slice();
	var x = points[0];
	var y = points[1];
	var width = points[2];
	var height = points[3];
	var radius = points[4];
	if(localCoords) {
		x -= openfl._internal.renderer.opengl.utils.GraphicsRenderer.objectBounds.x;
		y -= openfl._internal.renderer.opengl.utils.GraphicsRenderer.objectBounds.y;
	}
	var recPoints = [];
	recPoints.push(x);
	recPoints.push(y + radius);
	recPoints = recPoints.concat(openfl._internal.renderer.opengl.utils.GraphicsRenderer.quadraticBezierCurve(x,y + height - radius,x,y + height,x + radius,y + height));
	recPoints = recPoints.concat(openfl._internal.renderer.opengl.utils.GraphicsRenderer.quadraticBezierCurve(x + width - radius,y + height,x + width,y + height,x + width,y + height - radius));
	recPoints = recPoints.concat(openfl._internal.renderer.opengl.utils.GraphicsRenderer.quadraticBezierCurve(x + width,y + radius,x + width,y,x + width - radius,y));
	recPoints = recPoints.concat(openfl._internal.renderer.opengl.utils.GraphicsRenderer.quadraticBezierCurve(x + radius,y,x,y,x,y + radius));
	var bucket = openfl._internal.renderer.opengl.utils.GraphicsRenderer.prepareBucket(path,glStack);
	var fill = bucket.getData(openfl._internal.renderer.opengl.utils.BucketDataType.Fill);
	if(fill != null) {
		var verts = fill.verts;
		var indices = fill.indices;
		var vecPos = verts.length / 2;
		var triangles = openfl._internal.renderer.opengl.utils.PolyK.triangulate(recPoints);
		var i = 0;
		while(i < triangles.length) {
			indices.push(triangles[i] + vecPos | 0);
			indices.push(triangles[i] + vecPos | 0);
			indices.push(triangles[i + 1] + vecPos | 0);
			indices.push(triangles[i + 2] + vecPos | 0);
			indices.push(triangles[i + 2] + vecPos | 0);
			i += 3;
		}
		i = 0;
		while(i < recPoints.length) {
			verts.push(recPoints[i]);
			verts.push(recPoints[++i]);
			i++;
		}
	}
	if(path.line.width > 0) {
		var tempPoints = path.points;
		path.points = recPoints;
		openfl._internal.renderer.opengl.utils.GraphicsRenderer.buildLine(path,bucket);
		path.points = tempPoints;
	}
};
openfl._internal.renderer.opengl.utils.GraphicsRenderer.buildDrawTriangles = function(path,object,glStack,localCoords) {
	if(localCoords == null) localCoords = false;
	var args = path.type.slice(2);
	var vertices = args[0];
	var indices = args[1];
	var uvtData = args[2];
	var culling = args[3];
	var colors = args[4];
	var blendMode = args[5];
	var a;
	var b;
	var c;
	var d;
	var tx;
	var ty;
	if(localCoords) {
		a = 1.0;
		b = 0.0;
		c = 0.0;
		d = 1.0;
		tx = 0.0;
		ty = 0.0;
	} else {
		a = object.__worldTransform.a;
		b = object.__worldTransform.b;
		c = object.__worldTransform.c;
		d = object.__worldTransform.d;
		tx = object.__worldTransform.tx;
		ty = object.__worldTransform.ty;
	}
	var hasColors = colors != null && colors.length > 0;
	var bucket = openfl._internal.renderer.opengl.utils.GraphicsRenderer.prepareBucket(path,glStack);
	var fill = bucket.getData(openfl._internal.renderer.opengl.utils.BucketDataType.Fill);
	var colorAttrib = fill.vertexArray.attributes[2];
	colorAttrib.enabled = hasColors;
	colorAttrib.defaultValue = new Float32Array([1,1,1,1]);
	fill.rawVerts = true;
	fill.glLength = indices.length;
	fill.stride = Std["int"](fill.vertexArray.get_stride() / 4);
	var vertsLength = fill.glLength * fill.stride;
	var verts;
	if(fill.glVerts == null || fill.glVerts.length < vertsLength) {
		verts = new Float32Array(vertsLength);
		fill.glVerts = verts;
	} else verts = fill.glVerts;
	var glColors = new Uint32Array(verts.buffer);
	var v0 = 0;
	var v1 = 0;
	var v2 = 0;
	var i0 = 0;
	var i1 = 0;
	var i2 = 0;
	var x0 = 0.0;
	var y0 = 0.0;
	var x1 = 0.0;
	var y1 = 0.0;
	var x2 = 0.0;
	var y2 = 0.0;
	var idx = 0;
	var _g1 = 0;
	var _g = indices.length / 3 | 0;
	while(_g1 < _g) {
		var i = _g1++;
		i0 = indices.data[i * 3];
		i1 = indices.data[i * 3 + 1];
		i2 = indices.data[i * 3 + 2];
		v0 = i0 * 2;
		v1 = i1 * 2;
		v2 = i2 * 2;
		x0 = vertices.data[v0];
		y0 = vertices.data[v0 + 1];
		x1 = vertices.data[v1];
		y1 = vertices.data[v1 + 1];
		x2 = vertices.data[v2];
		y2 = vertices.data[v2 + 1];
		if(localCoords) {
			x0 -= openfl._internal.renderer.opengl.utils.GraphicsRenderer.objectBounds.x;
			y0 -= openfl._internal.renderer.opengl.utils.GraphicsRenderer.objectBounds.y;
			x1 -= openfl._internal.renderer.opengl.utils.GraphicsRenderer.objectBounds.x;
			y1 -= openfl._internal.renderer.opengl.utils.GraphicsRenderer.objectBounds.y;
			x2 -= openfl._internal.renderer.opengl.utils.GraphicsRenderer.objectBounds.x;
			y2 -= openfl._internal.renderer.opengl.utils.GraphicsRenderer.objectBounds.y;
		}
		switch(culling[1]) {
		case 2:
			if(!((x1 - x0) * (y2 - y0) - (y1 - y0) * (x2 - x0) < 0)) continue;
			break;
		case 0:
			if((x1 - x0) * (y2 - y0) - (y1 - y0) * (x2 - x0) < 0) continue;
			break;
		default:
		}
		verts[idx++] = a * x0 + c * y0 + tx;
		verts[idx++] = b * x0 + d * y0 + ty;
		verts[idx++] = uvtData.data[v0];
		verts[idx++] = uvtData.data[v0 + 1];
		if(hasColors) glColors[idx++] = colors.data[i0];
		verts[idx++] = a * x1 + c * y1 + tx;
		verts[idx++] = b * x1 + d * y1 + ty;
		verts[idx++] = uvtData.data[v1];
		verts[idx++] = uvtData.data[v1 + 1];
		if(hasColors) glColors[idx++] = colors.data[i1];
		verts[idx++] = a * x2 + c * y2 + tx;
		verts[idx++] = b * x2 + d * y2 + ty;
		verts[idx++] = uvtData.data[v2];
		verts[idx++] = uvtData.data[v2 + 1];
		if(hasColors) glColors[idx++] = colors.data[i2];
	}
};
openfl._internal.renderer.opengl.utils.GraphicsRenderer.buildDrawTiles = function(path,glStack) {
	openfl._internal.renderer.opengl.utils.GraphicsRenderer.prepareBucket(path,glStack);
};
openfl._internal.renderer.opengl.utils.GraphicsRenderer.quadraticBezierCurve = function(fromX,fromY,cpX,cpY,toX,toY) {
	var xa;
	var ya;
	var xb;
	var yb;
	var x;
	var y;
	var n = 20;
	var points = [];
	var getPt = function(n1,n2,perc) {
		var diff = n2 - n1;
		return n1 + diff * perc;
	};
	var j = 0.0;
	var _g1 = 0;
	var _g = n + 1;
	while(_g1 < _g) {
		var i = _g1++;
		j = i / n;
		xa = getPt(fromX,cpX,j);
		ya = getPt(fromY,cpY,j);
		xb = getPt(cpX,toX,j);
		yb = getPt(cpY,toY,j);
		x = getPt(xa,xb,j);
		y = getPt(ya,yb,j);
		points.push(x);
		points.push(y);
	}
	return points;
};
openfl._internal.renderer.opengl.utils.GraphicsRenderer.render = function(object,renderSession) {
	var graphics = object.__graphics;
	var spritebatch = renderSession.spriteBatch;
	var dirty = graphics.__dirty;
	if(graphics.__commands.length <= 0) return;
	if(dirty) openfl._internal.renderer.opengl.utils.GraphicsRenderer.updateGraphics(object,object.__graphics,renderSession.gl,object.cacheAsBitmap);
	openfl._internal.renderer.opengl.utils.GraphicsRenderer.renderGraphics(object,renderSession,renderSession.projection,false);
};
openfl._internal.renderer.opengl.utils.GraphicsRenderer.renderGraphics = function(object,renderSession,projection,localCoords) {
	if(localCoords == null) localCoords = false;
	var graphics = object.__graphics;
	var gl = renderSession.gl;
	var offset = renderSession.offset;
	var glStack = graphics.__glStack[openfl._internal.renderer.opengl.GLRenderer.glContextId];
	var bucket;
	var translationMatrix;
	if(localCoords) translationMatrix = openfl.geom.Matrix.__identity; else translationMatrix = object.__worldTransform;
	renderSession.blendModeManager.setBlendMode(openfl.display.BlendMode.NORMAL);
	var batchDrawing = renderSession.spriteBatch.drawing;
	var _g1 = 0;
	var _g = glStack.buckets.length;
	while(_g1 < _g) {
		var i = _g1++;
		batchDrawing = renderSession.spriteBatch.drawing;
		bucket = glStack.buckets[i];
		var _g2 = bucket.mode;
		switch(_g2[1]) {
		case 1:case 2:
			if(batchDrawing && !localCoords) renderSession.spriteBatch.finish();
			renderSession.stencilManager.pushBucket(bucket,renderSession,projection,translationMatrix.toArray(true));
			var shader = openfl._internal.renderer.opengl.utils.GraphicsRenderer.prepareShader(bucket,renderSession,object,projection,translationMatrix.toArray(false));
			openfl._internal.renderer.opengl.utils.GraphicsRenderer.renderFill(bucket,shader,renderSession,translationMatrix.toArray(true));
			renderSession.stencilManager.popBucket(object,bucket,renderSession);
			break;
		case 5:
			if(batchDrawing && !localCoords) renderSession.spriteBatch.finish();
			var shader1 = openfl._internal.renderer.opengl.utils.GraphicsRenderer.prepareShader(bucket,renderSession,object,projection,null);
			openfl._internal.renderer.opengl.utils.GraphicsRenderer.renderDrawTriangles(bucket,shader1,renderSession);
			break;
		case 6:
			if(!batchDrawing) renderSession.spriteBatch.begin(renderSession);
			var args = bucket.graphicType.slice(2);
			renderSession.spriteBatch.renderTiles(object,args[0],args[1],args[2],args[3],args[4]);
			break;
		default:
		}
		var ct = object.__worldColorTransform;
		var _g21 = 0;
		var _g3 = bucket.lines;
		while(_g21 < _g3.length) {
			var line = _g3[_g21];
			++_g21;
			if(line != null && line.verts.length > 0) {
				batchDrawing = renderSession.spriteBatch.drawing;
				if(batchDrawing && !localCoords) renderSession.spriteBatch.finish();
				var shader2 = renderSession.shaderManager.primitiveShader;
				renderSession.shaderManager.setShader(shader2);
				gl.uniformMatrix3fv(shader2.getUniformLocation("uTranslationMatrix"),false,translationMatrix.toArray(true));
				gl.uniform2f(shader2.getUniformLocation("uProjectionVector"),projection.x,-projection.y);
				gl.uniform2f(shader2.getUniformLocation("uOffsetVector"),-offset.x,-offset.y);
				gl.uniform1f(shader2.getUniformLocation("uAlpha"),1);
				gl.uniform4f(shader2.getUniformLocation("uColorMultiplier"),ct.redMultiplier,ct.greenMultiplier,ct.blueMultiplier,ct.alphaMultiplier);
				gl.uniform4f(shader2.getUniformLocation("uColorOffset"),ct.redOffset / 255,ct.greenOffset / 255,ct.blueOffset / 255,ct.alphaOffset / 255);
				line.vertexArray.bind();
				shader2.bindVertexArray(line.vertexArray);
				gl.bindBuffer(gl.ELEMENT_ARRAY_BUFFER,line.indexBuffer);
				gl.drawElements(gl.TRIANGLE_STRIP,line.indices.length,gl.UNSIGNED_SHORT,0);
			}
		}
		batchDrawing = renderSession.spriteBatch.drawing;
		if(!batchDrawing && !localCoords) renderSession.spriteBatch.begin(renderSession);
	}
};
openfl._internal.renderer.opengl.utils.GraphicsRenderer.updateGraphics = function(object,graphics,gl,localCoords) {
	if(localCoords == null) localCoords = false;
	openfl._internal.renderer.opengl.utils.GraphicsRenderer.objectPosition.setTo(object.get_x(),object.get_y());
	if(graphics.__bounds == null) openfl._internal.renderer.opengl.utils.GraphicsRenderer.objectBounds = new openfl.geom.Rectangle(); else openfl._internal.renderer.opengl.utils.GraphicsRenderer.objectBounds.copyFrom(graphics.__bounds);
	var glStack = null;
	if(graphics.__dirty) glStack = openfl._internal.renderer.opengl.utils.DrawPath.getStack(graphics,gl);
	graphics.set___dirty(false);
	var _g = 0;
	var _g1 = glStack.buckets;
	while(_g < _g1.length) {
		var data = _g1[_g];
		++_g;
		data.reset();
		openfl._internal.renderer.opengl.utils.GraphicsRenderer.bucketPool.push(data);
	}
	glStack.reset();
	var _g11 = glStack.lastIndex;
	var _g2 = graphics.__drawPaths.length;
	while(_g11 < _g2) {
		var i = _g11++;
		var path = graphics.__drawPaths[i];
		{
			var _g21 = path.type;
			switch(_g21[1]) {
			case 0:
				openfl._internal.renderer.opengl.utils.GraphicsRenderer.buildComplexPoly(path,glStack,localCoords);
				break;
			case 1:
				var rounded = _g21[2];
				if(rounded) openfl._internal.renderer.opengl.utils.GraphicsRenderer.buildRoundedRectangle(path,glStack,localCoords); else openfl._internal.renderer.opengl.utils.GraphicsRenderer.buildRectangle(path,glStack,localCoords);
				break;
			case 2:case 3:
				openfl._internal.renderer.opengl.utils.GraphicsRenderer.buildCircle(path,glStack,localCoords);
				break;
			case 4:
				openfl._internal.renderer.opengl.utils.GraphicsRenderer.buildDrawTriangles(path,object,glStack,localCoords);
				break;
			case 5:
				openfl._internal.renderer.opengl.utils.GraphicsRenderer.prepareBucket(path,glStack);
				break;
			case 6:
				var m = _g21[2];
				openfl._internal.renderer.opengl.utils.GraphicsRenderer.overrideMatrix = m;
				break;
			}
		}
		glStack.lastIndex++;
	}
	var _g3 = 0;
	var _g12 = glStack.buckets;
	while(_g3 < _g12.length) {
		var bucket = _g12[_g3];
		++_g3;
		bucket.optimize();
	}
	glStack.upload();
};
openfl._internal.renderer.opengl.utils.GraphicsRenderer.prepareBucket = function(path,glStack) {
	var bucket = null;
	{
		var _g = path.fill;
		switch(_g[1]) {
		case 1:
			var a = _g[3];
			var c = _g[2];
			bucket = openfl._internal.renderer.opengl.utils.GraphicsRenderer.switchBucket(path.fillIndex,glStack,openfl._internal.renderer.opengl.utils.BucketMode.Fill);
			if(c == null) bucket.color = [1,1,1]; else bucket.color = [(c >> 16 & 255) / 255,(c >> 8 & 255) / 255,(c & 255) / 255];
			bucket.color[3] = a;
			bucket.uploadTileBuffer = true;
			break;
		case 2:
			var s = _g[5];
			var r = _g[4];
			var m = _g[3];
			var b = _g[2];
			bucket = openfl._internal.renderer.opengl.utils.GraphicsRenderer.switchBucket(path.fillIndex,glStack,openfl._internal.renderer.opengl.utils.BucketMode.PatternFill);
			bucket.bitmap = b;
			bucket.textureRepeat = r;
			bucket.textureSmooth = s;
			bucket.texture = b.getTexture(glStack.gl);
			bucket.uploadTileBuffer = true;
			var tMatrix = bucket.textureMatrix;
			tMatrix.identity();
			var pMatrix;
			if(m == null) pMatrix = new openfl.geom.Matrix(); else pMatrix = new openfl.geom.Matrix(m.a,m.b,m.c,m.d,m.tx,m.ty);
			pMatrix = pMatrix.invert();
			pMatrix.__translateTransformed(new openfl.geom.Point(-openfl._internal.renderer.opengl.utils.GraphicsRenderer.objectPosition.x,-openfl._internal.renderer.opengl.utils.GraphicsRenderer.objectPosition.y));
			var tx = pMatrix.tx / b.width;
			var ty = pMatrix.ty / b.height;
			tMatrix.concat(pMatrix);
			bucket.textureTL.x = tx;
			bucket.textureTL.y = ty;
			bucket.textureBR.x = tx + 1;
			bucket.textureBR.y = ty + 1;
			tMatrix.scale(1 / b.width,1 / b.height);
			bucket.textureMatrix = tMatrix;
			break;
		default:
			bucket = openfl._internal.renderer.opengl.utils.GraphicsRenderer.switchBucket(path.fillIndex,glStack,openfl._internal.renderer.opengl.utils.BucketMode.Line);
			bucket.uploadTileBuffer = false;
		}
	}
	{
		var _g1 = path.type;
		switch(_g1[1]) {
		case 4:
			bucket.mode = openfl._internal.renderer.opengl.utils.BucketMode.DrawTriangles;
			bucket.uploadTileBuffer = false;
			break;
		case 5:
			bucket.mode = openfl._internal.renderer.opengl.utils.BucketMode.DrawTiles;
			bucket.uploadTileBuffer = false;
			break;
		default:
		}
	}
	bucket.graphicType = path.type;
	bucket.overrideMatrix = openfl._internal.renderer.opengl.utils.GraphicsRenderer.overrideMatrix;
	return bucket;
};
openfl._internal.renderer.opengl.utils.GraphicsRenderer.getBucket = function(glStack,mode) {
	var b = openfl._internal.renderer.opengl.utils.GraphicsRenderer.bucketPool.pop();
	if(b == null) b = new openfl._internal.renderer.opengl.utils.GLBucket(glStack.gl);
	b.mode = mode;
	glStack.buckets.push(b);
	return b;
};
openfl._internal.renderer.opengl.utils.GraphicsRenderer.switchBucket = function(fillIndex,glStack,mode) {
	var bucket = null;
	var _g = 0;
	var _g1 = glStack.buckets;
	while(_g < _g1.length) {
		var b = _g1[_g];
		++_g;
		if(b.fillIndex == fillIndex) {
			bucket = b;
			break;
		}
	}
	if(bucket == null) bucket = openfl._internal.renderer.opengl.utils.GraphicsRenderer.getBucket(glStack,mode);
	bucket.dirty = true;
	bucket.fillIndex = fillIndex;
	return bucket;
};
openfl._internal.renderer.opengl.utils.GraphicsRenderer.prepareShader = function(bucket,renderSession,object,projection,translationMatrix) {
	var gl = renderSession.gl;
	var offset = renderSession.offset;
	var shader = null;
	var _g = bucket.mode;
	switch(_g[1]) {
	case 1:
		shader = renderSession.shaderManager.fillShader;
		break;
	case 2:
		shader = renderSession.shaderManager.patternFillShader;
		break;
	case 5:
		shader = renderSession.shaderManager.drawTrianglesShader;
		break;
	default:
		shader = null;
	}
	if(shader == null) return null;
	var newShader = renderSession.shaderManager.setShader(shader);
	gl.uniform2f(shader.getUniformLocation("uOffsetVector"),-offset.x,-offset.y);
	gl.uniform1f(shader.getUniformLocation("uAlpha"),object.__worldAlpha);
	var ct = object.__worldColorTransform;
	gl.uniform4f(shader.getUniformLocation("uColorMultiplier"),ct.redMultiplier,ct.greenMultiplier,ct.blueMultiplier,ct.alphaMultiplier);
	gl.uniform4f(shader.getUniformLocation("uColorOffset"),ct.redOffset / 255,ct.greenOffset / 255,ct.blueOffset / 255,ct.alphaOffset / 255);
	var _g1 = bucket.mode;
	switch(_g1[1]) {
	case 1:
		gl.uniform2f(shader.getUniformLocation("uProjectionVector"),projection.x,-projection.y);
		gl.uniformMatrix3fv(shader.getUniformLocation("uTranslationMatrix"),false,translationMatrix);
		gl.uniform4fv(shader.getUniformLocation("uColor"),new Float32Array(bucket.color));
		break;
	case 2:
		gl.uniform2f(shader.getUniformLocation("uProjectionVector"),projection.x,-projection.y);
		gl.uniformMatrix3fv(shader.getUniformLocation("uTranslationMatrix"),false,translationMatrix);
		gl.uniform2f(shader.getUniformLocation("uPatternTL"),bucket.textureTL.x,bucket.textureTL.y);
		gl.uniform2f(shader.getUniformLocation("uPatternBR"),bucket.textureBR.x,bucket.textureBR.y);
		gl.uniformMatrix3fv(shader.getUniformLocation("uPatternMatrix"),false,bucket.textureMatrix.toArray(false));
		break;
	case 5:
		gl.uniform2f(shader.getUniformLocation("uProjectionVector"),projection.x,projection.y);
		if(bucket.texture != null) gl.uniform1i(shader.getUniformLocation("uUseTexture"),1); else {
			gl.uniform1i(shader.getUniformLocation("uUseTexture"),0);
			gl.uniform4fv(shader.getUniformLocation("uColor"),new Float32Array(bucket.color));
		}
		break;
	default:
	}
	return shader;
};
openfl._internal.renderer.opengl.utils.GraphicsRenderer.renderFill = function(bucket,shader,renderSession,translationMatrix) {
	var gl = renderSession.gl;
	if(bucket.mode == openfl._internal.renderer.opengl.utils.BucketMode.PatternFill && bucket.texture != null) openfl._internal.renderer.opengl.utils.GraphicsRenderer.bindTexture(gl,bucket);
	gl.bindBuffer(gl.ARRAY_BUFFER,bucket.tileBuffer);
	gl.vertexAttribPointer(shader.getAttribLocation("aPosition"),4,gl.SHORT,false,0,0);
	gl.drawArrays(gl.TRIANGLE_STRIP,0,4);
};
openfl._internal.renderer.opengl.utils.GraphicsRenderer.renderDrawTriangles = function(bucket,shader,renderSession) {
	var gl = renderSession.gl;
	var _g = 0;
	var _g1 = bucket.fills;
	while(_g < _g1.length) {
		var fill = _g1[_g];
		++_g;
		if(fill.available) continue;
		openfl._internal.renderer.opengl.utils.GraphicsRenderer.bindTexture(gl,bucket);
		fill.vertexArray.bind();
		shader.bindVertexArray(fill.vertexArray);
		gl.drawArrays(gl.TRIANGLES,fill.glStart,fill.glLength);
	}
};
openfl._internal.renderer.opengl.utils.GraphicsRenderer.bindTexture = function(gl,bucket) {
	gl.bindTexture(gl.TEXTURE_2D,bucket.texture);
	if(bucket.textureRepeat && bucket.bitmap.__image.get_powerOfTwo()) {
		gl.texParameteri(gl.TEXTURE_2D,gl.TEXTURE_WRAP_S,gl.REPEAT);
		gl.texParameteri(gl.TEXTURE_2D,gl.TEXTURE_WRAP_T,gl.REPEAT);
	} else {
		gl.texParameteri(gl.TEXTURE_2D,gl.TEXTURE_WRAP_S,gl.CLAMP_TO_EDGE);
		gl.texParameteri(gl.TEXTURE_2D,gl.TEXTURE_WRAP_T,gl.CLAMP_TO_EDGE);
	}
	if(bucket.textureSmooth) {
		gl.texParameteri(gl.TEXTURE_2D,gl.TEXTURE_MAG_FILTER,gl.LINEAR);
		gl.texParameteri(gl.TEXTURE_2D,gl.TEXTURE_MIN_FILTER,gl.LINEAR);
	} else {
		gl.texParameteri(gl.TEXTURE_2D,gl.TEXTURE_MAG_FILTER,gl.NEAREST);
		gl.texParameteri(gl.TEXTURE_2D,gl.TEXTURE_MIN_FILTER,gl.NEAREST);
	}
};
openfl._internal.renderer.opengl.utils.GraphicsRenderer.isCCW = function(x1,y1,x2,y2,x3,y3) {
	return (x2 - x1) * (y3 - y1) - (y2 - y1) * (x3 - x1) < 0;
};
openfl._internal.renderer.opengl.utils.GraphicsRenderer.hex2rgb = function(hex) {
	if(hex == null) return [1,1,1]; else return [(hex >> 16 & 255) / 255,(hex >> 8 & 255) / 255,(hex & 255) / 255];
};
openfl._internal.renderer.opengl.utils.GraphicsRenderer.hex2rgba = function(hex) {
	if(hex == null) return [1,1,1,1]; else return [(hex >> 16 & 255) / 255,(hex >> 8 & 255) / 255,(hex & 255) / 255,(hex >> 24 & 255) / 255];
};
openfl._internal.renderer.opengl.utils.GLStack = function(gl) {
	this.lastIndex = 0;
	this.gl = gl;
	this.buckets = [];
	this.lastIndex = 0;
};
$hxClasses["openfl._internal.renderer.opengl.utils.GLStack"] = openfl._internal.renderer.opengl.utils.GLStack;
openfl._internal.renderer.opengl.utils.GLStack.__name__ = ["openfl","_internal","renderer","opengl","utils","GLStack"];
openfl._internal.renderer.opengl.utils.GLStack.prototype = {
	lastIndex: null
	,buckets: null
	,gl: null
	,reset: function() {
		this.buckets = [];
		this.lastIndex = 0;
	}
	,upload: function() {
		var _g = 0;
		var _g1 = this.buckets;
		while(_g < _g1.length) {
			var bucket = _g1[_g];
			++_g;
			if(bucket.dirty) bucket.upload();
		}
	}
	,__class__: openfl._internal.renderer.opengl.utils.GLStack
};
openfl._internal.renderer.opengl.utils.GLBucket = function(gl) {
	this.uploadTileBuffer = true;
	this.textureSmooth = true;
	this.textureRepeat = false;
	this.lines = [];
	this.fills = [];
	this.fillIndex = -1;
	this.gl = gl;
	this.color = [0,0,0];
	this.lastIndex = 0;
	this.alpha = 1;
	this.dirty = true;
	this.mode = openfl._internal.renderer.opengl.utils.BucketMode.Fill;
	this.textureMatrix = new openfl.geom.Matrix();
	this.textureTL = new openfl.geom.Point();
	this.textureBR = new openfl.geom.Point(1,1);
};
$hxClasses["openfl._internal.renderer.opengl.utils.GLBucket"] = openfl._internal.renderer.opengl.utils.GLBucket;
openfl._internal.renderer.opengl.utils.GLBucket.__name__ = ["openfl","_internal","renderer","opengl","utils","GLBucket"];
openfl._internal.renderer.opengl.utils.GLBucket.prototype = {
	gl: null
	,color: null
	,alpha: null
	,dirty: null
	,graphicType: null
	,lastIndex: null
	,fillIndex: null
	,mode: null
	,fills: null
	,lines: null
	,bitmap: null
	,texture: null
	,textureMatrix: null
	,textureRepeat: null
	,textureSmooth: null
	,textureTL: null
	,textureBR: null
	,overrideMatrix: null
	,tileBuffer: null
	,glTile: null
	,tile: null
	,uploadTileBuffer: null
	,getData: function(type) {
		var data;
		switch(type[1]) {
		case 1:
			data = this.fills;
			break;
		default:
			data = this.lines;
		}
		var result = null;
		var remove = false;
		var _g = 0;
		while(_g < data.length) {
			var d = data[_g];
			++_g;
			if(d.available) {
				result = d;
				remove = true;
				break;
			}
		}
		if(result == null) result = new openfl._internal.renderer.opengl.utils.GLBucketData(this.gl);
		result.available = false;
		result.parent = this;
		result.type = type;
		if(remove) HxOverrides.remove(data,result);
		data.push(result);
		switch(type[1]) {
		case 1:
			var _g1 = this.mode;
			switch(_g1[1]) {
			case 1:case 2:
				result.vertexArray.attributes = openfl._internal.renderer.opengl.utils.GraphicsRenderer.fillVertexAttributes;
				break;
			case 5:
				result.vertexArray.attributes = openfl._internal.renderer.opengl.utils.GraphicsRenderer.drawTrianglesVertexAttributes.slice();
				result.vertexArray.attributes[2] = result.vertexArray.attributes[2].copy();
				break;
			default:
			}
			break;
		case 0:
			result.vertexArray.attributes = openfl._internal.renderer.opengl.utils.GraphicsRenderer.primitiveVertexAttributes;
			break;
		}
		return result;
	}
	,optimize: function() {
		var _g = this;
		var data = this.lines;
		if(data.length > 1) {
			var result = [];
			var tmp = null;
			var last = null;
			var idx = 0;
			var vi = 0;
			var ii = 0;
			var before = data.length;
			var _g1 = 0;
			while(_g1 < data.length) {
				var d = data[_g1];
				++_g1;
				if(d.available || d.rawVerts || d.rawIndices) {
					if(tmp != null) {
						result.push(tmp);
						tmp = null;
					}
					result.push(d);
					last = d;
					continue;
				}
				if(last == null || last.drawMode == d.drawMode) {
					if(tmp == null) tmp = d; else {
						vi = tmp.verts.length;
						ii = tmp.indices.length;
						var _g2 = 0;
						var _g11 = d.verts.length;
						while(_g2 < _g11) {
							var j = _g2++;
							tmp.verts[j + vi] = d.verts[j];
						}
						var _g21 = 0;
						var _g12 = d.indices.length;
						while(_g21 < _g12) {
							var j1 = _g21++;
							tmp.indices[j1 + ii] = d.indices[j1] + idx;
						}
					}
					idx = tmp.indices[tmp.indices.length - 1] + 1;
					last = d;
				} else {
					if(tmp != null) {
						result.push(tmp);
						tmp = null;
					}
					result.push(d);
					last = d;
					continue;
				}
			}
			if(result.length == 0 && tmp != null) result.push(tmp);
			if(result.length > 0) switch(openfl._internal.renderer.opengl.utils.BucketDataType.Line[1]) {
			case 1:
				_g.fills = result;
				break;
			default:
				_g.lines = result;
			}
		}
	}
	,reset: function() {
		var _g = 0;
		var _g1 = this.fills;
		while(_g < _g1.length) {
			var fill = _g1[_g];
			++_g;
			fill.reset();
		}
		var _g2 = 0;
		var _g11 = this.lines;
		while(_g2 < _g11.length) {
			var line = _g11[_g2];
			++_g2;
			line.reset();
		}
		this.fillIndex = -1;
		this.uploadTileBuffer = true;
		this.graphicType = openfl._internal.renderer.opengl.utils.GraphicType.Polygon;
	}
	,upload: function() {
		if(this.uploadTileBuffer) {
			if(this.tileBuffer == null) {
				this.tileBuffer = this.gl.createBuffer();
				this.tile = [0,0,0,0,4096,0,1,0,0,4096,0,1,4096,4096,1,1];
				this.glTile = new Int16Array(this.tile);
			}
			this.gl.bindBuffer(this.gl.ARRAY_BUFFER,this.tileBuffer);
			this.gl.bufferData(this.gl.ARRAY_BUFFER,this.glTile,this.gl.STATIC_DRAW);
			this.uploadTileBuffer = false;
		}
		if(this.mode != openfl._internal.renderer.opengl.utils.BucketMode.Line) {
			var _g = 0;
			var _g1 = this.fills;
			while(_g < _g1.length) {
				var fill = _g1[_g];
				++_g;
				if(!fill.available) fill.upload();
			}
		}
		var _g2 = 0;
		var _g11 = this.lines;
		while(_g2 < _g11.length) {
			var line = _g11[_g2];
			++_g2;
			if(!line.available) line.upload();
		}
		this.dirty = false;
	}
	,__class__: openfl._internal.renderer.opengl.utils.GLBucket
};
openfl._internal.renderer.opengl.utils.GLBucketData = function(gl) {
	this.available = false;
	this.rawIndices = false;
	this.stride = 0;
	this.rawVerts = false;
	this.lastVertsSize = 0;
	this.glStart = 0;
	this.glLength = 0;
	this.gl = gl;
	this.drawMode = gl.TRIANGLE_STRIP;
	this.verts = [];
	this.indices = [];
	this.vertexArray = new openfl._internal.renderer.opengl.utils.VertexArray([]);
};
$hxClasses["openfl._internal.renderer.opengl.utils.GLBucketData"] = openfl._internal.renderer.opengl.utils.GLBucketData;
openfl._internal.renderer.opengl.utils.GLBucketData.__name__ = ["openfl","_internal","renderer","opengl","utils","GLBucketData"];
openfl._internal.renderer.opengl.utils.GLBucketData.prototype = {
	type: null
	,gl: null
	,drawMode: null
	,glLength: null
	,glStart: null
	,vertexArray: null
	,glVerts: null
	,lastVertsSize: null
	,verts: null
	,rawVerts: null
	,stride: null
	,indexBuffer: null
	,glIndices: null
	,indices: null
	,rawIndices: null
	,available: null
	,parent: null
	,reset: function() {
		this.available = true;
		this.verts = [];
		this.indices = [];
		this.glLength = 0;
		this.glStart = 0;
		this.stride = 0;
		this.rawVerts = false;
		this.rawIndices = false;
	}
	,upload: function() {
		if(this.rawVerts && this.glVerts != null && this.glVerts.length > 0 || this.verts.length > 0) {
			if(!this.rawVerts) this.glVerts = new Float32Array(this.verts);
			this.vertexArray.buffer = this.glVerts.buffer;
			if(this.glVerts.length <= this.lastVertsSize) {
				this.vertexArray.bind();
				var end = this.glLength * 4 * this.stride;
				if(this.glLength > 0 && this.lastVertsSize > end) {
					var view = this.glVerts.subarray(0,end);
					this.vertexArray.upload(view);
				} else this.vertexArray.upload(this.glVerts);
			} else {
				this.vertexArray.setContext(this.gl,this.glVerts);
				this.lastVertsSize = this.glVerts.length;
			}
		}
		if(this.glLength == 0 && (this.rawIndices && this.glIndices != null && this.glIndices.length > 0 || this.indices.length > 0)) {
			if(this.indexBuffer == null) this.indexBuffer = this.gl.createBuffer();
			if(!this.rawIndices) this.glIndices = new Uint16Array(this.indices);
			this.gl.bindBuffer(this.gl.ELEMENT_ARRAY_BUFFER,this.indexBuffer);
			this.gl.bufferData(this.gl.ELEMENT_ARRAY_BUFFER,this.glIndices,this.gl.STREAM_DRAW);
		}
	}
	,__class__: openfl._internal.renderer.opengl.utils.GLBucketData
};
openfl._internal.renderer.opengl.utils.BucketMode = $hxClasses["openfl._internal.renderer.opengl.utils.BucketMode"] = { __ename__ : ["openfl","_internal","renderer","opengl","utils","BucketMode"], __constructs__ : ["None","Fill","PatternFill","Line","PatternLine","DrawTriangles","DrawTiles"] };
openfl._internal.renderer.opengl.utils.BucketMode.None = ["None",0];
openfl._internal.renderer.opengl.utils.BucketMode.None.toString = $estr;
openfl._internal.renderer.opengl.utils.BucketMode.None.__enum__ = openfl._internal.renderer.opengl.utils.BucketMode;
openfl._internal.renderer.opengl.utils.BucketMode.Fill = ["Fill",1];
openfl._internal.renderer.opengl.utils.BucketMode.Fill.toString = $estr;
openfl._internal.renderer.opengl.utils.BucketMode.Fill.__enum__ = openfl._internal.renderer.opengl.utils.BucketMode;
openfl._internal.renderer.opengl.utils.BucketMode.PatternFill = ["PatternFill",2];
openfl._internal.renderer.opengl.utils.BucketMode.PatternFill.toString = $estr;
openfl._internal.renderer.opengl.utils.BucketMode.PatternFill.__enum__ = openfl._internal.renderer.opengl.utils.BucketMode;
openfl._internal.renderer.opengl.utils.BucketMode.Line = ["Line",3];
openfl._internal.renderer.opengl.utils.BucketMode.Line.toString = $estr;
openfl._internal.renderer.opengl.utils.BucketMode.Line.__enum__ = openfl._internal.renderer.opengl.utils.BucketMode;
openfl._internal.renderer.opengl.utils.BucketMode.PatternLine = ["PatternLine",4];
openfl._internal.renderer.opengl.utils.BucketMode.PatternLine.toString = $estr;
openfl._internal.renderer.opengl.utils.BucketMode.PatternLine.__enum__ = openfl._internal.renderer.opengl.utils.BucketMode;
openfl._internal.renderer.opengl.utils.BucketMode.DrawTriangles = ["DrawTriangles",5];
openfl._internal.renderer.opengl.utils.BucketMode.DrawTriangles.toString = $estr;
openfl._internal.renderer.opengl.utils.BucketMode.DrawTriangles.__enum__ = openfl._internal.renderer.opengl.utils.BucketMode;
openfl._internal.renderer.opengl.utils.BucketMode.DrawTiles = ["DrawTiles",6];
openfl._internal.renderer.opengl.utils.BucketMode.DrawTiles.toString = $estr;
openfl._internal.renderer.opengl.utils.BucketMode.DrawTiles.__enum__ = openfl._internal.renderer.opengl.utils.BucketMode;
openfl._internal.renderer.opengl.utils.BucketMode.__empty_constructs__ = [openfl._internal.renderer.opengl.utils.BucketMode.None,openfl._internal.renderer.opengl.utils.BucketMode.Fill,openfl._internal.renderer.opengl.utils.BucketMode.PatternFill,openfl._internal.renderer.opengl.utils.BucketMode.Line,openfl._internal.renderer.opengl.utils.BucketMode.PatternLine,openfl._internal.renderer.opengl.utils.BucketMode.DrawTriangles,openfl._internal.renderer.opengl.utils.BucketMode.DrawTiles];
openfl._internal.renderer.opengl.utils.BucketDataType = $hxClasses["openfl._internal.renderer.opengl.utils.BucketDataType"] = { __ename__ : ["openfl","_internal","renderer","opengl","utils","BucketDataType"], __constructs__ : ["Line","Fill"] };
openfl._internal.renderer.opengl.utils.BucketDataType.Line = ["Line",0];
openfl._internal.renderer.opengl.utils.BucketDataType.Line.toString = $estr;
openfl._internal.renderer.opengl.utils.BucketDataType.Line.__enum__ = openfl._internal.renderer.opengl.utils.BucketDataType;
openfl._internal.renderer.opengl.utils.BucketDataType.Fill = ["Fill",1];
openfl._internal.renderer.opengl.utils.BucketDataType.Fill.toString = $estr;
openfl._internal.renderer.opengl.utils.BucketDataType.Fill.__enum__ = openfl._internal.renderer.opengl.utils.BucketDataType;
openfl._internal.renderer.opengl.utils.BucketDataType.__empty_constructs__ = [openfl._internal.renderer.opengl.utils.BucketDataType.Line,openfl._internal.renderer.opengl.utils.BucketDataType.Fill];
openfl._internal.renderer.opengl.utils.GLGraphicsData = function(gl) {
	this.indices = [];
	this.data = [];
	this.lastIndex = 0;
	this.mode = 0;
	this.dirty = true;
	this.alpha = 1.0;
	this.tint = [1.0,1.0,1.0];
	this.gl = gl;
	this.dataBuffer = gl.createBuffer();
	this.indexBuffer = gl.createBuffer();
};
$hxClasses["openfl._internal.renderer.opengl.utils.GLGraphicsData"] = openfl._internal.renderer.opengl.utils.GLGraphicsData;
openfl._internal.renderer.opengl.utils.GLGraphicsData.__name__ = ["openfl","_internal","renderer","opengl","utils","GLGraphicsData"];
openfl._internal.renderer.opengl.utils.GLGraphicsData.prototype = {
	gl: null
	,tint: null
	,alpha: null
	,dirty: null
	,mode: null
	,lastIndex: null
	,data: null
	,glData: null
	,dataBuffer: null
	,indices: null
	,glIndices: null
	,indexBuffer: null
	,reset: function() {
		this.data = [];
		this.indices = [];
		this.lastIndex = 0;
	}
	,upload: function() {
		this.glData = new Float32Array(this.data);
		this.gl.bindBuffer(this.gl.ARRAY_BUFFER,this.dataBuffer);
		this.gl.bufferData(this.gl.ARRAY_BUFFER,this.glData,this.gl.STATIC_DRAW);
		this.glIndices = new Uint16Array(this.indices);
		this.gl.bindBuffer(this.gl.ELEMENT_ARRAY_BUFFER,this.indexBuffer);
		this.gl.bufferData(this.gl.ELEMENT_ARRAY_BUFFER,this.glIndices,this.gl.STATIC_DRAW);
		this.dirty = false;
	}
	,__class__: openfl._internal.renderer.opengl.utils.GLGraphicsData
};
openfl._internal.renderer.opengl.utils.PolyK = function() { };
$hxClasses["openfl._internal.renderer.opengl.utils.PolyK"] = openfl._internal.renderer.opengl.utils.PolyK;
openfl._internal.renderer.opengl.utils.PolyK.__name__ = ["openfl","_internal","renderer","opengl","utils","PolyK"];
openfl._internal.renderer.opengl.utils.PolyK.triangulate = function(p) {
	var sign = true;
	var n = p.length >> 1;
	if(n < 3) return [];
	var tgs = [];
	var avl;
	var _g = [];
	var _g1 = 0;
	while(_g1 < n) {
		var i = _g1++;
		_g.push(i);
	}
	avl = _g;
	var i1 = 0;
	var al = n;
	var earFound = false;
	while(al > 3) {
		var i0 = avl[i1 % al];
		var i11 = avl[(i1 + 1) % al];
		var i2 = avl[(i1 + 2) % al];
		var ax = p[2 * i0];
		var ay = p[2 * i0 + 1];
		var bx = p[2 * i11];
		var by = p[2 * i11 + 1];
		var cx = p[2 * i2];
		var cy = p[2 * i2 + 1];
		earFound = false;
		if(openfl._internal.renderer.opengl.utils.PolyK._convex(ax,ay,bx,by,cx,cy,sign)) {
			earFound = true;
			var _g11 = 0;
			while(_g11 < al) {
				var j = _g11++;
				var vi = avl[j];
				if(vi == i0 || vi == i11 || vi == i2) continue;
				if(openfl._internal.renderer.opengl.utils.PolyK._PointInTriangle(p[2 * vi],p[2 * vi + 1],ax,ay,bx,by,cx,cy)) {
					earFound = false;
					break;
				}
			}
		}
		if(earFound) {
			tgs.push(i0);
			tgs.push(i11);
			tgs.push(i2);
			avl.splice((i1 + 1) % al,1);
			al--;
			i1 = 0;
		} else if(i1++ > 3 * al) {
			if(sign) {
				tgs = [];
				var _g12 = [];
				var _g2 = 0;
				while(_g2 < n) {
					var k = _g2++;
					_g12.push(k);
				}
				avl = _g12;
				i1 = 0;
				al = n;
				sign = false;
			} else {
				haxe.Log.trace("Warning: shape too complex to fill",{ fileName : "GraphicsRenderer.hx", lineNumber : 1636, className : "openfl._internal.renderer.opengl.utils.PolyK", methodName : "triangulate"});
				return [];
			}
		}
	}
	tgs.push(avl[0]);
	tgs.push(avl[1]);
	tgs.push(avl[2]);
	return tgs;
};
openfl._internal.renderer.opengl.utils.PolyK._PointInTriangle = function(px,py,ax,ay,bx,by,cx,cy) {
	var v0x = cx - ax | 0;
	var v0y = cy - ay | 0;
	var v1x = bx - ax | 0;
	var v1y = by - ay | 0;
	var v2x = px - ax | 0;
	var v2y = py - ay | 0;
	var dot00 = v0x * v0x + v0y * v0y;
	var dot01 = v0x * v1x + v0y * v1y;
	var dot02 = v0x * v2x + v0y * v2y;
	var dot11 = v1x * v1x + v1y * v1y;
	var dot12 = v1x * v2x + v1y * v2y;
	var invDenom = 1 / (dot00 * dot11 - dot01 * dot01);
	var u = (dot11 * dot02 - dot01 * dot12) * invDenom;
	var v = (dot00 * dot12 - dot01 * dot02) * invDenom;
	return u >= 0 && v >= 0 && u + v < 1;
};
openfl._internal.renderer.opengl.utils.PolyK._convex = function(ax,ay,bx,by,cx,cy,sign) {
	return (ay - by) * (cx - bx) + (bx - ax) * (cy - by) >= 0 == sign;
};
openfl._internal.renderer.opengl.utils.GraphicType = $hxClasses["openfl._internal.renderer.opengl.utils.GraphicType"] = { __ename__ : ["openfl","_internal","renderer","opengl","utils","GraphicType"], __constructs__ : ["Polygon","Rectangle","Circle","Ellipse","DrawTriangles","DrawTiles","OverrideMatrix"] };
openfl._internal.renderer.opengl.utils.GraphicType.Polygon = ["Polygon",0];
openfl._internal.renderer.opengl.utils.GraphicType.Polygon.toString = $estr;
openfl._internal.renderer.opengl.utils.GraphicType.Polygon.__enum__ = openfl._internal.renderer.opengl.utils.GraphicType;
openfl._internal.renderer.opengl.utils.GraphicType.Rectangle = function(rounded) { var $x = ["Rectangle",1,rounded]; $x.__enum__ = openfl._internal.renderer.opengl.utils.GraphicType; $x.toString = $estr; return $x; };
openfl._internal.renderer.opengl.utils.GraphicType.Circle = ["Circle",2];
openfl._internal.renderer.opengl.utils.GraphicType.Circle.toString = $estr;
openfl._internal.renderer.opengl.utils.GraphicType.Circle.__enum__ = openfl._internal.renderer.opengl.utils.GraphicType;
openfl._internal.renderer.opengl.utils.GraphicType.Ellipse = ["Ellipse",3];
openfl._internal.renderer.opengl.utils.GraphicType.Ellipse.toString = $estr;
openfl._internal.renderer.opengl.utils.GraphicType.Ellipse.__enum__ = openfl._internal.renderer.opengl.utils.GraphicType;
openfl._internal.renderer.opengl.utils.GraphicType.DrawTriangles = function(vertices,indices,uvtData,culling,colors,blendMode) { var $x = ["DrawTriangles",4,vertices,indices,uvtData,culling,colors,blendMode]; $x.__enum__ = openfl._internal.renderer.opengl.utils.GraphicType; $x.toString = $estr; return $x; };
openfl._internal.renderer.opengl.utils.GraphicType.DrawTiles = function(sheet,tileData,smooth,flags,count) { var $x = ["DrawTiles",5,sheet,tileData,smooth,flags,count]; $x.__enum__ = openfl._internal.renderer.opengl.utils.GraphicType; $x.toString = $estr; return $x; };
openfl._internal.renderer.opengl.utils.GraphicType.OverrideMatrix = function(matrix) { var $x = ["OverrideMatrix",6,matrix]; $x.__enum__ = openfl._internal.renderer.opengl.utils.GraphicType; $x.toString = $estr; return $x; };
openfl._internal.renderer.opengl.utils.GraphicType.__empty_constructs__ = [openfl._internal.renderer.opengl.utils.GraphicType.Polygon,openfl._internal.renderer.opengl.utils.GraphicType.Circle,openfl._internal.renderer.opengl.utils.GraphicType.Ellipse];
openfl._internal.renderer.opengl.utils._GraphicsRenderer = {};
openfl._internal.renderer.opengl.utils._GraphicsRenderer.RenderMode_Impl_ = function() { };
$hxClasses["openfl._internal.renderer.opengl.utils._GraphicsRenderer.RenderMode_Impl_"] = openfl._internal.renderer.opengl.utils._GraphicsRenderer.RenderMode_Impl_;
openfl._internal.renderer.opengl.utils._GraphicsRenderer.RenderMode_Impl_.__name__ = ["openfl","_internal","renderer","opengl","utils","_GraphicsRenderer","RenderMode_Impl_"];
openfl._internal.renderer.opengl.utils.MaskManager = function(gl) {
	this.setContext(gl);
};
$hxClasses["openfl._internal.renderer.opengl.utils.MaskManager"] = openfl._internal.renderer.opengl.utils.MaskManager;
openfl._internal.renderer.opengl.utils.MaskManager.__name__ = ["openfl","_internal","renderer","opengl","utils","MaskManager"];
openfl._internal.renderer.opengl.utils.MaskManager.prototype = {
	gl: null
	,destroy: function() {
		this.gl = null;
	}
	,setContext: function(gl) {
		this.gl = gl;
	}
	,pushMask: function(object,renderSession) {
		renderSession.stencilManager.pushMask(object,renderSession);
	}
	,popMask: function(object,renderSession) {
		renderSession.stencilManager.popMask(object,renderSession);
	}
	,__class__: openfl._internal.renderer.opengl.utils.MaskManager
};
openfl._internal.renderer.opengl.utils.ShaderManager = function(gl) {
	this.setContext(gl);
};
$hxClasses["openfl._internal.renderer.opengl.utils.ShaderManager"] = openfl._internal.renderer.opengl.utils.ShaderManager;
openfl._internal.renderer.opengl.utils.ShaderManager.__name__ = ["openfl","_internal","renderer","opengl","utils","ShaderManager"];
openfl._internal.renderer.opengl.utils.ShaderManager.prototype = {
	gl: null
	,currentShader: null
	,defaultShader: null
	,fillShader: null
	,patternFillShader: null
	,drawTrianglesShader: null
	,primitiveShader: null
	,setContext: function(gl) {
		this.gl = gl;
		this.defaultShader = new openfl._internal.renderer.opengl.shaders2.DefaultShader(gl);
		this.fillShader = new openfl._internal.renderer.opengl.shaders2.FillShader(gl);
		this.patternFillShader = new openfl._internal.renderer.opengl.shaders2.PatternFillShader(gl);
		this.drawTrianglesShader = new openfl._internal.renderer.opengl.shaders2.DrawTrianglesShader(gl);
		this.primitiveShader = new openfl._internal.renderer.opengl.shaders2.PrimitiveShader(gl);
		this.setShader(this.defaultShader,true);
	}
	,destroy: function() {
		this.defaultShader.destroy();
		this.fillShader.destroy();
		this.patternFillShader.destroy();
		this.drawTrianglesShader.destroy();
		this.primitiveShader.destroy();
		this.gl = null;
	}
	,setShader: function(shader,force) {
		if(force == null) force = false;
		if(!force && this.currentShader.ID == shader.ID) return false;
		this.currentShader = shader;
		this.gl.useProgram(shader.program);
		return true;
	}
	,__class__: openfl._internal.renderer.opengl.utils.ShaderManager
};
openfl._internal.renderer.opengl.utils.SpriteBatch = function(gl,maxSprites) {
	if(maxSprites == null) maxSprites = 2000;
	this.lastEnableColor = true;
	this.enableColor = true;
	this.attributes = [];
	this.writtenVertexBytes = 0;
	this.drawing = false;
	this.dirty = true;
	this.states = [];
	this.maxSprites = maxSprites;
	this.attributes.push(new openfl._internal.renderer.opengl.utils.VertexAttribute(2,5126,false,"aPosition"));
	this.attributes.push(new openfl._internal.renderer.opengl.utils.VertexAttribute(2,5126,false,"aTexCoord0"));
	this.attributes.push(new openfl._internal.renderer.opengl.utils.VertexAttribute(4,5121,true,"aColor"));
	this.attributes[2].defaultValue = new Float32Array([1,1,1,1]);
	this.maxElementsPerVertex = 0;
	var _g = 0;
	var _g1 = this.attributes;
	while(_g < _g1.length) {
		var a = _g1[_g];
		++_g;
		this.maxElementsPerVertex += Math.floor(a.components * a.getElementsBytes() / 4);
	}
	this.vertexArraySize = maxSprites * this.maxElementsPerVertex * 4 * 4;
	this.indexArraySize = maxSprites * 6;
	this.vertexArray = new openfl._internal.renderer.opengl.utils.VertexArray(this.attributes,this.vertexArraySize,false);
	this.positions = new Float32Array(this.vertexArray.buffer);
	this.colors = new Uint32Array(this.vertexArray.buffer);
	this.indices = new Uint16Array(this.indexArraySize);
	var i = 0;
	var j = 0;
	while(i < this.indexArraySize) {
		this.indices[i] = j;
		this.indices[i + 1] = j + 1;
		this.indices[i + 2] = j + 2;
		this.indices[i + 3] = j;
		this.indices[i + 4] = j + 2;
		this.indices[i + 5] = j + 3;
		i += 6;
		j += 4;
	}
	this.currentState = new openfl._internal.renderer.opengl.utils._SpriteBatch.State();
	this.dirty = true;
	this.drawing = false;
	this.batchedSprites = 0;
	this.setContext(gl);
};
$hxClasses["openfl._internal.renderer.opengl.utils.SpriteBatch"] = openfl._internal.renderer.opengl.utils.SpriteBatch;
openfl._internal.renderer.opengl.utils.SpriteBatch.__name__ = ["openfl","_internal","renderer","opengl","utils","SpriteBatch"];
openfl._internal.renderer.opengl.utils.SpriteBatch.prototype = {
	gl: null
	,renderSession: null
	,states: null
	,currentState: null
	,vertexArray: null
	,positions: null
	,colors: null
	,indexBuffer: null
	,indices: null
	,dirty: null
	,drawing: null
	,clipRect: null
	,maxSprites: null
	,batchedSprites: null
	,vertexArraySize: null
	,indexArraySize: null
	,maxElementsPerVertex: null
	,elementsPerVertex: null
	,writtenVertexBytes: null
	,shader: null
	,attributes: null
	,enableColor: null
	,lastEnableColor: null
	,destroy: function() {
		this.vertexArray.destroy();
		this.vertexArray = null;
		this.indices = null;
		this.gl.deleteBuffer(this.indexBuffer);
		this.currentState.destroy();
		var _g = 0;
		var _g1 = this.states;
		while(_g < _g1.length) {
			var state = _g1[_g];
			++_g;
			state.destroy();
		}
		this.gl = null;
	}
	,begin: function(renderSession,clipRect) {
		this.renderSession = renderSession;
		this.shader = renderSession.shaderManager.defaultShader;
		this.drawing = true;
		this.start(clipRect);
	}
	,finish: function() {
		this.flush();
		this.clipRect = null;
		this.drawing = false;
	}
	,start: function(clipRect) {
		if(!this.drawing) throw "Call Spritebatch.begin() before start()";
		this.dirty = true;
		this.clipRect = clipRect;
	}
	,stop: function() {
		this.flush();
	}
	,renderBitmapData: function(bitmapData,smoothing,matrix,ct,alpha,blendMode) {
		if(alpha == null) alpha = 1;
		if(bitmapData == null) return;
		var texture = bitmapData.getTexture(this.gl);
		if(this.batchedSprites >= this.maxSprites) this.flush();
		var uvs = bitmapData.__uvData;
		if(uvs == null) return;
		var color = ((alpha * 255 | 0) & 255) << 24 | 16777215;
		this.enableColor = true;
		if(this.enableColor != this.lastEnableColor) {
			this.flush();
			this.lastEnableColor = this.enableColor;
		}
		this.attributes[2].enabled = this.lastEnableColor;
		this.elementsPerVertex = this.getElementsPerVertex();
		var index = this.batchedSprites * 4 * this.elementsPerVertex;
		this.fillVertices(index,bitmapData.width,bitmapData.height,matrix,uvs,null,color);
		this.setState(this.batchedSprites,texture,smoothing,blendMode,ct,true);
		this.batchedSprites++;
	}
	,renderTiles: function(object,sheet,tileData,smooth,flags,count) {
		if(count == null) count = -1;
		if(flags == null) flags = 0;
		if(smooth == null) smooth = false;
		var texture = sheet.__bitmap.getTexture(this.gl);
		if(texture == null) return;
		var useScale = (flags & 1) > 0;
		var useRotation = (flags & 2) > 0;
		var useTransform = (flags & 16) > 0;
		var useRGB = (flags & 4) > 0;
		var useAlpha = (flags & 8) > 0;
		var useRect = (flags & 32) > 0;
		var useOrigin = (flags & 64) > 0;
		var blendMode;
		var _g = flags & 983040;
		switch(_g) {
		case 65536:
			blendMode = openfl.display.BlendMode.ADD;
			break;
		case 131072:
			blendMode = openfl.display.BlendMode.MULTIPLY;
			break;
		case 262144:
			blendMode = openfl.display.BlendMode.SCREEN;
			break;
		default:
			blendMode = openfl.display.BlendMode.NORMAL;
		}
		if(useTransform) {
			useScale = false;
			useRotation = false;
		}
		var scaleIndex = 0;
		var rotationIndex = 0;
		var rgbIndex = 0;
		var alphaIndex = 0;
		var transformIndex = 0;
		var numValues = 3;
		if(useRect) if(useOrigin) numValues = 8; else numValues = 6;
		if(useScale) {
			scaleIndex = numValues;
			numValues++;
		}
		if(useRotation) {
			rotationIndex = numValues;
			numValues++;
		}
		if(useTransform) {
			transformIndex = numValues;
			numValues += 4;
		}
		if(useRGB) {
			rgbIndex = numValues;
			numValues += 3;
		}
		if(useAlpha) {
			alphaIndex = numValues;
			numValues++;
		}
		var totalCount = tileData.length;
		if(count >= 0 && totalCount > count) totalCount = count;
		var itemCount = totalCount / numValues | 0;
		var iIndex = 0;
		var tileID = -1;
		var rect = sheet.__rectTile;
		var tileUV = sheet.__rectUV;
		var center = sheet.__point;
		var x = 0.0;
		var y = 0.0;
		var alpha = 1.0;
		var tint = 16777215;
		var color = -1;
		var scale = 1.0;
		var rotation = 0.0;
		var cosTheta = 1.0;
		var sinTheta = 0.0;
		var a = 0.0;
		var b = 0.0;
		var c = 0.0;
		var d = 0.0;
		var tx = 0.0;
		var ty = 0.0;
		var ox = 0.0;
		var oy = 0.0;
		var matrix = new openfl.geom.Matrix();
		var oMatrix = object.__worldTransform;
		var uvs = new openfl.display.TextureUvs();
		var bIndex = 0;
		this.enableColor = true;
		if(this.enableColor != this.lastEnableColor) {
			this.flush();
			this.lastEnableColor = this.enableColor;
		}
		this.attributes[2].enabled = this.lastEnableColor;
		this.elementsPerVertex = this.getElementsPerVertex();
		while(iIndex < totalCount) {
			if(this.batchedSprites >= this.maxSprites) this.flush();
			x = tileData[iIndex];
			y = tileData[iIndex + 1];
			if(useRect) {
				tileID = -1;
				rect.x = tileData[iIndex + 2];
				rect.y = tileData[iIndex + 3];
				rect.width = tileData[iIndex + 4];
				rect.height = tileData[iIndex + 5];
				if(useOrigin) {
					center.x = tileData[iIndex + 6];
					center.y = tileData[iIndex + 7];
				} else {
					center.x = 0;
					center.y = 0;
				}
				tileUV.setTo(rect.get_left() / sheet.__bitmap.width,rect.get_top() / sheet.__bitmap.height,rect.get_right() / sheet.__bitmap.width,rect.get_bottom() / sheet.__bitmap.height);
			} else {
				tileID = (tileData[iIndex + 2] == null?0:tileData[iIndex + 2]) | 0;
				rect = sheet.__tileRects[tileID];
				center = sheet.__centerPoints[tileID];
				tileUV = sheet.__tileUVs[tileID];
			}
			if(rect != null && rect.width > 0 && rect.height > 0 && center != null) {
				alpha = 1;
				tint = 16777215;
				a = 1;
				b = 0;
				c = 0;
				d = 1;
				tx = 0;
				ty = 0;
				scale = 1.0;
				rotation = 0.0;
				cosTheta = 1.0;
				sinTheta = 0.0;
				matrix.identity();
				if(useAlpha) alpha = tileData[iIndex + alphaIndex] * object.__worldAlpha; else alpha = object.__worldAlpha;
				if(useRGB) tint = (tileData[iIndex + rgbIndex] * 255 | 0) << 16 | (tileData[iIndex + rgbIndex + 1] * 255 | 0) << 8 | (tileData[iIndex + rgbIndex + 2] * 255 | 0);
				if(useScale) scale = tileData[iIndex + scaleIndex];
				if(useRotation) {
					rotation = tileData[iIndex + rotationIndex];
					cosTheta = Math.cos(rotation);
					sinTheta = Math.sin(rotation);
				}
				if(useTransform) {
					a = tileData[iIndex + transformIndex];
					b = tileData[iIndex + transformIndex + 1];
					c = tileData[iIndex + transformIndex + 2];
					d = tileData[iIndex + transformIndex + 3];
				} else {
					a = scale * cosTheta;
					b = scale * sinTheta;
					c = -b;
					d = a;
				}
				ox = center.x * a + center.y * c;
				oy = center.x * b + center.y * d;
				tx = x - ox;
				ty = y - oy;
				matrix.a = a * oMatrix.a + b * oMatrix.c;
				matrix.b = a * oMatrix.b + b * oMatrix.d;
				matrix.c = c * oMatrix.a + d * oMatrix.c;
				matrix.d = c * oMatrix.b + d * oMatrix.d;
				matrix.tx = tx * oMatrix.a + ty * oMatrix.c + oMatrix.tx;
				matrix.ty = tx * oMatrix.b + ty * oMatrix.d + oMatrix.ty;
				uvs.x0 = tileUV.x;
				uvs.y0 = tileUV.y;
				uvs.x1 = tileUV.width;
				uvs.y1 = tileUV.y;
				uvs.x2 = tileUV.width;
				uvs.y2 = tileUV.height;
				uvs.x3 = tileUV.x;
				uvs.y3 = tileUV.height;
				bIndex = this.batchedSprites * 4 * this.elementsPerVertex;
				color = ((alpha * 255 | 0) & 255) << 24 | (tint & 255) << 16 | (tint >> 8 & 255) << 8 | tint >> 16 & 255;
				this.fillVertices(bIndex,rect.width,rect.height,matrix,uvs,null,color);
				this.setState(this.batchedSprites,texture,smooth,blendMode,object.__worldColorTransform,false);
				this.batchedSprites++;
			}
			iIndex += numValues;
		}
	}
	,renderCachedGraphics: function(object) {
		var cachedTexture = object.__graphics.__cachedTexture;
		if(cachedTexture == null) return;
		if(this.batchedSprites >= this.maxSprites) this.flush();
		var alpha = object.__worldAlpha;
		var color = ((alpha * 255 | 0) & 255) << 24 | 16777215;
		var uvs = new openfl.display.TextureUvs();
		uvs.x0 = 0;
		uvs.y0 = 1;
		uvs.x1 = 1;
		uvs.y1 = 1;
		uvs.x2 = 1;
		uvs.y2 = 0;
		uvs.x3 = 0;
		uvs.y3 = 0;
		var worldTransform = object.__worldTransform.clone();
		worldTransform.__translateTransformed(new openfl.geom.Point(object.__graphics.__bounds.x,object.__graphics.__bounds.y));
		this.enableColor = color != -1;
		if(this.enableColor != this.lastEnableColor) {
			this.flush();
			this.lastEnableColor = this.enableColor;
		}
		this.attributes[2].enabled = this.lastEnableColor;
		this.elementsPerVertex = this.getElementsPerVertex();
		var index = this.batchedSprites * 4 * this.elementsPerVertex;
		this.fillVertices(index,cachedTexture.width,cachedTexture.height,worldTransform,uvs,null,color);
		this.setState(this.batchedSprites,cachedTexture.texture,null,object.blendMode,object.__worldColorTransform);
		this.batchedSprites++;
	}
	,fillVertices: function(index,width,height,matrix,uvs,pivot,color) {
		if(color == null) color = -1;
		var w0;
		var w1;
		var h0;
		var h1;
		if(pivot == null) {
			w0 = width;
			w1 = 0;
			h0 = height;
			h1 = 0;
		} else {
			w0 = width * (1 - pivot.x);
			w1 = width * -pivot.x;
			h0 = height * (1 - pivot.y);
			h1 = height * -pivot.y;
		}
		var a = matrix.a;
		var b = matrix.b;
		var c = matrix.c;
		var d = matrix.d;
		var tx = matrix.tx;
		var ty = matrix.ty;
		var cOffsetIndex = 0;
		this.positions[index++] = a * w1 + c * h1 + tx;
		this.positions[index++] = d * h1 + b * w1 + ty;
		this.positions[index++] = uvs.x0;
		this.positions[index++] = uvs.y0;
		if(this.enableColor) this.colors[index++] = color;
		this.positions[index++] = a * w0 + c * h1 + tx;
		this.positions[index++] = d * h1 + b * w0 + ty;
		this.positions[index++] = uvs.x1;
		this.positions[index++] = uvs.y1;
		if(this.enableColor) this.colors[index++] = color;
		this.positions[index++] = a * w0 + c * h0 + tx;
		this.positions[index++] = d * h0 + b * w0 + ty;
		this.positions[index++] = uvs.x2;
		this.positions[index++] = uvs.y2;
		if(this.enableColor) this.colors[index++] = color;
		this.positions[index++] = a * w1 + c * h0 + tx;
		this.positions[index++] = d * h0 + b * w1 + ty;
		this.positions[index++] = uvs.x3;
		this.positions[index++] = uvs.y3;
		if(this.enableColor) this.colors[index++] = color;
		this.writtenVertexBytes = index;
	}
	,enableAttributes: function(color) {
		if(color == null) color = -1;
		this.enableColor = color != -1;
		if(this.enableColor != this.lastEnableColor) {
			this.flush();
			this.lastEnableColor = this.enableColor;
		}
		this.attributes[2].enabled = this.lastEnableColor;
		this.elementsPerVertex = this.getElementsPerVertex();
	}
	,flush: function() {
		if(this.batchedSprites == 0) return;
		if(this.clipRect == null) this.gl.disable(this.gl.SCISSOR_TEST); else {
			this.gl.enable(this.gl.SCISSOR_TEST);
			this.gl.scissor(Math.floor(this.clipRect.x),Math.floor(this.clipRect.y),Math.floor(this.clipRect.width),Math.floor(this.clipRect.height));
		}
		if(this.dirty) {
			this.dirty = false;
			this.gl.activeTexture(this.gl.TEXTURE0);
			this.vertexArray.bind();
			this.gl.bindBuffer(this.gl.ELEMENT_ARRAY_BUFFER,this.indexBuffer);
		}
		if(this.writtenVertexBytes > this.vertexArraySize * 0.5) this.vertexArray.upload(this.positions); else {
			var view = this.positions.subarray(0,this.writtenVertexBytes);
			this.vertexArray.upload(view);
		}
		var nextState;
		var batchSize = 0;
		var start = 0;
		this.currentState.shader = this.renderSession.shaderManager.defaultShader;
		this.currentState.texture = null;
		this.currentState.textureSmooth = false;
		this.currentState.blendMode = this.renderSession.blendModeManager.currentBlendMode;
		this.currentState.colorTransform = null;
		this.currentState.skipColorTransformAlpha = false;
		var _g1 = 0;
		var _g = this.batchedSprites;
		while(_g1 < _g) {
			var i = _g1++;
			nextState = this.states[i];
			this.currentState.skipColorTransformAlpha = nextState.skipColorTransformAlpha;
			if(!nextState.equals(this.currentState)) {
				this.renderBatch(this.currentState,batchSize,start);
				start = i;
				batchSize = 0;
				this.currentState.shader = nextState.shader;
				this.currentState.texture = nextState.texture;
				this.currentState.textureSmooth = nextState.textureSmooth;
				this.currentState.blendMode = nextState.blendMode;
				this.currentState.colorTransform = nextState.colorTransform;
			}
			batchSize++;
		}
		this.renderBatch(this.currentState,batchSize,start);
		this.batchedSprites = 0;
		this.writtenVertexBytes = 0;
		if(this.clipRect != null) this.gl.disable(this.gl.SCISSOR_TEST);
	}
	,renderBatch: function(state,size,start) {
		if(size == 0 || state.texture == null) return;
		var shader;
		if(state.shader == null) shader = this.renderSession.shaderManager.defaultShader; else shader = state.shader;
		this.renderSession.shaderManager.setShader(shader);
		shader.bindVertexArray(this.vertexArray);
		var projection = this.renderSession.projection;
		this.gl.uniform2f(shader.getUniformLocation("uProjectionVector"),projection.x,projection.y);
		if(state.colorTransform != null) {
			var ct = state.colorTransform;
			this.gl.uniform4f(shader.getUniformLocation("uColorMultiplier"),ct.redMultiplier,ct.greenMultiplier,ct.blueMultiplier,state.skipColorTransformAlpha?1:ct.alphaMultiplier);
			this.gl.uniform4f(shader.getUniformLocation("uColorOffset"),ct.redOffset / 255.,ct.greenOffset / 255.,ct.blueOffset / 255.,ct.alphaOffset / 255.);
		} else {
			this.gl.uniform4f(shader.getUniformLocation("uColorMultiplier"),1,1,1,1);
			this.gl.uniform4f(shader.getUniformLocation("uColorOffset"),0,0,0,0);
		}
		this.renderSession.blendModeManager.setBlendMode(state.blendMode);
		this.gl.bindTexture(this.gl.TEXTURE_2D,state.texture);
		if(state.textureSmooth) {
			this.gl.texParameteri(this.gl.TEXTURE_2D,this.gl.TEXTURE_MAG_FILTER,this.gl.LINEAR);
			this.gl.texParameteri(this.gl.TEXTURE_2D,this.gl.TEXTURE_MIN_FILTER,this.gl.LINEAR);
		} else {
			this.gl.texParameteri(this.gl.TEXTURE_2D,this.gl.TEXTURE_MAG_FILTER,this.gl.NEAREST);
			this.gl.texParameteri(this.gl.TEXTURE_2D,this.gl.TEXTURE_MIN_FILTER,this.gl.NEAREST);
		}
		this.gl.drawElements(this.gl.TRIANGLES,size * 6,this.gl.UNSIGNED_SHORT,start * 6 * 2);
		this.renderSession.drawCount++;
	}
	,setState: function(index,texture,smooth,blendMode,colorTransform,skipAlpha) {
		if(skipAlpha == null) skipAlpha = false;
		if(smooth == null) smooth = false;
		var state = this.states[index];
		if(state == null) state = this.states[index] = new openfl._internal.renderer.opengl.utils._SpriteBatch.State();
		state.texture = texture;
		state.textureSmooth = smooth;
		state.blendMode = blendMode;
		state.colorTransform = colorTransform;
		state.skipColorTransformAlpha = skipAlpha;
	}
	,setContext: function(gl) {
		this.gl = gl;
		this.vertexArray.setContext(gl,this.positions);
		this.indexBuffer = gl.createBuffer();
		gl.bindBuffer(gl.ELEMENT_ARRAY_BUFFER,this.indexBuffer);
		gl.bufferData(gl.ELEMENT_ARRAY_BUFFER,this.indices,gl.STATIC_DRAW);
	}
	,getElementsPerVertex: function() {
		var r = 0;
		var _g = 0;
		var _g1 = this.attributes;
		while(_g < _g1.length) {
			var a = _g1[_g];
			++_g;
			if(a.enabled) r += Math.floor(a.components * a.getElementsBytes() / 4);
		}
		return r;
	}
	,__class__: openfl._internal.renderer.opengl.utils.SpriteBatch
};
openfl._internal.renderer.opengl.utils._SpriteBatch = {};
openfl._internal.renderer.opengl.utils._SpriteBatch.State = function() {
	this.skipColorTransformAlpha = false;
	this.textureSmooth = true;
};
$hxClasses["openfl._internal.renderer.opengl.utils._SpriteBatch.State"] = openfl._internal.renderer.opengl.utils._SpriteBatch.State;
openfl._internal.renderer.opengl.utils._SpriteBatch.State.__name__ = ["openfl","_internal","renderer","opengl","utils","_SpriteBatch","State"];
openfl._internal.renderer.opengl.utils._SpriteBatch.State.prototype = {
	texture: null
	,textureSmooth: null
	,blendMode: null
	,colorTransform: null
	,skipColorTransformAlpha: null
	,shader: null
	,equals: function(other) {
		return (this.shader == null || other.shader == null || this.shader.ID == other.shader.ID) && this.texture == other.texture && this.textureSmooth == other.textureSmooth && this.blendMode == other.blendMode && (this.colorTransform != null && this.colorTransform.__equals(other.colorTransform,this.skipColorTransformAlpha));
	}
	,destroy: function() {
		this.texture = null;
		this.colorTransform = null;
	}
	,__class__: openfl._internal.renderer.opengl.utils._SpriteBatch.State
};
openfl._internal.renderer.opengl.utils.StencilManager = function(gl) {
	this.stencilMask = 0;
	this.stencilStack = [];
	this.setContext(gl);
	this.reverse = true;
	this.count = 0;
};
$hxClasses["openfl._internal.renderer.opengl.utils.StencilManager"] = openfl._internal.renderer.opengl.utils.StencilManager;
openfl._internal.renderer.opengl.utils.StencilManager.__name__ = ["openfl","_internal","renderer","opengl","utils","StencilManager"];
openfl._internal.renderer.opengl.utils.StencilManager.prototype = {
	count: null
	,gl: null
	,reverse: null
	,stencilStack: null
	,stencilMask: null
	,prepareGraphics: function(fill,renderSession,projection,translationMatrix) {
		var offset = renderSession.offset;
		var shader = renderSession.shaderManager.fillShader;
		renderSession.shaderManager.setShader(shader);
		this.gl.uniformMatrix3fv(shader.getUniformLocation("uTranslationMatrix"),false,translationMatrix);
		this.gl.uniform2f(shader.getUniformLocation("uProjectionVector"),projection.x,-projection.y);
		this.gl.uniform2f(shader.getUniformLocation("uOffsetVector"),-offset.x,-offset.y);
		fill.vertexArray.bind();
		shader.bindVertexArray(fill.vertexArray);
		this.gl.bindBuffer(this.gl.ELEMENT_ARRAY_BUFFER,fill.indexBuffer);
	}
	,pushBucket: function(bucket,renderSession,projection,translationMatrix,isMask) {
		if(isMask == null) isMask = false;
		if(!isMask) {
			this.gl.enable(this.gl.STENCIL_TEST);
			this.gl.clear(this.gl.STENCIL_BUFFER_BIT);
			this.gl.stencilMask(255);
			this.gl.colorMask(false,false,false,false);
			this.gl.stencilFunc(this.gl.NEVER,1,255);
			this.gl.stencilOp(this.gl.INVERT,this.gl.KEEP,this.gl.KEEP);
			this.gl.clear(this.gl.STENCIL_BUFFER_BIT);
		}
		var _g = 0;
		var _g1 = bucket.fills;
		while(_g < _g1.length) {
			var fill = _g1[_g];
			++_g;
			if(fill.available) continue;
			this.prepareGraphics(fill,renderSession,projection,translationMatrix);
			this.gl.drawElements(fill.drawMode,fill.glIndices.length,this.gl.UNSIGNED_SHORT,0);
		}
		if(!isMask) {
			this.gl.colorMask(true,true,true,renderSession.renderer.transparent);
			this.gl.stencilOp(this.gl.KEEP,this.gl.KEEP,this.gl.KEEP);
			this.gl.stencilFunc(this.gl.EQUAL,255,255);
		}
	}
	,popBucket: function(object,bucket,renderSession) {
		this.gl.disable(this.gl.STENCIL_TEST);
	}
	,pushMask: function(object,renderSession) {
		var maskGraphics = object.__maskGraphics;
		if(maskGraphics == null || maskGraphics.__commands.length <= 0) return;
		if(this.stencilMask == 0) {
			this.gl.enable(this.gl.STENCIL_TEST);
			this.gl.clear(this.gl.STENCIL_BUFFER_BIT);
		}
		this.stencilMask++;
		if(maskGraphics.__dirty) openfl._internal.renderer.opengl.utils.GraphicsRenderer.updateGraphics(object,maskGraphics,renderSession.gl);
		var func;
		if(this.stencilMask == 1) func = this.gl.NEVER; else func = this.gl.EQUAL;
		var ref = this.stencilMask;
		var mask = 255 - this.stencilMask;
		this.gl.stencilMask(255);
		this.gl.colorMask(false,false,false,false);
		this.gl.stencilFunc(func,ref,mask);
		this.gl.stencilOp(this.gl.REPLACE,this.gl.KEEP,this.gl.KEEP);
		var glStack = maskGraphics.__glStack[openfl._internal.renderer.opengl.GLRenderer.glContextId];
		var bucket;
		var translationMatrix = object.__worldTransform;
		var _g1 = 0;
		var _g = glStack.buckets.length;
		while(_g1 < _g) {
			var i = _g1++;
			bucket = glStack.buckets[i];
			if(bucket.overrideMatrix != null) translationMatrix = bucket.overrideMatrix; else translationMatrix = object.__worldTransform;
			var _g2 = bucket.mode;
			switch(_g2[1]) {
			case 1:case 2:
				this.pushBucket(bucket,renderSession,renderSession.projection,translationMatrix.toArray(true),true);
				break;
			default:
			}
		}
		this.gl.colorMask(true,true,true,renderSession.renderer.transparent);
		this.gl.stencilOp(this.gl.KEEP,this.gl.KEEP,this.gl.KEEP);
		this.gl.stencilFunc(this.gl.EQUAL,this.stencilMask,255);
	}
	,popMask: function(object,renderSession) {
		var maskGraphics = object.__maskGraphics;
		if(maskGraphics == null || maskGraphics.__commands.length <= 0) return;
		this.stencilMask--;
		if(this.stencilMask <= 0) {
			this.gl.disable(this.gl.STENCIL_TEST);
			this.stencilMask = 0;
		}
	}
	,bindGraphics: function(object,glData,renderSession) {
	}
	,destroy: function() {
		this.stencilStack = null;
		this.gl = null;
	}
	,popStencil: function(object,glData,renderSession) {
		this.stencilStack.pop();
		this.count--;
		if(this.stencilStack.length == 0) this.gl.disable(this.gl.STENCIL_TEST); else {
			var level = this.count;
			this.bindGraphics(object,glData,renderSession);
			this.gl.colorMask(false,false,false,false);
			if(glData.mode == 1) {
				this.reverse = !this.reverse;
				if(this.reverse) {
					this.gl.stencilFunc(this.gl.EQUAL,255 - (level + 1),255);
					this.gl.stencilOp(this.gl.KEEP,this.gl.KEEP,this.gl.INCR);
				} else {
					this.gl.stencilFunc(this.gl.EQUAL,level + 1,255);
					this.gl.stencilOp(this.gl.KEEP,this.gl.KEEP,this.gl.DECR);
				}
				this.gl.drawElements(this.gl.TRIANGLE_FAN,4,this.gl.UNSIGNED_SHORT,(glData.indices.length - 4) * 2);
				this.gl.stencilFunc(this.gl.ALWAYS,0,255);
				this.gl.stencilOp(this.gl.KEEP,this.gl.KEEP,this.gl.INVERT);
				this.gl.drawElements(this.gl.TRIANGLE_FAN,glData.indices.length - 4,this.gl.UNSIGNED_SHORT,0);
				if(!this.reverse) this.gl.stencilFunc(this.gl.EQUAL,255 - level,255); else this.gl.stencilFunc(this.gl.EQUAL,level,255);
			} else {
				if(!this.reverse) {
					this.gl.stencilFunc(this.gl.EQUAL,255 - (level + 1),255);
					this.gl.stencilOp(this.gl.KEEP,this.gl.KEEP,this.gl.INCR);
				} else {
					this.gl.stencilFunc(this.gl.EQUAL,level + 1,255);
					this.gl.stencilOp(this.gl.KEEP,this.gl.KEEP,this.gl.DECR);
				}
				this.gl.drawElements(this.gl.TRIANGLE_STRIP,glData.indices.length,this.gl.UNSIGNED_SHORT,0);
				if(!this.reverse) this.gl.stencilFunc(this.gl.EQUAL,255 - level,255); else this.gl.stencilFunc(this.gl.EQUAL,level,255);
			}
			this.gl.colorMask(true,true,true,true);
			this.gl.stencilOp(this.gl.KEEP,this.gl.KEEP,this.gl.KEEP);
		}
	}
	,pushStencil: function(object,glData,renderSession) {
		this.bindGraphics(object,glData,renderSession);
		if(this.stencilStack.length == 0) {
			this.gl.enable(this.gl.STENCIL_TEST);
			this.gl.clear(this.gl.STENCIL_BUFFER_BIT);
			this.reverse = true;
			this.count = 0;
		}
		this.stencilStack.push(glData);
		var level = this.count;
		this.gl.colorMask(false,false,false,false);
		this.gl.stencilFunc(this.gl.ALWAYS,0,255);
		this.gl.stencilOp(this.gl.KEEP,this.gl.KEEP,this.gl.INVERT);
		if(glData.mode == 1) {
			this.gl.drawElements(this.gl.TRIANGLE_FAN,glData.indices.length - 4,this.gl.UNSIGNED_SHORT,0);
			if(this.reverse) {
				this.gl.stencilFunc(this.gl.EQUAL,255 - level,255);
				this.gl.stencilOp(this.gl.KEEP,this.gl.KEEP,this.gl.DECR);
			} else {
				this.gl.stencilFunc(this.gl.EQUAL,level,255);
				this.gl.stencilOp(this.gl.KEEP,this.gl.KEEP,this.gl.INCR);
			}
			this.gl.drawElements(this.gl.TRIANGLE_FAN,4,this.gl.UNSIGNED_SHORT,(glData.indices.length - 4) * 2);
			if(this.reverse) this.gl.stencilFunc(this.gl.EQUAL,255 - (level + 1),255); else this.gl.stencilFunc(this.gl.EQUAL,level + 1,255);
			this.reverse = !this.reverse;
		} else {
			if(!this.reverse) {
				this.gl.stencilFunc(this.gl.EQUAL,255 - level,255);
				this.gl.stencilOp(this.gl.KEEP,this.gl.KEEP,this.gl.DECR);
			} else {
				this.gl.stencilFunc(this.gl.EQUAL,level,255);
				this.gl.stencilOp(this.gl.KEEP,this.gl.KEEP,this.gl.INCR);
			}
			this.gl.drawElements(this.gl.TRIANGLE_STRIP,glData.indices.length,this.gl.UNSIGNED_SHORT,0);
			if(!this.reverse) this.gl.stencilFunc(this.gl.EQUAL,255 - (level + 1),255); else this.gl.stencilFunc(this.gl.EQUAL,level + 1,255);
		}
		this.gl.colorMask(true,true,true,true);
		this.gl.stencilOp(this.gl.KEEP,this.gl.KEEP,this.gl.KEEP);
		this.count++;
	}
	,setContext: function(gl) {
		this.gl = gl;
	}
	,__class__: openfl._internal.renderer.opengl.utils.StencilManager
};
openfl._internal.renderer.opengl.utils.VertexArray = function(attributes,size,isStatic) {
	if(isStatic == null) isStatic = false;
	if(size == null) size = 0;
	this.isStatic = false;
	this.size = 0;
	this.attributes = [];
	this.size = size;
	this.attributes = attributes;
	if(size > 0) this.buffer = new ArrayBuffer(size);
	this.isStatic = isStatic;
};
$hxClasses["openfl._internal.renderer.opengl.utils.VertexArray"] = openfl._internal.renderer.opengl.utils.VertexArray;
openfl._internal.renderer.opengl.utils.VertexArray.__name__ = ["openfl","_internal","renderer","opengl","utils","VertexArray"];
openfl._internal.renderer.opengl.utils.VertexArray.prototype = {
	gl: null
	,glBuffer: null
	,attributes: null
	,buffer: null
	,size: null
	,isStatic: null
	,bind: function() {
		this.gl.bindBuffer(this.gl.ARRAY_BUFFER,this.glBuffer);
	}
	,unbind: function() {
		this.gl.bindBuffer(this.gl.ARRAY_BUFFER,null);
	}
	,upload: function(view) {
		this.gl.bufferSubData(this.gl.ARRAY_BUFFER,0,view);
	}
	,destroy: function() {
		this.gl.deleteBuffer(this.glBuffer);
		this.buffer = null;
	}
	,setContext: function(gl,view) {
		this.gl = gl;
		this.glBuffer = gl.createBuffer();
		gl.bindBuffer(gl.ARRAY_BUFFER,this.glBuffer);
		gl.bufferData(gl.ARRAY_BUFFER,view,this.isStatic?gl.STATIC_DRAW:gl.DYNAMIC_DRAW);
	}
	,get_stride: function() {
		var s = 0;
		var _g = 0;
		var _g1 = this.attributes;
		while(_g < _g1.length) {
			var a = _g1[_g];
			++_g;
			if(a.enabled) s += Math.floor(a.components * a.getElementsBytes() / 4) * 4;
		}
		return s;
	}
	,__class__: openfl._internal.renderer.opengl.utils.VertexArray
	,__properties__: {get_stride:"get_stride"}
};
openfl._internal.renderer.opengl.utils._VertexAttribute = {};
openfl._internal.renderer.opengl.utils._VertexAttribute.ElementType_Impl_ = function() { };
$hxClasses["openfl._internal.renderer.opengl.utils._VertexAttribute.ElementType_Impl_"] = openfl._internal.renderer.opengl.utils._VertexAttribute.ElementType_Impl_;
openfl._internal.renderer.opengl.utils._VertexAttribute.ElementType_Impl_.__name__ = ["openfl","_internal","renderer","opengl","utils","_VertexAttribute","ElementType_Impl_"];
openfl.display.Bitmap = function(bitmapData,pixelSnapping,smoothing) {
	if(smoothing == null) smoothing = false;
	openfl.display.DisplayObjectContainer.call(this);
	this.bitmapData = bitmapData;
	this.pixelSnapping = pixelSnapping;
	this.smoothing = smoothing;
	if(pixelSnapping == null) this.pixelSnapping = openfl.display.PixelSnapping.AUTO;
};
$hxClasses["openfl.display.Bitmap"] = openfl.display.Bitmap;
openfl.display.Bitmap.__name__ = ["openfl","display","Bitmap"];
openfl.display.Bitmap.__super__ = openfl.display.DisplayObjectContainer;
openfl.display.Bitmap.prototype = $extend(openfl.display.DisplayObjectContainer.prototype,{
	bitmapData: null
	,pixelSnapping: null
	,smoothing: null
	,__image: null
	,__getBounds: function(rect,matrix) {
		if(this.bitmapData != null) {
			var bounds = new openfl.geom.Rectangle(0,0,this.bitmapData.width,this.bitmapData.height);
			bounds = bounds.transform(this.__worldTransform);
			rect.__expand(bounds.x,bounds.y,bounds.width,bounds.height);
		}
	}
	,__hitTest: function(x,y,shapeFlag,stack,interactiveOnly) {
		if(!this.get_visible() || this.bitmapData == null) return false;
		var point = this.globalToLocal(new openfl.geom.Point(x,y));
		if(point.x > 0 && point.y > 0 && point.x <= this.bitmapData.width && point.y <= this.bitmapData.height) {
			if(stack != null && !interactiveOnly) stack.push(this);
			return true;
		}
		return false;
	}
	,__renderCanvas: function(renderSession) {
		openfl._internal.renderer.canvas.CanvasBitmap.render(this,renderSession);
	}
	,__renderDOM: function(renderSession) {
		if(this.stage != null && this.__worldVisible && this.__renderable && this.bitmapData != null && this.bitmapData.__isValid) {
			if(this.bitmapData.__image.buffer.__srcImage != null) openfl._internal.renderer.dom.DOMBitmap.renderImage(this,renderSession); else openfl._internal.renderer.dom.DOMBitmap.renderCanvas(this,renderSession);
		} else {
			if(this.__image != null) {
				renderSession.element.removeChild(this.__image);
				this.__image = null;
				this.__style = null;
			}
			if(this.__canvas != null) {
				renderSession.element.removeChild(this.__canvas);
				this.__canvas = null;
				this.__style = null;
			}
		}
	}
	,__renderGL: function(renderSession) {
		if(!this.__renderable || this.__worldAlpha <= 0 || this.bitmapData == null || !this.bitmapData.__isValid) null; else renderSession.spriteBatch.renderBitmapData(this.bitmapData,this.smoothing,this.__worldTransform,this.__worldColorTransform,this.__worldAlpha,this.blendMode);
	}
	,__renderMask: function(renderSession) {
		renderSession.context.rect(0,0,this.get_width(),this.get_height());
	}
	,__updateMask: function(maskGraphics) {
		maskGraphics.__commands.push(openfl.display.DrawCommand.OverrideMatrix(this.__worldTransform));
		maskGraphics.beginFill(0);
		maskGraphics.drawRect(0,0,this.bitmapData.width,this.bitmapData.height);
		if(maskGraphics.__bounds == null) maskGraphics.__bounds = new openfl.geom.Rectangle();
		this.__getBounds(maskGraphics.__bounds,openfl.geom.Matrix.__identity);
		openfl.display.DisplayObjectContainer.prototype.__updateMask.call(this,maskGraphics);
	}
	,get_height: function() {
		if(this.bitmapData != null) return this.bitmapData.height * this.get_scaleY();
		return 0;
	}
	,set_height: function(value) {
		if(this.bitmapData != null) {
			if(value != this.bitmapData.height) {
				if(!this.__transformDirty) {
					this.__transformDirty = true;
					openfl.display.DisplayObject.__worldTransformDirty++;
				}
				this.set_scaleY(value / this.bitmapData.height);
			}
			return value;
		}
		return 0;
	}
	,get_width: function() {
		if(this.bitmapData != null) return this.bitmapData.width * this.get_scaleX();
		return 0;
	}
	,set_width: function(value) {
		if(this.bitmapData != null) {
			if(value != this.bitmapData.width) {
				if(!this.__transformDirty) {
					this.__transformDirty = true;
					openfl.display.DisplayObject.__worldTransformDirty++;
				}
				this.set_scaleX(value / this.bitmapData.width);
			}
			return value;
		}
		return 0;
	}
	,__class__: openfl.display.Bitmap
});
openfl.display.BitmapData = function(width,height,transparent,fillColor) {
	if(fillColor == null) fillColor = -1;
	if(transparent == null) transparent = true;
	this.transparent = transparent;
	if(width == null) width = 0; else width = width;
	if(height == null) height = 0; else height = height;
	if(width < 0) width = 0; else width = width;
	if(height < 0) height = 0; else height = height;
	this.width = width;
	this.height = height;
	this.rect = new openfl.geom.Rectangle(0,0,width,height);
	if(width > 0 && height > 0) {
		if(transparent) {
			if((function($this) {
				var $r;
				var $int = fillColor & -16777216;
				$r = $int < 0?4294967296.0 + $int:$int + 0.0;
				return $r;
			}(this)) == 0) fillColor = 0;
		} else fillColor = -16777216 | fillColor & 16777215;
		this.__image = new lime.graphics.Image(null,0,0,width,height,fillColor);
		this.__image.set_transparent(transparent);
		this.__isValid = true;
	}
	this.__createUVs();
};
$hxClasses["openfl.display.BitmapData"] = openfl.display.BitmapData;
openfl.display.BitmapData.__name__ = ["openfl","display","BitmapData"];
openfl.display.BitmapData.__interfaces__ = [openfl.display.IBitmapDrawable];
openfl.display.BitmapData.fromBase64 = function(base64,type,onload) {
	var bitmapData = new openfl.display.BitmapData(0,0,true);
	bitmapData.__fromBase64(base64,type,onload);
	return bitmapData;
};
openfl.display.BitmapData.fromBytes = function(bytes,rawAlpha,onload) {
	var bitmapData = new openfl.display.BitmapData(0,0,true);
	bitmapData.__fromBytes(bytes,rawAlpha,onload);
	return bitmapData;
};
openfl.display.BitmapData.fromCanvas = function(canvas,transparent) {
	if(transparent == null) transparent = true;
	var bitmapData = new openfl.display.BitmapData(0,0,transparent);
	bitmapData.__fromImage(lime.graphics.Image.fromCanvas(canvas));
	bitmapData.__image.set_transparent(transparent);
	return bitmapData;
};
openfl.display.BitmapData.fromFile = function(path,onload,onerror) {
	var bitmapData = new openfl.display.BitmapData(0,0,true);
	bitmapData.__fromFile(path,onload,onerror);
	return bitmapData;
};
openfl.display.BitmapData.fromImage = function(image,transparent) {
	if(transparent == null) transparent = true;
	var bitmapData = new openfl.display.BitmapData(0,0,transparent);
	bitmapData.__fromImage(image);
	bitmapData.__image.set_transparent(transparent);
	return bitmapData;
};
openfl.display.BitmapData.__flipPixel = function(pixel) {
	return (pixel & 255) << 24 | (pixel >> 8 & 255) << 16 | (pixel >> 16 & 255) << 8 | pixel >> 24 & 255;
};
openfl.display.BitmapData.__ucompare = function(n1,n2) {
	var tmp1;
	var tmp2;
	tmp1 = n1 >> 24 & 255;
	tmp2 = n2 >> 24 & 255;
	if(tmp1 != tmp2) if(tmp1 > tmp2) return 1; else return -1; else {
		tmp1 = n1 >> 16 & 255;
		tmp2 = n2 >> 16 & 255;
		if(tmp1 != tmp2) if(tmp1 > tmp2) return 1; else return -1; else {
			tmp1 = n1 >> 8 & 255;
			tmp2 = n2 >> 8 & 255;
			if(tmp1 != tmp2) if(tmp1 > tmp2) return 1; else return -1; else {
				tmp1 = n1 & 255;
				tmp2 = n2 & 255;
				if(tmp1 != tmp2) if(tmp1 > tmp2) return 1; else return -1; else return 0;
			}
		}
	}
};
openfl.display.BitmapData.prototype = {
	height: null
	,rect: null
	,transparent: null
	,width: null
	,blendMode: null
	,__worldTransform: null
	,__worldColorTransform: null
	,__buffer: null
	,__image: null
	,__isValid: null
	,__texture: null
	,__textureImage: null
	,__framebuffer: null
	,__uvData: null
	,__spritebatch: null
	,applyFilter: function(sourceBitmapData,sourceRect,destPoint,filter) {
		if(!this.__isValid || sourceBitmapData == null || !sourceBitmapData.__isValid) return;
		lime.graphics.utils.ImageCanvasUtil.convertToCanvas(this.__image);
		lime.graphics.utils.ImageCanvasUtil.createImageData(this.__image);
		lime.graphics.utils.ImageCanvasUtil.convertToCanvas(sourceBitmapData.__image);
		lime.graphics.utils.ImageCanvasUtil.createImageData(sourceBitmapData.__image);
		filter.__applyFilter(this.__image.buffer.__srcImageData,sourceBitmapData.__image.buffer.__srcImageData,sourceRect,destPoint);
		this.__image.dirty = true;
	}
	,clone: function() {
		if(!this.__isValid) return new openfl.display.BitmapData(this.width,this.height,this.transparent); else return openfl.display.BitmapData.fromImage(this.__image.clone(),this.transparent);
	}
	,colorTransform: function(rect,colorTransform) {
		if(!this.__isValid) return;
		this.__image.colorTransform(rect.__toLimeRectangle(),colorTransform.__toLimeColorMatrix());
	}
	,copyChannel: function(sourceBitmapData,sourceRect,destPoint,sourceChannel,destChannel) {
		if(!this.__isValid) return;
		var sourceChannel1;
		switch(sourceChannel) {
		case 1:
			sourceChannel1 = lime.graphics.ImageChannel.RED;
			break;
		case 2:
			sourceChannel1 = lime.graphics.ImageChannel.GREEN;
			break;
		case 4:
			sourceChannel1 = lime.graphics.ImageChannel.BLUE;
			break;
		case 8:
			sourceChannel1 = lime.graphics.ImageChannel.ALPHA;
			break;
		default:
			return;
		}
		var destChannel1;
		switch(destChannel) {
		case 1:
			destChannel1 = lime.graphics.ImageChannel.RED;
			break;
		case 2:
			destChannel1 = lime.graphics.ImageChannel.GREEN;
			break;
		case 4:
			destChannel1 = lime.graphics.ImageChannel.BLUE;
			break;
		case 8:
			destChannel1 = lime.graphics.ImageChannel.ALPHA;
			break;
		default:
			return;
		}
		this.__image.copyChannel(sourceBitmapData.__image,sourceRect.__toLimeRectangle(),destPoint.__toLimeVector2(),sourceChannel1,destChannel1);
	}
	,copyPixels: function(sourceBitmapData,sourceRect,destPoint,alphaBitmapData,alphaPoint,mergeAlpha) {
		if(mergeAlpha == null) mergeAlpha = false;
		if(!this.__isValid || sourceBitmapData == null) return;
		this.__image.copyPixels(sourceBitmapData.__image,sourceRect.__toLimeRectangle(),destPoint.__toLimeVector2(),alphaBitmapData != null?alphaBitmapData.__image:null,alphaPoint != null?alphaPoint.__toLimeVector2():null,mergeAlpha);
	}
	,dispose: function() {
		this.__image = null;
		this.width = 0;
		this.height = 0;
		this.rect = null;
		this.__isValid = false;
	}
	,draw: function(source,matrix,colorTransform,blendMode,clipRect,smoothing) {
		if(smoothing == null) smoothing = false;
		if(!this.__isValid) return;
		var _g = this.__image.type;
		switch(_g[1]) {
		case 0:
			lime.graphics.utils.ImageCanvasUtil.convertToCanvas(this.__image);
			lime.graphics.utils.ImageCanvasUtil.sync(this.__image);
			var buffer = this.__image.buffer;
			var renderSession = new openfl._internal.renderer.RenderSession();
			renderSession.context = buffer.__srcContext;
			renderSession.roundPixels = true;
			if(!smoothing) {
				buffer.__srcContext.mozImageSmoothingEnabled = false;
				buffer.__srcContext.webkitImageSmoothingEnabled = false;
				buffer.__srcContext.imageSmoothingEnabled = false;
			}
			var matrixCache = source.__worldTransform;
			if(matrix != null) source.__worldTransform = matrix; else source.__worldTransform = new openfl.geom.Matrix();
			source.__updateChildren(false);
			source.__renderCanvas(renderSession);
			source.__worldTransform = matrixCache;
			source.__updateChildren(true);
			if(!smoothing) {
				buffer.__srcContext.mozImageSmoothingEnabled = true;
				buffer.__srcContext.webkitImageSmoothingEnabled = true;
				buffer.__srcContext.imageSmoothingEnabled = true;
			}
			buffer.__srcContext.setTransform(1,0,0,1,0,0);
			break;
		case 1:
			var renderSession1 = openfl.Lib.current.stage.__renderer.renderSession;
			var gl = renderSession1.gl;
			if(gl == null) return;
			var mainSpritebatch = renderSession1.spriteBatch;
			var mainProjection = renderSession1.projection;
			if(clipRect == null) clipRect = new openfl.geom.Rectangle(0,0,this.width,this.height);
			var tmpRect = clipRect.clone();
			tmpRect.y = this.height - tmpRect.get_bottom();
			var drawSelf = false;
			if(this.__spritebatch == null) {
				this.__spritebatch = new openfl._internal.renderer.opengl.utils.SpriteBatch(gl);
				drawSelf = true;
			}
			renderSession1.spriteBatch = this.__spritebatch;
			renderSession1.projection = new openfl.geom.Point(this.width / 2,-(this.height / 2));
			if(this.__framebuffer == null) this.__framebuffer = new openfl._internal.renderer.opengl.utils.FilterTexture(gl,this.width,this.height,smoothing);
			this.__framebuffer.resize(this.width,this.height);
			gl.bindFramebuffer(gl.FRAMEBUFFER,this.__framebuffer.frameBuffer);
			gl.viewport(0,0,this.width,this.height);
			this.__spritebatch.begin(renderSession1,drawSelf?null:tmpRect);
			gl.colorMask(true,true,true,true);
			renderSession1.blendModeManager.setBlendMode(openfl.display.BlendMode.NORMAL);
			if(drawSelf) {
				this.__framebuffer.clear();
				this.__renderGL(renderSession1);
				this.__spritebatch.stop();
				this.__spritebatch.start(tmpRect);
			}
			var ctCache = source.__worldColorTransform;
			var matrixCache1 = source.__worldTransform;
			var blendModeCache = source.blendMode;
			if(matrix != null) source.__worldTransform = matrix; else source.__worldTransform = new openfl.geom.Matrix();
			if(colorTransform != null) source.__worldColorTransform = colorTransform; else source.__worldColorTransform = new openfl.geom.ColorTransform();
			source.blendMode = blendMode;
			source.__updateChildren(false);
			source.__renderGL(renderSession1);
			source.__worldColorTransform = ctCache;
			source.__worldTransform = matrixCache1;
			source.blendMode = blendModeCache;
			source.__updateChildren(true);
			this.__spritebatch.finish();
			gl.readPixels(0,0,this.width,this.height,gl.RGBA,gl.UNSIGNED_BYTE,this.__image.buffer.data);
			gl.bindFramebuffer(gl.FRAMEBUFFER,null);
			gl.viewport(0,0,renderSession1.renderer.width,renderSession1.renderer.height);
			renderSession1.spriteBatch = mainSpritebatch;
			renderSession1.projection = mainProjection;
			gl.colorMask(true,true,true,renderSession1.renderer.transparent);
			this.__texture = this.__framebuffer.texture;
			this.__image.dirty = false;
			this.__createUVs(true);
			break;
		default:
		}
	}
	,encode: function(rect,compressor,byteArray) {
		if(!this.__isValid || rect == null) return byteArray = null;
		if(js.Boot.__instanceof(compressor,openfl.display.PNGEncoderOptions)) return byteArray = this.__image.encode("png"); else if(js.Boot.__instanceof(compressor,openfl.display.JPEGEncoderOptions)) return byteArray = this.__image.encode("jpg",(js.Boot.__cast(compressor , openfl.display.JPEGEncoderOptions)).quality);
		return byteArray = null;
	}
	,fillRect: function(rect,color) {
		if(!this.__isValid || rect == null) return;
		this.__image.fillRect(rect.__toLimeRectangle(),color);
	}
	,floodFill: function(x,y,color) {
		if(!this.__isValid) return;
		this.__image.floodFill(x,y,color);
	}
	,generateFilterRect: function(sourceRect,filter) {
		return sourceRect.clone();
	}
	,getBuffer: function(gl) {
		if(this.__buffer == null) {
			var data = [this.width,this.height,0,1,1,0,this.height,0,0,1,this.width,0,0,1,0,0,0,0,0,0];
			this.__buffer = gl.createBuffer();
			gl.bindBuffer(gl.ARRAY_BUFFER,this.__buffer);
			gl.bufferData(gl.ARRAY_BUFFER,new Float32Array(data),gl.STATIC_DRAW);
			gl.bindBuffer(gl.ARRAY_BUFFER,null);
		}
		return this.__buffer;
	}
	,getColorBoundsRect: function(mask,color,findColor) {
		if(findColor == null) findColor = true;
		if(!this.__isValid) return new openfl.geom.Rectangle(0,0,this.width,this.height);
		return this.__image.get_rect().__toFlashRectangle();
	}
	,getPixel: function(x,y) {
		if(!this.__isValid) return 0;
		return this.__image.getPixel(x,y);
	}
	,getPixel32: function(x,y) {
		if(!this.__isValid) return 0;
		return this.__image.getPixel32(x,y);
	}
	,getPixels: function(rect) {
		if(!this.__isValid) return null;
		if(rect == null) rect = this.rect;
		return this.__image.getPixels(rect.__toLimeRectangle());
	}
	,getTexture: function(gl) {
		if(!this.__isValid) return null;
		if(this.__texture == null) {
			this.__texture = gl.createTexture();
			gl.bindTexture(gl.TEXTURE_2D,this.__texture);
			gl.texParameteri(gl.TEXTURE_2D,gl.TEXTURE_WRAP_S,gl.CLAMP_TO_EDGE);
			gl.texParameteri(gl.TEXTURE_2D,gl.TEXTURE_WRAP_T,gl.CLAMP_TO_EDGE);
			gl.texParameteri(gl.TEXTURE_2D,gl.TEXTURE_MAG_FILTER,gl.LINEAR);
			gl.texParameteri(gl.TEXTURE_2D,gl.TEXTURE_MIN_FILTER,gl.LINEAR);
			this.__image.dirty = true;
		}
		if(this.__image.dirty) {
			var format;
			if(this.__image.buffer.bitsPerPixel == 1) format = gl.ALPHA; else format = gl.RGBA;
			gl.bindTexture(gl.TEXTURE_2D,this.__texture);
			var textureImage = this.__image.clone();
			textureImage.set_premultiplied(true);
			gl.texImage2D(gl.TEXTURE_2D,0,format,this.width,this.height,0,format,gl.UNSIGNED_BYTE,textureImage.get_data());
			gl.bindTexture(gl.TEXTURE_2D,null);
			this.__image.dirty = false;
		}
		return this.__texture;
	}
	,getVector: function(rect) {
		var pixels = this.getPixels(rect);
		var length = pixels.length / 4 | 0;
		var result;
		var this1;
		this1 = new openfl.VectorData();
		var this2;
		this2 = new Array(length);
		this1.data = this2;
		this1.length = length;
		this1.fixed = true;
		result = this1;
		var _g = 0;
		while(_g < length) {
			var i = _g++;
			var value = pixels.readUnsignedInt();
			if(!result.fixed) {
				if(i >= result.length) result.length = i + 1;
				if(result.data.length < result.length) {
					var data;
					var this3;
					this3 = new Array(result.data.length + 10);
					data = this3;
					haxe.ds._Vector.Vector_Impl_.blit(result.data,0,data,0,result.data.length);
					result.data = data;
				}
			}
			result.data[i] = value;
		}
		return result;
	}
	,histogram: function(hRect) {
		var rect;
		if(hRect != null) rect = hRect; else rect = new openfl.geom.Rectangle(0,0,this.width,this.height);
		var pixels = this.getPixels(rect);
		var result;
		var _g = [];
		var _g1 = 0;
		while(_g1 < 4) {
			var i = _g1++;
			_g.push((function($this) {
				var $r;
				var _g2 = [];
				{
					var _g3 = 0;
					while(_g3 < 256) {
						var j = _g3++;
						_g2.push(0);
					}
				}
				$r = _g2;
				return $r;
			}(this)));
		}
		result = _g;
		var _g21 = 0;
		var _g11 = pixels.length;
		while(_g21 < _g11) {
			var i1 = _g21++;
			++result[i1 % 4][pixels.readUnsignedByte()];
		}
		return result;
	}
	,hitTest: function(firstPoint,firstAlphaThreshold,secondObject,secondBitmapDataPoint,secondAlphaThreshold) {
		if(secondAlphaThreshold == null) secondAlphaThreshold = 1;
		if(!this.__isValid) return false;
		openfl.Lib.notImplemented("BitmapData.hitTest");
		return false;
	}
	,lock: function() {
	}
	,merge: function(sourceBitmapData,sourceRect,destPoint,redMultiplier,greenMultiplier,blueMultiplier,alphaMultiplier) {
		if(!this.__isValid || sourceBitmapData == null || !sourceBitmapData.__isValid || sourceRect == null || destPoint == null) return;
		this.__image.merge(sourceBitmapData.__image,sourceRect.__toLimeRectangle(),destPoint.__toLimeVector2(),redMultiplier,greenMultiplier,blueMultiplier,alphaMultiplier);
	}
	,noise: function(randomSeed,low,high,channelOptions,grayScale) {
		if(grayScale == null) grayScale = false;
		if(channelOptions == null) channelOptions = 7;
		if(high == null) high = 255;
		if(low == null) low = 0;
		if(!this.__isValid) return;
		openfl.Lib.notImplemented("BitmapData.noise");
	}
	,paletteMap: function(sourceBitmapData,sourceRect,destPoint,redArray,greenArray,blueArray,alphaArray) {
		var sw = sourceRect.width | 0;
		var sh = sourceRect.height | 0;
		var pixels = this.getPixels(sourceRect);
		pixels.position = 0;
		var pixelValue;
		var r;
		var g;
		var b;
		var a;
		var color;
		var c1;
		var c2;
		var c3;
		var c4;
		var _g1 = 0;
		var _g = sh * sw;
		while(_g1 < _g) {
			var i = _g1++;
			pixelValue = pixels.readUnsignedInt();
			if(alphaArray == null) c1 = pixelValue & -16777216; else c1 = alphaArray[pixelValue >> 24 & 255];
			if(redArray == null) c2 = pixelValue & 16711680; else c2 = redArray[pixelValue >> 16 & 255];
			if(greenArray == null) c3 = pixelValue & 65280; else c3 = greenArray[pixelValue >> 8 & 255];
			if(blueArray == null) c4 = pixelValue & 255; else c4 = blueArray[pixelValue & 255];
			a = (c1 >> 24 & 255) + (c2 >> 24 & 255) + (c3 >> 24 & 255) + (c4 >> 24 & 255);
			if(a > 255) a == 255;
			r = (c1 >> 16 & 255) + (c2 >> 16 & 255) + (c3 >> 16 & 255) + (c4 >> 16 & 255);
			if(r > 255) r == 255;
			g = (c1 >> 8 & 255) + (c2 >> 8 & 255) + (c3 >> 8 & 255) + (c4 >> 8 & 255);
			if(g > 255) g == 255;
			b = (c1 & 255) + (c2 & 255) + (c3 & 255) + (c4 & 255);
			if(b > 255) b == 255;
			color = a << 24 | r << 16 | g << 8 | b;
			pixels.position = i * 4;
			pixels.writeUnsignedInt(color);
		}
		pixels.position = 0;
		var destRect = new openfl.geom.Rectangle(destPoint.x,destPoint.y,sw,sh);
		this.setPixels(destRect,pixels);
	}
	,perlinNoise: function(baseX,baseY,numOctaves,randomSeed,stitch,fractalNoise,channelOptions,grayScale,offsets) {
		if(grayScale == null) grayScale = false;
		if(channelOptions == null) channelOptions = 7;
		openfl.Lib.notImplemented("BitmapData.perlinNoise");
	}
	,scroll: function(x,y) {
		openfl.Lib.notImplemented("BitmapData.scroll");
	}
	,setPixel: function(x,y,color) {
		if(!this.__isValid) return;
		this.__image.setPixel(x,y,color);
	}
	,setPixel32: function(x,y,color) {
		if(!this.__isValid) return;
		this.__image.setPixel32(x,y,color);
	}
	,setPixels: function(rect,byteArray) {
		if(!this.__isValid || rect == null) return;
		this.__image.setPixels(rect.__toLimeRectangle(),byteArray);
	}
	,setVector: function(rect,inputVector) {
		var byteArray = new lime.utils.ByteArray();
		byteArray.set_length(inputVector.length * 4);
		var _g = 0;
		while(_g < inputVector.length) {
			var color = inputVector.data[_g];
			++_g;
			byteArray.writeUnsignedInt(color);
		}
		byteArray.position = 0;
		this.setPixels(rect,byteArray);
	}
	,threshold: function(sourceBitmapData,sourceRect,destPoint,operation,threshold,color,mask,copySource) {
		if(copySource == null) copySource = false;
		if(mask == null) mask = -1;
		if(color == null) color = 0;
		if(sourceBitmapData == this && sourceRect.equals(this.rect) && destPoint.x == 0 && destPoint.y == 0) {
			var hits = 0;
			threshold = (threshold & 255) << 24 | (threshold >> 8 & 255) << 16 | (threshold >> 16 & 255) << 8 | threshold >> 24 & 255;
			color = (color & 255) << 24 | (color >> 8 & 255) << 16 | (color >> 16 & 255) << 8 | color >> 24 & 255;
			var memory = new lime.utils.ByteArray();
			memory.set_length(this.width * this.height * 4);
			memory = this.getPixels(this.rect);
			memory.position = 0;
			openfl.Memory.select(memory);
			var thresholdMask = threshold & mask;
			var width_yy;
			var position;
			var pixelMask;
			var pixelValue;
			var i;
			var test;
			var _g1 = 0;
			var _g = this.height;
			while(_g1 < _g) {
				var yy = _g1++;
				width_yy = this.width * yy;
				var _g3 = 0;
				var _g2 = this.width;
				while(_g3 < _g2) {
					var xx = _g3++;
					position = (width_yy + xx) * 4;
					pixelValue = openfl.Memory._setPositionTemporarily(position,function() {
						return openfl.Memory.gcRef.readInt();
					});
					pixelMask = pixelValue & mask;
					i = openfl.display.BitmapData.__ucompare(pixelMask,thresholdMask);
					test = false;
					if(operation == "==") test = i == 0; else if(operation == "<") test = i == -1; else if(operation == ">") test = i == 1; else if(operation == "!=") test = i != 0; else if(operation == "<=") test = i == 0 || i == -1; else if(operation == ">=") test = i == 0 || i == 1;
					if(test) {
						openfl.Memory.setI32(position,color);
						hits++;
					}
				}
			}
			memory.position = 0;
			this.setPixels(this.rect,memory);
			openfl.Memory.select(null);
			return hits;
		} else {
			var sx = sourceRect.x | 0;
			var sy = sourceRect.y | 0;
			var sw = sourceBitmapData.width | 0;
			var sh = sourceBitmapData.height | 0;
			var dx = destPoint.x | 0;
			var dy = destPoint.y | 0;
			var bw = this.width - sw - dx;
			var bh = this.height - sh - dy;
			var dw;
			if(bw < 0) dw = sw + (this.width - sw - dx); else dw = sw;
			var dh;
			if(bw < 0) dh = sh + (this.height - sh - dy); else dh = sh;
			var hits1 = 0;
			threshold = (threshold & 255) << 24 | (threshold >> 8 & 255) << 16 | (threshold >> 16 & 255) << 8 | threshold >> 24 & 255;
			color = (color & 255) << 24 | (color >> 8 & 255) << 16 | (color >> 16 & 255) << 8 | color >> 24 & 255;
			var canvasMemory = sw * sh * 4;
			var sourceMemory = 0;
			if(copySource) sourceMemory = sw * sh * 4;
			var totalMemory = canvasMemory + sourceMemory;
			var memory1 = new lime.utils.ByteArray();
			if(memory1.allocated < totalMemory) memory1.___resizeBuffer(memory1.allocated = Std["int"](Math.max(totalMemory,memory1.allocated * 2))); else if(memory1.allocated > totalMemory * 2) memory1.___resizeBuffer(memory1.allocated = totalMemory);
			memory1.length = totalMemory;
			totalMemory;
			memory1.position = 0;
			var bitmapData = sourceBitmapData.clone();
			var pixels = bitmapData.getPixels(sourceRect);
			memory1.writeBytes(pixels);
			memory1.position = canvasMemory;
			if(copySource) memory1.writeBytes(pixels);
			memory1.position = 0;
			openfl.Memory.select(memory1);
			var thresholdMask1 = threshold & mask;
			var position1;
			var pixelMask1;
			var pixelValue1;
			var i1;
			var test1;
			var _g4 = 0;
			while(_g4 < dh) {
				var yy1 = _g4++;
				var _g11 = 0;
				while(_g11 < dw) {
					var xx1 = _g11++;
					position1 = (xx1 + sx + (yy1 + sy) * sw) * 4;
					pixelValue1 = openfl.Memory._setPositionTemporarily(position1,function() {
						return openfl.Memory.gcRef.readInt();
					});
					pixelMask1 = pixelValue1 & mask;
					i1 = openfl.display.BitmapData.__ucompare(pixelMask1,thresholdMask1);
					test1 = false;
					if(operation == "==") test1 = i1 == 0; else if(operation == "<") test1 = i1 == -1; else if(operation == ">") test1 = i1 == 1; else if(operation == "!=") test1 = i1 != 0; else if(operation == "<=") test1 = i1 == 0 || i1 == -1; else if(operation == ">=") test1 = i1 == 0 || i1 == 1;
					if(test1) {
						openfl.Memory.setI32(position1,color);
						hits1++;
					} else if(copySource) openfl.Memory.setI32(position1,openfl.Memory._setPositionTemporarily(canvasMemory + position1,function() {
						return openfl.Memory.gcRef.readInt();
					}));
				}
			}
			memory1.position = 0;
			bitmapData.setPixels(sourceRect,memory1);
			this.copyPixels(bitmapData,bitmapData.rect,destPoint);
			openfl.Memory.select(null);
			return hits1;
		}
	}
	,unlock: function(changeRect) {
	}
	,__createUVs: function(verticalFlip) {
		if(verticalFlip == null) verticalFlip = false;
		if(this.__uvData == null) this.__uvData = new openfl.display.TextureUvs();
		if(verticalFlip) {
			this.__uvData.x0 = 0;
			this.__uvData.y0 = 1;
			this.__uvData.x1 = 1;
			this.__uvData.y1 = 1;
			this.__uvData.x2 = 1;
			this.__uvData.y2 = 0;
			this.__uvData.x3 = 0;
			this.__uvData.y3 = 0;
		} else {
			this.__uvData.x0 = 0;
			this.__uvData.y0 = 0;
			this.__uvData.x1 = 1;
			this.__uvData.y1 = 0;
			this.__uvData.x2 = 1;
			this.__uvData.y2 = 1;
			this.__uvData.x3 = 0;
			this.__uvData.y3 = 1;
		}
	}
	,__fromBase64: function(base64,type,onload) {
		var _g = this;
		lime.graphics.Image.fromBase64(base64,type,function(image) {
			_g.__fromImage(image);
			if(onload != null) onload(_g);
		});
	}
	,__fromBytes: function(bytes,rawAlpha,onload) {
		var _g = this;
		lime.graphics.Image.fromBytes(bytes,function(image) {
			_g.__fromImage(image);
			if(rawAlpha != null) {
				lime.graphics.utils.ImageCanvasUtil.convertToCanvas(_g.__image);
				lime.graphics.utils.ImageCanvasUtil.createImageData(_g.__image);
				var data = _g.__image.buffer.data;
				var _g2 = 0;
				var _g1 = rawAlpha.length;
				while(_g2 < _g1) {
					var i = _g2++;
					data[i * 4 + 3] = rawAlpha.readUnsignedByte();
				}
				_g.__image.dirty = true;
			}
			if(onload != null) onload(_g);
		});
	}
	,__fromFile: function(path,onload,onerror) {
		var _g = this;
		lime.graphics.Image.fromFile(path,function(image) {
			_g.__fromImage(image);
			if(onload != null) onload(_g);
		},onerror);
	}
	,__fromImage: function(image) {
		this.__image = image;
		this.width = image.width;
		this.height = image.height;
		this.rect = new openfl.geom.Rectangle(0,0,image.width,image.height);
		this.__isValid = true;
	}
	,__renderCanvas: function(renderSession) {
		if(!this.__isValid) return;
		lime.graphics.utils.ImageCanvasUtil.sync(this.__image);
		var context = renderSession.context;
		if(this.__worldTransform == null) this.__worldTransform = new openfl.geom.Matrix();
		context.globalAlpha = 1;
		var transform = this.__worldTransform;
		if(renderSession.roundPixels) context.setTransform(transform.a,transform.b,transform.c,transform.d,transform.tx | 0,transform.ty | 0); else context.setTransform(transform.a,transform.b,transform.c,transform.d,transform.tx,transform.ty);
		context.drawImage(this.__image.buffer.get_src(),0,0);
	}
	,__renderGL: function(renderSession) {
		if(this.__worldTransform == null) this.__worldTransform = new openfl.geom.Matrix();
		if(this.__worldColorTransform == null) this.__worldColorTransform = new openfl.geom.ColorTransform();
		renderSession.spriteBatch.renderBitmapData(this,true,this.__worldTransform,this.__worldColorTransform);
	}
	,__renderMask: function(renderSession) {
	}
	,__updateMask: function(maskGraphics) {
	}
	,__sync: function() {
		lime.graphics.utils.ImageCanvasUtil.sync(this.__image);
	}
	,__updateChildren: function(transformOnly) {
	}
	,__class__: openfl.display.BitmapData
};
openfl.display.TextureUvs = function() {
	this.y3 = 0;
	this.y2 = 0;
	this.y1 = 0;
	this.y0 = 0;
	this.x3 = 0;
	this.x2 = 0;
	this.x1 = 0;
	this.x0 = 0;
};
$hxClasses["openfl.display.TextureUvs"] = openfl.display.TextureUvs;
openfl.display.TextureUvs.__name__ = ["openfl","display","TextureUvs"];
openfl.display.TextureUvs.prototype = {
	x0: null
	,x1: null
	,x2: null
	,x3: null
	,y0: null
	,y1: null
	,y2: null
	,y3: null
	,__class__: openfl.display.TextureUvs
};
openfl.display.BitmapDataChannel = function() { };
$hxClasses["openfl.display.BitmapDataChannel"] = openfl.display.BitmapDataChannel;
openfl.display.BitmapDataChannel.__name__ = ["openfl","display","BitmapDataChannel"];
openfl.display.BlendMode = $hxClasses["openfl.display.BlendMode"] = { __ename__ : ["openfl","display","BlendMode"], __constructs__ : ["ADD","ALPHA","DARKEN","DIFFERENCE","ERASE","HARDLIGHT","INVERT","LAYER","LIGHTEN","MULTIPLY","NORMAL","OVERLAY","SCREEN","SUBTRACT"] };
openfl.display.BlendMode.ADD = ["ADD",0];
openfl.display.BlendMode.ADD.toString = $estr;
openfl.display.BlendMode.ADD.__enum__ = openfl.display.BlendMode;
openfl.display.BlendMode.ALPHA = ["ALPHA",1];
openfl.display.BlendMode.ALPHA.toString = $estr;
openfl.display.BlendMode.ALPHA.__enum__ = openfl.display.BlendMode;
openfl.display.BlendMode.DARKEN = ["DARKEN",2];
openfl.display.BlendMode.DARKEN.toString = $estr;
openfl.display.BlendMode.DARKEN.__enum__ = openfl.display.BlendMode;
openfl.display.BlendMode.DIFFERENCE = ["DIFFERENCE",3];
openfl.display.BlendMode.DIFFERENCE.toString = $estr;
openfl.display.BlendMode.DIFFERENCE.__enum__ = openfl.display.BlendMode;
openfl.display.BlendMode.ERASE = ["ERASE",4];
openfl.display.BlendMode.ERASE.toString = $estr;
openfl.display.BlendMode.ERASE.__enum__ = openfl.display.BlendMode;
openfl.display.BlendMode.HARDLIGHT = ["HARDLIGHT",5];
openfl.display.BlendMode.HARDLIGHT.toString = $estr;
openfl.display.BlendMode.HARDLIGHT.__enum__ = openfl.display.BlendMode;
openfl.display.BlendMode.INVERT = ["INVERT",6];
openfl.display.BlendMode.INVERT.toString = $estr;
openfl.display.BlendMode.INVERT.__enum__ = openfl.display.BlendMode;
openfl.display.BlendMode.LAYER = ["LAYER",7];
openfl.display.BlendMode.LAYER.toString = $estr;
openfl.display.BlendMode.LAYER.__enum__ = openfl.display.BlendMode;
openfl.display.BlendMode.LIGHTEN = ["LIGHTEN",8];
openfl.display.BlendMode.LIGHTEN.toString = $estr;
openfl.display.BlendMode.LIGHTEN.__enum__ = openfl.display.BlendMode;
openfl.display.BlendMode.MULTIPLY = ["MULTIPLY",9];
openfl.display.BlendMode.MULTIPLY.toString = $estr;
openfl.display.BlendMode.MULTIPLY.__enum__ = openfl.display.BlendMode;
openfl.display.BlendMode.NORMAL = ["NORMAL",10];
openfl.display.BlendMode.NORMAL.toString = $estr;
openfl.display.BlendMode.NORMAL.__enum__ = openfl.display.BlendMode;
openfl.display.BlendMode.OVERLAY = ["OVERLAY",11];
openfl.display.BlendMode.OVERLAY.toString = $estr;
openfl.display.BlendMode.OVERLAY.__enum__ = openfl.display.BlendMode;
openfl.display.BlendMode.SCREEN = ["SCREEN",12];
openfl.display.BlendMode.SCREEN.toString = $estr;
openfl.display.BlendMode.SCREEN.__enum__ = openfl.display.BlendMode;
openfl.display.BlendMode.SUBTRACT = ["SUBTRACT",13];
openfl.display.BlendMode.SUBTRACT.toString = $estr;
openfl.display.BlendMode.SUBTRACT.__enum__ = openfl.display.BlendMode;
openfl.display.BlendMode.__empty_constructs__ = [openfl.display.BlendMode.ADD,openfl.display.BlendMode.ALPHA,openfl.display.BlendMode.DARKEN,openfl.display.BlendMode.DIFFERENCE,openfl.display.BlendMode.ERASE,openfl.display.BlendMode.HARDLIGHT,openfl.display.BlendMode.INVERT,openfl.display.BlendMode.LAYER,openfl.display.BlendMode.LIGHTEN,openfl.display.BlendMode.MULTIPLY,openfl.display.BlendMode.NORMAL,openfl.display.BlendMode.OVERLAY,openfl.display.BlendMode.SCREEN,openfl.display.BlendMode.SUBTRACT];
openfl.display.CapsStyle = $hxClasses["openfl.display.CapsStyle"] = { __ename__ : ["openfl","display","CapsStyle"], __constructs__ : ["NONE","ROUND","SQUARE"] };
openfl.display.CapsStyle.NONE = ["NONE",0];
openfl.display.CapsStyle.NONE.toString = $estr;
openfl.display.CapsStyle.NONE.__enum__ = openfl.display.CapsStyle;
openfl.display.CapsStyle.ROUND = ["ROUND",1];
openfl.display.CapsStyle.ROUND.toString = $estr;
openfl.display.CapsStyle.ROUND.__enum__ = openfl.display.CapsStyle;
openfl.display.CapsStyle.SQUARE = ["SQUARE",2];
openfl.display.CapsStyle.SQUARE.toString = $estr;
openfl.display.CapsStyle.SQUARE.__enum__ = openfl.display.CapsStyle;
openfl.display.CapsStyle.__empty_constructs__ = [openfl.display.CapsStyle.NONE,openfl.display.CapsStyle.ROUND,openfl.display.CapsStyle.SQUARE];
openfl.display.DirectRenderer = function(type) {
	if(type == null) type = "DirectRenderer";
	openfl.display.DisplayObject.call(this);
};
$hxClasses["openfl.display.DirectRenderer"] = openfl.display.DirectRenderer;
openfl.display.DirectRenderer.__name__ = ["openfl","display","DirectRenderer"];
openfl.display.DirectRenderer.__super__ = openfl.display.DisplayObject;
openfl.display.DirectRenderer.prototype = $extend(openfl.display.DisplayObject.prototype,{
	__render: null
	,get_render: function() {
		return this.__render;
	}
	,set_render: function(value) {
		return this.__render = value;
	}
	,__class__: openfl.display.DirectRenderer
	,__properties__: $extend(openfl.display.DisplayObject.prototype.__properties__,{set_render:"set_render",get_render:"get_render"})
});
openfl.display.FrameLabel = function(name,frame) {
	openfl.events.EventDispatcher.call(this);
	this.__name = name;
	this.__frame = frame;
};
$hxClasses["openfl.display.FrameLabel"] = openfl.display.FrameLabel;
openfl.display.FrameLabel.__name__ = ["openfl","display","FrameLabel"];
openfl.display.FrameLabel.__super__ = openfl.events.EventDispatcher;
openfl.display.FrameLabel.prototype = $extend(openfl.events.EventDispatcher.prototype,{
	frame: null
	,name: null
	,__frame: null
	,__name: null
	,get_frame: function() {
		return this.__frame;
	}
	,get_name: function() {
		return this.__name;
	}
	,__class__: openfl.display.FrameLabel
	,__properties__: {get_name:"get_name",get_frame:"get_frame"}
});
openfl.display.GradientType = $hxClasses["openfl.display.GradientType"] = { __ename__ : ["openfl","display","GradientType"], __constructs__ : ["RADIAL","LINEAR"] };
openfl.display.GradientType.RADIAL = ["RADIAL",0];
openfl.display.GradientType.RADIAL.toString = $estr;
openfl.display.GradientType.RADIAL.__enum__ = openfl.display.GradientType;
openfl.display.GradientType.LINEAR = ["LINEAR",1];
openfl.display.GradientType.LINEAR.toString = $estr;
openfl.display.GradientType.LINEAR.__enum__ = openfl.display.GradientType;
openfl.display.GradientType.__empty_constructs__ = [openfl.display.GradientType.RADIAL,openfl.display.GradientType.LINEAR];
openfl.display.Graphics = function() {
	this.__visible = true;
	this.__glStack = [];
	this.__dirty = true;
	this.__commands = [];
	this.__commands = new Array();
	this.__halfStrokeWidth = 0;
	this.__positionX = 0;
	this.__positionY = 0;
	this.moveTo(0,0);
};
$hxClasses["openfl.display.Graphics"] = openfl.display.Graphics;
openfl.display.Graphics.__name__ = ["openfl","display","Graphics"];
openfl.display.Graphics.prototype = {
	__bounds: null
	,__commands: null
	,__dirty: null
	,__glStack: null
	,__drawPaths: null
	,__halfStrokeWidth: null
	,__positionX: null
	,__positionY: null
	,__transformDirty: null
	,__visible: null
	,__cachedTexture: null
	,__owner: null
	,__canvas: null
	,__context: null
	,beginBitmapFill: function(bitmap,matrix,repeat,smooth) {
		if(smooth == null) smooth = false;
		if(repeat == null) repeat = true;
		this.__commands.push(openfl.display.DrawCommand.BeginBitmapFill(bitmap,matrix != null?new openfl.geom.Matrix(matrix.a,matrix.b,matrix.c,matrix.d,matrix.tx,matrix.ty):null,repeat,smooth));
		this.__visible = true;
	}
	,beginFill: function(color,alpha) {
		if(alpha == null) alpha = 1;
		if(color == null) color = 0;
		this.__commands.push(openfl.display.DrawCommand.BeginFill(color & 16777215,alpha));
		if(alpha > 0) this.__visible = true;
	}
	,beginGradientFill: function(type,colors,alphas,ratios,matrix,spreadMethod,interpolationMethod,focalPointRatio) {
		openfl.Lib.notImplemented("Graphics.beginGradientFill");
	}
	,clear: function() {
		this.__commands = new Array();
		this.__halfStrokeWidth = 0;
		if(this.__bounds != null) {
			this.set___dirty(true);
			this.__transformDirty = true;
			this.__bounds = null;
		}
		this.__visible = false;
		this.moveTo(0,0);
	}
	,copyFrom: function(sourceGraphics) {
		this.__bounds = sourceGraphics.__bounds.clone();
		this.__commands = sourceGraphics.__commands.slice();
		this.set___dirty(true);
		this.__halfStrokeWidth = sourceGraphics.__halfStrokeWidth;
		this.__positionX = sourceGraphics.__positionX;
		this.__positionY = sourceGraphics.__positionY;
		this.__transformDirty = true;
		this.__visible = sourceGraphics.__visible;
	}
	,cubicCurveTo: function(controlX1,controlY1,controlX2,controlY2,anchorX,anchorY) {
		this.__inflateBounds(this.__positionX - this.__halfStrokeWidth,this.__positionY - this.__halfStrokeWidth);
		this.__inflateBounds(this.__positionX + this.__halfStrokeWidth,this.__positionY + this.__halfStrokeWidth);
		this.__inflateBounds(controlX1,controlY1);
		this.__inflateBounds(controlX2,controlY2);
		this.__positionX = anchorX;
		this.__positionY = anchorY;
		this.__inflateBounds(this.__positionX - this.__halfStrokeWidth,this.__positionY - this.__halfStrokeWidth);
		this.__inflateBounds(this.__positionX + this.__halfStrokeWidth,this.__positionY + this.__halfStrokeWidth);
		this.__commands.push(openfl.display.DrawCommand.CubicCurveTo(controlX1,controlY1,controlX2,controlY2,anchorX,anchorY));
		this.set___dirty(true);
	}
	,curveTo: function(controlX,controlY,anchorX,anchorY) {
		this.__inflateBounds(this.__positionX - this.__halfStrokeWidth,this.__positionY - this.__halfStrokeWidth);
		this.__inflateBounds(this.__positionX + this.__halfStrokeWidth,this.__positionY + this.__halfStrokeWidth);
		this.__inflateBounds(controlX,controlY);
		this.__positionX = anchorX;
		this.__positionY = anchorY;
		this.__inflateBounds(this.__positionX - this.__halfStrokeWidth,this.__positionY - this.__halfStrokeWidth);
		this.__inflateBounds(this.__positionX + this.__halfStrokeWidth,this.__positionY + this.__halfStrokeWidth);
		this.__commands.push(openfl.display.DrawCommand.CurveTo(controlX,controlY,anchorX,anchorY));
		this.set___dirty(true);
	}
	,drawCircle: function(x,y,radius) {
		if(radius <= 0) return;
		this.__inflateBounds(x - radius - this.__halfStrokeWidth,y - radius - this.__halfStrokeWidth);
		this.__inflateBounds(x + radius + this.__halfStrokeWidth,y + radius + this.__halfStrokeWidth);
		this.__commands.push(openfl.display.DrawCommand.DrawCircle(x,y,radius));
		this.set___dirty(true);
	}
	,drawEllipse: function(x,y,width,height) {
		if(width <= 0 || height <= 0) return;
		this.__inflateBounds(x - this.__halfStrokeWidth,y - this.__halfStrokeWidth);
		this.__inflateBounds(x + width + this.__halfStrokeWidth,y + height + this.__halfStrokeWidth);
		this.__commands.push(openfl.display.DrawCommand.DrawEllipse(x,y,width,height));
		this.set___dirty(true);
	}
	,drawGraphicsData: function(graphicsData) {
		openfl.Lib.notImplemented("Graphics.drawGraphicsData");
	}
	,drawPath: function(commands,data,winding) {
		var dataIndex = 0;
		var _g = 0;
		while(_g < commands.length) {
			var command = commands.data[_g];
			++_g;
			switch(command) {
			case 1:
				this.moveTo(data.data[dataIndex],data.data[dataIndex + 1]);
				dataIndex += 2;
				break;
			case 2:
				this.lineTo(data.data[dataIndex],data.data[dataIndex + 1]);
				dataIndex += 2;
				break;
			case 3:
				this.curveTo(data.data[dataIndex],data.data[dataIndex + 1],data.data[dataIndex + 2],data.data[dataIndex + 3]);
				dataIndex += 4;
				break;
			case 6:
				this.cubicCurveTo(data.data[dataIndex],data.data[dataIndex + 1],data.data[dataIndex + 2],data.data[dataIndex + 3],data.data[dataIndex + 4],data.data[dataIndex + 5]);
				dataIndex += 6;
				break;
			default:
			}
		}
	}
	,drawRect: function(x,y,width,height) {
		if(width <= 0 || height <= 0) return;
		this.__inflateBounds(x - this.__halfStrokeWidth,y - this.__halfStrokeWidth);
		this.__inflateBounds(x + width + this.__halfStrokeWidth,y + height + this.__halfStrokeWidth);
		this.__commands.push(openfl.display.DrawCommand.DrawRect(x,y,width,height));
		this.set___dirty(true);
	}
	,drawRoundRect: function(x,y,width,height,rx,ry) {
		if(ry == null) ry = -1;
		if(width <= 0 || height <= 0) return;
		this.__inflateBounds(x - this.__halfStrokeWidth,y - this.__halfStrokeWidth);
		this.__inflateBounds(x + width + this.__halfStrokeWidth,y + height + this.__halfStrokeWidth);
		this.__commands.push(openfl.display.DrawCommand.DrawRoundRect(x,y,width,height,rx,ry));
		this.set___dirty(true);
	}
	,drawRoundRectComplex: function(x,y,width,height,topLeftRadius,topRightRadius,bottomLeftRadius,bottomRightRadius) {
		openfl.Lib.notImplemented("Graphics.drawRoundRectComplex");
	}
	,drawTiles: function(sheet,tileData,smooth,flags,count) {
		if(count == null) count = -1;
		if(flags == null) flags = 0;
		if(smooth == null) smooth = false;
		this.__inflateBounds(0,0);
		this.__inflateBounds(openfl.Lib.current.stage.stageWidth,openfl.Lib.current.stage.stageHeight);
		this.__commands.push(openfl.display.DrawCommand.DrawTiles(sheet,tileData,smooth,flags,count));
		this.set___dirty(true);
		this.__visible = true;
	}
	,drawTriangles: function(vertices,indices,uvtData,culling,colors,blendMode) {
		if(blendMode == null) blendMode = 0;
		var vlen = vertices.length / 2 | 0;
		if(culling == null) culling = openfl.display.TriangleCulling.NONE;
		if(indices == null) {
			if(vlen % 3 != 0) throw new openfl.errors.ArgumentError("Not enough vertices to close a triangle.");
			var this1;
			this1 = new openfl.VectorData();
			var this2;
			this2 = new Array(0);
			this1.data = this2;
			this1.length = 0;
			this1.fixed = false;
			indices = this1;
			var _g = 0;
			while(_g < vlen) {
				var i = _g++;
				if(!indices.fixed) {
					indices.length++;
					if(indices.data.length < indices.length) {
						var data;
						var this3;
						this3 = new Array(indices.data.length + 10);
						data = this3;
						haxe.ds._Vector.Vector_Impl_.blit(indices.data,0,data,0,indices.data.length);
						indices.data = data;
					}
					indices.data[indices.length - 1] = i;
				}
				indices.length;
			}
		}
		this.__inflateBounds(0,0);
		var tmpx = Math.NEGATIVE_INFINITY;
		var tmpy = Math.NEGATIVE_INFINITY;
		var maxX = Math.NEGATIVE_INFINITY;
		var maxY = Math.NEGATIVE_INFINITY;
		var _g1 = 0;
		while(_g1 < vlen) {
			var i1 = _g1++;
			tmpx = vertices.data[i1 * 2];
			tmpy = vertices.data[i1 * 2 + 1];
			if(maxX < tmpx) maxX = tmpx;
			if(maxY < tmpy) maxY = tmpy;
		}
		this.__inflateBounds(maxX,maxY);
		this.__commands.push(openfl.display.DrawCommand.DrawTriangles(vertices,indices,uvtData,culling,colors,blendMode));
		this.set___dirty(true);
		this.__visible = true;
	}
	,endFill: function() {
		this.__commands.push(openfl.display.DrawCommand.EndFill);
	}
	,lineBitmapStyle: function(bitmap,matrix,repeat,smooth) {
		if(smooth == null) smooth = false;
		if(repeat == null) repeat = true;
		openfl.Lib.notImplemented("Graphics.lineBitmapStyle");
	}
	,lineGradientStyle: function(type,colors,alphas,ratios,matrix,spreadMethod,interpolationMethod,focalPointRatio) {
		openfl.Lib.notImplemented("Graphics.lineGradientStyle");
	}
	,lineStyle: function(thickness,color,alpha,pixelHinting,scaleMode,caps,joints,miterLimit) {
		if(thickness != null) this.__halfStrokeWidth = thickness / 2; else this.__halfStrokeWidth = 0;
		this.__commands.push(openfl.display.DrawCommand.LineStyle(thickness,color,alpha,pixelHinting,scaleMode,caps,joints,miterLimit));
		if(thickness != null) this.__visible = true;
	}
	,lineTo: function(x,y) {
		this.__inflateBounds(this.__positionX - this.__halfStrokeWidth,this.__positionY - this.__halfStrokeWidth);
		this.__inflateBounds(this.__positionX + this.__halfStrokeWidth,this.__positionY + this.__halfStrokeWidth);
		this.__positionX = x;
		this.__positionY = y;
		this.__inflateBounds(this.__positionX - this.__halfStrokeWidth,this.__positionY - this.__halfStrokeWidth);
		this.__inflateBounds(this.__positionX + this.__halfStrokeWidth,this.__positionY + this.__halfStrokeWidth);
		this.__commands.push(openfl.display.DrawCommand.LineTo(x,y));
		this.set___dirty(true);
	}
	,moveTo: function(x,y) {
		this.__positionX = x;
		this.__positionY = y;
		this.__commands.push(openfl.display.DrawCommand.MoveTo(x,y));
	}
	,__getBounds: function(rect,matrix) {
		if(this.__bounds == null) return;
		var bounds = this.__bounds.clone().transform(matrix);
		rect.__expand(bounds.x,bounds.y,bounds.width,bounds.height);
	}
	,__hitTest: function(x,y,shapeFlag,matrix) {
		if(this.__bounds == null) return false;
		var bounds = this.__bounds.clone().transform(matrix);
		return x > bounds.x && y > bounds.y && x <= bounds.get_right() && y <= bounds.get_bottom();
	}
	,__inflateBounds: function(x,y) {
		if(this.__bounds == null) {
			this.__bounds = new openfl.geom.Rectangle(x,y,0,0);
			this.__transformDirty = true;
			return;
		}
		if(x < this.__bounds.x) {
			this.__bounds.width += this.__bounds.x - x;
			this.__bounds.x = x;
			this.__transformDirty = true;
		}
		if(y < this.__bounds.y) {
			this.__bounds.height += this.__bounds.y - y;
			this.__bounds.y = y;
			this.__transformDirty = true;
		}
		if(x > this.__bounds.x + this.__bounds.width) this.__bounds.width = x - this.__bounds.x;
		if(y > this.__bounds.y + this.__bounds.height) this.__bounds.height = y - this.__bounds.y;
	}
	,set___dirty: function(value) {
		if(value && this.__owner != null) this.__owner.__setRenderDirty();
		return this.__dirty = value;
	}
	,__class__: openfl.display.Graphics
	,__properties__: {set___dirty:"set___dirty"}
};
openfl.display.DrawCommand = $hxClasses["openfl.display.DrawCommand"] = { __ename__ : ["openfl","display","DrawCommand"], __constructs__ : ["BeginBitmapFill","BeginFill","CubicCurveTo","CurveTo","DrawCircle","DrawEllipse","DrawRect","DrawRoundRect","DrawTiles","DrawTriangles","EndFill","LineStyle","LineTo","MoveTo","DrawPathC","OverrideMatrix"] };
openfl.display.DrawCommand.BeginBitmapFill = function(bitmap,matrix,repeat,smooth) { var $x = ["BeginBitmapFill",0,bitmap,matrix,repeat,smooth]; $x.__enum__ = openfl.display.DrawCommand; $x.toString = $estr; return $x; };
openfl.display.DrawCommand.BeginFill = function(color,alpha) { var $x = ["BeginFill",1,color,alpha]; $x.__enum__ = openfl.display.DrawCommand; $x.toString = $estr; return $x; };
openfl.display.DrawCommand.CubicCurveTo = function(controlX1,controlY1,controlX2,controlY2,anchorX,anchorY) { var $x = ["CubicCurveTo",2,controlX1,controlY1,controlX2,controlY2,anchorX,anchorY]; $x.__enum__ = openfl.display.DrawCommand; $x.toString = $estr; return $x; };
openfl.display.DrawCommand.CurveTo = function(controlX,controlY,anchorX,anchorY) { var $x = ["CurveTo",3,controlX,controlY,anchorX,anchorY]; $x.__enum__ = openfl.display.DrawCommand; $x.toString = $estr; return $x; };
openfl.display.DrawCommand.DrawCircle = function(x,y,radius) { var $x = ["DrawCircle",4,x,y,radius]; $x.__enum__ = openfl.display.DrawCommand; $x.toString = $estr; return $x; };
openfl.display.DrawCommand.DrawEllipse = function(x,y,width,height) { var $x = ["DrawEllipse",5,x,y,width,height]; $x.__enum__ = openfl.display.DrawCommand; $x.toString = $estr; return $x; };
openfl.display.DrawCommand.DrawRect = function(x,y,width,height) { var $x = ["DrawRect",6,x,y,width,height]; $x.__enum__ = openfl.display.DrawCommand; $x.toString = $estr; return $x; };
openfl.display.DrawCommand.DrawRoundRect = function(x,y,width,height,rx,ry) { var $x = ["DrawRoundRect",7,x,y,width,height,rx,ry]; $x.__enum__ = openfl.display.DrawCommand; $x.toString = $estr; return $x; };
openfl.display.DrawCommand.DrawTiles = function(sheet,tileData,smooth,flags,count) { var $x = ["DrawTiles",8,sheet,tileData,smooth,flags,count]; $x.__enum__ = openfl.display.DrawCommand; $x.toString = $estr; return $x; };
openfl.display.DrawCommand.DrawTriangles = function(vertices,indices,uvtData,culling,colors,blendMode) { var $x = ["DrawTriangles",9,vertices,indices,uvtData,culling,colors,blendMode]; $x.__enum__ = openfl.display.DrawCommand; $x.toString = $estr; return $x; };
openfl.display.DrawCommand.EndFill = ["EndFill",10];
openfl.display.DrawCommand.EndFill.toString = $estr;
openfl.display.DrawCommand.EndFill.__enum__ = openfl.display.DrawCommand;
openfl.display.DrawCommand.LineStyle = function(thickness,color,alpha,pixelHinting,scaleMode,caps,joints,miterLimit) { var $x = ["LineStyle",11,thickness,color,alpha,pixelHinting,scaleMode,caps,joints,miterLimit]; $x.__enum__ = openfl.display.DrawCommand; $x.toString = $estr; return $x; };
openfl.display.DrawCommand.LineTo = function(x,y) { var $x = ["LineTo",12,x,y]; $x.__enum__ = openfl.display.DrawCommand; $x.toString = $estr; return $x; };
openfl.display.DrawCommand.MoveTo = function(x,y) { var $x = ["MoveTo",13,x,y]; $x.__enum__ = openfl.display.DrawCommand; $x.toString = $estr; return $x; };
openfl.display.DrawCommand.DrawPathC = function(commands,data,winding) { var $x = ["DrawPathC",14,commands,data,winding]; $x.__enum__ = openfl.display.DrawCommand; $x.toString = $estr; return $x; };
openfl.display.DrawCommand.OverrideMatrix = function(matrix) { var $x = ["OverrideMatrix",15,matrix]; $x.__enum__ = openfl.display.DrawCommand; $x.toString = $estr; return $x; };
openfl.display.DrawCommand.__empty_constructs__ = [openfl.display.DrawCommand.EndFill];
openfl.display.GraphicsPathCommand = function() { };
$hxClasses["openfl.display.GraphicsPathCommand"] = openfl.display.GraphicsPathCommand;
openfl.display.GraphicsPathCommand.__name__ = ["openfl","display","GraphicsPathCommand"];
openfl.display.GraphicsPathWinding = $hxClasses["openfl.display.GraphicsPathWinding"] = { __ename__ : ["openfl","display","GraphicsPathWinding"], __constructs__ : ["EVEN_ODD","NON_ZERO"] };
openfl.display.GraphicsPathWinding.EVEN_ODD = ["EVEN_ODD",0];
openfl.display.GraphicsPathWinding.EVEN_ODD.toString = $estr;
openfl.display.GraphicsPathWinding.EVEN_ODD.__enum__ = openfl.display.GraphicsPathWinding;
openfl.display.GraphicsPathWinding.NON_ZERO = ["NON_ZERO",1];
openfl.display.GraphicsPathWinding.NON_ZERO.toString = $estr;
openfl.display.GraphicsPathWinding.NON_ZERO.__enum__ = openfl.display.GraphicsPathWinding;
openfl.display.GraphicsPathWinding.__empty_constructs__ = [openfl.display.GraphicsPathWinding.EVEN_ODD,openfl.display.GraphicsPathWinding.NON_ZERO];
openfl.display.IGraphicsData = function() { };
$hxClasses["openfl.display.IGraphicsData"] = openfl.display.IGraphicsData;
openfl.display.IGraphicsData.__name__ = ["openfl","display","IGraphicsData"];
openfl.display.IGraphicsData.prototype = {
	__graphicsDataType: null
	,__class__: openfl.display.IGraphicsData
};
openfl.display.GraphicsDataType = $hxClasses["openfl.display.GraphicsDataType"] = { __ename__ : ["openfl","display","GraphicsDataType"], __constructs__ : ["STROKE","SOLID","GRADIENT","PATH","BITMAP","END"] };
openfl.display.GraphicsDataType.STROKE = ["STROKE",0];
openfl.display.GraphicsDataType.STROKE.toString = $estr;
openfl.display.GraphicsDataType.STROKE.__enum__ = openfl.display.GraphicsDataType;
openfl.display.GraphicsDataType.SOLID = ["SOLID",1];
openfl.display.GraphicsDataType.SOLID.toString = $estr;
openfl.display.GraphicsDataType.SOLID.__enum__ = openfl.display.GraphicsDataType;
openfl.display.GraphicsDataType.GRADIENT = ["GRADIENT",2];
openfl.display.GraphicsDataType.GRADIENT.toString = $estr;
openfl.display.GraphicsDataType.GRADIENT.__enum__ = openfl.display.GraphicsDataType;
openfl.display.GraphicsDataType.PATH = ["PATH",3];
openfl.display.GraphicsDataType.PATH.toString = $estr;
openfl.display.GraphicsDataType.PATH.__enum__ = openfl.display.GraphicsDataType;
openfl.display.GraphicsDataType.BITMAP = ["BITMAP",4];
openfl.display.GraphicsDataType.BITMAP.toString = $estr;
openfl.display.GraphicsDataType.BITMAP.__enum__ = openfl.display.GraphicsDataType;
openfl.display.GraphicsDataType.END = ["END",5];
openfl.display.GraphicsDataType.END.toString = $estr;
openfl.display.GraphicsDataType.END.__enum__ = openfl.display.GraphicsDataType;
openfl.display.GraphicsDataType.__empty_constructs__ = [openfl.display.GraphicsDataType.STROKE,openfl.display.GraphicsDataType.SOLID,openfl.display.GraphicsDataType.GRADIENT,openfl.display.GraphicsDataType.PATH,openfl.display.GraphicsDataType.BITMAP,openfl.display.GraphicsDataType.END];
openfl.display.InterpolationMethod = $hxClasses["openfl.display.InterpolationMethod"] = { __ename__ : ["openfl","display","InterpolationMethod"], __constructs__ : ["RGB","LINEAR_RGB"] };
openfl.display.InterpolationMethod.RGB = ["RGB",0];
openfl.display.InterpolationMethod.RGB.toString = $estr;
openfl.display.InterpolationMethod.RGB.__enum__ = openfl.display.InterpolationMethod;
openfl.display.InterpolationMethod.LINEAR_RGB = ["LINEAR_RGB",1];
openfl.display.InterpolationMethod.LINEAR_RGB.toString = $estr;
openfl.display.InterpolationMethod.LINEAR_RGB.__enum__ = openfl.display.InterpolationMethod;
openfl.display.InterpolationMethod.__empty_constructs__ = [openfl.display.InterpolationMethod.RGB,openfl.display.InterpolationMethod.LINEAR_RGB];
openfl.display.JPEGEncoderOptions = function(quality) {
	if(quality == null) quality = 80;
	this.quality = quality;
};
$hxClasses["openfl.display.JPEGEncoderOptions"] = openfl.display.JPEGEncoderOptions;
openfl.display.JPEGEncoderOptions.__name__ = ["openfl","display","JPEGEncoderOptions"];
openfl.display.JPEGEncoderOptions.prototype = {
	quality: null
	,__class__: openfl.display.JPEGEncoderOptions
};
openfl.display.JointStyle = $hxClasses["openfl.display.JointStyle"] = { __ename__ : ["openfl","display","JointStyle"], __constructs__ : ["MITER","ROUND","BEVEL"] };
openfl.display.JointStyle.MITER = ["MITER",0];
openfl.display.JointStyle.MITER.toString = $estr;
openfl.display.JointStyle.MITER.__enum__ = openfl.display.JointStyle;
openfl.display.JointStyle.ROUND = ["ROUND",1];
openfl.display.JointStyle.ROUND.toString = $estr;
openfl.display.JointStyle.ROUND.__enum__ = openfl.display.JointStyle;
openfl.display.JointStyle.BEVEL = ["BEVEL",2];
openfl.display.JointStyle.BEVEL.toString = $estr;
openfl.display.JointStyle.BEVEL.__enum__ = openfl.display.JointStyle;
openfl.display.JointStyle.__empty_constructs__ = [openfl.display.JointStyle.MITER,openfl.display.JointStyle.ROUND,openfl.display.JointStyle.BEVEL];
openfl.display.LineScaleMode = $hxClasses["openfl.display.LineScaleMode"] = { __ename__ : ["openfl","display","LineScaleMode"], __constructs__ : ["HORIZONTAL","NONE","NORMAL","VERTICAL"] };
openfl.display.LineScaleMode.HORIZONTAL = ["HORIZONTAL",0];
openfl.display.LineScaleMode.HORIZONTAL.toString = $estr;
openfl.display.LineScaleMode.HORIZONTAL.__enum__ = openfl.display.LineScaleMode;
openfl.display.LineScaleMode.NONE = ["NONE",1];
openfl.display.LineScaleMode.NONE.toString = $estr;
openfl.display.LineScaleMode.NONE.__enum__ = openfl.display.LineScaleMode;
openfl.display.LineScaleMode.NORMAL = ["NORMAL",2];
openfl.display.LineScaleMode.NORMAL.toString = $estr;
openfl.display.LineScaleMode.NORMAL.__enum__ = openfl.display.LineScaleMode;
openfl.display.LineScaleMode.VERTICAL = ["VERTICAL",3];
openfl.display.LineScaleMode.VERTICAL.toString = $estr;
openfl.display.LineScaleMode.VERTICAL.__enum__ = openfl.display.LineScaleMode;
openfl.display.LineScaleMode.__empty_constructs__ = [openfl.display.LineScaleMode.HORIZONTAL,openfl.display.LineScaleMode.NONE,openfl.display.LineScaleMode.NORMAL,openfl.display.LineScaleMode.VERTICAL];
openfl.display.Loader = function() {
	openfl.display.Sprite.call(this);
	this.contentLoaderInfo = openfl.display.LoaderInfo.create(this);
};
$hxClasses["openfl.display.Loader"] = openfl.display.Loader;
openfl.display.Loader.__name__ = ["openfl","display","Loader"];
openfl.display.Loader.__super__ = openfl.display.Sprite;
openfl.display.Loader.prototype = $extend(openfl.display.Sprite.prototype,{
	content: null
	,contentLoaderInfo: null
	,mImage: null
	,mShape: null
	,close: function() {
		openfl.Lib.notImplemented("Loader.close");
	}
	,load: function(request,context) {
		var extension = "";
		var parts = request.url.split(".");
		if(parts.length > 0) extension = parts[parts.length - 1].toLowerCase();
		if(extension.indexOf("?") != -1) extension = extension.split("?")[0];
		var transparent = true;
		this.contentLoaderInfo.url = request.url;
		if(request.contentType == null && request.contentType != "") switch(extension) {
		case "swf":
			this.contentLoaderInfo.contentType = "application/x-shockwave-flash";
			break;
		case "jpg":case "jpeg":
			transparent = false;
			this.contentLoaderInfo.contentType = "image/jpeg";
			break;
		case "png":
			this.contentLoaderInfo.contentType = "image/png";
			break;
		case "gif":
			this.contentLoaderInfo.contentType = "image/gif";
			break;
		default:
			this.contentLoaderInfo.contentType = "application/x-www-form-urlencoded";
		} else this.contentLoaderInfo.contentType = request.contentType;
		openfl.display.BitmapData.fromFile(request.url,$bind(this,this.BitmapData_onLoad),$bind(this,this.BitmapData_onError));
	}
	,loadBytes: function(buffer) {
		openfl.display.BitmapData.fromBytes(buffer,null,$bind(this,this.BitmapData_onLoad));
	}
	,unload: function() {
		if(this.get_numChildren() > 0) {
			while(this.get_numChildren() > 0) this.removeChildAt(0);
			this.content = null;
			this.contentLoaderInfo.url = null;
			this.contentLoaderInfo.contentType = null;
			this.contentLoaderInfo.content = null;
			this.contentLoaderInfo.bytesLoaded = 0;
			this.contentLoaderInfo.bytesTotal = 0;
			this.contentLoaderInfo.width = 0;
			this.contentLoaderInfo.height = 0;
			var event = new openfl.events.Event(openfl.events.Event.UNLOAD);
			event.currentTarget = this;
			this.dispatchEvent(event);
		}
	}
	,unloadAndStop: function(gc) {
		if(gc == null) gc = true;
		openfl.Lib.notImplemented("Loader.unloadAndStop");
	}
	,BitmapData_onLoad: function(bitmapData) {
		this.contentLoaderInfo.content = new openfl.display.Bitmap(bitmapData);
		this.content = this.contentLoaderInfo.content;
		this.addChild(this.contentLoaderInfo.content);
		var event = new openfl.events.Event(openfl.events.Event.COMPLETE);
		event.target = this.contentLoaderInfo;
		event.currentTarget = this.contentLoaderInfo;
		this.contentLoaderInfo.dispatchEvent(event);
	}
	,BitmapData_onError: function() {
		var event = new openfl.events.IOErrorEvent(openfl.events.IOErrorEvent.IO_ERROR);
		event.target = this.contentLoaderInfo;
		event.currentTarget = this.contentLoaderInfo;
		this.contentLoaderInfo.dispatchEvent(event);
	}
	,__class__: openfl.display.Loader
});
openfl.display.OpenGLView = function() {
	openfl.display.DirectRenderer.call(this,"OpenGLView");
	if(!this.__initialized) {
		this.__canvas = window.document.createElement("canvas");
		this.__canvas.width = openfl.Lib.current.stage.stageWidth;
		this.__canvas.height = openfl.Lib.current.stage.stageHeight;
		this.__context = this.__canvas.getContext("webgl");
		if(this.__context == null) this.__context = this.__canvas.getContext("experimental-webgl");
		lime.graphics.opengl.GL.context = this.__context;
		this.__initialized = true;
	}
};
$hxClasses["openfl.display.OpenGLView"] = openfl.display.OpenGLView;
openfl.display.OpenGLView.__name__ = ["openfl","display","OpenGLView"];
openfl.display.OpenGLView.__properties__ = {get_isSupported:"get_isSupported"}
openfl.display.OpenGLView.isSupported = null;
openfl.display.OpenGLView.get_isSupported = function() {
	if(!window.WebGLRenderingContext) return false;
	if(lime.graphics.opengl.GL.context != null) return true; else {
		var canvas = window.document.createElement("canvas");
		var context = canvas.getContext("webgl");
		if(context == null) context = canvas.getContext("experimental-webgl");
		return context != null;
	}
	return true;
};
openfl.display.OpenGLView.__super__ = openfl.display.DirectRenderer;
openfl.display.OpenGLView.prototype = $extend(openfl.display.DirectRenderer.prototype,{
	__added: null
	,__initialized: null
	,__renderCanvas: function(renderSession) {
	}
	,__renderDOM: function(renderSession) {
		if(this.stage != null && this.__worldVisible && this.__renderable) {
			if(!this.__added) {
				renderSession.element.appendChild(this.__canvas);
				this.__added = true;
				openfl._internal.renderer.dom.DOMRenderer.initializeElement(this,this.__canvas,renderSession);
			}
			if(this.__context != null) {
				var rect = null;
				if(this.get_scrollRect() == null) rect = new openfl.geom.Rectangle(0,0,this.stage.stageWidth,this.stage.stageHeight); else rect = new openfl.geom.Rectangle(this.get_x() + this.get_scrollRect().x,this.get_y() + this.get_scrollRect().y,this.get_scrollRect().width,this.get_scrollRect().height);
				if(this.__render != null) this.__render(rect);
			}
		} else if(this.__added) {
			renderSession.element.removeChild(this.__canvas);
			this.__added = false;
		}
	}
	,__renderGL: function(renderSession) {
		if(this.stage != null && this.__renderable) {
			var rect = null;
			if(this.get_scrollRect() == null) rect = new openfl.geom.Rectangle(0,0,this.stage.stageWidth,this.stage.stageHeight); else rect = new openfl.geom.Rectangle(this.get_x() + this.get_scrollRect().x,this.get_y() + this.get_scrollRect().y,this.get_scrollRect().width,this.get_scrollRect().height);
			if(this.__render != null) this.__render(rect);
		}
	}
	,__class__: openfl.display.OpenGLView
});
openfl.display.PNGEncoderOptions = function(fastCompression) {
	if(fastCompression == null) fastCompression = false;
	this.fastCompression = fastCompression;
};
$hxClasses["openfl.display.PNGEncoderOptions"] = openfl.display.PNGEncoderOptions;
openfl.display.PNGEncoderOptions.__name__ = ["openfl","display","PNGEncoderOptions"];
openfl.display.PNGEncoderOptions.prototype = {
	fastCompression: null
	,__class__: openfl.display.PNGEncoderOptions
};
openfl.display.PixelSnapping = $hxClasses["openfl.display.PixelSnapping"] = { __ename__ : ["openfl","display","PixelSnapping"], __constructs__ : ["NEVER","AUTO","ALWAYS"] };
openfl.display.PixelSnapping.NEVER = ["NEVER",0];
openfl.display.PixelSnapping.NEVER.toString = $estr;
openfl.display.PixelSnapping.NEVER.__enum__ = openfl.display.PixelSnapping;
openfl.display.PixelSnapping.AUTO = ["AUTO",1];
openfl.display.PixelSnapping.AUTO.toString = $estr;
openfl.display.PixelSnapping.AUTO.__enum__ = openfl.display.PixelSnapping;
openfl.display.PixelSnapping.ALWAYS = ["ALWAYS",2];
openfl.display.PixelSnapping.ALWAYS.toString = $estr;
openfl.display.PixelSnapping.ALWAYS.__enum__ = openfl.display.PixelSnapping;
openfl.display.PixelSnapping.__empty_constructs__ = [openfl.display.PixelSnapping.NEVER,openfl.display.PixelSnapping.AUTO,openfl.display.PixelSnapping.ALWAYS];
openfl.display.Preloader = function(display) {
	lime.app.Preloader.call(this);
	if(display != null) {
		this.display = display;
		openfl.Lib.current.addChild(display);
		if(js.Boot.__instanceof(display,NMEPreloader)) (js.Boot.__cast(display , NMEPreloader)).onInit();
	}
};
$hxClasses["openfl.display.Preloader"] = openfl.display.Preloader;
openfl.display.Preloader.__name__ = ["openfl","display","Preloader"];
openfl.display.Preloader.__super__ = lime.app.Preloader;
openfl.display.Preloader.prototype = $extend(lime.app.Preloader.prototype,{
	display: null
	,displayComplete: null
	,load: function(urls,types) {
		var sounds = [];
		var url = null;
		var _g1 = 0;
		var _g = urls.length;
		while(_g1 < _g) {
			var i = _g1++;
			url = urls[i];
			var _g2 = types[i];
			switch(_g2) {
			case "MUSIC":case "SOUND":
				var sound = haxe.io.Path.withoutExtension(url);
				if(!HxOverrides.remove(sounds,sound)) this.total++;
				sounds.push(sound);
				break;
			default:
			}
		}
		var _g3 = 0;
		while(_g3 < sounds.length) {
			var soundName = sounds[_g3];
			++_g3;
			var sound1 = new openfl.media.Sound();
			sound1.addEventListener(openfl.events.Event.COMPLETE,$bind(this,this.sound_onComplete));
			sound1.addEventListener(openfl.events.IOErrorEvent.IO_ERROR,$bind(this,this.sound_onIOError));
			sound1.load(new openfl.net.URLRequest(soundName + ".ogg"));
		}
		lime.app.Preloader.prototype.load.call(this,urls,types);
	}
	,start: function() {
		if(this.display != null && js.Boot.__instanceof(this.display,NMEPreloader)) {
			this.display.addEventListener(openfl.events.Event.COMPLETE,$bind(this,this.display_onComplete));
			(js.Boot.__cast(this.display , NMEPreloader)).onLoaded();
		} else lime.app.Preloader.prototype.start.call(this);
	}
	,update: function(loaded,total) {
		if(this.display != null && js.Boot.__instanceof(this.display,NMEPreloader)) (js.Boot.__cast(this.display , NMEPreloader)).onUpdate(loaded,total);
	}
	,display_onComplete: function(event) {
		this.display.removeEventListener(openfl.events.Event.COMPLETE,$bind(this,this.display_onComplete));
		openfl.Lib.current.removeChild(this.display);
		openfl.Lib.current.stage.set_focus(null);
		this.display = null;
		lime.app.Preloader.prototype.start.call(this);
	}
	,sound_onComplete: function(event) {
		this.loaded++;
		this.update(this.loaded,this.total);
		if(this.loaded == this.total) this.start();
	}
	,sound_onIOError: function(event) {
		this.loaded++;
		this.update(this.loaded,this.total);
		if(this.loaded == this.total) this.start();
	}
	,__class__: openfl.display.Preloader
});
openfl.display.Shape = function() {
	openfl.display.DisplayObject.call(this);
};
$hxClasses["openfl.display.Shape"] = openfl.display.Shape;
openfl.display.Shape.__name__ = ["openfl","display","Shape"];
openfl.display.Shape.__super__ = openfl.display.DisplayObject;
openfl.display.Shape.prototype = $extend(openfl.display.DisplayObject.prototype,{
	graphics: null
	,get_graphics: function() {
		if(this.__graphics == null) {
			this.__graphics = new openfl.display.Graphics();
			this.__graphics.__owner = this;
		}
		return this.__graphics;
	}
	,__class__: openfl.display.Shape
	,__properties__: $extend(openfl.display.DisplayObject.prototype.__properties__,{get_graphics:"get_graphics"})
});
openfl.display.SimpleButton = function(upState,overState,downState,hitTestState) {
	openfl.display.DisplayObjectContainer.call(this);
	this.enabled = true;
	this.trackAsMenu = false;
	this.useHandCursor = true;
	this.mouseChildren = false;
	this.set_upState(upState != null?upState:this.__generateDefaultState());
	this.set_overState(overState != null?overState:this.__generateDefaultState());
	this.set_downState(downState != null?downState:this.__generateDefaultState());
	this.set_hitTestState(hitTestState != null?hitTestState:this.__generateDefaultState());
	this.set___currentState(this.upState);
};
$hxClasses["openfl.display.SimpleButton"] = openfl.display.SimpleButton;
openfl.display.SimpleButton.__name__ = ["openfl","display","SimpleButton"];
openfl.display.SimpleButton.__super__ = openfl.display.DisplayObjectContainer;
openfl.display.SimpleButton.prototype = $extend(openfl.display.DisplayObjectContainer.prototype,{
	downState: null
	,enabled: null
	,hitTestState: null
	,overState: null
	,trackAsMenu: null
	,upState: null
	,useHandCursor: null
	,__currentState: null
	,__soundTransform: null
	,switchState: function(state) {
		if(this.__currentState != null && this.__currentState.parent == this) this.removeChild(this.__currentState);
		if(state != null) this.addChild(state);
	}
	,__generateDefaultState: function() {
		return new openfl.display.DisplayObject();
	}
	,set_downState: function(downState) {
		if(this.downState != null && this.__currentState == this.downState) this.set___currentState(downState);
		return this.downState = downState;
	}
	,set_hitTestState: function(hitTestState) {
		if(hitTestState != this.hitTestState) {
			if(this.hitTestState != null && this.hitTestState.parent == this) this.removeChild(this.hitTestState);
			this.removeEventListener(openfl.events.MouseEvent.MOUSE_DOWN,$bind(this,this.__this_onMouseDown));
			this.removeEventListener(openfl.events.MouseEvent.MOUSE_OUT,$bind(this,this.__this_onMouseOut));
			this.removeEventListener(openfl.events.MouseEvent.MOUSE_OVER,$bind(this,this.__this_onMouseOver));
			this.removeEventListener(openfl.events.MouseEvent.MOUSE_UP,$bind(this,this.__this_onMouseUp));
			if(hitTestState != null) {
				this.addEventListener(openfl.events.MouseEvent.MOUSE_DOWN,$bind(this,this.__this_onMouseDown));
				this.addEventListener(openfl.events.MouseEvent.MOUSE_OUT,$bind(this,this.__this_onMouseOut));
				this.addEventListener(openfl.events.MouseEvent.MOUSE_OVER,$bind(this,this.__this_onMouseOver));
				this.addEventListener(openfl.events.MouseEvent.MOUSE_UP,$bind(this,this.__this_onMouseUp));
				hitTestState.set_alpha(0.0);
				this.addChild(hitTestState);
			}
		}
		return this.hitTestState = hitTestState;
	}
	,set_overState: function(overState) {
		if(this.overState != null && this.__currentState == this.overState) this.set___currentState(overState);
		return this.overState = overState;
	}
	,get_soundTransform: function() {
		if(this.__soundTransform == null) this.__soundTransform = new openfl.media.SoundTransform();
		return new openfl.media.SoundTransform(this.__soundTransform.volume,this.__soundTransform.pan);
	}
	,set_soundTransform: function(value) {
		this.__soundTransform = new openfl.media.SoundTransform(value.volume,value.pan);
		return value;
	}
	,set_upState: function(upState) {
		if(this.upState != null && this.__currentState == this.upState) this.set___currentState(upState);
		return this.upState = upState;
	}
	,set___currentState: function(state) {
		if(this.__currentState == state) return state;
		this.switchState(state);
		return this.__currentState = state;
	}
	,__this_onMouseDown: function(event) {
		this.set___currentState(this.downState);
	}
	,__this_onMouseOut: function(event) {
		if(this.upState != this.__currentState) this.set___currentState(this.upState);
	}
	,__this_onMouseOver: function(event) {
		if(this.overState != this.__currentState) this.set___currentState(this.overState);
	}
	,__this_onMouseUp: function(event) {
		this.set___currentState(this.overState);
	}
	,__class__: openfl.display.SimpleButton
	,__properties__: $extend(openfl.display.DisplayObjectContainer.prototype.__properties__,{set___currentState:"set___currentState",set_upState:"set_upState",set_soundTransform:"set_soundTransform",get_soundTransform:"get_soundTransform",set_overState:"set_overState",set_hitTestState:"set_hitTestState",set_downState:"set_downState"})
});
openfl.display.SpreadMethod = $hxClasses["openfl.display.SpreadMethod"] = { __ename__ : ["openfl","display","SpreadMethod"], __constructs__ : ["REPEAT","REFLECT","PAD"] };
openfl.display.SpreadMethod.REPEAT = ["REPEAT",0];
openfl.display.SpreadMethod.REPEAT.toString = $estr;
openfl.display.SpreadMethod.REPEAT.__enum__ = openfl.display.SpreadMethod;
openfl.display.SpreadMethod.REFLECT = ["REFLECT",1];
openfl.display.SpreadMethod.REFLECT.toString = $estr;
openfl.display.SpreadMethod.REFLECT.__enum__ = openfl.display.SpreadMethod;
openfl.display.SpreadMethod.PAD = ["PAD",2];
openfl.display.SpreadMethod.PAD.toString = $estr;
openfl.display.SpreadMethod.PAD.__enum__ = openfl.display.SpreadMethod;
openfl.display.SpreadMethod.__empty_constructs__ = [openfl.display.SpreadMethod.REPEAT,openfl.display.SpreadMethod.REFLECT,openfl.display.SpreadMethod.PAD];
openfl.display.Stage = function(width,height,color) {
	this.__mouseY = 0;
	this.__mouseX = 0;
	this.__mouseOutStack = [];
	openfl.display.DisplayObjectContainer.call(this);
	if(color == null) {
		this.__transparent = true;
		this.set_color(0);
	} else this.set_color(color);
	this.set_name(null);
	this.__displayState = openfl.display.StageDisplayState.NORMAL;
	this.__mouseX = 0;
	this.__mouseY = 0;
	this.stageWidth = width;
	this.stageHeight = height;
	this.stage = this;
	this.align = openfl.display.StageAlign.TOP_LEFT;
	this.allowsFullScreen = false;
	this.frameRate = 60;
	this.quality = openfl.display.StageQuality.HIGH;
	this.scaleMode = openfl.display.StageScaleMode.NO_SCALE;
	this.stageFocusRect = true;
	this.__clearBeforeRender = true;
	this.__stack = [];
	var this1;
	this1 = new openfl.VectorData();
	var this2;
	this2 = new Array(0);
	this1.data = this2;
	this1.length = 0;
	this1.fixed = false;
	this.stage3Ds = this1;
	var this3 = this.stage3Ds;
	var x = new openfl.display.Stage3D();
	if(!this3.fixed) {
		this3.length++;
		if(this3.data.length < this3.length) {
			var data;
			var this4;
			this4 = new Array(this3.data.length + 10);
			data = this4;
			haxe.ds._Vector.Vector_Impl_.blit(this3.data,0,data,0,this3.data.length);
			this3.data = data;
		}
		this3.data[this3.length - 1] = x;
	}
	this3.length;
};
$hxClasses["openfl.display.Stage"] = openfl.display.Stage;
openfl.display.Stage.__name__ = ["openfl","display","Stage"];
openfl.display.Stage.__interfaces__ = [lime.app.IModule];
openfl.display.Stage.__super__ = openfl.display.DisplayObjectContainer;
openfl.display.Stage.prototype = $extend(openfl.display.DisplayObjectContainer.prototype,{
	align: null
	,allowsFullScreen: null
	,frameRate: null
	,quality: null
	,scaleMode: null
	,stage3Ds: null
	,stageFocusRect: null
	,stageHeight: null
	,stageWidth: null
	,__clearBeforeRender: null
	,__color: null
	,__colorSplit: null
	,__colorString: null
	,__dirty: null
	,__displayState: null
	,__dragBounds: null
	,__dragObject: null
	,__dragOffsetX: null
	,__dragOffsetY: null
	,__focus: null
	,__fullscreen: null
	,__invalidated: null
	,__lastClickTime: null
	,__mouseOutStack: null
	,__mouseX: null
	,__mouseY: null
	,__originalWidth: null
	,__originalHeight: null
	,__renderer: null
	,__rendering: null
	,__stack: null
	,__transparent: null
	,__wasDirty: null
	,globalToLocal: function(pos) {
		return pos;
	}
	,init: function(context) {
		switch(context[1]) {
		case 0:
			var gl = context[2];
			this.__renderer = new openfl._internal.renderer.opengl.GLRenderer(this.stageWidth,this.stageHeight,gl);
			break;
		case 1:
			var context1 = context[2];
			this.__renderer = new openfl._internal.renderer.canvas.CanvasRenderer(this.stageWidth,this.stageHeight,context1);
			break;
		case 2:
			var element = context[2];
			this.__renderer = new openfl._internal.renderer.dom.DOMRenderer(this.stageWidth,this.stageHeight,element);
			break;
		default:
		}
	}
	,invalidate: function() {
		this.__invalidated = true;
	}
	,localToGlobal: function(pos) {
		return pos;
	}
	,onGamepadAxisMove: function(gamepad,axis,value) {
	}
	,onGamepadButtonDown: function(gamepad,button) {
	}
	,onGamepadButtonUp: function(gamepad,button) {
	}
	,onGamepadConnect: function(gamepad) {
	}
	,onGamepadDisconnect: function(gamepad) {
	}
	,onKeyDown: function(keyCode,modifier) {
		this.__onKey(openfl.events.KeyboardEvent.KEY_DOWN,keyCode,modifier);
	}
	,onKeyUp: function(keyCode,modifier) {
		this.__onKey(openfl.events.KeyboardEvent.KEY_UP,keyCode,modifier);
	}
	,onMouseDown: function(x,y,button) {
		var type;
		switch(button) {
		case 1:
			type = openfl.events.MouseEvent.MIDDLE_MOUSE_DOWN;
			break;
		case 2:
			type = openfl.events.MouseEvent.RIGHT_MOUSE_DOWN;
			break;
		default:
			type = openfl.events.MouseEvent.MOUSE_DOWN;
		}
		this.__onMouse(type,x,y,button);
	}
	,onMouseMove: function(x,y) {
		this.__onMouse(openfl.events.MouseEvent.MOUSE_MOVE,x,y,0);
	}
	,onMouseMoveRelative: function(x,y) {
	}
	,onMouseUp: function(x,y,button) {
		var type;
		switch(button) {
		case 1:
			type = openfl.events.MouseEvent.MIDDLE_MOUSE_UP;
			break;
		case 2:
			type = openfl.events.MouseEvent.RIGHT_MOUSE_UP;
			break;
		default:
			type = openfl.events.MouseEvent.MOUSE_UP;
		}
		this.__onMouse(type,x,y,button);
	}
	,onMouseWheel: function(deltaX,deltaY) {
		this.__onMouseWheel(deltaX,deltaY);
	}
	,onRenderContextLost: function() {
	}
	,onRenderContextRestored: function(context) {
	}
	,onTouchMove: function(x,y,id) {
		this.__onTouch("touchMove",x,y,id);
	}
	,onTouchEnd: function(x,y,id) {
		this.__onTouch("touchEnd",x,y,id);
	}
	,onTouchStart: function(x,y,id) {
		this.__onTouch("touchBegin",x,y,id);
	}
	,onWindowActivate: function() {
		var event = new openfl.events.Event(openfl.events.Event.ACTIVATE);
		this.__broadcast(event,true);
	}
	,onWindowClose: function() {
	}
	,onWindowDeactivate: function() {
		var event = new openfl.events.Event(openfl.events.Event.DEACTIVATE);
		this.__broadcast(event,true);
	}
	,onWindowFocusIn: function() {
	}
	,onWindowFocusOut: function() {
	}
	,onWindowFullscreen: function() {
	}
	,onWindowMinimize: function() {
	}
	,onWindowMove: function(x,y) {
	}
	,onWindowResize: function(width,height) {
		this.stageWidth = width;
		this.stageHeight = height;
		if(this.__renderer != null) this.__renderer.resize(width,height);
		var event = new openfl.events.Event(openfl.events.Event.RESIZE);
		this.__broadcast(event,false);
	}
	,onWindowRestore: function() {
	}
	,render: function(context) {
		if(this.__rendering) return;
		this.__rendering = true;
		this.__broadcast(new openfl.events.Event(openfl.events.Event.ENTER_FRAME),true);
		if(this.__invalidated) {
			this.__invalidated = false;
			this.__broadcast(new openfl.events.Event(openfl.events.Event.RENDER),true);
		}
		this.__renderable = true;
		this.__update(false,true);
		if(this.__renderer != null) this.__renderer.render(this);
		this.__rendering = false;
	}
	,update: function(deltaTime) {
	}
	,__convertKeyCode: function(keyCode) {
		switch(keyCode) {
		case 8:
			return 8;
		case 9:
			return 9;
		case 13:
			return 13;
		case 27:
			return 27;
		case 32:
			return 32;
		case 39:
			return 222;
		case 44:
			return 188;
		case 45:
			return 189;
		case 46:
			return 190;
		case 47:
			return 191;
		case 48:
			return 48;
		case 49:
			return 49;
		case 50:
			return 50;
		case 51:
			return 51;
		case 52:
			return 52;
		case 53:
			return 53;
		case 54:
			return 54;
		case 55:
			return 55;
		case 56:
			return 56;
		case 57:
			return 57;
		case 59:
			return 186;
		case 61:
			return 187;
		case 91:
			return 219;
		case 92:
			return 220;
		case 93:
			return 221;
		case 96:
			return 192;
		case 97:
			return 65;
		case 98:
			return 66;
		case 99:
			return 67;
		case 100:
			return 68;
		case 101:
			return 69;
		case 102:
			return 70;
		case 103:
			return 71;
		case 104:
			return 72;
		case 105:
			return 73;
		case 106:
			return 74;
		case 107:
			return 75;
		case 108:
			return 76;
		case 109:
			return 77;
		case 110:
			return 78;
		case 111:
			return 79;
		case 112:
			return 80;
		case 113:
			return 81;
		case 114:
			return 82;
		case 115:
			return 83;
		case 116:
			return 84;
		case 117:
			return 85;
		case 118:
			return 86;
		case 119:
			return 87;
		case 120:
			return 88;
		case 121:
			return 89;
		case 122:
			return 90;
		case 127:
			return 46;
		case 1073741881:
			return 20;
		case 1073741882:
			return 112;
		case 1073741883:
			return 113;
		case 1073741884:
			return 114;
		case 1073741885:
			return 115;
		case 1073741886:
			return 116;
		case 1073741887:
			return 117;
		case 1073741888:
			return 118;
		case 1073741889:
			return 119;
		case 1073741890:
			return 120;
		case 1073741891:
			return 121;
		case 1073741892:
			return 122;
		case 1073741893:
			return 123;
		case 1073741897:
			return 45;
		case 1073741898:
			return 36;
		case 1073741899:
			return 33;
		case 1073741901:
			return 35;
		case 1073741902:
			return 34;
		case 1073741903:
			return 39;
		case 1073741904:
			return 37;
		case 1073741905:
			return 40;
		case 1073741906:
			return 38;
		case 1073741908:
			return 111;
		case 1073741909:
			return 106;
		case 1073741910:
			return 109;
		case 1073741911:
			return 107;
		case 1073741912:
			return 108;
		case 1073741913:
			return 97;
		case 1073741914:
			return 98;
		case 1073741915:
			return 99;
		case 1073741916:
			return 100;
		case 1073741917:
			return 101;
		case 1073741918:
			return 102;
		case 1073741919:
			return 103;
		case 1073741920:
			return 104;
		case 1073741921:
			return 105;
		case 1073741922:
			return 96;
		case 1073741923:
			return 110;
		case 1073741928:
			return 124;
		case 1073741929:
			return 125;
		case 1073741930:
			return 126;
		case 1073742048:
			return 17;
		case 1073742049:
			return 16;
		case 1073742050:
			return 18;
		case 1073742051:
			return 15;
		case 1073742052:
			return 17;
		case 1073742053:
			return 16;
		case 1073742054:
			return 18;
		case 1073742055:
			return 15;
		default:
			return keyCode;
		}
	}
	,__drag: function(mouse) {
		var parent = this.__dragObject.parent;
		if(parent != null) mouse = parent.globalToLocal(mouse);
		var x = mouse.x + this.__dragOffsetX;
		var y = mouse.y + this.__dragOffsetY;
		if(this.__dragBounds != null) {
			if(x < this.__dragBounds.x) x = this.__dragBounds.x; else if(x > this.__dragBounds.get_right()) x = this.__dragBounds.get_right();
			if(y < this.__dragBounds.y) y = this.__dragBounds.y; else if(y > this.__dragBounds.get_bottom()) y = this.__dragBounds.get_bottom();
		}
		this.__dragObject.set_x(x);
		this.__dragObject.set_y(y);
	}
	,__fireEvent: function(event,stack) {
		var length = stack.length;
		if(length == 0) {
			event.eventPhase = openfl.events.EventPhase.AT_TARGET;
			event.target.__broadcast(event,false);
		} else {
			event.eventPhase = openfl.events.EventPhase.CAPTURING_PHASE;
			event.target = stack[stack.length - 1];
			var _g1 = 0;
			var _g = length - 1;
			while(_g1 < _g) {
				var i = _g1++;
				stack[i].__broadcast(event,false);
				if(event.__isCancelled) return;
			}
			event.eventPhase = openfl.events.EventPhase.AT_TARGET;
			event.target.__broadcast(event,false);
			if(event.__isCancelled) return;
			if(event.bubbles) {
				event.eventPhase = openfl.events.EventPhase.BUBBLING_PHASE;
				var i1 = length - 2;
				while(i1 >= 0) {
					stack[i1].__broadcast(event,false);
					if(event.__isCancelled) return;
					i1--;
				}
			}
		}
	}
	,__getInteractive: function(stack) {
		stack.push(this);
	}
	,__onKey: function(type,keyCode,modifier) {
		openfl.events.MouseEvent.__altKey = lime.ui._KeyModifier.KeyModifier_Impl_.get_altKey(modifier);
		openfl.events.MouseEvent.__commandKey = lime.ui._KeyModifier.KeyModifier_Impl_.get_metaKey(modifier);
		openfl.events.MouseEvent.__ctrlKey = lime.ui._KeyModifier.KeyModifier_Impl_.get_ctrlKey(modifier);
		openfl.events.MouseEvent.__shiftKey = lime.ui._KeyModifier.KeyModifier_Impl_.get_shiftKey(modifier);
		var stack = new Array();
		if(this.__focus == null) this.__getInteractive(stack); else this.__focus.__getInteractive(stack);
		if(stack.length > 0) {
			var keyCode1 = this.__convertKeyCode(keyCode);
			var charCode = keyCode1;
			var event = new openfl.events.KeyboardEvent(type,true,false,charCode,keyCode1,null,lime.ui._KeyModifier.KeyModifier_Impl_.get_ctrlKey(modifier),lime.ui._KeyModifier.KeyModifier_Impl_.get_altKey(modifier),lime.ui._KeyModifier.KeyModifier_Impl_.get_shiftKey(modifier),lime.ui._KeyModifier.KeyModifier_Impl_.get_metaKey(modifier));
			stack.reverse();
			this.__fireEvent(event,stack);
		}
	}
	,__onMouse: function(type,x,y,button) {
		if(button > 2) return;
		this.__mouseX = x;
		this.__mouseY = y;
		var stack = [];
		var target = null;
		var targetPoint = new openfl.geom.Point(x,y);
		if(this.__hitTest(x,y,false,stack,true)) target = stack[stack.length - 1]; else {
			target = this;
			stack = [this];
		}
		this.__fireEvent(openfl.events.MouseEvent.__create(type,button,this.__mouseX,this.__mouseY,target == this?targetPoint:target.globalToLocal(targetPoint),target),stack);
		var clickType;
		switch(type) {
		case openfl.events.MouseEvent.MOUSE_UP:
			clickType = openfl.events.MouseEvent.CLICK;
			break;
		case openfl.events.MouseEvent.MIDDLE_MOUSE_UP:
			clickType = openfl.events.MouseEvent.MIDDLE_CLICK;
			break;
		case openfl.events.MouseEvent.RIGHT_MOUSE_UP:
			clickType = openfl.events.MouseEvent.RIGHT_CLICK;
			break;
		default:
			clickType = null;
		}
		if(clickType != null) {
			this.__fireEvent(openfl.events.MouseEvent.__create(clickType,button,this.__mouseX,this.__mouseY,target == this?targetPoint:target.globalToLocal(targetPoint),target),stack);
			if(type == openfl.events.MouseEvent.MOUSE_UP && (js.Boot.__cast(target , openfl.display.InteractiveObject)).doubleClickEnabled) {
				var currentTime = openfl.Lib.getTimer();
				if(currentTime - this.__lastClickTime < 500) {
					this.__fireEvent(openfl.events.MouseEvent.__create(openfl.events.MouseEvent.DOUBLE_CLICK,button,this.__mouseX,this.__mouseY,target == this?targetPoint:target.globalToLocal(targetPoint),target),stack);
					this.__lastClickTime = 0;
				} else this.__lastClickTime = currentTime;
			}
		}
		if(js.Boot.__instanceof(target,openfl.display.Sprite)) {
			var targetSprite = target;
			if(targetSprite.buttonMode && targetSprite.useHandCursor) lime.ui.Mouse.set_cursor(lime.ui.MouseCursor.POINTER); else lime.ui.Mouse.set_cursor(lime.ui.MouseCursor.ARROW);
		} else if(js.Boot.__instanceof(target,openfl.display.SimpleButton)) {
			var targetButton = target;
			if(targetButton.useHandCursor) lime.ui.Mouse.set_cursor(lime.ui.MouseCursor.POINTER); else lime.ui.Mouse.set_cursor(lime.ui.MouseCursor.ARROW);
		} else if(js.Boot.__instanceof(target,openfl.text.TextField)) {
			var targetTextField = target;
			if(targetTextField.type == openfl.text.TextFieldType.INPUT) lime.ui.Mouse.set_cursor(lime.ui.MouseCursor.TEXT); else lime.ui.Mouse.set_cursor(lime.ui.MouseCursor.ARROW);
		} else lime.ui.Mouse.set_cursor(lime.ui.MouseCursor.ARROW);
		var _g = 0;
		var _g1 = this.__mouseOutStack;
		while(_g < _g1.length) {
			var target1 = _g1[_g];
			++_g;
			if(HxOverrides.indexOf(stack,target1,0) == -1) {
				HxOverrides.remove(this.__mouseOutStack,target1);
				var localPoint = target1.globalToLocal(targetPoint);
				target1.dispatchEvent(new openfl.events.MouseEvent(openfl.events.MouseEvent.MOUSE_OUT,false,false,localPoint.x,localPoint.y,target1));
			}
		}
		var _g2 = 0;
		while(_g2 < stack.length) {
			var target2 = stack[_g2];
			++_g2;
			if(HxOverrides.indexOf(this.__mouseOutStack,target2,0) == -1) {
				if(target2.hasEventListener(openfl.events.MouseEvent.MOUSE_OVER)) {
					var localPoint1 = target2.globalToLocal(targetPoint);
					target2.dispatchEvent(new openfl.events.MouseEvent(openfl.events.MouseEvent.MOUSE_OVER,false,false,localPoint1.x,localPoint1.y,target2));
				}
				if(target2.hasEventListener(openfl.events.MouseEvent.MOUSE_OUT)) this.__mouseOutStack.push(target2);
			}
		}
		if(this.__dragObject != null) this.__drag(targetPoint);
	}
	,__onMouseWheel: function(deltaX,deltaY) {
		var x = this.__mouseX;
		var y = this.__mouseY;
		var stack = [];
		if(!this.__hitTest(x,y,false,stack,true)) stack = [this];
		var target = stack[stack.length - 1];
		var targetPoint = new openfl.geom.Point(x,y);
		var delta = deltaY | 0;
		this.__fireEvent(openfl.events.MouseEvent.__create(openfl.events.MouseEvent.MOUSE_WHEEL,0,this.__mouseX,this.__mouseY,target == this?targetPoint:target.globalToLocal(targetPoint),target,delta),stack);
	}
	,__onTouch: function(type,x,y,id) {
		var point = new openfl.geom.Point(x,y);
		this.__mouseX = point.x;
		this.__mouseY = point.y;
		var __stack = [];
		var mouseType;
		switch(type) {
		case "touchBegin":
			mouseType = openfl.events.MouseEvent.MOUSE_DOWN;
			break;
		case "touchMove":
			mouseType = openfl.events.MouseEvent.MOUSE_MOVE;
			break;
		case "touchEnd":
			mouseType = openfl.events.MouseEvent.MOUSE_UP;
			break;
		default:
			mouseType = null;
		}
		if(this.__hitTest(x,y,false,__stack,true)) {
			var target = __stack[__stack.length - 1];
			var localPoint = target.globalToLocal(point);
			var touchEvent = openfl.events.TouchEvent.__create(type,null,this.__mouseX,this.__mouseY,localPoint,target);
			touchEvent.touchPointID = id;
			touchEvent.isPrimaryTouchPoint = true;
			var mouseEvent = openfl.events.MouseEvent.__create(mouseType,0,this.__mouseX,this.__mouseY,localPoint,target);
			mouseEvent.buttonDown = type != "touchEnd";
			this.__fireEvent(touchEvent,__stack);
			this.__fireEvent(mouseEvent,__stack);
		} else {
			var touchEvent1 = openfl.events.TouchEvent.__create(type,null,this.__mouseX,this.__mouseY,point,this);
			touchEvent1.touchPointID = id;
			touchEvent1.isPrimaryTouchPoint = true;
			var mouseEvent1 = openfl.events.MouseEvent.__create(mouseType,0,this.__mouseX,this.__mouseY,point,this);
			mouseEvent1.buttonDown = type != "touchEnd";
			this.__fireEvent(touchEvent1,[this.stage]);
			this.__fireEvent(mouseEvent1,[this.stage]);
		}
		if(type == "touchMove" && this.__dragObject != null) this.__drag(point);
	}
	,__resize: function() {
	}
	,__startDrag: function(sprite,lockCenter,bounds) {
		if(bounds == null) this.__dragBounds = null; else this.__dragBounds = bounds.clone();
		this.__dragObject = sprite;
		if(this.__dragObject != null) {
			if(lockCenter) {
				this.__dragOffsetX = -this.__dragObject.get_width() / 2;
				this.__dragOffsetY = -this.__dragObject.get_height() / 2;
			} else {
				var mouse = new openfl.geom.Point(this.get_mouseX(),this.get_mouseY());
				var parent = this.__dragObject.parent;
				if(parent != null) mouse = parent.globalToLocal(mouse);
				this.__dragOffsetX = this.__dragObject.get_x() - mouse.x;
				this.__dragOffsetY = this.__dragObject.get_y() - mouse.y;
			}
		}
	}
	,__stopDrag: function(sprite) {
		this.__dragBounds = null;
		this.__dragObject = null;
	}
	,__update: function(transformOnly,updateChildren,maskGrahpics) {
		if(transformOnly) {
			if(openfl.display.DisplayObject.__worldTransformDirty > 0) {
				openfl.display.DisplayObjectContainer.prototype.__update.call(this,true,updateChildren,maskGrahpics);
				if(updateChildren) {
					openfl.display.DisplayObject.__worldTransformDirty = 0;
					this.__dirty = true;
				}
			}
		} else if(openfl.display.DisplayObject.__worldTransformDirty > 0 || this.__dirty || openfl.display.DisplayObject.__worldRenderDirty > 0) {
			openfl.display.DisplayObjectContainer.prototype.__update.call(this,false,updateChildren,maskGrahpics);
			if(updateChildren) {
				this.__wasDirty = true;
				openfl.display.DisplayObject.__worldTransformDirty = 0;
				openfl.display.DisplayObject.__worldRenderDirty = 0;
				this.__dirty = false;
			}
		} else if(this.__wasDirty) {
			openfl.display.DisplayObjectContainer.prototype.__update.call(this,false,updateChildren,maskGrahpics);
			if(updateChildren) this.__wasDirty = false;
		}
	}
	,get_mouseX: function() {
		return this.__mouseX;
	}
	,get_mouseY: function() {
		return this.__mouseY;
	}
	,canvas_onContextLost: function(event) {
	}
	,canvas_onContextRestored: function(event) {
	}
	,get_color: function() {
		return this.__color;
	}
	,set_color: function(value) {
		var r = (value & 16711680) >>> 16;
		var g = (value & 65280) >>> 8;
		var b = value & 255;
		this.__colorSplit = [r / 255,g / 255,b / 255];
		this.__colorString = "#" + StringTools.hex(value,6);
		return this.__color = value;
	}
	,get_focus: function() {
		return this.__focus;
	}
	,set_focus: function(value) {
		if(value != this.__focus) {
			if(this.__focus != null) {
				var event = new openfl.events.FocusEvent(openfl.events.FocusEvent.FOCUS_OUT,true,false,value,false,0);
				this.__stack = [];
				this.__focus.__getInteractive(this.__stack);
				this.__stack.reverse();
				this.__fireEvent(event,this.__stack);
			}
			if(value != null) {
				var event1 = new openfl.events.FocusEvent(openfl.events.FocusEvent.FOCUS_IN,true,false,this.__focus,false,0);
				this.__stack = [];
				value.__getInteractive(this.__stack);
				this.__stack.reverse();
				this.__fireEvent(event1,this.__stack);
			}
			this.__focus = value;
		}
		return this.__focus;
	}
	,get_displayState: function() {
		return this.__displayState;
	}
	,set_displayState: function(value) {
		switch(value[1]) {
		case 0:
			openfl.Lib.application.windows[0].set_fullscreen(false);
			break;
		default:
			openfl.Lib.application.windows[0].set_fullscreen(true);
		}
		return this.__displayState = value;
	}
	,__class__: openfl.display.Stage
	,__properties__: $extend(openfl.display.DisplayObjectContainer.prototype.__properties__,{set_focus:"set_focus",get_focus:"get_focus",set_displayState:"set_displayState",get_displayState:"get_displayState",set_color:"set_color",get_color:"get_color"})
});
openfl.display.Stage3D = function() {
	openfl.events.EventDispatcher.call(this);
};
$hxClasses["openfl.display.Stage3D"] = openfl.display.Stage3D;
openfl.display.Stage3D.__name__ = ["openfl","display","Stage3D"];
openfl.display.Stage3D.__super__ = openfl.events.EventDispatcher;
openfl.display.Stage3D.prototype = $extend(openfl.events.EventDispatcher.prototype,{
	context3D: null
	,visible: null
	,x: null
	,y: null
	,requestContext3D: function(context3DRenderMode) {
		if(context3DRenderMode == null) context3DRenderMode = "";
		if(openfl.display.OpenGLView.get_isSupported()) {
			this.context3D = new openfl.display3D.Context3D();
			this.dispatchEvent(new openfl.events.Event(openfl.events.Event.CONTEXT3D_CREATE));
		} else this.dispatchEvent(new openfl.events.ErrorEvent(openfl.events.ErrorEvent.ERROR));
	}
	,__class__: openfl.display.Stage3D
});
openfl.display.StageAlign = $hxClasses["openfl.display.StageAlign"] = { __ename__ : ["openfl","display","StageAlign"], __constructs__ : ["TOP_RIGHT","TOP_LEFT","TOP","RIGHT","LEFT","BOTTOM_RIGHT","BOTTOM_LEFT","BOTTOM"] };
openfl.display.StageAlign.TOP_RIGHT = ["TOP_RIGHT",0];
openfl.display.StageAlign.TOP_RIGHT.toString = $estr;
openfl.display.StageAlign.TOP_RIGHT.__enum__ = openfl.display.StageAlign;
openfl.display.StageAlign.TOP_LEFT = ["TOP_LEFT",1];
openfl.display.StageAlign.TOP_LEFT.toString = $estr;
openfl.display.StageAlign.TOP_LEFT.__enum__ = openfl.display.StageAlign;
openfl.display.StageAlign.TOP = ["TOP",2];
openfl.display.StageAlign.TOP.toString = $estr;
openfl.display.StageAlign.TOP.__enum__ = openfl.display.StageAlign;
openfl.display.StageAlign.RIGHT = ["RIGHT",3];
openfl.display.StageAlign.RIGHT.toString = $estr;
openfl.display.StageAlign.RIGHT.__enum__ = openfl.display.StageAlign;
openfl.display.StageAlign.LEFT = ["LEFT",4];
openfl.display.StageAlign.LEFT.toString = $estr;
openfl.display.StageAlign.LEFT.__enum__ = openfl.display.StageAlign;
openfl.display.StageAlign.BOTTOM_RIGHT = ["BOTTOM_RIGHT",5];
openfl.display.StageAlign.BOTTOM_RIGHT.toString = $estr;
openfl.display.StageAlign.BOTTOM_RIGHT.__enum__ = openfl.display.StageAlign;
openfl.display.StageAlign.BOTTOM_LEFT = ["BOTTOM_LEFT",6];
openfl.display.StageAlign.BOTTOM_LEFT.toString = $estr;
openfl.display.StageAlign.BOTTOM_LEFT.__enum__ = openfl.display.StageAlign;
openfl.display.StageAlign.BOTTOM = ["BOTTOM",7];
openfl.display.StageAlign.BOTTOM.toString = $estr;
openfl.display.StageAlign.BOTTOM.__enum__ = openfl.display.StageAlign;
openfl.display.StageAlign.__empty_constructs__ = [openfl.display.StageAlign.TOP_RIGHT,openfl.display.StageAlign.TOP_LEFT,openfl.display.StageAlign.TOP,openfl.display.StageAlign.RIGHT,openfl.display.StageAlign.LEFT,openfl.display.StageAlign.BOTTOM_RIGHT,openfl.display.StageAlign.BOTTOM_LEFT,openfl.display.StageAlign.BOTTOM];
openfl.display.StageDisplayState = $hxClasses["openfl.display.StageDisplayState"] = { __ename__ : ["openfl","display","StageDisplayState"], __constructs__ : ["NORMAL","FULL_SCREEN","FULL_SCREEN_INTERACTIVE"] };
openfl.display.StageDisplayState.NORMAL = ["NORMAL",0];
openfl.display.StageDisplayState.NORMAL.toString = $estr;
openfl.display.StageDisplayState.NORMAL.__enum__ = openfl.display.StageDisplayState;
openfl.display.StageDisplayState.FULL_SCREEN = ["FULL_SCREEN",1];
openfl.display.StageDisplayState.FULL_SCREEN.toString = $estr;
openfl.display.StageDisplayState.FULL_SCREEN.__enum__ = openfl.display.StageDisplayState;
openfl.display.StageDisplayState.FULL_SCREEN_INTERACTIVE = ["FULL_SCREEN_INTERACTIVE",2];
openfl.display.StageDisplayState.FULL_SCREEN_INTERACTIVE.toString = $estr;
openfl.display.StageDisplayState.FULL_SCREEN_INTERACTIVE.__enum__ = openfl.display.StageDisplayState;
openfl.display.StageDisplayState.__empty_constructs__ = [openfl.display.StageDisplayState.NORMAL,openfl.display.StageDisplayState.FULL_SCREEN,openfl.display.StageDisplayState.FULL_SCREEN_INTERACTIVE];
openfl.display.StageQuality = $hxClasses["openfl.display.StageQuality"] = { __ename__ : ["openfl","display","StageQuality"], __constructs__ : ["BEST","HIGH","MEDIUM","LOW"] };
openfl.display.StageQuality.BEST = ["BEST",0];
openfl.display.StageQuality.BEST.toString = $estr;
openfl.display.StageQuality.BEST.__enum__ = openfl.display.StageQuality;
openfl.display.StageQuality.HIGH = ["HIGH",1];
openfl.display.StageQuality.HIGH.toString = $estr;
openfl.display.StageQuality.HIGH.__enum__ = openfl.display.StageQuality;
openfl.display.StageQuality.MEDIUM = ["MEDIUM",2];
openfl.display.StageQuality.MEDIUM.toString = $estr;
openfl.display.StageQuality.MEDIUM.__enum__ = openfl.display.StageQuality;
openfl.display.StageQuality.LOW = ["LOW",3];
openfl.display.StageQuality.LOW.toString = $estr;
openfl.display.StageQuality.LOW.__enum__ = openfl.display.StageQuality;
openfl.display.StageQuality.__empty_constructs__ = [openfl.display.StageQuality.BEST,openfl.display.StageQuality.HIGH,openfl.display.StageQuality.MEDIUM,openfl.display.StageQuality.LOW];
openfl.display.StageScaleMode = $hxClasses["openfl.display.StageScaleMode"] = { __ename__ : ["openfl","display","StageScaleMode"], __constructs__ : ["SHOW_ALL","NO_SCALE","NO_BORDER","EXACT_FIT"] };
openfl.display.StageScaleMode.SHOW_ALL = ["SHOW_ALL",0];
openfl.display.StageScaleMode.SHOW_ALL.toString = $estr;
openfl.display.StageScaleMode.SHOW_ALL.__enum__ = openfl.display.StageScaleMode;
openfl.display.StageScaleMode.NO_SCALE = ["NO_SCALE",1];
openfl.display.StageScaleMode.NO_SCALE.toString = $estr;
openfl.display.StageScaleMode.NO_SCALE.__enum__ = openfl.display.StageScaleMode;
openfl.display.StageScaleMode.NO_BORDER = ["NO_BORDER",2];
openfl.display.StageScaleMode.NO_BORDER.toString = $estr;
openfl.display.StageScaleMode.NO_BORDER.__enum__ = openfl.display.StageScaleMode;
openfl.display.StageScaleMode.EXACT_FIT = ["EXACT_FIT",3];
openfl.display.StageScaleMode.EXACT_FIT.toString = $estr;
openfl.display.StageScaleMode.EXACT_FIT.__enum__ = openfl.display.StageScaleMode;
openfl.display.StageScaleMode.__empty_constructs__ = [openfl.display.StageScaleMode.SHOW_ALL,openfl.display.StageScaleMode.NO_SCALE,openfl.display.StageScaleMode.NO_BORDER,openfl.display.StageScaleMode.EXACT_FIT];
openfl.display.Tilesheet = function(image) {
	this.__bitmap = image;
	this.__centerPoints = new Array();
	this.__tileRects = new Array();
	this.__tileUVs = new Array();
	this.__rectTile = new openfl.geom.Rectangle();
	this.__rectUV = new openfl.geom.Rectangle();
	this.__point = new openfl.geom.Point();
};
$hxClasses["openfl.display.Tilesheet"] = openfl.display.Tilesheet;
openfl.display.Tilesheet.__name__ = ["openfl","display","Tilesheet"];
openfl.display.Tilesheet.prototype = {
	__bitmap: null
	,__centerPoints: null
	,__tileRects: null
	,__tileUVs: null
	,__rectTile: null
	,__rectUV: null
	,__point: null
	,addTileRect: function(rectangle,centerPoint) {
		this.__tileRects.push(rectangle);
		if(centerPoint == null) centerPoint = openfl.display.Tilesheet.__defaultPoint;
		this.__centerPoints.push(centerPoint);
		this.__tileUVs.push(new openfl.geom.Rectangle(rectangle.get_left() / this.__bitmap.width,rectangle.get_top() / this.__bitmap.height,rectangle.get_right() / this.__bitmap.width,rectangle.get_bottom() / this.__bitmap.height));
		return this.__tileRects.length - 1;
	}
	,drawTiles: function(graphics,tileData,smooth,flags,count) {
		if(count == null) count = -1;
		if(flags == null) flags = 0;
		if(smooth == null) smooth = false;
		graphics.drawTiles(this,tileData,smooth,flags,count);
	}
	,getTileCenter: function(index) {
		return this.__centerPoints[index];
	}
	,getTileRect: function(index) {
		return this.__tileRects[index];
	}
	,getTileUVs: function(index) {
		return this.__tileUVs[index];
	}
	,__class__: openfl.display.Tilesheet
};
openfl.display.TriangleCulling = $hxClasses["openfl.display.TriangleCulling"] = { __ename__ : ["openfl","display","TriangleCulling"], __constructs__ : ["NEGATIVE","NONE","POSITIVE"] };
openfl.display.TriangleCulling.NEGATIVE = ["NEGATIVE",0];
openfl.display.TriangleCulling.NEGATIVE.toString = $estr;
openfl.display.TriangleCulling.NEGATIVE.__enum__ = openfl.display.TriangleCulling;
openfl.display.TriangleCulling.NONE = ["NONE",1];
openfl.display.TriangleCulling.NONE.toString = $estr;
openfl.display.TriangleCulling.NONE.__enum__ = openfl.display.TriangleCulling;
openfl.display.TriangleCulling.POSITIVE = ["POSITIVE",2];
openfl.display.TriangleCulling.POSITIVE.toString = $estr;
openfl.display.TriangleCulling.POSITIVE.__enum__ = openfl.display.TriangleCulling;
openfl.display.TriangleCulling.__empty_constructs__ = [openfl.display.TriangleCulling.NEGATIVE,openfl.display.TriangleCulling.NONE,openfl.display.TriangleCulling.POSITIVE];
openfl.display3D = {};
openfl.display3D.Context3D = function() {
	this.disposed = false;
	this._yFlip = 1;
	this.vertexBuffersCreated = new Array();
	this.indexBuffersCreated = new Array();
	this.programsCreated = new Array();
	this.texturesCreated = new Array();
	this.samplerParameters = new Array();
	var _g1 = 0;
	var _g = openfl.display3D.Context3D.MAX_SAMPLERS;
	while(_g1 < _g) {
		var i = _g1++;
		this.samplerParameters[i] = new openfl.display3D._Context3D.SamplerState();
		this.samplerParameters[i].wrap = openfl.display3D.Context3DWrapMode.CLAMP;
		this.samplerParameters[i].filter = openfl.display3D.Context3DTextureFilter.LINEAR;
		this.samplerParameters[i].mipfilter = openfl.display3D.Context3DMipFilter.MIPNONE;
	}
	var stage = openfl.Lib.current.stage;
	this.ogl = new openfl.display.OpenGLView();
	this.ogl.set_scrollRect(new openfl.geom.Rectangle(0,0,stage.stageWidth,stage.stageHeight));
	this.scrollRect = this.ogl.get_scrollRect().clone();
	this.ogl.set_width(stage.stageWidth);
	this.ogl.set_height(stage.stageHeight);
	stage.addChildAt(this.ogl,0);
};
$hxClasses["openfl.display3D.Context3D"] = openfl.display3D.Context3D;
openfl.display3D.Context3D.__name__ = ["openfl","display3D","Context3D"];
openfl.display3D.Context3D.prototype = {
	driverInfo: null
	,enableErrorChecking: null
	,blendDestinationFactor: null
	,blendEnabled: null
	,blendSourceFactor: null
	,currentProgram: null
	,disposed: null
	,drawing: null
	,framebuffer: null
	,indexBuffersCreated: null
	,ogl: null
	,programsCreated: null
	,renderbuffer: null
	,samplerParameters: null
	,scrollRect: null
	,stencilbuffer: null
	,stencilCompareMode: null
	,stencilRef: null
	,stencilReadMask: null
	,texturesCreated: null
	,vertexBuffersCreated: null
	,_yFlip: null
	,clear: function(red,green,blue,alpha,depth,stencil,mask) {
		if(mask == null) mask = 17664;
		if(stencil == null) stencil = 0;
		if(depth == null) depth = 1;
		if(alpha == null) alpha = 1;
		if(blue == null) blue = 0;
		if(green == null) green = 0;
		if(red == null) red = 0;
		if(!this.drawing) {
			this.__updateBlendStatus();
			this.drawing = true;
		}
		lime.graphics.opengl.GL.context.clearColor(red,green,blue,alpha);
		lime.graphics.opengl.GL.context.clearDepth(depth);
		lime.graphics.opengl.GL.context.clearStencil(stencil);
		lime.graphics.opengl.GL.context.clear(mask);
	}
	,configureBackBuffer: function(width,height,antiAlias,enableDepthAndStencil) {
		if(enableDepthAndStencil == null) enableDepthAndStencil = true;
		if(enableDepthAndStencil) {
			lime.graphics.opengl.GL.context.enable(2929);
			lime.graphics.opengl.GL.context.enable(2960);
		}
		this.ogl.set_scrollRect(new openfl.geom.Rectangle(0,0,width,height));
		this.ogl.set_width(width);
		this.ogl.set_height(height);
		this.scrollRect = this.ogl.get_scrollRect().clone();
		lime.graphics.opengl.GL.context.viewport(this.scrollRect.x | 0,this.scrollRect.y | 0,this.scrollRect.width | 0,this.scrollRect.height | 0);
	}
	,createCubeTexture: function(size,format,optimizeForRenderToTexture,streamingLevels) {
		if(streamingLevels == null) streamingLevels = 0;
		var texture = new openfl.display3D.textures.CubeTexture(lime.graphics.opengl.GL.context.createTexture(),size);
		this.texturesCreated.push(texture);
		return texture;
	}
	,createIndexBuffer: function(numIndices) {
		var indexBuffer = new openfl.display3D.IndexBuffer3D(lime.graphics.opengl.GL.context.createBuffer(),numIndices);
		this.indexBuffersCreated.push(indexBuffer);
		return indexBuffer;
	}
	,createProgram: function() {
		var program = new openfl.display3D.Program3D(lime.graphics.opengl.GL.context.createProgram());
		this.programsCreated.push(program);
		return program;
	}
	,createRectangleTexture: function(width,height,format,optimizeForRenderToTexture) {
		var texture = new openfl.display3D.textures.RectangleTexture(lime.graphics.opengl.GL.context.createTexture(),optimizeForRenderToTexture,width,height);
		this.texturesCreated.push(texture);
		return texture;
	}
	,createTexture: function(width,height,format,optimizeForRenderToTexture,streamingLevels) {
		if(streamingLevels == null) streamingLevels = 0;
		var texture = new openfl.display3D.textures.Texture(lime.graphics.opengl.GL.context.createTexture(),optimizeForRenderToTexture,width,height);
		this.texturesCreated.push(texture);
		return texture;
	}
	,createVertexBuffer: function(numVertices,data32PerVertex) {
		var vertexBuffer = new openfl.display3D.VertexBuffer3D(lime.graphics.opengl.GL.context.createBuffer(),numVertices,data32PerVertex);
		this.vertexBuffersCreated.push(vertexBuffer);
		return vertexBuffer;
	}
	,dispose: function() {
		var _g = 0;
		var _g1 = this.vertexBuffersCreated;
		while(_g < _g1.length) {
			var vertexBuffer = _g1[_g];
			++_g;
			vertexBuffer.dispose();
		}
		this.vertexBuffersCreated = null;
		var _g2 = 0;
		var _g11 = this.indexBuffersCreated;
		while(_g2 < _g11.length) {
			var indexBuffer = _g11[_g2];
			++_g2;
			indexBuffer.dispose();
		}
		this.indexBuffersCreated = null;
		var _g3 = 0;
		var _g12 = this.programsCreated;
		while(_g3 < _g12.length) {
			var program = _g12[_g3];
			++_g3;
			program.dispose();
		}
		this.programsCreated = null;
		this.samplerParameters = null;
		var _g4 = 0;
		var _g13 = this.texturesCreated;
		while(_g4 < _g13.length) {
			var texture = _g13[_g4];
			++_g4;
			texture.dispose();
		}
		this.texturesCreated = null;
		if(this.framebuffer != null) {
			lime.graphics.opengl.GL.context.deleteFramebuffer(this.framebuffer);
			this.framebuffer = null;
		}
		if(this.renderbuffer != null) {
			lime.graphics.opengl.GL.context.deleteRenderbuffer(this.renderbuffer);
			this.renderbuffer = null;
		}
		this.disposed = true;
	}
	,drawToBitmapData: function(destination) {
	}
	,drawTriangles: function(indexBuffer,firstIndex,numTriangles) {
		if(numTriangles == null) numTriangles = -1;
		if(firstIndex == null) firstIndex = 0;
		var location = lime.graphics.opengl.GL.context.getUniformLocation(this.currentProgram.glProgram,"yflip");
		lime.graphics.opengl.GL.context.uniform1f(location,this._yFlip);
		if(!this.drawing) throw new openfl.errors.Error("Need to clear before drawing if the buffer has not been cleared since the last present() call.");
		var numIndices;
		if(numTriangles == -1) numIndices = indexBuffer.numIndices; else numIndices = numTriangles * 3;
		var byteOffset = firstIndex * 2;
		lime.graphics.opengl.GL.context.bindBuffer(34963,indexBuffer.glBuffer);
		lime.graphics.opengl.GL.context.drawElements(4,numIndices,5123,byteOffset);
	}
	,present: function() {
		this.drawing = false;
		lime.graphics.opengl.GL.context.useProgram(null);
		lime.graphics.opengl.GL.context.bindBuffer(34962,null);
		lime.graphics.opengl.GL.context.disable(2884);
		if(this.framebuffer != null) lime.graphics.opengl.GL.context.bindFramebuffer(36160,null);
		if(this.renderbuffer != null) lime.graphics.opengl.GL.context.bindRenderbuffer(36161,null);
	}
	,removeRenderMethod: function(func) {
		this.ogl.set_render(null);
	}
	,setBlendFactors: function(sourceFactor,destinationFactor) {
		this.blendEnabled = true;
		this.blendSourceFactor = sourceFactor;
		this.blendDestinationFactor = destinationFactor;
		this.__updateBlendStatus();
	}
	,setColorMask: function(red,green,blue,alpha) {
		lime.graphics.opengl.GL.context.colorMask(red,green,blue,alpha);
	}
	,setCulling: function(triangleFaceToCull) {
		if(triangleFaceToCull == 0) lime.graphics.opengl.GL.context.disable(2884); else {
			lime.graphics.opengl.GL.context.enable(2884);
			switch(triangleFaceToCull) {
			case 1029:
				lime.graphics.opengl.GL.context.cullFace(1029);
				break;
			case 1028:
				lime.graphics.opengl.GL.context.cullFace(1028);
				break;
			case 1032:
				lime.graphics.opengl.GL.context.cullFace(1032);
				break;
			default:
				throw "Unknown Context3DTriangleFace type.";
			}
		}
		switch(triangleFaceToCull) {
		case 1029:
			this._yFlip = -1;
			break;
		case 1028:
			this._yFlip = 1;
			break;
		case 1032:
			this._yFlip = 1;
			break;
		case 0:
			this._yFlip = 1;
			break;
		default:
			throw "Unknown culling mode " + triangleFaceToCull + ".";
		}
	}
	,setDepthTest: function(depthMask,passCompareMode) {
		lime.graphics.opengl.GL.context.depthFunc(passCompareMode);
		lime.graphics.opengl.GL.context.depthMask(depthMask);
	}
	,setGLSLProgramConstantsFromByteArray: function(locationName,data,byteArrayOffset) {
		if(byteArrayOffset == null) byteArrayOffset = 0;
		data.position = byteArrayOffset;
		var location = lime.graphics.opengl.GL.context.getUniformLocation(this.currentProgram.glProgram,locationName);
		lime.graphics.opengl.GL.uniform4f(location,data.readFloat(),data.readFloat(),data.readFloat(),data.readFloat());
	}
	,setGLSLProgramConstantsFromMatrix: function(locationName,matrix,transposedMatrix) {
		if(transposedMatrix == null) transposedMatrix = false;
		var location = lime.graphics.opengl.GL.context.getUniformLocation(this.currentProgram.glProgram,locationName);
		lime.graphics.opengl.GL.uniformMatrix4fv(location,!transposedMatrix,new Float32Array((function($this) {
			var $r;
			var this1 = matrix.rawData;
			var value = new Array();
			{
				var _g1 = 0;
				var _g = this1.data.length;
				while(_g1 < _g) {
					var i = _g1++;
					value.push(this1.data[i]);
				}
			}
			$r = value;
			return $r;
		}(this))));
	}
	,setGLSLProgramConstantsFromVector4: function(locationName,data,startIndex) {
		if(startIndex == null) startIndex = 0;
		var location = lime.graphics.opengl.GL.context.getUniformLocation(this.currentProgram.glProgram,locationName);
		lime.graphics.opengl.GL.context.uniform4f(location,data[startIndex],data[startIndex + 1],data[startIndex + 2],data[startIndex + 3]);
	}
	,setGLSLTextureAt: function(locationName,texture,textureIndex) {
		switch(textureIndex) {
		case 0:
			lime.graphics.opengl.GL.context.activeTexture(33984);
			break;
		case 1:
			lime.graphics.opengl.GL.context.activeTexture(33985);
			break;
		case 2:
			lime.graphics.opengl.GL.context.activeTexture(33986);
			break;
		case 3:
			lime.graphics.opengl.GL.context.activeTexture(33987);
			break;
		case 4:
			lime.graphics.opengl.GL.context.activeTexture(33988);
			break;
		case 5:
			lime.graphics.opengl.GL.context.activeTexture(33989);
			break;
		case 6:
			lime.graphics.opengl.GL.context.activeTexture(33990);
			break;
		case 7:
			lime.graphics.opengl.GL.context.activeTexture(33991);
			break;
		default:
			throw "Does not support texture8 or more";
		}
		if(texture == null) {
			lime.graphics.opengl.GL.context.bindTexture(3553,null);
			lime.graphics.opengl.GL.context.bindTexture(34067,null);
			return;
		}
		var location = lime.graphics.opengl.GL.context.getUniformLocation(this.currentProgram.glProgram,locationName);
		if(js.Boot.__instanceof(texture,openfl.display3D.textures.Texture)) {
			lime.graphics.opengl.GL.context.bindTexture(3553,(js.Boot.__cast(texture , openfl.display3D.textures.Texture)).glTexture);
			lime.graphics.opengl.GL.context.uniform1i(location,textureIndex);
		} else if(js.Boot.__instanceof(texture,openfl.display3D.textures.RectangleTexture)) {
			lime.graphics.opengl.GL.context.bindTexture(3553,(js.Boot.__cast(texture , openfl.display3D.textures.RectangleTexture)).glTexture);
			lime.graphics.opengl.GL.context.uniform1i(location,textureIndex);
		} else if(js.Boot.__instanceof(texture,openfl.display3D.textures.CubeTexture)) {
			lime.graphics.opengl.GL.context.bindTexture(34067,(js.Boot.__cast(texture , openfl.display3D.textures.CubeTexture)).glTexture);
			lime.graphics.opengl.GL.context.uniform1i(location,textureIndex);
		} else throw "Texture of type " + Type.getClassName(Type.getClass(texture)) + " not supported yet";
		var parameters = this.samplerParameters[textureIndex];
		if(parameters != null) this.setTextureParameters(texture,parameters.wrap,parameters.filter,parameters.mipfilter); else this.setTextureParameters(texture,openfl.display3D.Context3DWrapMode.CLAMP,openfl.display3D.Context3DTextureFilter.NEAREST,openfl.display3D.Context3DMipFilter.MIPNONE);
	}
	,setGLSLVertexBufferAt: function(locationName,buffer,bufferOffset,format) {
		if(bufferOffset == null) bufferOffset = 0;
		var location;
		if(this.currentProgram != null && this.currentProgram.glProgram != null) location = lime.graphics.opengl.GL.context.getAttribLocation(this.currentProgram.glProgram,locationName); else location = -1;
		if(buffer == null) {
			if(location > -1) lime.graphics.opengl.GL.context.disableVertexAttribArray(location);
			return;
		}
		lime.graphics.opengl.GL.context.bindBuffer(34962,buffer.glBuffer);
		var dimension = 4;
		var type = 5126;
		var numBytes = 4;
		if(format == openfl.display3D.Context3DVertexBufferFormat.BYTES_4) {
			dimension = 4;
			type = 5126;
			numBytes = 4;
		} else if(format == openfl.display3D.Context3DVertexBufferFormat.FLOAT_1) {
			dimension = 1;
			type = 5126;
			numBytes = 4;
		} else if(format == openfl.display3D.Context3DVertexBufferFormat.FLOAT_2) {
			dimension = 2;
			type = 5126;
			numBytes = 4;
		} else if(format == openfl.display3D.Context3DVertexBufferFormat.FLOAT_3) {
			dimension = 3;
			type = 5126;
			numBytes = 4;
		} else if(format == openfl.display3D.Context3DVertexBufferFormat.FLOAT_4) {
			dimension = 4;
			type = 5126;
			numBytes = 4;
		} else throw "Buffer format " + Std.string(format) + " is not supported";
		lime.graphics.opengl.GL.context.enableVertexAttribArray(location);
		lime.graphics.opengl.GL.context.vertexAttribPointer(location,dimension,type,false,buffer.data32PerVertex * numBytes,bufferOffset * numBytes);
	}
	,setProgram: function(program3D) {
		var glProgram = null;
		if(program3D != null) glProgram = program3D.glProgram;
		lime.graphics.opengl.GL.context.useProgram(glProgram);
		this.currentProgram = program3D;
	}
	,setProgramConstantsFromByteArray: function(programType,firstRegister,numRegisters,data,byteArrayOffset) {
		data.position = byteArrayOffset;
		var _g = 0;
		while(_g < numRegisters) {
			var i = _g++;
			var locationName = this.__getUniformLocationNameFromAgalRegisterIndex(programType,firstRegister + i);
			this.setGLSLProgramConstantsFromByteArray(locationName,data);
		}
	}
	,setProgramConstantsFromMatrix: function(programType,firstRegister,matrix,transposedMatrix) {
		if(transposedMatrix == null) transposedMatrix = false;
		var d = matrix.rawData;
		if(transposedMatrix) {
			this.setProgramConstantsFromVector(programType,firstRegister,[d.data[0],d.data[4],d.data[8],d.data[12]],1);
			this.setProgramConstantsFromVector(programType,firstRegister + 1,[d.data[1],d.data[5],d.data[9],d.data[13]],1);
			this.setProgramConstantsFromVector(programType,firstRegister + 2,[d.data[2],d.data[6],d.data[10],d.data[14]],1);
			this.setProgramConstantsFromVector(programType,firstRegister + 3,[d.data[3],d.data[7],d.data[11],d.data[15]],1);
		} else {
			this.setProgramConstantsFromVector(programType,firstRegister,[d.data[0],d.data[1],d.data[2],d.data[3]],1);
			this.setProgramConstantsFromVector(programType,firstRegister + 1,[d.data[4],d.data[5],d.data[6],d.data[7]],1);
			this.setProgramConstantsFromVector(programType,firstRegister + 2,[d.data[8],d.data[9],d.data[10],d.data[11]],1);
			this.setProgramConstantsFromVector(programType,firstRegister + 3,[d.data[12],d.data[13],d.data[14],d.data[15]],1);
		}
	}
	,setProgramConstantsFromVector: function(programType,firstRegister,data,numRegisters) {
		if(numRegisters == null) numRegisters = 1;
		var _g = 0;
		while(_g < numRegisters) {
			var i = _g++;
			var currentIndex = i * 4;
			var locationName = this.__getUniformLocationNameFromAgalRegisterIndex(programType,firstRegister + i);
			this.setGLSLProgramConstantsFromVector4(locationName,data,currentIndex);
		}
	}
	,setRenderMethod: function(func) {
		this.ogl.set_render(function(rect) {
			func(null);
		});
	}
	,setRenderToBackBuffer: function() {
		lime.graphics.opengl.GL.context.disable(2929);
		lime.graphics.opengl.GL.context.disable(2960);
		lime.graphics.opengl.GL.context.disable(3089);
		if(this.framebuffer != null) lime.graphics.opengl.GL.context.bindFramebuffer(36160,null);
		if(this.renderbuffer != null) lime.graphics.opengl.GL.context.bindRenderbuffer(36161,null);
	}
	,setRenderToTexture: function(texture,enableDepthAndStencil,antiAlias,surfaceSelector) {
		if(surfaceSelector == null) surfaceSelector = 0;
		if(antiAlias == null) antiAlias = 0;
		if(enableDepthAndStencil == null) enableDepthAndStencil = false;
		if(this.framebuffer == null) this.framebuffer = lime.graphics.opengl.GL.context.createFramebuffer();
		lime.graphics.opengl.GL.context.bindFramebuffer(36160,this.framebuffer);
		if(this.renderbuffer == null) this.renderbuffer = lime.graphics.opengl.GL.context.createRenderbuffer();
		lime.graphics.opengl.GL.context.bindRenderbuffer(36161,this.renderbuffer);
		lime.graphics.opengl.GL.context.renderbufferStorage(36161,6408,texture.width,texture.height);
		lime.graphics.opengl.GL.context.framebufferTexture2D(36160,36064,3553,texture.glTexture,0);
		lime.graphics.opengl.GL.context.renderbufferStorage(36161,34041,texture.width,texture.height);
		lime.graphics.opengl.GL.context.framebufferRenderbuffer(36160,33306,36161,this.renderbuffer);
		if(enableDepthAndStencil) {
			lime.graphics.opengl.GL.context.enable(2929);
			lime.graphics.opengl.GL.context.enable(2960);
		}
		lime.graphics.opengl.GL.context.bindTexture(3553,texture.glTexture);
		lime.graphics.opengl.GL.context.texImage2D(3553,0,6408,texture.width,texture.height,0,6408,5121,null);
		lime.graphics.opengl.GL.context.texParameteri(3553,10240,9729);
		lime.graphics.opengl.GL.context.texParameteri(3553,10241,9985);
		lime.graphics.opengl.GL.context.viewport(0,0,texture.width,texture.height);
	}
	,setSamplerStateAt: function(sampler,wrap,filter,mipfilter) {
		if(0 <= sampler && sampler < openfl.display3D.Context3D.MAX_SAMPLERS) {
			this.samplerParameters[sampler].wrap = wrap;
			this.samplerParameters[sampler].filter = filter;
			this.samplerParameters[sampler].mipfilter = mipfilter;
		} else throw "Sampler is out of bounds.";
	}
	,setScissorRectangle: function(rectangle) {
		if(rectangle == null) {
			lime.graphics.opengl.GL.context.disable(3089);
			return;
		}
		lime.graphics.opengl.GL.context.enable(3089);
		lime.graphics.opengl.GL.context.scissor(rectangle.x | 0,rectangle.y | 0,rectangle.width | 0,rectangle.height | 0);
	}
	,setStencilActions: function(triangleFace,compareMode,actionOnBothPass,actionOnDepthFail,actionOnDepthPassStencilFail) {
		this.stencilCompareMode = compareMode;
		lime.graphics.opengl.GL.context.stencilOp(actionOnBothPass,actionOnDepthFail,actionOnDepthPassStencilFail);
		lime.graphics.opengl.GL.context.stencilFunc(this.stencilCompareMode,this.stencilRef,this.stencilReadMask);
	}
	,setStencilReferenceValue: function(referenceValue,readMask,writeMask) {
		if(writeMask == null) writeMask = 255;
		if(readMask == null) readMask = 255;
		this.stencilReadMask = readMask;
		this.stencilRef = referenceValue;
		lime.graphics.opengl.GL.context.stencilFunc(this.stencilCompareMode,this.stencilRef,this.stencilReadMask);
		lime.graphics.opengl.GL.context.stencilMask(writeMask);
	}
	,setTextureAt: function(sampler,texture) {
		var locationName = "fs" + sampler;
		this.setGLSLTextureAt(locationName,texture,sampler);
	}
	,setTextureParameters: function(texture,wrap,filter,mipfilter) {
		if(!openfl.display3D.Context3D.anisotropySupportTested) {
			var ext = lime.graphics.opengl.GL.context.getExtension("EXT_texture_filter_anisotropic");
			if(ext == null) ext = lime.graphics.opengl.GL.context.getExtension("MOZ_EXT_texture_filter_anisotropic");
			if(ext == null) ext = lime.graphics.opengl.GL.context.getExtension("WEBKIT_EXT_texture_filter_anisotropic");
			openfl.display3D.Context3D.supportsAnisotropy = ext != null;
			openfl.display3D.Context3D.anisotropySupportTested = true;
			lime.graphics.opengl.GL.context.texParameterf(3553,openfl.display3D.Context3D.TEXTURE_MAX_ANISOTROPY_EXT,(function($this) {
				var $r;
				var $int = openfl.display3D.Context3D.maxSupportedAnisotropy;
				$r = $int < 0?4294967296.0 + $int:$int + 0.0;
				return $r;
			}(this)));
			openfl.display3D.Context3D.maxSupportedAnisotropy = lime.graphics.opengl.GL.context.getTexParameter(3553,openfl.display3D.Context3D.TEXTURE_MAX_ANISOTROPY_EXT);
		}
		if(js.Boot.__instanceof(texture,openfl.display3D.textures.Texture)) {
			switch(wrap[1]) {
			case 0:
				lime.graphics.opengl.GL.context.texParameteri(3553,10242,33071);
				lime.graphics.opengl.GL.context.texParameteri(3553,10243,33071);
				break;
			case 1:
				lime.graphics.opengl.GL.context.texParameteri(3553,10242,10497);
				lime.graphics.opengl.GL.context.texParameteri(3553,10243,10497);
				break;
			}
			switch(filter[1]) {
			case 4:
				lime.graphics.opengl.GL.context.texParameteri(3553,10240,9729);
				if(openfl.display3D.Context3D.supportsAnisotropy) lime.graphics.opengl.GL.context.texParameterf(3553,openfl.display3D.Context3D.TEXTURE_MAX_ANISOTROPY_EXT,1);
				break;
			case 5:
				lime.graphics.opengl.GL.context.texParameteri(3553,10240,9728);
				if(openfl.display3D.Context3D.supportsAnisotropy) lime.graphics.opengl.GL.context.texParameterf(3553,openfl.display3D.Context3D.TEXTURE_MAX_ANISOTROPY_EXT,1);
				break;
			case 0:
				if(openfl.display3D.Context3D.supportsAnisotropy) lime.graphics.opengl.GL.context.texParameterf(3553,openfl.display3D.Context3D.TEXTURE_MAX_ANISOTROPY_EXT,(function($this) {
					var $r;
					var a = openfl.display3D.Context3D.maxSupportedAnisotropy;
					$r = (function($this) {
						var $r;
						var aNeg = 2 < 0;
						var bNeg = a < 0;
						$r = aNeg != bNeg?aNeg:2 > a;
						return $r;
					}($this));
					return $r;
				}(this))?(function($this) {
					var $r;
					var int1 = openfl.display3D.Context3D.maxSupportedAnisotropy;
					$r = int1 < 0?4294967296.0 + int1:int1 + 0.0;
					return $r;
				}(this)):2);
				break;
			case 1:
				if(openfl.display3D.Context3D.supportsAnisotropy) lime.graphics.opengl.GL.context.texParameterf(3553,openfl.display3D.Context3D.TEXTURE_MAX_ANISOTROPY_EXT,(function($this) {
					var $r;
					var a1 = openfl.display3D.Context3D.maxSupportedAnisotropy;
					$r = (function($this) {
						var $r;
						var aNeg1 = 4 < 0;
						var bNeg1 = a1 < 0;
						$r = aNeg1 != bNeg1?aNeg1:4 > a1;
						return $r;
					}($this));
					return $r;
				}(this))?(function($this) {
					var $r;
					var int2 = openfl.display3D.Context3D.maxSupportedAnisotropy;
					$r = int2 < 0?4294967296.0 + int2:int2 + 0.0;
					return $r;
				}(this)):4);
				break;
			case 2:
				if(openfl.display3D.Context3D.supportsAnisotropy) lime.graphics.opengl.GL.context.texParameterf(3553,openfl.display3D.Context3D.TEXTURE_MAX_ANISOTROPY_EXT,(function($this) {
					var $r;
					var a2 = openfl.display3D.Context3D.maxSupportedAnisotropy;
					$r = (function($this) {
						var $r;
						var aNeg2 = 8 < 0;
						var bNeg2 = a2 < 0;
						$r = aNeg2 != bNeg2?aNeg2:8 > a2;
						return $r;
					}($this));
					return $r;
				}(this))?(function($this) {
					var $r;
					var int3 = openfl.display3D.Context3D.maxSupportedAnisotropy;
					$r = int3 < 0?4294967296.0 + int3:int3 + 0.0;
					return $r;
				}(this)):8);
				break;
			case 3:
				if(openfl.display3D.Context3D.supportsAnisotropy) lime.graphics.opengl.GL.context.texParameterf(3553,openfl.display3D.Context3D.TEXTURE_MAX_ANISOTROPY_EXT,(function($this) {
					var $r;
					var a3 = openfl.display3D.Context3D.maxSupportedAnisotropy;
					$r = (function($this) {
						var $r;
						var aNeg3 = 16 < 0;
						var bNeg3 = a3 < 0;
						$r = aNeg3 != bNeg3?aNeg3:16 > a3;
						return $r;
					}($this));
					return $r;
				}(this))?(function($this) {
					var $r;
					var int4 = openfl.display3D.Context3D.maxSupportedAnisotropy;
					$r = int4 < 0?4294967296.0 + int4:int4 + 0.0;
					return $r;
				}(this)):16);
				break;
			}
			switch(mipfilter[1]) {
			case 0:
				lime.graphics.opengl.GL.context.generateMipmap(3553);
				lime.graphics.opengl.GL.context.texParameteri(3553,10241,9987);
				break;
			case 1:
				lime.graphics.opengl.GL.context.generateMipmap(3553);
				lime.graphics.opengl.GL.context.texParameteri(3553,10241,9984);
				break;
			case 2:
				lime.graphics.opengl.GL.context.texParameteri(3553,10241,9729);
				break;
			}
		} else if(js.Boot.__instanceof(texture,openfl.display3D.textures.RectangleTexture)) {
			lime.graphics.opengl.GL.context.texParameteri(3553,10242,33071);
			lime.graphics.opengl.GL.context.texParameteri(3553,10243,33071);
			switch(filter[1]) {
			case 4:
				lime.graphics.opengl.GL.context.texParameteri(3553,10240,9729);
				if(openfl.display3D.Context3D.supportsAnisotropy) lime.graphics.opengl.GL.context.texParameterf(3553,openfl.display3D.Context3D.TEXTURE_MAX_ANISOTROPY_EXT,1);
				break;
			case 5:
				lime.graphics.opengl.GL.context.texParameteri(3553,10240,9728);
				if(openfl.display3D.Context3D.supportsAnisotropy) lime.graphics.opengl.GL.context.texParameterf(3553,openfl.display3D.Context3D.TEXTURE_MAX_ANISOTROPY_EXT,1);
				break;
			case 0:
				if(openfl.display3D.Context3D.supportsAnisotropy) lime.graphics.opengl.GL.context.texParameterf(3553,openfl.display3D.Context3D.TEXTURE_MAX_ANISOTROPY_EXT,(function($this) {
					var $r;
					var a4 = openfl.display3D.Context3D.maxSupportedAnisotropy;
					$r = (function($this) {
						var $r;
						var aNeg4 = 2 < 0;
						var bNeg4 = a4 < 0;
						$r = aNeg4 != bNeg4?aNeg4:2 > a4;
						return $r;
					}($this));
					return $r;
				}(this))?(function($this) {
					var $r;
					var int5 = openfl.display3D.Context3D.maxSupportedAnisotropy;
					$r = int5 < 0?4294967296.0 + int5:int5 + 0.0;
					return $r;
				}(this)):2);
				break;
			case 1:
				if(openfl.display3D.Context3D.supportsAnisotropy) lime.graphics.opengl.GL.context.texParameterf(3553,openfl.display3D.Context3D.TEXTURE_MAX_ANISOTROPY_EXT,(function($this) {
					var $r;
					var a5 = openfl.display3D.Context3D.maxSupportedAnisotropy;
					$r = (function($this) {
						var $r;
						var aNeg5 = 4 < 0;
						var bNeg5 = a5 < 0;
						$r = aNeg5 != bNeg5?aNeg5:4 > a5;
						return $r;
					}($this));
					return $r;
				}(this))?(function($this) {
					var $r;
					var int6 = openfl.display3D.Context3D.maxSupportedAnisotropy;
					$r = int6 < 0?4294967296.0 + int6:int6 + 0.0;
					return $r;
				}(this)):4);
				break;
			case 2:
				if(openfl.display3D.Context3D.supportsAnisotropy) lime.graphics.opengl.GL.context.texParameterf(3553,openfl.display3D.Context3D.TEXTURE_MAX_ANISOTROPY_EXT,(function($this) {
					var $r;
					var a6 = openfl.display3D.Context3D.maxSupportedAnisotropy;
					$r = (function($this) {
						var $r;
						var aNeg6 = 8 < 0;
						var bNeg6 = a6 < 0;
						$r = aNeg6 != bNeg6?aNeg6:8 > a6;
						return $r;
					}($this));
					return $r;
				}(this))?(function($this) {
					var $r;
					var int7 = openfl.display3D.Context3D.maxSupportedAnisotropy;
					$r = int7 < 0?4294967296.0 + int7:int7 + 0.0;
					return $r;
				}(this)):8);
				break;
			case 3:
				if(openfl.display3D.Context3D.supportsAnisotropy) lime.graphics.opengl.GL.context.texParameterf(3553,openfl.display3D.Context3D.TEXTURE_MAX_ANISOTROPY_EXT,(function($this) {
					var $r;
					var a7 = openfl.display3D.Context3D.maxSupportedAnisotropy;
					$r = (function($this) {
						var $r;
						var aNeg7 = 16 < 0;
						var bNeg7 = a7 < 0;
						$r = aNeg7 != bNeg7?aNeg7:16 > a7;
						return $r;
					}($this));
					return $r;
				}(this))?(function($this) {
					var $r;
					var int8 = openfl.display3D.Context3D.maxSupportedAnisotropy;
					$r = int8 < 0?4294967296.0 + int8:int8 + 0.0;
					return $r;
				}(this)):16);
				break;
			}
			lime.graphics.opengl.GL.context.texParameteri(3553,10241,9729);
		} else if(js.Boot.__instanceof(texture,openfl.display3D.textures.CubeTexture)) {
			switch(wrap[1]) {
			case 0:
				lime.graphics.opengl.GL.context.texParameteri(34067,10242,33071);
				lime.graphics.opengl.GL.context.texParameteri(34067,10243,33071);
				break;
			case 1:
				lime.graphics.opengl.GL.context.texParameteri(34067,10242,10497);
				lime.graphics.opengl.GL.context.texParameteri(34067,10243,10497);
				break;
			}
			switch(filter[1]) {
			case 4:
				lime.graphics.opengl.GL.context.texParameteri(34067,10240,9729);
				if(openfl.display3D.Context3D.supportsAnisotropy) lime.graphics.opengl.GL.context.texParameterf(34067,openfl.display3D.Context3D.TEXTURE_MAX_ANISOTROPY_EXT,1);
				break;
			case 5:
				lime.graphics.opengl.GL.context.texParameteri(34067,10240,9728);
				if(openfl.display3D.Context3D.supportsAnisotropy) lime.graphics.opengl.GL.context.texParameterf(34067,openfl.display3D.Context3D.TEXTURE_MAX_ANISOTROPY_EXT,1);
				break;
			case 0:
				if(openfl.display3D.Context3D.supportsAnisotropy) lime.graphics.opengl.GL.context.texParameterf(34067,openfl.display3D.Context3D.TEXTURE_MAX_ANISOTROPY_EXT,(function($this) {
					var $r;
					var a8 = openfl.display3D.Context3D.maxSupportedAnisotropy;
					$r = (function($this) {
						var $r;
						var aNeg8 = 2 < 0;
						var bNeg8 = a8 < 0;
						$r = aNeg8 != bNeg8?aNeg8:2 > a8;
						return $r;
					}($this));
					return $r;
				}(this))?(function($this) {
					var $r;
					var int9 = openfl.display3D.Context3D.maxSupportedAnisotropy;
					$r = int9 < 0?4294967296.0 + int9:int9 + 0.0;
					return $r;
				}(this)):2);
				break;
			case 1:
				if(openfl.display3D.Context3D.supportsAnisotropy) lime.graphics.opengl.GL.context.texParameterf(34067,openfl.display3D.Context3D.TEXTURE_MAX_ANISOTROPY_EXT,(function($this) {
					var $r;
					var a9 = openfl.display3D.Context3D.maxSupportedAnisotropy;
					$r = (function($this) {
						var $r;
						var aNeg9 = 4 < 0;
						var bNeg9 = a9 < 0;
						$r = aNeg9 != bNeg9?aNeg9:4 > a9;
						return $r;
					}($this));
					return $r;
				}(this))?(function($this) {
					var $r;
					var int10 = openfl.display3D.Context3D.maxSupportedAnisotropy;
					$r = int10 < 0?4294967296.0 + int10:int10 + 0.0;
					return $r;
				}(this)):4);
				break;
			case 2:
				if(openfl.display3D.Context3D.supportsAnisotropy) lime.graphics.opengl.GL.context.texParameterf(34067,openfl.display3D.Context3D.TEXTURE_MAX_ANISOTROPY_EXT,(function($this) {
					var $r;
					var a10 = openfl.display3D.Context3D.maxSupportedAnisotropy;
					$r = (function($this) {
						var $r;
						var aNeg10 = 8 < 0;
						var bNeg10 = a10 < 0;
						$r = aNeg10 != bNeg10?aNeg10:8 > a10;
						return $r;
					}($this));
					return $r;
				}(this))?(function($this) {
					var $r;
					var int11 = openfl.display3D.Context3D.maxSupportedAnisotropy;
					$r = int11 < 0?4294967296.0 + int11:int11 + 0.0;
					return $r;
				}(this)):8);
				break;
			case 3:
				if(openfl.display3D.Context3D.supportsAnisotropy) lime.graphics.opengl.GL.context.texParameterf(34067,openfl.display3D.Context3D.TEXTURE_MAX_ANISOTROPY_EXT,(function($this) {
					var $r;
					var a11 = openfl.display3D.Context3D.maxSupportedAnisotropy;
					$r = (function($this) {
						var $r;
						var aNeg11 = 16 < 0;
						var bNeg11 = a11 < 0;
						$r = aNeg11 != bNeg11?aNeg11:16 > a11;
						return $r;
					}($this));
					return $r;
				}(this))?(function($this) {
					var $r;
					var int12 = openfl.display3D.Context3D.maxSupportedAnisotropy;
					$r = int12 < 0?4294967296.0 + int12:int12 + 0.0;
					return $r;
				}(this)):16);
				break;
			}
			switch(mipfilter[1]) {
			case 0:
				lime.graphics.opengl.GL.context.texParameteri(34067,10241,9987);
				break;
			case 1:
				lime.graphics.opengl.GL.context.texParameteri(34067,10241,9984);
				break;
			case 2:
				lime.graphics.opengl.GL.context.texParameteri(34067,10241,9729);
				break;
			}
		} else throw "Texture of type " + Type.getClassName(Type.getClass(texture)) + " not supported yet";
	}
	,setVertexBufferAt: function(index,buffer,bufferOffset,format) {
		if(bufferOffset == null) bufferOffset = 0;
		var locationName = "va" + index;
		this.setGLSLVertexBufferAt(locationName,buffer,bufferOffset,format);
	}
	,__getUniformLocationNameFromAgalRegisterIndex: function(programType,firstRegister) {
		if(programType == openfl.display3D.Context3DProgramType.VERTEX) return "vc" + firstRegister; else if(programType == openfl.display3D.Context3DProgramType.FRAGMENT) return "fc" + firstRegister;
		throw "Program Type " + Std.string(programType) + " not supported";
	}
	,__updateBlendStatus: function() {
		if(this.blendEnabled) {
			lime.graphics.opengl.GL.context.enable(3042);
			lime.graphics.opengl.GL.context.blendEquation(32774);
			lime.graphics.opengl.GL.context.blendFunc(this.blendSourceFactor,this.blendDestinationFactor);
		} else lime.graphics.opengl.GL.context.disable(3042);
	}
	,__class__: openfl.display3D.Context3D
};
openfl.display3D._Context3D = {};
openfl.display3D._Context3D.SamplerState = function() {
};
$hxClasses["openfl.display3D._Context3D.SamplerState"] = openfl.display3D._Context3D.SamplerState;
openfl.display3D._Context3D.SamplerState.__name__ = ["openfl","display3D","_Context3D","SamplerState"];
openfl.display3D._Context3D.SamplerState.prototype = {
	wrap: null
	,filter: null
	,mipfilter: null
	,__class__: openfl.display3D._Context3D.SamplerState
};
openfl.display3D._Context3DBlendFactor = {};
openfl.display3D._Context3DBlendFactor.Context3DBlendFactor_Impl_ = function() { };
$hxClasses["openfl.display3D._Context3DBlendFactor.Context3DBlendFactor_Impl_"] = openfl.display3D._Context3DBlendFactor.Context3DBlendFactor_Impl_;
openfl.display3D._Context3DBlendFactor.Context3DBlendFactor_Impl_.__name__ = ["openfl","display3D","_Context3DBlendFactor","Context3DBlendFactor_Impl_"];
openfl.display3D._Context3DBlendFactor.Context3DBlendFactor_Impl_._new = function(a) {
	return a;
};
openfl.display3D._Context3DBlendFactor.Context3DBlendFactor_Impl_.fromInt = function(s) {
	return s;
};
openfl.display3D._Context3DBlendFactor.Context3DBlendFactor_Impl_.toInt = function(this1) {
	return this1;
};
openfl.display3D.Context3DClearMask = function() { };
$hxClasses["openfl.display3D.Context3DClearMask"] = openfl.display3D.Context3DClearMask;
openfl.display3D.Context3DClearMask.__name__ = ["openfl","display3D","Context3DClearMask"];
openfl.display3D._Context3DCompareMode = {};
openfl.display3D._Context3DCompareMode.Context3DCompareMode_Impl_ = function() { };
$hxClasses["openfl.display3D._Context3DCompareMode.Context3DCompareMode_Impl_"] = openfl.display3D._Context3DCompareMode.Context3DCompareMode_Impl_;
openfl.display3D._Context3DCompareMode.Context3DCompareMode_Impl_.__name__ = ["openfl","display3D","_Context3DCompareMode","Context3DCompareMode_Impl_"];
openfl.display3D._Context3DCompareMode.Context3DCompareMode_Impl_._new = function(a) {
	return a;
};
openfl.display3D._Context3DCompareMode.Context3DCompareMode_Impl_.fromInt = function(s) {
	return s;
};
openfl.display3D._Context3DCompareMode.Context3DCompareMode_Impl_.toInt = function(this1) {
	return this1;
};
openfl.display3D.Context3DMipFilter = $hxClasses["openfl.display3D.Context3DMipFilter"] = { __ename__ : ["openfl","display3D","Context3DMipFilter"], __constructs__ : ["MIPLINEAR","MIPNEAREST","MIPNONE"] };
openfl.display3D.Context3DMipFilter.MIPLINEAR = ["MIPLINEAR",0];
openfl.display3D.Context3DMipFilter.MIPLINEAR.toString = $estr;
openfl.display3D.Context3DMipFilter.MIPLINEAR.__enum__ = openfl.display3D.Context3DMipFilter;
openfl.display3D.Context3DMipFilter.MIPNEAREST = ["MIPNEAREST",1];
openfl.display3D.Context3DMipFilter.MIPNEAREST.toString = $estr;
openfl.display3D.Context3DMipFilter.MIPNEAREST.__enum__ = openfl.display3D.Context3DMipFilter;
openfl.display3D.Context3DMipFilter.MIPNONE = ["MIPNONE",2];
openfl.display3D.Context3DMipFilter.MIPNONE.toString = $estr;
openfl.display3D.Context3DMipFilter.MIPNONE.__enum__ = openfl.display3D.Context3DMipFilter;
openfl.display3D.Context3DMipFilter.__empty_constructs__ = [openfl.display3D.Context3DMipFilter.MIPLINEAR,openfl.display3D.Context3DMipFilter.MIPNEAREST,openfl.display3D.Context3DMipFilter.MIPNONE];
openfl.display3D.Context3DProfile = $hxClasses["openfl.display3D.Context3DProfile"] = { __ename__ : ["openfl","display3D","Context3DProfile"], __constructs__ : ["BASELINE","BASELINE_CONSTRAINED","BASELINE_EXTENDED"] };
openfl.display3D.Context3DProfile.BASELINE = ["BASELINE",0];
openfl.display3D.Context3DProfile.BASELINE.toString = $estr;
openfl.display3D.Context3DProfile.BASELINE.__enum__ = openfl.display3D.Context3DProfile;
openfl.display3D.Context3DProfile.BASELINE_CONSTRAINED = ["BASELINE_CONSTRAINED",1];
openfl.display3D.Context3DProfile.BASELINE_CONSTRAINED.toString = $estr;
openfl.display3D.Context3DProfile.BASELINE_CONSTRAINED.__enum__ = openfl.display3D.Context3DProfile;
openfl.display3D.Context3DProfile.BASELINE_EXTENDED = ["BASELINE_EXTENDED",2];
openfl.display3D.Context3DProfile.BASELINE_EXTENDED.toString = $estr;
openfl.display3D.Context3DProfile.BASELINE_EXTENDED.__enum__ = openfl.display3D.Context3DProfile;
openfl.display3D.Context3DProfile.__empty_constructs__ = [openfl.display3D.Context3DProfile.BASELINE,openfl.display3D.Context3DProfile.BASELINE_CONSTRAINED,openfl.display3D.Context3DProfile.BASELINE_EXTENDED];
openfl.display3D.Context3DProgramType = $hxClasses["openfl.display3D.Context3DProgramType"] = { __ename__ : ["openfl","display3D","Context3DProgramType"], __constructs__ : ["VERTEX","FRAGMENT"] };
openfl.display3D.Context3DProgramType.VERTEX = ["VERTEX",0];
openfl.display3D.Context3DProgramType.VERTEX.toString = $estr;
openfl.display3D.Context3DProgramType.VERTEX.__enum__ = openfl.display3D.Context3DProgramType;
openfl.display3D.Context3DProgramType.FRAGMENT = ["FRAGMENT",1];
openfl.display3D.Context3DProgramType.FRAGMENT.toString = $estr;
openfl.display3D.Context3DProgramType.FRAGMENT.__enum__ = openfl.display3D.Context3DProgramType;
openfl.display3D.Context3DProgramType.__empty_constructs__ = [openfl.display3D.Context3DProgramType.VERTEX,openfl.display3D.Context3DProgramType.FRAGMENT];
openfl.display3D.Context3DRenderMode = $hxClasses["openfl.display3D.Context3DRenderMode"] = { __ename__ : ["openfl","display3D","Context3DRenderMode"], __constructs__ : ["AUTO","SOFTWARE"] };
openfl.display3D.Context3DRenderMode.AUTO = ["AUTO",0];
openfl.display3D.Context3DRenderMode.AUTO.toString = $estr;
openfl.display3D.Context3DRenderMode.AUTO.__enum__ = openfl.display3D.Context3DRenderMode;
openfl.display3D.Context3DRenderMode.SOFTWARE = ["SOFTWARE",1];
openfl.display3D.Context3DRenderMode.SOFTWARE.toString = $estr;
openfl.display3D.Context3DRenderMode.SOFTWARE.__enum__ = openfl.display3D.Context3DRenderMode;
openfl.display3D.Context3DRenderMode.__empty_constructs__ = [openfl.display3D.Context3DRenderMode.AUTO,openfl.display3D.Context3DRenderMode.SOFTWARE];
openfl.display3D._Context3DStencilAction = {};
openfl.display3D._Context3DStencilAction.Context3DStencilAction_Impl_ = function() { };
$hxClasses["openfl.display3D._Context3DStencilAction.Context3DStencilAction_Impl_"] = openfl.display3D._Context3DStencilAction.Context3DStencilAction_Impl_;
openfl.display3D._Context3DStencilAction.Context3DStencilAction_Impl_.__name__ = ["openfl","display3D","_Context3DStencilAction","Context3DStencilAction_Impl_"];
openfl.display3D._Context3DStencilAction.Context3DStencilAction_Impl_._new = function(a) {
	return a;
};
openfl.display3D._Context3DStencilAction.Context3DStencilAction_Impl_.fromInt = function(s) {
	return s;
};
openfl.display3D._Context3DStencilAction.Context3DStencilAction_Impl_.toInt = function(this1) {
	return this1;
};
openfl.display3D.Context3DTextureFilter = $hxClasses["openfl.display3D.Context3DTextureFilter"] = { __ename__ : ["openfl","display3D","Context3DTextureFilter"], __constructs__ : ["ANISOTROPIC2X","ANISOTROPIC4X","ANISOTROPIC8X","ANISOTROPIC16X","LINEAR","NEAREST"] };
openfl.display3D.Context3DTextureFilter.ANISOTROPIC2X = ["ANISOTROPIC2X",0];
openfl.display3D.Context3DTextureFilter.ANISOTROPIC2X.toString = $estr;
openfl.display3D.Context3DTextureFilter.ANISOTROPIC2X.__enum__ = openfl.display3D.Context3DTextureFilter;
openfl.display3D.Context3DTextureFilter.ANISOTROPIC4X = ["ANISOTROPIC4X",1];
openfl.display3D.Context3DTextureFilter.ANISOTROPIC4X.toString = $estr;
openfl.display3D.Context3DTextureFilter.ANISOTROPIC4X.__enum__ = openfl.display3D.Context3DTextureFilter;
openfl.display3D.Context3DTextureFilter.ANISOTROPIC8X = ["ANISOTROPIC8X",2];
openfl.display3D.Context3DTextureFilter.ANISOTROPIC8X.toString = $estr;
openfl.display3D.Context3DTextureFilter.ANISOTROPIC8X.__enum__ = openfl.display3D.Context3DTextureFilter;
openfl.display3D.Context3DTextureFilter.ANISOTROPIC16X = ["ANISOTROPIC16X",3];
openfl.display3D.Context3DTextureFilter.ANISOTROPIC16X.toString = $estr;
openfl.display3D.Context3DTextureFilter.ANISOTROPIC16X.__enum__ = openfl.display3D.Context3DTextureFilter;
openfl.display3D.Context3DTextureFilter.LINEAR = ["LINEAR",4];
openfl.display3D.Context3DTextureFilter.LINEAR.toString = $estr;
openfl.display3D.Context3DTextureFilter.LINEAR.__enum__ = openfl.display3D.Context3DTextureFilter;
openfl.display3D.Context3DTextureFilter.NEAREST = ["NEAREST",5];
openfl.display3D.Context3DTextureFilter.NEAREST.toString = $estr;
openfl.display3D.Context3DTextureFilter.NEAREST.__enum__ = openfl.display3D.Context3DTextureFilter;
openfl.display3D.Context3DTextureFilter.__empty_constructs__ = [openfl.display3D.Context3DTextureFilter.ANISOTROPIC2X,openfl.display3D.Context3DTextureFilter.ANISOTROPIC4X,openfl.display3D.Context3DTextureFilter.ANISOTROPIC8X,openfl.display3D.Context3DTextureFilter.ANISOTROPIC16X,openfl.display3D.Context3DTextureFilter.LINEAR,openfl.display3D.Context3DTextureFilter.NEAREST];
openfl.display3D.Context3DTextureFormat = $hxClasses["openfl.display3D.Context3DTextureFormat"] = { __ename__ : ["openfl","display3D","Context3DTextureFormat"], __constructs__ : ["BGRA","COMPRESSED","COMPRESSED_ALPHA"] };
openfl.display3D.Context3DTextureFormat.BGRA = ["BGRA",0];
openfl.display3D.Context3DTextureFormat.BGRA.toString = $estr;
openfl.display3D.Context3DTextureFormat.BGRA.__enum__ = openfl.display3D.Context3DTextureFormat;
openfl.display3D.Context3DTextureFormat.COMPRESSED = ["COMPRESSED",1];
openfl.display3D.Context3DTextureFormat.COMPRESSED.toString = $estr;
openfl.display3D.Context3DTextureFormat.COMPRESSED.__enum__ = openfl.display3D.Context3DTextureFormat;
openfl.display3D.Context3DTextureFormat.COMPRESSED_ALPHA = ["COMPRESSED_ALPHA",2];
openfl.display3D.Context3DTextureFormat.COMPRESSED_ALPHA.toString = $estr;
openfl.display3D.Context3DTextureFormat.COMPRESSED_ALPHA.__enum__ = openfl.display3D.Context3DTextureFormat;
openfl.display3D.Context3DTextureFormat.__empty_constructs__ = [openfl.display3D.Context3DTextureFormat.BGRA,openfl.display3D.Context3DTextureFormat.COMPRESSED,openfl.display3D.Context3DTextureFormat.COMPRESSED_ALPHA];
openfl.display3D._Context3DTriangleFace = {};
openfl.display3D._Context3DTriangleFace.Context3DTriangleFace_Impl_ = function() { };
$hxClasses["openfl.display3D._Context3DTriangleFace.Context3DTriangleFace_Impl_"] = openfl.display3D._Context3DTriangleFace.Context3DTriangleFace_Impl_;
openfl.display3D._Context3DTriangleFace.Context3DTriangleFace_Impl_.__name__ = ["openfl","display3D","_Context3DTriangleFace","Context3DTriangleFace_Impl_"];
openfl.display3D._Context3DTriangleFace.Context3DTriangleFace_Impl_._new = function(a) {
	return a;
};
openfl.display3D._Context3DTriangleFace.Context3DTriangleFace_Impl_.fromInt = function(s) {
	return s;
};
openfl.display3D._Context3DTriangleFace.Context3DTriangleFace_Impl_.toInt = function(this1) {
	return this1;
};
openfl.display3D.Context3DVertexBufferFormat = $hxClasses["openfl.display3D.Context3DVertexBufferFormat"] = { __ename__ : ["openfl","display3D","Context3DVertexBufferFormat"], __constructs__ : ["BYTES_4","FLOAT_1","FLOAT_2","FLOAT_3","FLOAT_4"] };
openfl.display3D.Context3DVertexBufferFormat.BYTES_4 = ["BYTES_4",0];
openfl.display3D.Context3DVertexBufferFormat.BYTES_4.toString = $estr;
openfl.display3D.Context3DVertexBufferFormat.BYTES_4.__enum__ = openfl.display3D.Context3DVertexBufferFormat;
openfl.display3D.Context3DVertexBufferFormat.FLOAT_1 = ["FLOAT_1",1];
openfl.display3D.Context3DVertexBufferFormat.FLOAT_1.toString = $estr;
openfl.display3D.Context3DVertexBufferFormat.FLOAT_1.__enum__ = openfl.display3D.Context3DVertexBufferFormat;
openfl.display3D.Context3DVertexBufferFormat.FLOAT_2 = ["FLOAT_2",2];
openfl.display3D.Context3DVertexBufferFormat.FLOAT_2.toString = $estr;
openfl.display3D.Context3DVertexBufferFormat.FLOAT_2.__enum__ = openfl.display3D.Context3DVertexBufferFormat;
openfl.display3D.Context3DVertexBufferFormat.FLOAT_3 = ["FLOAT_3",3];
openfl.display3D.Context3DVertexBufferFormat.FLOAT_3.toString = $estr;
openfl.display3D.Context3DVertexBufferFormat.FLOAT_3.__enum__ = openfl.display3D.Context3DVertexBufferFormat;
openfl.display3D.Context3DVertexBufferFormat.FLOAT_4 = ["FLOAT_4",4];
openfl.display3D.Context3DVertexBufferFormat.FLOAT_4.toString = $estr;
openfl.display3D.Context3DVertexBufferFormat.FLOAT_4.__enum__ = openfl.display3D.Context3DVertexBufferFormat;
openfl.display3D.Context3DVertexBufferFormat.__empty_constructs__ = [openfl.display3D.Context3DVertexBufferFormat.BYTES_4,openfl.display3D.Context3DVertexBufferFormat.FLOAT_1,openfl.display3D.Context3DVertexBufferFormat.FLOAT_2,openfl.display3D.Context3DVertexBufferFormat.FLOAT_3,openfl.display3D.Context3DVertexBufferFormat.FLOAT_4];
openfl.display3D.Context3DWrapMode = $hxClasses["openfl.display3D.Context3DWrapMode"] = { __ename__ : ["openfl","display3D","Context3DWrapMode"], __constructs__ : ["CLAMP","REPEAT"] };
openfl.display3D.Context3DWrapMode.CLAMP = ["CLAMP",0];
openfl.display3D.Context3DWrapMode.CLAMP.toString = $estr;
openfl.display3D.Context3DWrapMode.CLAMP.__enum__ = openfl.display3D.Context3DWrapMode;
openfl.display3D.Context3DWrapMode.REPEAT = ["REPEAT",1];
openfl.display3D.Context3DWrapMode.REPEAT.toString = $estr;
openfl.display3D.Context3DWrapMode.REPEAT.__enum__ = openfl.display3D.Context3DWrapMode;
openfl.display3D.Context3DWrapMode.__empty_constructs__ = [openfl.display3D.Context3DWrapMode.CLAMP,openfl.display3D.Context3DWrapMode.REPEAT];
openfl.display3D.IndexBuffer3D = function(glBuffer,numIndices) {
	this.glBuffer = glBuffer;
	this.numIndices = numIndices;
};
$hxClasses["openfl.display3D.IndexBuffer3D"] = openfl.display3D.IndexBuffer3D;
openfl.display3D.IndexBuffer3D.__name__ = ["openfl","display3D","IndexBuffer3D"];
openfl.display3D.IndexBuffer3D.prototype = {
	glBuffer: null
	,numIndices: null
	,dispose: function() {
		lime.graphics.opengl.GL.context.deleteBuffer(this.glBuffer);
	}
	,uploadFromByteArray: function(byteArray,byteArrayOffset,startOffset,count) {
		var bytesPerIndex = 2;
		lime.graphics.opengl.GL.context.bindBuffer(34963,this.glBuffer);
		var length = count * bytesPerIndex;
		var offset = byteArrayOffset + startOffset * bytesPerIndex;
		var indices;
		indices = new Int16Array(length);
		byteArray.position = offset;
		var i = 0;
		while(byteArray.position < length + offset) {
			indices[i] = byteArray.readUnsignedByte();
			i++;
		}
		lime.graphics.opengl.GL.context.bufferData(34963,indices,35044);
	}
	,uploadFromVector: function(data,startOffset,count) {
		lime.graphics.opengl.GL.context.bindBuffer(34963,this.glBuffer);
		var indices;
		indices = new Int16Array(count);
		var _g1 = startOffset;
		var _g = startOffset + count;
		while(_g1 < _g) {
			var i = _g1++;
			indices[i] = data.data[i];
		}
		lime.graphics.opengl.GL.context.bufferData(34963,indices,35044);
	}
	,__class__: openfl.display3D.IndexBuffer3D
};
openfl.display3D.Program3D = function(program) {
	this.glProgram = program;
};
$hxClasses["openfl.display3D.Program3D"] = openfl.display3D.Program3D;
openfl.display3D.Program3D.__name__ = ["openfl","display3D","Program3D"];
openfl.display3D.Program3D.prototype = {
	glProgram: null
	,dispose: function() {
		lime.graphics.opengl.GL.context.deleteProgram(this.glProgram);
	}
	,upload: function(vertexShader,fragmentShader) {
		lime.graphics.opengl.GL.context.attachShader(this.glProgram,vertexShader);
		lime.graphics.opengl.GL.context.attachShader(this.glProgram,fragmentShader);
		lime.graphics.opengl.GL.context.linkProgram(this.glProgram);
		if(lime.graphics.opengl.GL.context.getProgramParameter(this.glProgram,35714) == 0) {
			var result = lime.graphics.opengl.GL.context.getProgramInfoLog(this.glProgram);
			if(result != "") throw result;
		}
	}
	,__class__: openfl.display3D.Program3D
};
openfl.display3D.VertexBuffer3D = function(glBuffer,numVertices,data32PerVertex) {
	this.glBuffer = glBuffer;
	this.numVertices = numVertices;
	this.data32PerVertex = data32PerVertex;
};
$hxClasses["openfl.display3D.VertexBuffer3D"] = openfl.display3D.VertexBuffer3D;
openfl.display3D.VertexBuffer3D.__name__ = ["openfl","display3D","VertexBuffer3D"];
openfl.display3D.VertexBuffer3D.prototype = {
	data32PerVertex: null
	,glBuffer: null
	,numVertices: null
	,dispose: function() {
		lime.graphics.opengl.GL.context.deleteBuffer(this.glBuffer);
	}
	,uploadFromByteArray: function(byteArray,byteArrayOffset,startOffset,count) {
		var bytesPerVertex = this.data32PerVertex * 4;
		lime.graphics.opengl.GL.context.bindBuffer(34962,this.glBuffer);
		var length = count * bytesPerVertex;
		var offset = byteArrayOffset + startOffset * bytesPerVertex;
		var float32Array;
		float32Array = new Float32Array(length);
		byteArray.position = offset;
		var i = 0;
		while(byteArray.position < length + offset) {
			float32Array[i] = byteArray.readUnsignedByte();
			i++;
		}
		lime.graphics.opengl.GL.context.bufferData(34962,float32Array,35044);
	}
	,uploadFromFloat32Array: function(data,startVertex,numVertices) {
		lime.graphics.opengl.GL.context.bindBuffer(34962,this.glBuffer);
		lime.graphics.opengl.GL.context.bufferData(34962,data,35044);
	}
	,uploadFromVector: function(data,startVertex,numVertices) {
		var bytesPerVertex = this.data32PerVertex * 4;
		lime.graphics.opengl.GL.context.bindBuffer(34962,this.glBuffer);
		var length = numVertices * this.data32PerVertex;
		var offset = startVertex;
		var float32Array;
		float32Array = new Float32Array(length);
		var _g1 = startVertex;
		var _g = startVertex + length;
		while(_g1 < _g) {
			var i = _g1++;
			float32Array[i] = data.data[i];
		}
		lime.graphics.opengl.GL.context.bufferData(34962,float32Array,35044);
		float32Array = null;
	}
	,__class__: openfl.display3D.VertexBuffer3D
};
openfl.display3D._shaders = {};
openfl.display3D._shaders.AGLSLShaderUtils = function() { };
$hxClasses["openfl.display3D._shaders.AGLSLShaderUtils"] = openfl.display3D._shaders.AGLSLShaderUtils;
openfl.display3D._shaders.AGLSLShaderUtils.__name__ = ["openfl","display3D","_shaders","AGLSLShaderUtils"];
openfl.display3D._shaders.AGLSLShaderUtils.compile = function(programType,source) {
	var agalMiniAssembler = new openfl.utils.AGALMiniAssembler();
	var data = null;
	var concatSource;
	switch(programType) {
	case "vertex":
		concatSource = "part vertex 1 \n" + source + "endpart";
		agalMiniAssembler.assemble(concatSource);
		data = agalMiniAssembler.r.get("vertex").data;
		break;
	case "fragment":
		concatSource = "part fragment 1 \n" + source + "endpart";
		agalMiniAssembler.assemble(concatSource);
		data = agalMiniAssembler.r.get("fragment").data;
		break;
	default:
		throw "Unknown Context3DProgramType";
	}
	return data;
};
openfl.display3D._shaders.AGLSLShaderUtils.createShader = function(type,shaderSource) {
	var aglsl = new openfl._internal.aglsl.AGLSLCompiler();
	var glType;
	var shaderType;
	switch(type[1]) {
	case 0:
		glType = 35633;
		shaderType = "vertex";
		break;
	case 1:
		glType = 35632;
		shaderType = "fragment";
		break;
	}
	var shaderSourceString = aglsl.compile(shaderType,shaderSource);
	var shader = lime.graphics.opengl.GL.context.createShader(glType);
	lime.graphics.opengl.GL.context.shaderSource(shader,shaderSourceString);
	lime.graphics.opengl.GL.context.compileShader(shader);
	if(lime.graphics.opengl.GL.context.getShaderParameter(shader,35713) == 0) {
		haxe.Log.trace("--- ERR ---\n" + shaderSourceString,{ fileName : "AGLSLShaderUtils.hx", lineNumber : 85, className : "openfl.display3D._shaders.AGLSLShaderUtils", methodName : "createShader"});
		var err = lime.graphics.opengl.GL.context.getShaderInfoLog(shader);
		if(err != "") throw err;
	}
	return shader;
};
openfl.display3D.textures = {};
openfl.display3D.textures.TextureBase = function(glTexture,width,height) {
	if(height == null) height = 0;
	if(width == null) width = 0;
	openfl.events.EventDispatcher.call(this);
	this.width = width;
	this.height = height;
	this.glTexture = glTexture;
};
$hxClasses["openfl.display3D.textures.TextureBase"] = openfl.display3D.textures.TextureBase;
openfl.display3D.textures.TextureBase.__name__ = ["openfl","display3D","textures","TextureBase"];
openfl.display3D.textures.TextureBase.__super__ = openfl.events.EventDispatcher;
openfl.display3D.textures.TextureBase.prototype = $extend(openfl.events.EventDispatcher.prototype,{
	height: null
	,frameBuffer: null
	,glTexture: null
	,width: null
	,dispose: function() {
		lime.graphics.opengl.GL.context.deleteTexture(this.glTexture);
	}
	,__class__: openfl.display3D.textures.TextureBase
});
openfl.display3D.textures.CubeTexture = function(glTexture,size) {
	openfl.display3D.textures.TextureBase.call(this,glTexture,size,size);
	this.size = size;
	this._textures = [];
	var _g = 0;
	while(_g < 6) {
		var i = _g++;
		this._textures[i] = lime.graphics.opengl.GL.context.createTexture();
	}
};
$hxClasses["openfl.display3D.textures.CubeTexture"] = openfl.display3D.textures.CubeTexture;
openfl.display3D.textures.CubeTexture.__name__ = ["openfl","display3D","textures","CubeTexture"];
openfl.display3D.textures.CubeTexture.__super__ = openfl.display3D.textures.TextureBase;
openfl.display3D.textures.CubeTexture.prototype = $extend(openfl.display3D.textures.TextureBase.prototype,{
	size: null
	,_textures: null
	,glTextureAt: function(index) {
		return this._textures[index];
	}
	,uploadCompressedTextureFromByteArray: function(data,byteArrayOffset,async) {
		if(async == null) async = false;
	}
	,uploadFromBitmapData: function(bitmapData,side,miplevel) {
		if(miplevel == null) miplevel = 0;
		var source = bitmapData.__image.get_data();
		lime.graphics.opengl.GL.context.bindTexture(34067,this.glTexture);
		switch(side) {
		case 0:
			lime.graphics.opengl.GL.context.texImage2D(34069,miplevel,6408,bitmapData.width,bitmapData.height,0,6408,5121,source);
			break;
		case 1:
			lime.graphics.opengl.GL.context.texImage2D(34070,miplevel,6408,bitmapData.width,bitmapData.height,0,6408,5121,source);
			break;
		case 2:
			lime.graphics.opengl.GL.context.texImage2D(34071,miplevel,6408,bitmapData.width,bitmapData.height,0,6408,5121,source);
			break;
		case 3:
			lime.graphics.opengl.GL.context.texImage2D(34072,miplevel,6408,bitmapData.width,bitmapData.height,0,6408,5121,source);
			break;
		case 4:
			lime.graphics.opengl.GL.context.texImage2D(34073,miplevel,6408,bitmapData.width,bitmapData.height,0,6408,5121,source);
			break;
		case 5:
			lime.graphics.opengl.GL.context.texImage2D(34074,miplevel,6408,bitmapData.width,bitmapData.height,0,6408,5121,source);
			break;
		default:
			throw "unknown side type";
		}
		lime.graphics.opengl.GL.context.bindTexture(34067,null);
	}
	,uploadFromByteArray: function(data,byteArrayOffset,side,miplevel) {
		if(miplevel == null) miplevel = 0;
	}
	,__class__: openfl.display3D.textures.CubeTexture
});
openfl.display3D.textures.RectangleTexture = function(glTexture,optimize,width,height) {
	this.optimizeForRenderToTexture = optimize;
	if(this.optimizeForRenderToTexture == null) this.optimizeForRenderToTexture = false;
	openfl.display3D.textures.TextureBase.call(this,glTexture,width,height);
};
$hxClasses["openfl.display3D.textures.RectangleTexture"] = openfl.display3D.textures.RectangleTexture;
openfl.display3D.textures.RectangleTexture.__name__ = ["openfl","display3D","textures","RectangleTexture"];
openfl.display3D.textures.RectangleTexture.__super__ = openfl.display3D.textures.TextureBase;
openfl.display3D.textures.RectangleTexture.prototype = $extend(openfl.display3D.textures.TextureBase.prototype,{
	optimizeForRenderToTexture: null
	,uploadFromBitmapData: function(bitmapData,miplevel) {
		if(miplevel == null) miplevel = 0;
		var p = lime.utils.ByteArray.__ofBuffer(bitmapData.__image.get_data().buffer);
		this.width = bitmapData.width;
		this.height = bitmapData.height;
		this.uploadFromByteArray(p,0);
	}
	,uploadFromByteArray: function(data,byteArrayOffset) {
		lime.graphics.opengl.GL.context.bindTexture(3553,this.glTexture);
		if(this.optimizeForRenderToTexture) lime.graphics.opengl.GL.context.pixelStorei(37440,1);
		lime.graphics.opengl.GL.context.texParameteri(3553,10240,9728);
		lime.graphics.opengl.GL.context.texParameteri(3553,10241,9728);
		lime.graphics.opengl.GL.context.texParameteri(3553,10242,33071);
		lime.graphics.opengl.GL.context.texParameteri(3553,10243,33071);
		var source = new Uint8Array(data.length);
		data.position = byteArrayOffset;
		var i = 0;
		while(data.position < data.length) {
			source[i] = data.readUnsignedByte();
			i++;
		}
		lime.graphics.opengl.GL.context.texImage2D(3553,0,6408,this.width,this.height,0,6408,5121,source);
		lime.graphics.opengl.GL.context.bindTexture(3553,null);
	}
	,__class__: openfl.display3D.textures.RectangleTexture
});
openfl.display3D.textures.Texture = function(glTexture,optimize,width,height) {
	this.optimizeForRenderToTexture = optimize;
	if(this.optimizeForRenderToTexture == null) this.optimizeForRenderToTexture = false;
	openfl.display3D.textures.TextureBase.call(this,glTexture,width,height);
};
$hxClasses["openfl.display3D.textures.Texture"] = openfl.display3D.textures.Texture;
openfl.display3D.textures.Texture.__name__ = ["openfl","display3D","textures","Texture"];
openfl.display3D.textures.Texture.__super__ = openfl.display3D.textures.TextureBase;
openfl.display3D.textures.Texture.prototype = $extend(openfl.display3D.textures.TextureBase.prototype,{
	optimizeForRenderToTexture: null
	,uploadCompressedTextureFromByteArray: function(data,byteArrayOffset,async) {
		if(async == null) async = false;
	}
	,uploadFromBitmapData: function(bitmapData,miplevel) {
		if(miplevel == null) miplevel = 0;
		var p = lime.utils.ByteArray.__ofBuffer(bitmapData.__image.get_data().buffer);
		this.width = bitmapData.width;
		this.height = bitmapData.height;
		this.uploadFromByteArray(p,0,miplevel);
	}
	,uploadFromByteArray: function(data,byteArrayOffset,miplevel) {
		if(miplevel == null) miplevel = 0;
		lime.graphics.opengl.GL.context.bindTexture(3553,this.glTexture);
		if(this.optimizeForRenderToTexture) {
			lime.graphics.opengl.GL.context.pixelStorei(37440,1);
			lime.graphics.opengl.GL.context.texParameteri(3553,10240,9728);
			lime.graphics.opengl.GL.context.texParameteri(3553,10241,9728);
			lime.graphics.opengl.GL.context.texParameteri(3553,10242,33071);
			lime.graphics.opengl.GL.context.texParameteri(3553,10243,33071);
		}
		var source = new Uint8Array(data.length);
		data.position = byteArrayOffset;
		var i = 0;
		while(data.position < data.length) {
			source[i] = data.readUnsignedByte();
			i++;
		}
		lime.graphics.opengl.GL.context.texImage2D(3553,miplevel,6408,this.width,this.height,0,6408,5121,source);
		lime.graphics.opengl.GL.context.bindTexture(3553,null);
	}
	,__class__: openfl.display3D.textures.Texture
});
openfl.errors = {};
openfl.errors.Error = function(message,id) {
	if(id == null) id = 0;
	if(message == null) message = "";
	this.message = message;
	this.errorID = id;
	this.name = "Error";
};
$hxClasses["openfl.errors.Error"] = openfl.errors.Error;
openfl.errors.Error.__name__ = ["openfl","errors","Error"];
openfl.errors.Error.prototype = {
	errorID: null
	,message: null
	,name: null
	,getStackTrace: function() {
		return haxe.CallStack.toString(haxe.CallStack.exceptionStack());
	}
	,toString: function() {
		if(this.message != null) return this.message; else return "Error";
	}
	,__class__: openfl.errors.Error
};
openfl.errors.ArgumentError = function(inMessage) {
	if(inMessage == null) inMessage = "";
	openfl.errors.Error.call(this,inMessage);
};
$hxClasses["openfl.errors.ArgumentError"] = openfl.errors.ArgumentError;
openfl.errors.ArgumentError.__name__ = ["openfl","errors","ArgumentError"];
openfl.errors.ArgumentError.__super__ = openfl.errors.Error;
openfl.errors.ArgumentError.prototype = $extend(openfl.errors.Error.prototype,{
	__class__: openfl.errors.ArgumentError
});
openfl.errors.IOError = function(message) {
	if(message == null) message = "";
	openfl.errors.Error.call(this,message);
};
$hxClasses["openfl.errors.IOError"] = openfl.errors.IOError;
openfl.errors.IOError.__name__ = ["openfl","errors","IOError"];
openfl.errors.IOError.__super__ = openfl.errors.Error;
openfl.errors.IOError.prototype = $extend(openfl.errors.Error.prototype,{
	__class__: openfl.errors.IOError
});
openfl.errors.IllegalOperationError = function(inMessage) {
	if(inMessage == null) inMessage = "";
	openfl.errors.Error.call(this,inMessage,0);
};
$hxClasses["openfl.errors.IllegalOperationError"] = openfl.errors.IllegalOperationError;
openfl.errors.IllegalOperationError.__name__ = ["openfl","errors","IllegalOperationError"];
openfl.errors.IllegalOperationError.__super__ = openfl.errors.Error;
openfl.errors.IllegalOperationError.prototype = $extend(openfl.errors.Error.prototype,{
	__class__: openfl.errors.IllegalOperationError
});
openfl.errors.RangeError = function(inMessage) {
	if(inMessage == null) inMessage = "";
	openfl.errors.Error.call(this,inMessage,0);
};
$hxClasses["openfl.errors.RangeError"] = openfl.errors.RangeError;
openfl.errors.RangeError.__name__ = ["openfl","errors","RangeError"];
openfl.errors.RangeError.__super__ = openfl.errors.Error;
openfl.errors.RangeError.prototype = $extend(openfl.errors.Error.prototype,{
	__class__: openfl.errors.RangeError
});
openfl.errors.TypeError = function(inMessage) {
	if(inMessage == null) inMessage = "";
	openfl.errors.Error.call(this,inMessage,0);
};
$hxClasses["openfl.errors.TypeError"] = openfl.errors.TypeError;
openfl.errors.TypeError.__name__ = ["openfl","errors","TypeError"];
openfl.errors.TypeError.__super__ = openfl.errors.Error;
openfl.errors.TypeError.prototype = $extend(openfl.errors.Error.prototype,{
	__class__: openfl.errors.TypeError
});
openfl.events.Event = function(type,bubbles,cancelable) {
	if(cancelable == null) cancelable = false;
	if(bubbles == null) bubbles = false;
	this.type = type;
	this.bubbles = bubbles;
	this.cancelable = cancelable;
	this.eventPhase = openfl.events.EventPhase.AT_TARGET;
};
$hxClasses["openfl.events.Event"] = openfl.events.Event;
openfl.events.Event.__name__ = ["openfl","events","Event"];
openfl.events.Event.prototype = {
	bubbles: null
	,cancelable: null
	,currentTarget: null
	,eventPhase: null
	,target: null
	,type: null
	,__isCancelled: null
	,__isCancelledNow: null
	,clone: function() {
		var event = new openfl.events.Event(this.type,this.bubbles,this.cancelable);
		event.eventPhase = this.eventPhase;
		event.target = this.target;
		event.currentTarget = this.currentTarget;
		return event;
	}
	,isDefaultPrevented: function() {
		return this.__isCancelled || this.__isCancelledNow;
	}
	,stopImmediatePropagation: function() {
		this.__isCancelled = true;
		this.__isCancelledNow = true;
	}
	,stopPropagation: function() {
		this.__isCancelled = true;
	}
	,toString: function() {
		return "[Event type=" + this.type + " bubbles=" + Std.string(this.bubbles) + " cancelable=" + Std.string(this.cancelable) + "]";
	}
	,__class__: openfl.events.Event
};
openfl.events.TextEvent = function(type,bubbles,cancelable,text) {
	if(text == null) text = "";
	if(cancelable == null) cancelable = false;
	if(bubbles == null) bubbles = false;
	openfl.events.Event.call(this,type,bubbles,cancelable);
	this.text = text;
};
$hxClasses["openfl.events.TextEvent"] = openfl.events.TextEvent;
openfl.events.TextEvent.__name__ = ["openfl","events","TextEvent"];
openfl.events.TextEvent.__super__ = openfl.events.Event;
openfl.events.TextEvent.prototype = $extend(openfl.events.Event.prototype,{
	text: null
	,clone: function() {
		return new openfl.events.TextEvent(this.type,this.bubbles,this.cancelable,this.text);
	}
	,toString: function() {
		return "[TextEvent type=" + this.type + " bubbles=" + Std.string(this.bubbles) + " cancelable=" + Std.string(this.cancelable) + " text=" + this.text + "]";
	}
	,__class__: openfl.events.TextEvent
});
openfl.events.ErrorEvent = function(type,bubbles,cancelable,text,id) {
	if(id == null) id = 0;
	if(text == null) text = "";
	if(cancelable == null) cancelable = false;
	if(bubbles == null) bubbles = false;
	openfl.events.TextEvent.call(this,type,bubbles,cancelable,text);
	this.errorID = id;
};
$hxClasses["openfl.events.ErrorEvent"] = openfl.events.ErrorEvent;
openfl.events.ErrorEvent.__name__ = ["openfl","events","ErrorEvent"];
openfl.events.ErrorEvent.__super__ = openfl.events.TextEvent;
openfl.events.ErrorEvent.prototype = $extend(openfl.events.TextEvent.prototype,{
	errorID: null
	,clone: function() {
		return new openfl.events.ErrorEvent(this.type,this.bubbles,this.cancelable,this.text,this.errorID);
	}
	,toString: function() {
		return "[ErrorEvent type=" + this.type + " bubbles=" + Std.string(this.bubbles) + " cancelable=" + Std.string(this.cancelable) + " text=" + this.text + " errorID=" + this.errorID + "]";
	}
	,__class__: openfl.events.ErrorEvent
});
openfl.events._EventDispatcher = {};
openfl.events._EventDispatcher.Listener = function(callback,useCapture,priority) {
	this.callback = callback;
	this.useCapture = useCapture;
	this.priority = priority;
};
$hxClasses["openfl.events._EventDispatcher.Listener"] = openfl.events._EventDispatcher.Listener;
openfl.events._EventDispatcher.Listener.__name__ = ["openfl","events","_EventDispatcher","Listener"];
openfl.events._EventDispatcher.Listener.prototype = {
	callback: null
	,priority: null
	,useCapture: null
	,match: function(callback,useCapture) {
		return Reflect.compareMethods(this.callback,callback) && this.useCapture == useCapture;
	}
	,__class__: openfl.events._EventDispatcher.Listener
};
openfl.events.EventPhase = $hxClasses["openfl.events.EventPhase"] = { __ename__ : ["openfl","events","EventPhase"], __constructs__ : ["CAPTURING_PHASE","AT_TARGET","BUBBLING_PHASE"] };
openfl.events.EventPhase.CAPTURING_PHASE = ["CAPTURING_PHASE",0];
openfl.events.EventPhase.CAPTURING_PHASE.toString = $estr;
openfl.events.EventPhase.CAPTURING_PHASE.__enum__ = openfl.events.EventPhase;
openfl.events.EventPhase.AT_TARGET = ["AT_TARGET",1];
openfl.events.EventPhase.AT_TARGET.toString = $estr;
openfl.events.EventPhase.AT_TARGET.__enum__ = openfl.events.EventPhase;
openfl.events.EventPhase.BUBBLING_PHASE = ["BUBBLING_PHASE",2];
openfl.events.EventPhase.BUBBLING_PHASE.toString = $estr;
openfl.events.EventPhase.BUBBLING_PHASE.__enum__ = openfl.events.EventPhase;
openfl.events.EventPhase.__empty_constructs__ = [openfl.events.EventPhase.CAPTURING_PHASE,openfl.events.EventPhase.AT_TARGET,openfl.events.EventPhase.BUBBLING_PHASE];
openfl.events.FocusEvent = function(type,bubbles,cancelable,relatedObject,shiftKey,keyCode) {
	if(keyCode == null) keyCode = 0;
	if(shiftKey == null) shiftKey = false;
	if(cancelable == null) cancelable = false;
	if(bubbles == null) bubbles = false;
	openfl.events.Event.call(this,type,bubbles,cancelable);
	this.keyCode = keyCode;
	this.shiftKey = shiftKey;
	this.relatedObject = relatedObject;
};
$hxClasses["openfl.events.FocusEvent"] = openfl.events.FocusEvent;
openfl.events.FocusEvent.__name__ = ["openfl","events","FocusEvent"];
openfl.events.FocusEvent.__super__ = openfl.events.Event;
openfl.events.FocusEvent.prototype = $extend(openfl.events.Event.prototype,{
	keyCode: null
	,relatedObject: null
	,shiftKey: null
	,clone: function() {
		var event = new openfl.events.FocusEvent(this.type,this.bubbles,this.cancelable,this.relatedObject,this.shiftKey,this.keyCode);
		event.target = this.target;
		event.currentTarget = this.currentTarget;
		event.eventPhase = this.eventPhase;
		return event;
	}
	,toString: function() {
		return "[FocusEvent type=" + this.type + " bubbles=" + Std.string(this.bubbles) + " cancelable=" + Std.string(this.cancelable) + " relatedObject=" + Std.string(this.relatedObject) + " shiftKey=" + Std.string(this.shiftKey) + " keyCode=" + this.keyCode + "]";
	}
	,__class__: openfl.events.FocusEvent
});
openfl.events.HTTPStatusEvent = function(type,bubbles,cancelable,status) {
	if(status == null) status = 0;
	if(cancelable == null) cancelable = false;
	if(bubbles == null) bubbles = false;
	this.status = status;
	openfl.events.Event.call(this,type,bubbles,cancelable);
};
$hxClasses["openfl.events.HTTPStatusEvent"] = openfl.events.HTTPStatusEvent;
openfl.events.HTTPStatusEvent.__name__ = ["openfl","events","HTTPStatusEvent"];
openfl.events.HTTPStatusEvent.__super__ = openfl.events.Event;
openfl.events.HTTPStatusEvent.prototype = $extend(openfl.events.Event.prototype,{
	responseHeaders: null
	,responseURL: null
	,status: null
	,__class__: openfl.events.HTTPStatusEvent
});
openfl.events.IOErrorEvent = function(type,bubbles,cancelable,text,id) {
	if(id == null) id = 0;
	if(text == null) text = "";
	if(cancelable == null) cancelable = false;
	if(bubbles == null) bubbles = true;
	openfl.events.ErrorEvent.call(this,type,bubbles,cancelable,text,id);
};
$hxClasses["openfl.events.IOErrorEvent"] = openfl.events.IOErrorEvent;
openfl.events.IOErrorEvent.__name__ = ["openfl","events","IOErrorEvent"];
openfl.events.IOErrorEvent.__super__ = openfl.events.ErrorEvent;
openfl.events.IOErrorEvent.prototype = $extend(openfl.events.ErrorEvent.prototype,{
	clone: function() {
		return new openfl.events.IOErrorEvent(this.type,this.bubbles,this.cancelable,this.text,this.errorID);
	}
	,toString: function() {
		return "[IOErrorEvent type=" + this.type + " bubbles=" + Std.string(this.bubbles) + " cancelable=" + Std.string(this.cancelable) + " text=" + this.text + " errorID=" + this.errorID + "]";
	}
	,__class__: openfl.events.IOErrorEvent
});
openfl.events.KeyboardEvent = function(type,bubbles,cancelable,charCodeValue,keyCodeValue,keyLocationValue,ctrlKeyValue,altKeyValue,shiftKeyValue,controlKeyValue,commandKeyValue) {
	if(commandKeyValue == null) commandKeyValue = false;
	if(controlKeyValue == null) controlKeyValue = false;
	if(shiftKeyValue == null) shiftKeyValue = false;
	if(altKeyValue == null) altKeyValue = false;
	if(ctrlKeyValue == null) ctrlKeyValue = false;
	if(keyCodeValue == null) keyCodeValue = 0;
	if(charCodeValue == null) charCodeValue = 0;
	if(cancelable == null) cancelable = false;
	if(bubbles == null) bubbles = false;
	openfl.events.Event.call(this,type,bubbles,cancelable);
	this.charCode = charCodeValue;
	this.keyCode = keyCodeValue;
	if(keyLocationValue != null) this.keyLocation = keyLocationValue; else this.keyLocation = 0;
	this.ctrlKey = ctrlKeyValue;
	this.altKey = altKeyValue;
	this.shiftKey = shiftKeyValue;
	this.controlKey = controlKeyValue;
	this.commandKey = commandKeyValue;
};
$hxClasses["openfl.events.KeyboardEvent"] = openfl.events.KeyboardEvent;
openfl.events.KeyboardEvent.__name__ = ["openfl","events","KeyboardEvent"];
openfl.events.KeyboardEvent.__super__ = openfl.events.Event;
openfl.events.KeyboardEvent.prototype = $extend(openfl.events.Event.prototype,{
	altKey: null
	,charCode: null
	,ctrlKey: null
	,commandKey: null
	,controlKey: null
	,keyCode: null
	,keyLocation: null
	,shiftKey: null
	,clone: function() {
		return new openfl.events.KeyboardEvent(this.type,this.bubbles,this.cancelable,this.charCode,this.keyCode,this.keyLocation,this.ctrlKey,this.altKey,this.shiftKey,this.controlKey,this.commandKey);
	}
	,toString: function() {
		return "[KeyboardEvent type=" + this.type + " bubbles=" + Std.string(this.bubbles) + " cancelable=" + Std.string(this.cancelable) + " charCode=" + this.charCode + " keyCode=" + this.keyCode + " keyLocation=" + Std.string(this.keyLocation) + " ctrlKey=" + Std.string(this.ctrlKey) + " altKey=" + Std.string(this.altKey) + " shiftKey=" + Std.string(this.shiftKey) + "]";
	}
	,__class__: openfl.events.KeyboardEvent
});
openfl.events.MouseEvent = function(type,bubbles,cancelable,localX,localY,relatedObject,ctrlKey,altKey,shiftKey,buttonDown,delta,commandKey,clickCount) {
	if(clickCount == null) clickCount = 0;
	if(commandKey == null) commandKey = false;
	if(delta == null) delta = 0;
	if(buttonDown == null) buttonDown = false;
	if(shiftKey == null) shiftKey = false;
	if(altKey == null) altKey = false;
	if(ctrlKey == null) ctrlKey = false;
	if(localY == null) localY = 0;
	if(localX == null) localX = 0;
	if(cancelable == null) cancelable = false;
	if(bubbles == null) bubbles = true;
	openfl.events.Event.call(this,type,bubbles,cancelable);
	this.shiftKey = shiftKey;
	this.altKey = altKey;
	this.ctrlKey = ctrlKey;
	this.bubbles = bubbles;
	this.relatedObject = relatedObject;
	this.delta = delta;
	this.localX = localX;
	this.localY = localY;
	this.buttonDown = buttonDown;
	this.commandKey = commandKey;
	this.clickCount = clickCount;
};
$hxClasses["openfl.events.MouseEvent"] = openfl.events.MouseEvent;
openfl.events.MouseEvent.__name__ = ["openfl","events","MouseEvent"];
openfl.events.MouseEvent.__altKey = null;
openfl.events.MouseEvent.__commandKey = null;
openfl.events.MouseEvent.__ctrlKey = null;
openfl.events.MouseEvent.__shiftKey = null;
openfl.events.MouseEvent.__create = function(type,button,stageX,stageY,local,target,delta) {
	if(delta == null) delta = 0;
	switch(type) {
	case openfl.events.MouseEvent.MOUSE_DOWN:case openfl.events.MouseEvent.MIDDLE_MOUSE_DOWN:case openfl.events.MouseEvent.RIGHT_MOUSE_DOWN:
		openfl.events.MouseEvent.__buttonDown[button] = true;
		break;
	case openfl.events.MouseEvent.MOUSE_UP:case openfl.events.MouseEvent.MIDDLE_MOUSE_UP:case openfl.events.MouseEvent.RIGHT_MOUSE_UP:
		openfl.events.MouseEvent.__buttonDown[button] = false;
		break;
	}
	var event = new openfl.events.MouseEvent(type,true,false,local.x,local.y,null,openfl.events.MouseEvent.__ctrlKey,openfl.events.MouseEvent.__altKey,openfl.events.MouseEvent.__shiftKey,openfl.events.MouseEvent.__buttonDown[button],delta,openfl.events.MouseEvent.__commandKey);
	event.stageX = stageX;
	event.stageY = stageY;
	event.target = target;
	return event;
};
openfl.events.MouseEvent.__super__ = openfl.events.Event;
openfl.events.MouseEvent.prototype = $extend(openfl.events.Event.prototype,{
	altKey: null
	,buttonDown: null
	,commandKey: null
	,clickCount: null
	,ctrlKey: null
	,delta: null
	,localX: null
	,localY: null
	,relatedObject: null
	,shiftKey: null
	,stageX: null
	,stageY: null
	,clone: function() {
		return new openfl.events.MouseEvent(this.type,this.bubbles,this.cancelable,this.localX,this.localY,this.relatedObject,this.ctrlKey,this.altKey,this.shiftKey,this.buttonDown,this.delta,this.commandKey,this.clickCount);
	}
	,toString: function() {
		return "[MouseEvent type=" + this.type + " bubbles=" + Std.string(this.bubbles) + " cancelable=" + Std.string(this.cancelable) + " localX=" + this.localX + " localY=" + this.localY + " relatedObject=" + Std.string(this.relatedObject) + " ctrlKey=" + Std.string(this.ctrlKey) + " altKey=" + Std.string(this.altKey) + " shiftKey=" + Std.string(this.shiftKey) + " buttonDown=" + Std.string(this.buttonDown) + " delta=" + this.delta + "]";
	}
	,updateAfterEvent: function() {
	}
	,__class__: openfl.events.MouseEvent
});
openfl.events.NetStatusEvent = function(type,bubbles,cancelable,info) {
	if(cancelable == null) cancelable = false;
	if(bubbles == null) bubbles = false;
	this.info = info;
	openfl.events.Event.call(this,type,bubbles,cancelable);
};
$hxClasses["openfl.events.NetStatusEvent"] = openfl.events.NetStatusEvent;
openfl.events.NetStatusEvent.__name__ = ["openfl","events","NetStatusEvent"];
openfl.events.NetStatusEvent.__super__ = openfl.events.Event;
openfl.events.NetStatusEvent.prototype = $extend(openfl.events.Event.prototype,{
	info: null
	,__class__: openfl.events.NetStatusEvent
});
openfl.events.ProgressEvent = function(type,bubbles,cancelable,bytesLoaded,bytesTotal) {
	if(bytesTotal == null) bytesTotal = 0;
	if(bytesLoaded == null) bytesLoaded = 0;
	if(cancelable == null) cancelable = false;
	if(bubbles == null) bubbles = false;
	openfl.events.Event.call(this,type,bubbles,cancelable);
	this.bytesLoaded = bytesLoaded;
	this.bytesTotal = bytesTotal;
};
$hxClasses["openfl.events.ProgressEvent"] = openfl.events.ProgressEvent;
openfl.events.ProgressEvent.__name__ = ["openfl","events","ProgressEvent"];
openfl.events.ProgressEvent.__super__ = openfl.events.Event;
openfl.events.ProgressEvent.prototype = $extend(openfl.events.Event.prototype,{
	bytesLoaded: null
	,bytesTotal: null
	,clone: function() {
		return new openfl.events.ProgressEvent(this.type,this.bubbles,this.cancelable,this.bytesLoaded,this.bytesTotal);
	}
	,toString: function() {
		return "[ProgressEvent type=" + this.type + " bubbles=" + Std.string(this.bubbles) + " cancelable=" + Std.string(this.cancelable) + " bytesLoaded=" + this.bytesLoaded + " bytesTotal=" + this.bytesTotal + "]";
	}
	,__class__: openfl.events.ProgressEvent
});
openfl.events.SecurityErrorEvent = function(type,bubbles,cancelable,text,id) {
	if(id == null) id = 0;
	if(text == null) text = "";
	if(cancelable == null) cancelable = false;
	if(bubbles == null) bubbles = false;
	openfl.events.ErrorEvent.call(this,type,bubbles,cancelable,text,id);
};
$hxClasses["openfl.events.SecurityErrorEvent"] = openfl.events.SecurityErrorEvent;
openfl.events.SecurityErrorEvent.__name__ = ["openfl","events","SecurityErrorEvent"];
openfl.events.SecurityErrorEvent.__super__ = openfl.events.ErrorEvent;
openfl.events.SecurityErrorEvent.prototype = $extend(openfl.events.ErrorEvent.prototype,{
	clone: function() {
		return new openfl.events.SecurityErrorEvent(this.type,this.bubbles,this.cancelable,this.text,this.errorID);
	}
	,toString: function() {
		return "[SecurityErrorEvent type=" + this.type + " bubbles=" + Std.string(this.bubbles) + " cancelable=" + Std.string(this.cancelable) + " text=" + this.text + " errorID=" + this.errorID + "]";
	}
	,__class__: openfl.events.SecurityErrorEvent
});
openfl.events.TouchEvent = function(type,bubbles,cancelable,localX,localY,sizeX,sizeY,relatedObject,ctrlKey,altKey,shiftKey,buttonDown,delta,commandKey,clickCount) {
	if(clickCount == null) clickCount = 0;
	if(commandKey == null) commandKey = false;
	if(delta == null) delta = 0;
	if(buttonDown == null) buttonDown = false;
	if(shiftKey == null) shiftKey = false;
	if(altKey == null) altKey = false;
	if(ctrlKey == null) ctrlKey = false;
	if(sizeY == null) sizeY = 1;
	if(sizeX == null) sizeX = 1;
	if(localY == null) localY = 0;
	if(localX == null) localX = 0;
	if(cancelable == null) cancelable = false;
	if(bubbles == null) bubbles = true;
	openfl.events.Event.call(this,type,bubbles,cancelable);
	this.shiftKey = shiftKey;
	this.altKey = altKey;
	this.ctrlKey = ctrlKey;
	this.bubbles = bubbles;
	this.relatedObject = relatedObject;
	this.delta = delta;
	this.localX = localX;
	this.localY = localY;
	this.sizeX = sizeX;
	this.sizeY = sizeY;
	this.buttonDown = buttonDown;
	this.commandKey = commandKey;
	this.pressure = 1;
	this.touchPointID = 0;
	this.isPrimaryTouchPoint = true;
};
$hxClasses["openfl.events.TouchEvent"] = openfl.events.TouchEvent;
openfl.events.TouchEvent.__name__ = ["openfl","events","TouchEvent"];
openfl.events.TouchEvent.__create = function(type,touch,stageX,stageY,local,target) {
	var evt = new openfl.events.TouchEvent(type,true,false,local.x,local.y,null,null,null,false,false,false,false,0,null,0);
	evt.stageX = stageX;
	evt.stageY = stageY;
	evt.target = target;
	return evt;
};
openfl.events.TouchEvent.__super__ = openfl.events.Event;
openfl.events.TouchEvent.prototype = $extend(openfl.events.Event.prototype,{
	altKey: null
	,buttonDown: null
	,commandKey: null
	,ctrlKey: null
	,delta: null
	,isPrimaryTouchPoint: null
	,localX: null
	,localY: null
	,pressure: null
	,relatedObject: null
	,shiftKey: null
	,sizeX: null
	,sizeY: null
	,stageX: null
	,stageY: null
	,touchPointID: null
	,updateAfterEvent: function() {
	}
	,__class__: openfl.events.TouchEvent
});
openfl.filters = {};
openfl.filters.BitmapFilter = function() {
};
$hxClasses["openfl.filters.BitmapFilter"] = openfl.filters.BitmapFilter;
openfl.filters.BitmapFilter.__name__ = ["openfl","filters","BitmapFilter"];
openfl.filters.BitmapFilter.prototype = {
	clone: function() {
		return new openfl.filters.BitmapFilter();
	}
	,__applyFilter: function(sourceData,targetData,sourceRect,destPoint) {
	}
	,__class__: openfl.filters.BitmapFilter
};
openfl.geom.Orientation3D = $hxClasses["openfl.geom.Orientation3D"] = { __ename__ : ["openfl","geom","Orientation3D"], __constructs__ : ["AXIS_ANGLE","EULER_ANGLES","QUATERNION"] };
openfl.geom.Orientation3D.AXIS_ANGLE = ["AXIS_ANGLE",0];
openfl.geom.Orientation3D.AXIS_ANGLE.toString = $estr;
openfl.geom.Orientation3D.AXIS_ANGLE.__enum__ = openfl.geom.Orientation3D;
openfl.geom.Orientation3D.EULER_ANGLES = ["EULER_ANGLES",1];
openfl.geom.Orientation3D.EULER_ANGLES.toString = $estr;
openfl.geom.Orientation3D.EULER_ANGLES.__enum__ = openfl.geom.Orientation3D;
openfl.geom.Orientation3D.QUATERNION = ["QUATERNION",2];
openfl.geom.Orientation3D.QUATERNION.toString = $estr;
openfl.geom.Orientation3D.QUATERNION.__enum__ = openfl.geom.Orientation3D;
openfl.geom.Orientation3D.__empty_constructs__ = [openfl.geom.Orientation3D.AXIS_ANGLE,openfl.geom.Orientation3D.EULER_ANGLES,openfl.geom.Orientation3D.QUATERNION];
openfl.geom.Transform = function(displayObject) {
	this.__colorTransform = new openfl.geom.ColorTransform();
	this.concatenatedColorTransform = new openfl.geom.ColorTransform();
	this.concatenatedMatrix = new openfl.geom.Matrix();
	this.pixelBounds = new openfl.geom.Rectangle();
	this.__displayObject = displayObject;
	this.__hasMatrix = true;
};
$hxClasses["openfl.geom.Transform"] = openfl.geom.Transform;
openfl.geom.Transform.__name__ = ["openfl","geom","Transform"];
openfl.geom.Transform.prototype = {
	concatenatedColorTransform: null
	,concatenatedMatrix: null
	,pixelBounds: null
	,__colorTransform: null
	,__displayObject: null
	,__hasMatrix: null
	,__hasMatrix3D: null
	,get_colorTransform: function() {
		return this.__colorTransform;
	}
	,set_colorTransform: function(value) {
		this.__colorTransform = value;
		if(value != null) this.__displayObject.set_alpha(value.alphaMultiplier);
		return this.__colorTransform;
	}
	,get_matrix: function() {
		if(this.__hasMatrix) {
			var matrix = new openfl.geom.Matrix();
			matrix.scale(this.__displayObject.get_scaleX(),this.__displayObject.get_scaleY());
			matrix.rotate(this.__displayObject.get_rotation() * (Math.PI / 180));
			matrix.translate(this.__displayObject.get_x(),this.__displayObject.get_y());
			return matrix;
		}
		return null;
	}
	,set_matrix: function(value) {
		if(value == null) {
			this.__hasMatrix = false;
			return null;
		}
		this.__hasMatrix = true;
		this.__hasMatrix3D = false;
		if(this.__displayObject != null) {
			this.__displayObject.set_x(value.tx);
			this.__displayObject.set_y(value.ty);
			this.__displayObject.set_scaleX(Math.sqrt(value.a * value.a + value.b * value.b));
			this.__displayObject.set_scaleY(Math.sqrt(value.c * value.c + value.d * value.d));
			this.__displayObject.set_rotation(Math.atan2(value.b,value.a) * (180 / Math.PI));
		}
		return value;
	}
	,get_matrix3D: function() {
		if(this.__hasMatrix3D) {
			var matrix = new openfl.geom.Matrix();
			matrix.scale(this.__displayObject.get_scaleX(),this.__displayObject.get_scaleY());
			matrix.rotate(this.__displayObject.get_rotation() * (Math.PI / 180));
			matrix.translate(this.__displayObject.get_x(),this.__displayObject.get_y());
			return new openfl.geom.Matrix3D((function($this) {
				var $r;
				var value = [matrix.a,matrix.b,0.0,0.0,matrix.c,matrix.d,0.0,0.0,0.0,0.0,1.0,0.0,matrix.tx,matrix.ty,0.0,1.0];
				var vectorData = new openfl.VectorData();
				vectorData.length = value.length;
				vectorData.fixed = true;
				{
					var vec;
					var this1;
					this1 = new Array(value.length);
					vec = this1;
					var _g1 = 0;
					var _g = value.length;
					while(_g1 < _g) {
						var i = _g1++;
						vec[i] = value[i];
					}
					vectorData.data = vec;
				}
				$r = vectorData;
				return $r;
			}(this)));
		}
		return null;
	}
	,set_matrix3D: function(value) {
		if(value == null) {
			this.__hasMatrix3D = false;
			return null;
		}
		this.__hasMatrix = false;
		this.__hasMatrix3D = true;
		if(this.__displayObject != null) {
			this.__displayObject.set_x(value.rawData.data[12]);
			this.__displayObject.set_y(value.rawData.data[13]);
			this.__displayObject.set_scaleX(Math.sqrt(value.rawData.data[0] * value.rawData.data[0] + value.rawData.data[1] * value.rawData.data[1]));
			this.__displayObject.set_scaleY(Math.sqrt(value.rawData.data[4] * value.rawData.data[4] + value.rawData.data[5] * value.rawData.data[5]));
			this.__displayObject.set_rotation(Math.atan2(value.rawData.data[1],value.rawData.data[0]) * (180 / Math.PI));
		}
		return value;
	}
	,__class__: openfl.geom.Transform
	,__properties__: {set_matrix3D:"set_matrix3D",get_matrix3D:"get_matrix3D",set_matrix:"set_matrix",get_matrix:"get_matrix",set_colorTransform:"set_colorTransform",get_colorTransform:"get_colorTransform"}
};
openfl.media = {};
openfl.media.ID3Info = function() {
};
$hxClasses["openfl.media.ID3Info"] = openfl.media.ID3Info;
openfl.media.ID3Info.__name__ = ["openfl","media","ID3Info"];
openfl.media.ID3Info.prototype = {
	album: null
	,artist: null
	,comment: null
	,genre: null
	,songName: null
	,track: null
	,year: null
	,__class__: openfl.media.ID3Info
};
openfl.media.Sound = function(stream,context) {
	openfl.events.EventDispatcher.call(this,this);
	this.bytesLoaded = 0;
	this.bytesTotal = 0;
	this.id3 = null;
	this.isBuffering = false;
	this.length = 0;
	this.url = null;
	if(stream != null) this.load(stream,context);
};
$hxClasses["openfl.media.Sound"] = openfl.media.Sound;
openfl.media.Sound.__name__ = ["openfl","media","Sound"];
openfl.media.Sound.fromAudioBuffer = function(buffer) {
	var sound = new openfl.media.Sound();
	sound.__buffer = buffer;
	return sound;
};
openfl.media.Sound.fromFile = function(path) {
	return openfl.media.Sound.fromAudioBuffer(lime.audio.AudioBuffer.fromFile(path));
};
openfl.media.Sound.__super__ = openfl.events.EventDispatcher;
openfl.media.Sound.prototype = $extend(openfl.events.EventDispatcher.prototype,{
	bytesLoaded: null
	,bytesTotal: null
	,id3: null
	,isBuffering: null
	,length: null
	,url: null
	,__buffer: null
	,__sound: null
	,__soundID: null
	,close: function() {
		if(openfl.media.Sound.__registeredSounds.exists(this.__soundID)) createjs.Sound.removeSound(this.__soundID);
	}
	,load: function(stream,context) {
		this.url = stream.url;
		this.__soundID = haxe.io.Path.withoutExtension(stream.url);
		if(!openfl.media.Sound.__registeredSounds.exists(this.__soundID)) {
			openfl.media.Sound.__registeredSounds.set(this.__soundID,true);
			createjs.Sound.addEventListener("fileload",$bind(this,this.SoundJS_onFileLoad));
			createjs.Sound.addEventListener("fileerror",$bind(this,this.SoundJS_onFileError));
			createjs.Sound.registerSound(this.url,this.__soundID);
		} else this.dispatchEvent(new openfl.events.Event(openfl.events.Event.COMPLETE));
	}
	,loadCompressedDataFromByteArray: function(bytes,bytesLength,forcePlayAsMusic) {
		if(forcePlayAsMusic == null) forcePlayAsMusic = false;
		openfl.Lib.notImplemented("Sound.loadCompressedDataFromByteArray");
	}
	,loadPCMFromByteArray: function(bytes,samples,format,stereo,sampleRate) {
		if(sampleRate == null) sampleRate = 44100;
		if(stereo == null) stereo = true;
		openfl.Lib.notImplemented("Sound.loadPCMFromByteArray");
	}
	,play: function(startTime,loops,sndTransform) {
		if(loops == null) loops = 0;
		if(startTime == null) startTime = 0.0;
		if(sndTransform == null) sndTransform = new openfl.media.SoundTransform(1,0);
		var instance = createjs.Sound.play(this.__soundID,"any",0,startTime | 0,loops,sndTransform.volume,sndTransform.pan);
		return new openfl.media.SoundChannel(instance);
	}
	,get_id3: function() {
		return new openfl.media.ID3Info();
	}
	,AudioBuffer_onURLLoad: function(buffer) {
		this.__buffer = buffer;
		this.dispatchEvent(new openfl.events.Event(openfl.events.Event.COMPLETE));
	}
	,SoundJS_onFileLoad: function(event) {
		if(event.id == this.__soundID) {
			createjs.Sound.removeEventListener("fileload",$bind(this,this.SoundJS_onFileLoad));
			createjs.Sound.removeEventListener("fileerror",$bind(this,this.SoundJS_onFileError));
			this.dispatchEvent(new openfl.events.Event(openfl.events.Event.COMPLETE));
		}
	}
	,SoundJS_onFileError: function(event) {
		if(event.id == this.__soundID) {
			createjs.Sound.removeEventListener("fileload",$bind(this,this.SoundJS_onFileLoad));
			createjs.Sound.removeEventListener("fileerror",$bind(this,this.SoundJS_onFileError));
			this.dispatchEvent(new openfl.events.IOErrorEvent(openfl.events.IOErrorEvent.IO_ERROR));
		}
	}
	,__class__: openfl.media.Sound
	,__properties__: {get_id3:"get_id3"}
});
openfl.media.SoundChannel = function(soundInstance) {
	openfl.events.EventDispatcher.call(this,this);
	this.leftPeak = 1;
	this.rightPeak = 1;
	if(soundInstance != null) {
		this.__soundInstance = soundInstance;
		this.__soundInstance.addEventListener("complete",$bind(this,this.source_onComplete));
		this.__isValid = true;
	}
};
$hxClasses["openfl.media.SoundChannel"] = openfl.media.SoundChannel;
openfl.media.SoundChannel.__name__ = ["openfl","media","SoundChannel"];
openfl.media.SoundChannel.__super__ = openfl.events.EventDispatcher;
openfl.media.SoundChannel.prototype = $extend(openfl.events.EventDispatcher.prototype,{
	leftPeak: null
	,rightPeak: null
	,__isValid: null
	,__source: null
	,__soundInstance: null
	,stop: function() {
		if(!this.__isValid) return;
		this.__soundInstance.stop();
	}
	,__dispose: function() {
		if(!this.__isValid) return;
		this.__soundInstance.stop();
		this.__soundInstance = null;
	}
	,get_position: function() {
		if(!this.__isValid) return 0;
		return this.__soundInstance.getPosition();
	}
	,set_position: function(value) {
		if(!this.__isValid) return 0;
		this.__soundInstance.setPosition(value | 0);
		return this.__soundInstance.getPosition();
	}
	,get_soundTransform: function() {
		if(!this.__isValid) return new openfl.media.SoundTransform();
		return new openfl.media.SoundTransform(this.__soundInstance.getVolume(),this.__soundInstance.getPan());
	}
	,set_soundTransform: function(value) {
		if(!this.__isValid) return value;
		this.__soundInstance.setVolume(value.volume);
		this.__soundInstance.setPan(value.pan);
		return value;
	}
	,soundInstance_onComplete: function(_) {
		this.dispatchEvent(new openfl.events.Event(openfl.events.Event.SOUND_COMPLETE));
	}
	,source_onComplete: function() {
		this.dispatchEvent(new openfl.events.Event(openfl.events.Event.SOUND_COMPLETE));
	}
	,__class__: openfl.media.SoundChannel
	,__properties__: {set_soundTransform:"set_soundTransform",get_soundTransform:"get_soundTransform",set_position:"set_position",get_position:"get_position"}
});
openfl.media.SoundLoaderContext = function(bufferTime,checkPolicyFile) {
	if(checkPolicyFile == null) checkPolicyFile = false;
	if(bufferTime == null) bufferTime = 0;
	this.bufferTime = bufferTime;
	this.checkPolicyFile = checkPolicyFile;
};
$hxClasses["openfl.media.SoundLoaderContext"] = openfl.media.SoundLoaderContext;
openfl.media.SoundLoaderContext.__name__ = ["openfl","media","SoundLoaderContext"];
openfl.media.SoundLoaderContext.prototype = {
	bufferTime: null
	,checkPolicyFile: null
	,__class__: openfl.media.SoundLoaderContext
};
openfl.media.SoundTransform = function(vol,panning) {
	if(panning == null) panning = 0;
	if(vol == null) vol = 1;
	this.volume = vol;
	this.pan = panning;
	this.leftToLeft = 0;
	this.leftToRight = 0;
	this.rightToLeft = 0;
	this.rightToRight = 0;
};
$hxClasses["openfl.media.SoundTransform"] = openfl.media.SoundTransform;
openfl.media.SoundTransform.__name__ = ["openfl","media","SoundTransform"];
openfl.media.SoundTransform.prototype = {
	leftToLeft: null
	,leftToRight: null
	,pan: null
	,rightToLeft: null
	,rightToRight: null
	,volume: null
	,clone: function() {
		return new openfl.media.SoundTransform(this.volume,this.pan);
	}
	,__class__: openfl.media.SoundTransform
};
openfl.net = {};
openfl.net.NetConnection = function() {
	openfl.events.EventDispatcher.call(this);
};
$hxClasses["openfl.net.NetConnection"] = openfl.net.NetConnection;
openfl.net.NetConnection.__name__ = ["openfl","net","NetConnection"];
openfl.net.NetConnection.__super__ = openfl.events.EventDispatcher;
openfl.net.NetConnection.prototype = $extend(openfl.events.EventDispatcher.prototype,{
	connect: function(command,_,_1,_2,_3,_4) {
		if(command != null) throw "Error: Can only connect in \"HTTP streaming\" mode";
		this.dispatchEvent(new openfl.events.NetStatusEvent(openfl.events.NetStatusEvent.NET_STATUS,false,true,{ code : "connectSuccess"}));
	}
	,__class__: openfl.net.NetConnection
});
openfl.net.NetStream = function(connection) {
	openfl.events.EventDispatcher.call(this);
	this.__connection = connection;
	this.__video = window.document.createElement("video");
	this.__video.addEventListener("error",$bind(this,this.video_onError),false);
	this.__video.addEventListener("waiting",$bind(this,this.video_onWaiting),false);
	this.__video.addEventListener("ended",$bind(this,this.video_onEnd),false);
	this.__video.addEventListener("pause",$bind(this,this.video_onPause),false);
	this.__video.addEventListener("seeking",$bind(this,this.video_onSeeking),false);
	this.__video.addEventListener("playing",$bind(this,this.video_onPlaying),false);
	this.__video.addEventListener("timeupdate",$bind(this,this.video_onTimeUpdate),false);
	this.__video.addEventListener("loadstart",$bind(this,this.video_onLoadStart),false);
	this.__video.addEventListener("stalled",$bind(this,this.video_onStalled),false);
	this.__video.addEventListener("durationchanged",$bind(this,this.video_onDurationChanged),false);
	this.__video.addEventListener("canplay",$bind(this,this.video_onCanPlay),false);
	this.__video.addEventListener("canplaythrough",$bind(this,this.video_onCanPlayThrough),false);
};
$hxClasses["openfl.net.NetStream"] = openfl.net.NetStream;
openfl.net.NetStream.__name__ = ["openfl","net","NetStream"];
openfl.net.NetStream.__super__ = openfl.events.EventDispatcher;
openfl.net.NetStream.prototype = $extend(openfl.events.EventDispatcher.prototype,{
	audioCodec: null
	,bufferLength: null
	,bufferTime: null
	,bytesLoaded: null
	,bytesTotal: null
	,checkPolicyFile: null
	,client: null
	,currentFPS: null
	,decodedFrames: null
	,liveDelay: null
	,objectEncoding: null
	,soundTransform: null
	,time: null
	,videoCodec: null
	,__connection: null
	,__timer: null
	,__video: null
	,pause: function() {
		this.__video.pause();
	}
	,play: function(url,_,_1,_2,_3,_4) {
		this.__video.src = url;
		this.__video.play();
	}
	,requestVideoStatus: function() {
		var _g = this;
		if(this.__timer == null) this.__timer = new haxe.Timer(1);
		this.__timer.run = function() {
			if(_g.__video.paused) _g.__playStatus("NetStream.Play.pause"); else _g.__playStatus("NetStream.Play.playing");
			_g.__timer.stop();
		};
	}
	,resume: function() {
		this.__video.play();
	}
	,seek: function(offset) {
		var time = this.__video.currentTime + offset;
		if(time < 0) time = 0; else if(time > this.__video.duration) time = this.__video.duration;
		this.__video.currentTime = time;
	}
	,togglePause: function() {
		if(this.__video.paused) this.__video.play(); else this.__video.pause();
	}
	,__playStatus: function(code) {
		if(this.client != null) try {
			var handler = this.client.onPlayStatus;
			handler({ code : code, duration : this.__video.duration, position : this.__video.currentTime, speed : this.__video.playbackRate, start : this.__video.startTime});
		} catch( e ) {
		}
	}
	,video_onCanPlay: function(event) {
		this.__playStatus("NetStream.Play.canplay");
	}
	,video_onCanPlayThrough: function(event) {
		this.__playStatus("NetStream.Play.canplaythrough");
	}
	,video_onDurationChanged: function(event) {
		this.__playStatus("NetStream.Play.durationchanged");
	}
	,video_onEnd: function(event) {
		this.__connection.dispatchEvent(new openfl.events.NetStatusEvent(openfl.events.NetStatusEvent.NET_STATUS,false,false,{ code : "NetStream.Play.Stop"}));
		this.__playStatus("NetStream.Play.Complete");
	}
	,video_onError: function(event) {
		this.__connection.dispatchEvent(new openfl.events.NetStatusEvent(openfl.events.NetStatusEvent.NET_STATUS,false,false,{ code : "NetStream.Play.Stop"}));
		this.__playStatus("NetStream.Play.error");
	}
	,video_onLoadStart: function(event) {
		this.__playStatus("NetStream.Play.loadstart");
	}
	,video_onPause: function(event) {
		this.__playStatus("NetStream.Play.pause");
	}
	,video_onPlaying: function(event) {
		this.__connection.dispatchEvent(new openfl.events.NetStatusEvent(openfl.events.NetStatusEvent.NET_STATUS,false,false,{ code : "NetStream.Play.Start"}));
		this.__playStatus("NetStream.Play.playing");
	}
	,video_onSeeking: function(event) {
		this.__playStatus("NetStream.Play.seeking");
	}
	,video_onStalled: function(event) {
		this.__playStatus("NetStream.Play.stalled");
	}
	,video_onTimeUpdate: function(event) {
		this.__playStatus("NetStream.Play.timeupdate");
	}
	,video_onWaiting: function(event) {
		this.__playStatus("NetStream.Play.waiting");
	}
	,get_speed: function() {
		return this.__video.playbackRate;
	}
	,set_speed: function(value) {
		return this.__video.playbackRate = value;
	}
	,__class__: openfl.net.NetStream
	,__properties__: {set_speed:"set_speed",get_speed:"get_speed"}
});
openfl.net.URLLoader = function(request) {
	openfl.events.EventDispatcher.call(this);
	this.bytesLoaded = 0;
	this.bytesTotal = 0;
	this.set_dataFormat(openfl.net.URLLoaderDataFormat.TEXT);
	if(request != null) this.load(request);
};
$hxClasses["openfl.net.URLLoader"] = openfl.net.URLLoader;
openfl.net.URLLoader.__name__ = ["openfl","net","URLLoader"];
openfl.net.URLLoader.__super__ = openfl.events.EventDispatcher;
openfl.net.URLLoader.prototype = $extend(openfl.events.EventDispatcher.prototype,{
	bytesLoaded: null
	,bytesTotal: null
	,data: null
	,dataFormat: null
	,close: function() {
	}
	,getData: function() {
		return null;
	}
	,load: function(request) {
		this.requestUrl(request.url,request.method,request.data,request.formatRequestHeaders());
	}
	,registerEvents: function(subject) {
		var self = this;
		if(typeof XMLHttpRequestProgressEvent != "undefined") subject.addEventListener("progress",$bind(this,this.onProgress),false);
		subject.onreadystatechange = function() {
			if(subject.readyState != 4) return;
			var s;
			try {
				s = subject.status;
			} catch( e ) {
				s = null;
			}
			if(s == undefined) s = null;
			if(s != null) self.onStatus(s);
			if(s != null && s >= 200 && s < 400) self.onData(subject.response); else if(s == null) self.onError("Failed to connect or resolve host"); else if(s == 12029) self.onError("Failed to connect to host"); else if(s == 12007) self.onError("Unknown host"); else if(s == 0) {
				self.onError("Unable to make request (may be blocked due to cross-domain permissions)");
				self.onSecurityError("Unable to make request (may be blocked due to cross-domain permissions)");
			} else self.onError("Http Error #" + subject.status);
		};
	}
	,requestUrl: function(url,method,data,requestHeaders) {
		var xmlHttpRequest = new XMLHttpRequest();
		this.registerEvents(xmlHttpRequest);
		var uri = "";
		if(js.Boot.__instanceof(data,lime.utils.ByteArray)) {
			var data1 = data;
			var _g = this.dataFormat;
			switch(_g[1]) {
			case 0:
				uri = data1.data.buffer;
				break;
			default:
				uri = data1.readUTFBytes(data1.length);
			}
		} else if(js.Boot.__instanceof(data,openfl.net.URLVariables)) {
			var data2 = data;
			var _g1 = 0;
			var _g11 = Reflect.fields(data2);
			while(_g1 < _g11.length) {
				var p = _g11[_g1];
				++_g1;
				if(uri.length != 0) uri += "&";
				uri += encodeURIComponent(p) + "=" + StringTools.urlEncode(Reflect.field(data2,p));
			}
		} else if(data != null) uri = data.toString();
		try {
			if(method == "GET" && uri != null && uri != "") {
				var question = url.split("?").length <= 1;
				xmlHttpRequest.open(method,url + (question?"?":"&") + Std.string(uri),true);
				uri = "";
			} else xmlHttpRequest.open(method,url,true);
		} catch( e ) {
			this.onError(e.toString());
			return;
		}
		var _g2 = this.dataFormat;
		switch(_g2[1]) {
		case 0:
			xmlHttpRequest.responseType = "arraybuffer";
			break;
		default:
		}
		var _g3 = 0;
		while(_g3 < requestHeaders.length) {
			var header = requestHeaders[_g3];
			++_g3;
			xmlHttpRequest.setRequestHeader(header.name,header.value);
		}
		xmlHttpRequest.send(uri);
		this.onOpen();
		this.getData = function() {
			if(xmlHttpRequest.response != null) return xmlHttpRequest.response; else return xmlHttpRequest.responseText;
		};
	}
	,onData: function(_) {
		var content = this.getData();
		var _g = this.dataFormat;
		switch(_g[1]) {
		case 0:
			this.data = lime.utils.ByteArray.__ofBuffer(content);
			break;
		default:
			this.data = Std.string(content);
		}
		var evt = new openfl.events.Event(openfl.events.Event.COMPLETE);
		evt.currentTarget = this;
		this.dispatchEvent(evt);
	}
	,onError: function(msg) {
		var evt = new openfl.events.IOErrorEvent(openfl.events.IOErrorEvent.IO_ERROR);
		evt.text = msg;
		evt.currentTarget = this;
		this.dispatchEvent(evt);
	}
	,onOpen: function() {
		var evt = new openfl.events.Event(openfl.events.Event.OPEN);
		evt.currentTarget = this;
		this.dispatchEvent(evt);
	}
	,onProgress: function(event) {
		var evt = new openfl.events.ProgressEvent(openfl.events.ProgressEvent.PROGRESS);
		evt.currentTarget = this;
		evt.bytesLoaded = event.loaded;
		evt.bytesTotal = event.total;
		this.dispatchEvent(evt);
	}
	,onSecurityError: function(msg) {
		var evt = new openfl.events.SecurityErrorEvent(openfl.events.SecurityErrorEvent.SECURITY_ERROR);
		evt.text = msg;
		evt.currentTarget = this;
		this.dispatchEvent(evt);
	}
	,onStatus: function(status) {
		var evt = new openfl.events.HTTPStatusEvent(openfl.events.HTTPStatusEvent.HTTP_STATUS,false,false,status);
		evt.currentTarget = this;
		this.dispatchEvent(evt);
	}
	,set_dataFormat: function(inputVal) {
		if(inputVal == openfl.net.URLLoaderDataFormat.BINARY && !Reflect.hasField(window,"ArrayBuffer")) this.dataFormat = openfl.net.URLLoaderDataFormat.TEXT; else this.dataFormat = inputVal;
		return this.dataFormat;
	}
	,__class__: openfl.net.URLLoader
	,__properties__: {set_dataFormat:"set_dataFormat"}
});
openfl.net.URLLoaderDataFormat = $hxClasses["openfl.net.URLLoaderDataFormat"] = { __ename__ : ["openfl","net","URLLoaderDataFormat"], __constructs__ : ["BINARY","TEXT","VARIABLES"] };
openfl.net.URLLoaderDataFormat.BINARY = ["BINARY",0];
openfl.net.URLLoaderDataFormat.BINARY.toString = $estr;
openfl.net.URLLoaderDataFormat.BINARY.__enum__ = openfl.net.URLLoaderDataFormat;
openfl.net.URLLoaderDataFormat.TEXT = ["TEXT",1];
openfl.net.URLLoaderDataFormat.TEXT.toString = $estr;
openfl.net.URLLoaderDataFormat.TEXT.__enum__ = openfl.net.URLLoaderDataFormat;
openfl.net.URLLoaderDataFormat.VARIABLES = ["VARIABLES",2];
openfl.net.URLLoaderDataFormat.VARIABLES.toString = $estr;
openfl.net.URLLoaderDataFormat.VARIABLES.__enum__ = openfl.net.URLLoaderDataFormat;
openfl.net.URLLoaderDataFormat.__empty_constructs__ = [openfl.net.URLLoaderDataFormat.BINARY,openfl.net.URLLoaderDataFormat.TEXT,openfl.net.URLLoaderDataFormat.VARIABLES];
openfl.net.URLRequest = function(inURL) {
	if(inURL != null) this.url = inURL;
	this.requestHeaders = [];
	this.method = openfl.net.URLRequestMethod.GET;
	this.contentType = null;
};
$hxClasses["openfl.net.URLRequest"] = openfl.net.URLRequest;
openfl.net.URLRequest.__name__ = ["openfl","net","URLRequest"];
openfl.net.URLRequest.prototype = {
	contentType: null
	,data: null
	,method: null
	,requestHeaders: null
	,url: null
	,userAgent: null
	,formatRequestHeaders: function() {
		var res = this.requestHeaders;
		if(res == null) res = [];
		if(this.method == openfl.net.URLRequestMethod.GET || this.data == null) return res;
		if(typeof(this.data) == "string" || js.Boot.__instanceof(this.data,lime.utils.ByteArray)) {
			res = res.slice();
			res.push(new openfl.net.URLRequestHeader("Content-Type",this.contentType != null?this.contentType:"application/x-www-form-urlencoded"));
		}
		return res;
	}
	,__class__: openfl.net.URLRequest
};
openfl.net.URLRequestHeader = function(name,value) {
	if(value == null) value = "";
	if(name == null) name = "";
	this.name = name;
	this.value = value;
};
$hxClasses["openfl.net.URLRequestHeader"] = openfl.net.URLRequestHeader;
openfl.net.URLRequestHeader.__name__ = ["openfl","net","URLRequestHeader"];
openfl.net.URLRequestHeader.prototype = {
	name: null
	,value: null
	,__class__: openfl.net.URLRequestHeader
};
openfl.net.URLRequestMethod = function() { };
$hxClasses["openfl.net.URLRequestMethod"] = openfl.net.URLRequestMethod;
openfl.net.URLRequestMethod.__name__ = ["openfl","net","URLRequestMethod"];
openfl.net.URLVariables = function(inEncoded) {
	if(inEncoded != null) this.decode(inEncoded);
};
$hxClasses["openfl.net.URLVariables"] = openfl.net.URLVariables;
openfl.net.URLVariables.__name__ = ["openfl","net","URLVariables"];
openfl.net.URLVariables.prototype = {
	decode: function(inVars) {
		var fields = Reflect.fields(this);
		var _g = 0;
		while(_g < fields.length) {
			var f = fields[_g];
			++_g;
			Reflect.deleteField(this,f);
		}
		var fields1 = inVars.split(";").join("&").split("&");
		var _g1 = 0;
		while(_g1 < fields1.length) {
			var f1 = fields1[_g1];
			++_g1;
			var eq = f1.indexOf("=");
			if(eq > 0) Reflect.setField(this,StringTools.urlDecode(HxOverrides.substr(f1,0,eq)),StringTools.urlDecode(HxOverrides.substr(f1,eq + 1,null))); else if(eq != 0) Reflect.setField(this,decodeURIComponent(f1.split("+").join(" ")),"");
		}
	}
	,toString: function() {
		var result = new Array();
		var fields = Reflect.fields(this);
		var _g = 0;
		while(_g < fields.length) {
			var f = fields[_g];
			++_g;
			result.push(encodeURIComponent(f) + "=" + StringTools.urlEncode(Reflect.field(this,f)));
		}
		return result.join("&");
	}
	,__class__: openfl.net.URLVariables
};
openfl.system.TouchscreenType = $hxClasses["openfl.system.TouchscreenType"] = { __ename__ : ["openfl","system","TouchscreenType"], __constructs__ : ["FINGER","NONE","STYLUS"] };
openfl.system.TouchscreenType.FINGER = ["FINGER",0];
openfl.system.TouchscreenType.FINGER.toString = $estr;
openfl.system.TouchscreenType.FINGER.__enum__ = openfl.system.TouchscreenType;
openfl.system.TouchscreenType.NONE = ["NONE",1];
openfl.system.TouchscreenType.NONE.toString = $estr;
openfl.system.TouchscreenType.NONE.__enum__ = openfl.system.TouchscreenType;
openfl.system.TouchscreenType.STYLUS = ["STYLUS",2];
openfl.system.TouchscreenType.STYLUS.toString = $estr;
openfl.system.TouchscreenType.STYLUS.__enum__ = openfl.system.TouchscreenType;
openfl.system.TouchscreenType.__empty_constructs__ = [openfl.system.TouchscreenType.FINGER,openfl.system.TouchscreenType.NONE,openfl.system.TouchscreenType.STYLUS];
openfl.system.Capabilities = function() { };
$hxClasses["openfl.system.Capabilities"] = openfl.system.Capabilities;
openfl.system.Capabilities.__name__ = ["openfl","system","Capabilities"];
openfl.system.Capabilities.__properties__ = {get_version:"get_version",get_screenResolutionY:"get_screenResolutionY",get_screenResolutionX:"get_screenResolutionX",get_screenDPI:"get_screenDPI",get_pixelAspectRatio:"get_pixelAspectRatio",get_os:"get_os",get_language:"get_language"}
openfl.system.Capabilities.language = null;
openfl.system.Capabilities.os = null;
openfl.system.Capabilities.pixelAspectRatio = null;
openfl.system.Capabilities.screenDPI = null;
openfl.system.Capabilities.screenResolutionX = null;
openfl.system.Capabilities.screenResolutionY = null;
openfl.system.Capabilities.version = null;
openfl.system.Capabilities.hasMultiChannelAudio = function(type) {
	return false;
};
openfl.system.Capabilities.get_os = function() {
	return "HTML5";
};
openfl.system.Capabilities.get_pixelAspectRatio = function() {
	return 1;
};
openfl.system.Capabilities.get_screenDPI = function() {
	if(openfl.system.Capabilities.screenDPI > 0) return openfl.system.Capabilities.screenDPI;
	var body = window.document.getElementsByTagName("body")[0];
	var testDiv = window.document.createElement("div");
	testDiv.style.width = testDiv.style.height = "1in";
	testDiv.style.padding = testDiv.style.margin = "0px";
	testDiv.style.position = "absolute";
	testDiv.style.top = "-100%";
	body.appendChild(testDiv);
	openfl.system.Capabilities.screenDPI = testDiv.offsetWidth;
	body.removeChild(testDiv);
	return openfl.system.Capabilities.screenDPI;
};
openfl.system.Capabilities.get_screenResolutionX = function() {
	return window.screen.width;
};
openfl.system.Capabilities.get_screenResolutionY = function() {
	return window.screen.height;
};
openfl.system.Capabilities.get_language = function() {
	return navigator.language;
};
openfl.system.Capabilities.get_version = function() {
	var value = "WEB";
	value += " " + StringTools.replace("3.0.0-beta.3",".",",") + ",0";
	return value;
};
openfl.system.LoaderContext = function(checkPolicyFile,applicationDomain,securityDomain) {
	if(checkPolicyFile == null) checkPolicyFile = false;
	this.checkPolicyFile = checkPolicyFile;
	this.securityDomain = securityDomain;
	this.applicationDomain = applicationDomain;
	this.allowCodeImport = true;
	this.allowLoadBytesCodeExecution = true;
};
$hxClasses["openfl.system.LoaderContext"] = openfl.system.LoaderContext;
openfl.system.LoaderContext.__name__ = ["openfl","system","LoaderContext"];
openfl.system.LoaderContext.prototype = {
	allowCodeImport: null
	,allowLoadBytesCodeExecution: null
	,applicationDomain: null
	,checkPolicyFile: null
	,securityDomain: null
	,__class__: openfl.system.LoaderContext
};
openfl.system.SecurityDomain = function() {
};
$hxClasses["openfl.system.SecurityDomain"] = openfl.system.SecurityDomain;
openfl.system.SecurityDomain.__name__ = ["openfl","system","SecurityDomain"];
openfl.system.SecurityDomain.prototype = {
	__class__: openfl.system.SecurityDomain
};
openfl.system.System = function() { };
$hxClasses["openfl.system.System"] = openfl.system.System;
openfl.system.System.__name__ = ["openfl","system","System"];
openfl.system.System.__properties__ = {get_vmVersion:"get_vmVersion",get_totalMemory:"get_totalMemory"}
openfl.system.System.totalMemory = null;
openfl.system.System.vmVersion = null;
openfl.system.System.exit = function(code) {
	lime.system.System.exit(code);
};
openfl.system.System.gc = function() {
};
openfl.system.System.pause = function() {
	throw "System.pause is currently not supported for HTML5";
};
openfl.system.System.resume = function() {
	throw "System.resume is currently not supported for HTML5";
};
openfl.system.System.setClipboard = function(string) {
	throw "System.setClipboard is currently not supported for HTML5";
};
openfl.system.System.get_totalMemory = function() {
	return 0;
};
openfl.system.System.get_vmVersion = function() {
	return "1.0.0";
};
openfl.text = {};
openfl.text.AntiAliasType = $hxClasses["openfl.text.AntiAliasType"] = { __ename__ : ["openfl","text","AntiAliasType"], __constructs__ : ["ADVANCED","NORMAL"] };
openfl.text.AntiAliasType.ADVANCED = ["ADVANCED",0];
openfl.text.AntiAliasType.ADVANCED.toString = $estr;
openfl.text.AntiAliasType.ADVANCED.__enum__ = openfl.text.AntiAliasType;
openfl.text.AntiAliasType.NORMAL = ["NORMAL",1];
openfl.text.AntiAliasType.NORMAL.toString = $estr;
openfl.text.AntiAliasType.NORMAL.__enum__ = openfl.text.AntiAliasType;
openfl.text.AntiAliasType.__empty_constructs__ = [openfl.text.AntiAliasType.ADVANCED,openfl.text.AntiAliasType.NORMAL];
openfl.text.Font = function(name) {
	lime.text.Font.call(this,name);
};
$hxClasses["openfl.text.Font"] = openfl.text.Font;
openfl.text.Font.__name__ = ["openfl","text","Font"];
openfl.text.Font.enumerateFonts = function(enumerateDeviceFonts) {
	if(enumerateDeviceFonts == null) enumerateDeviceFonts = false;
	return [];
};
openfl.text.Font.fromBytes = function(bytes) {
	var font = new openfl.text.Font();
	font.__fromBytes(bytes);
	return font;
};
openfl.text.Font.fromFile = function(path) {
	var font = new openfl.text.Font();
	font.__fromFile(path);
	return font;
};
openfl.text.Font.registerFont = function(font) {
	var instance;
	instance = js.Boot.__cast(Type.createInstance(font,[]) , openfl.text.Font);
	if(instance != null) openfl.text.Font.__registeredFonts.push(instance);
};
openfl.text.Font.__fromLimeFont = function(value) {
	var font = new openfl.text.Font();
	font.name = value.name;
	font.src = value.src;
	return font;
};
openfl.text.Font.__super__ = lime.text.Font;
openfl.text.Font.prototype = $extend(lime.text.Font.prototype,{
	fontStyle: null
	,fontType: null
	,get_fontName: function() {
		return this.name;
	}
	,set_fontName: function(value) {
		return this.name = value;
	}
	,__class__: openfl.text.Font
	,__properties__: $extend(lime.text.Font.prototype.__properties__,{set_fontName:"set_fontName",get_fontName:"get_fontName"})
});
openfl.text.FontStyle = $hxClasses["openfl.text.FontStyle"] = { __ename__ : ["openfl","text","FontStyle"], __constructs__ : ["REGULAR","ITALIC","BOLD_ITALIC","BOLD"] };
openfl.text.FontStyle.REGULAR = ["REGULAR",0];
openfl.text.FontStyle.REGULAR.toString = $estr;
openfl.text.FontStyle.REGULAR.__enum__ = openfl.text.FontStyle;
openfl.text.FontStyle.ITALIC = ["ITALIC",1];
openfl.text.FontStyle.ITALIC.toString = $estr;
openfl.text.FontStyle.ITALIC.__enum__ = openfl.text.FontStyle;
openfl.text.FontStyle.BOLD_ITALIC = ["BOLD_ITALIC",2];
openfl.text.FontStyle.BOLD_ITALIC.toString = $estr;
openfl.text.FontStyle.BOLD_ITALIC.__enum__ = openfl.text.FontStyle;
openfl.text.FontStyle.BOLD = ["BOLD",3];
openfl.text.FontStyle.BOLD.toString = $estr;
openfl.text.FontStyle.BOLD.__enum__ = openfl.text.FontStyle;
openfl.text.FontStyle.__empty_constructs__ = [openfl.text.FontStyle.REGULAR,openfl.text.FontStyle.ITALIC,openfl.text.FontStyle.BOLD_ITALIC,openfl.text.FontStyle.BOLD];
openfl.text.FontType = $hxClasses["openfl.text.FontType"] = { __ename__ : ["openfl","text","FontType"], __constructs__ : ["DEVICE","EMBEDDED","EMBEDDED_CFF"] };
openfl.text.FontType.DEVICE = ["DEVICE",0];
openfl.text.FontType.DEVICE.toString = $estr;
openfl.text.FontType.DEVICE.__enum__ = openfl.text.FontType;
openfl.text.FontType.EMBEDDED = ["EMBEDDED",1];
openfl.text.FontType.EMBEDDED.toString = $estr;
openfl.text.FontType.EMBEDDED.__enum__ = openfl.text.FontType;
openfl.text.FontType.EMBEDDED_CFF = ["EMBEDDED_CFF",2];
openfl.text.FontType.EMBEDDED_CFF.toString = $estr;
openfl.text.FontType.EMBEDDED_CFF.__enum__ = openfl.text.FontType;
openfl.text.FontType.__empty_constructs__ = [openfl.text.FontType.DEVICE,openfl.text.FontType.EMBEDDED,openfl.text.FontType.EMBEDDED_CFF];
openfl.text.GridFitType = $hxClasses["openfl.text.GridFitType"] = { __ename__ : ["openfl","text","GridFitType"], __constructs__ : ["NONE","PIXEL","SUBPIXEL"] };
openfl.text.GridFitType.NONE = ["NONE",0];
openfl.text.GridFitType.NONE.toString = $estr;
openfl.text.GridFitType.NONE.__enum__ = openfl.text.GridFitType;
openfl.text.GridFitType.PIXEL = ["PIXEL",1];
openfl.text.GridFitType.PIXEL.toString = $estr;
openfl.text.GridFitType.PIXEL.__enum__ = openfl.text.GridFitType;
openfl.text.GridFitType.SUBPIXEL = ["SUBPIXEL",2];
openfl.text.GridFitType.SUBPIXEL.toString = $estr;
openfl.text.GridFitType.SUBPIXEL.__enum__ = openfl.text.GridFitType;
openfl.text.GridFitType.__empty_constructs__ = [openfl.text.GridFitType.NONE,openfl.text.GridFitType.PIXEL,openfl.text.GridFitType.SUBPIXEL];
openfl.text.TextField = function() {
	openfl.display.InteractiveObject.call(this);
	this.__width = 100;
	this.__height = 100;
	this.__text = "";
	this.set_type(openfl.text.TextFieldType.DYNAMIC);
	this.set_autoSize(openfl.text.TextFieldAutoSize.NONE);
	this.displayAsPassword = false;
	this.embedFonts = false;
	this.selectable = true;
	this.set_borderColor(0);
	this.set_border(false);
	this.set_backgroundColor(16777215);
	this.set_background(false);
	this.gridFitType = openfl.text.GridFitType.PIXEL;
	this.maxChars = 0;
	this.multiline = false;
	this.sharpness = 0;
	this.scrollH = 0;
	this.scrollV = 1;
	this.set_wordWrap(false);
	if(openfl.text.TextField.__defaultTextFormat == null) {
		openfl.text.TextField.__defaultTextFormat = new openfl.text.TextFormat("Times New Roman",12,0,false,false,false,"","",openfl.text.TextFormatAlign.LEFT,0,0,0,0);
		openfl.text.TextField.__defaultTextFormat.blockIndent = 0;
		openfl.text.TextField.__defaultTextFormat.bullet = false;
		openfl.text.TextField.__defaultTextFormat.letterSpacing = 0;
		openfl.text.TextField.__defaultTextFormat.kerning = false;
	}
	this.__textFormat = openfl.text.TextField.__defaultTextFormat.clone();
};
$hxClasses["openfl.text.TextField"] = openfl.text.TextField;
openfl.text.TextField.__name__ = ["openfl","text","TextField"];
openfl.text.TextField.__defaultTextFormat = null;
openfl.text.TextField.__super__ = openfl.display.InteractiveObject;
openfl.text.TextField.prototype = $extend(openfl.display.InteractiveObject.prototype,{
	antiAliasType: null
	,autoSize: null
	,background: null
	,backgroundColor: null
	,border: null
	,borderColor: null
	,bottomScrollV: null
	,caretIndex: null
	,caretPos: null
	,displayAsPassword: null
	,embedFonts: null
	,gridFitType: null
	,length: null
	,maxChars: null
	,maxScrollH: null
	,maxScrollV: null
	,multiline: null
	,numLines: null
	,restrict: null
	,scrollH: null
	,scrollV: null
	,selectable: null
	,selectionBeginIndex: null
	,selectionEndIndex: null
	,sharpness: null
	,textHeight: null
	,textWidth: null
	,type: null
	,wordWrap: null
	,__cursorPosition: null
	,__cursorTimer: null
	,__dirty: null
	,__hasFocus: null
	,__height: null
	,__isHTML: null
	,__isKeyDown: null
	,__measuredHeight: null
	,__measuredWidth: null
	,__ranges: null
	,__selectionStart: null
	,__showCursor: null
	,__text: null
	,__textFormat: null
	,__textLayout: null
	,__texture: null
	,__tileData: null
	,__tilesheets: null
	,__width: null
	,__div: null
	,__hiddenInput: null
	,appendText: function(text) {
		var _g = this;
		_g.set_text(_g.get_text() + text);
	}
	,getCharBoundaries: function(a) {
		openfl.Lib.notImplemented("TextField.getCharBoundaries");
		return null;
	}
	,getCharIndexAtPoint: function(x,y) {
		openfl.Lib.notImplemented("TextField.getCharIndexAtPoint");
		return 0;
	}
	,getLineIndexAtPoint: function(x,y) {
		openfl.Lib.notImplemented("TextField.getLineIndexAtPoint");
		return 0;
	}
	,getLineMetrics: function(lineIndex) {
		openfl.Lib.notImplemented("TextField.getLineMetrics");
		return new openfl.text.TextLineMetrics(0,0,0,0,0,0);
	}
	,getLineOffset: function(lineIndex) {
		openfl.Lib.notImplemented("TextField.getLineOffset");
		return 0;
	}
	,getLineText: function(lineIndex) {
		openfl.Lib.notImplemented("TextField.getLineText");
		return "";
	}
	,getTextFormat: function(beginIndex,endIndex) {
		if(endIndex == null) endIndex = 0;
		if(beginIndex == null) beginIndex = 0;
		return this.__textFormat.clone();
	}
	,setSelection: function(beginIndex,endIndex) {
		openfl.Lib.notImplemented("TextField.setSelection");
	}
	,setTextFormat: function(format,beginIndex,endIndex) {
		if(endIndex == null) endIndex = 0;
		if(beginIndex == null) beginIndex = 0;
		if(format.font != null) this.__textFormat.font = format.font;
		if(format.size != null) this.__textFormat.size = format.size;
		if(format.color != null) this.__textFormat.color = format.color;
		if(format.bold != null) this.__textFormat.bold = format.bold;
		if(format.italic != null) this.__textFormat.italic = format.italic;
		if(format.underline != null) this.__textFormat.underline = format.underline;
		if(format.url != null) this.__textFormat.url = format.url;
		if(format.target != null) this.__textFormat.target = format.target;
		if(format.align != null) this.__textFormat.align = format.align;
		if(format.leftMargin != null) this.__textFormat.leftMargin = format.leftMargin;
		if(format.rightMargin != null) this.__textFormat.rightMargin = format.rightMargin;
		if(format.indent != null) this.__textFormat.indent = format.indent;
		if(format.leading != null) this.__textFormat.leading = format.leading;
		if(format.blockIndent != null) this.__textFormat.blockIndent = format.blockIndent;
		if(format.bullet != null) this.__textFormat.bullet = format.bullet;
		if(format.kerning != null) this.__textFormat.kerning = format.kerning;
		if(format.letterSpacing != null) this.__textFormat.letterSpacing = format.letterSpacing;
		if(format.tabStops != null) this.__textFormat.tabStops = format.tabStops;
		this.__dirty = true;
	}
	,__clipText: function(value) {
		var textWidth = this.__getTextWidth(value);
		var fillPer = textWidth / this.__width;
		this.set_text(fillPer > 1?(function($this) {
			var $r;
			var _this = $this.get_text();
			var pos = -1 * Math.floor($this.get_text().length / fillPer);
			$r = HxOverrides.substr(_this,pos,null);
			return $r;
		}(this)):this.get_text());
		return this.get_text() + "";
	}
	,__disableInputMode: function() {
		this.this_onRemovedFromStage(null);
	}
	,__enableInputMode: function() {
		this.__cursorPosition = -1;
		if(this.__hiddenInput == null) {
			this.__hiddenInput = window.document.createElement("input");
			this.__hiddenInput.type = "text";
			this.__hiddenInput.style.position = "absolute";
			this.__hiddenInput.style.opacity = "0";
			this.__hiddenInput.style.pointerEvents = "none";
			this.__hiddenInput.style.left = this.get_x() + (this.__canvas != null?this.__canvas.offsetLeft:0) + "px";
			this.__hiddenInput.style.top = this.get_y() + (this.__canvas != null?this.__canvas.offsetTop:0) + "px";
			this.__hiddenInput.style.width = this.__width + "px";
			this.__hiddenInput.style.height = this.__height + "px";
			this.__hiddenInput.style.zIndex = "0";
			if(this.maxChars > 0) this.__hiddenInput.maxLength = this.maxChars;
			window.document.body.appendChild(this.__hiddenInput);
			this.__hiddenInput.value = this.__text;
		}
		if(this.stage != null) this.this_onAddedToStage(null); else {
			this.addEventListener(openfl.events.Event.ADDED_TO_STAGE,$bind(this,this.this_onAddedToStage));
			this.addEventListener(openfl.events.Event.REMOVED_FROM_STAGE,$bind(this,this.this_onRemovedFromStage));
		}
	}
	,__getBounds: function(rect,matrix) {
		var bounds = new openfl.geom.Rectangle(0,0,this.__width,this.__height);
		bounds.transform(this.__worldTransform);
		rect.__expand(bounds.x,bounds.y,bounds.width,bounds.height);
	}
	,__getFont: function(format) {
		var font;
		if(format.italic) font = "italic "; else font = "normal ";
		font += "normal ";
		if(format.bold) font += "bold "; else font += "normal ";
		font += format.size + "px";
		font += "/" + (format.size + format.leading + 4) + "px ";
		font += "'" + (function($this) {
			var $r;
			var _g = format.font;
			$r = (function($this) {
				var $r;
				switch(_g) {
				case "_sans":
					$r = "sans-serif";
					break;
				case "_serif":
					$r = "serif";
					break;
				case "_typewriter":
					$r = "monospace";
					break;
				default:
					$r = format.font;
				}
				return $r;
			}($this));
			return $r;
		}(this));
		font += "'";
		return font;
	}
	,__getFontInstance: function(format) {
		return null;
	}
	,__getPosition: function(x,y) {
		var value = this.get_text();
		var text = value;
		var totalW = 0;
		var pos = text.length;
		if(x < this.__getTextWidth(text)) {
			var _g1 = 0;
			var _g = text.length;
			while(_g1 < _g) {
				var i = _g1++;
				totalW += this.__getTextWidth(text.charAt(i));
				if(totalW >= x) {
					pos = i;
					break;
				}
			}
		}
		return pos;
	}
	,__getTextWidth: function(text) {
		if(this.__context == null) {
			this.__canvas = window.document.createElement("canvas");
			this.__context = this.__canvas.getContext("2d");
		}
		this.__context.font = this.__getFont(this.__textFormat);
		this.__context.textAlign = "left";
		return this.__context.measureText(text).width;
	}
	,__hitTest: function(x,y,shapeFlag,stack,interactiveOnly) {
		if(!this.get_visible() || interactiveOnly && !this.mouseEnabled) return false;
		var point = this.globalToLocal(new openfl.geom.Point(x,y));
		if(point.x > 0 && point.y > 0 && point.x <= this.__width && point.y <= this.__height) {
			if(stack != null) stack.push(this);
			return true;
		}
		return false;
	}
	,__measureText: function() {
		if(this.__context == null) {
			this.__canvas = window.document.createElement("canvas");
			this.__context = this.__canvas.getContext("2d");
		}
		if(this.__ranges == null) {
			this.__context.font = this.__getFont(this.__textFormat);
			return [this.__context.measureText(this.__text).width];
		} else {
			var measurements = [];
			var _g = 0;
			var _g1 = this.__ranges;
			while(_g < _g1.length) {
				var range = _g1[_g];
				++_g;
				this.__context.font = this.__getFont(range.format);
				measurements.push(this.__context.measureText(this.get_text().substring(range.start,range.end)).width);
			}
			return measurements;
		}
	}
	,__measureTextWithDOM: function() {
		var div = this.__div;
		if(this.__div == null) {
			div = window.document.createElement("div");
			div.innerHTML = new EReg("\n","g").replace(this.__text,"<br>");
			div.style.setProperty("font",this.__getFont(this.__textFormat),null);
			div.style.position = "absolute";
			div.style.top = "110%";
			window.document.body.appendChild(div);
		}
		this.__measuredWidth = div.clientWidth;
		if(this.__div == null) div.style.width = Std.string(this.__width) + "px";
		this.__measuredHeight = div.clientHeight;
		if(this.__div == null) window.document.body.removeChild(div);
	}
	,__renderCanvas: function(renderSession) {
		openfl._internal.renderer.canvas.CanvasTextField.render(this,renderSession);
	}
	,__renderDOM: function(renderSession) {
		openfl._internal.renderer.dom.DOMTextField.render(this,renderSession);
	}
	,__renderGL: function(renderSession) {
		openfl._internal.renderer.opengl.GLTextField.render(this,renderSession);
	}
	,__startCursorTimer: function() {
		this.__cursorTimer = haxe.Timer.delay($bind(this,this.__startCursorTimer),500);
		this.__showCursor = !this.__showCursor;
		this.__dirty = true;
	}
	,__stopCursorTimer: function() {
		if(this.__cursorTimer != null) this.__cursorTimer.stop();
	}
	,input_onKeyUp: function(event) {
		this.__isKeyDown = false;
		if(event == null) event == window.event;
		this.__text = this.__hiddenInput.value;
		this.__ranges = null;
		this.__isHTML = false;
		this.__cursorPosition = this.__hiddenInput.selectionStart;
		this.__selectionStart = this.__cursorPosition;
		this.__dirty = true;
		this.dispatchEvent(new openfl.events.Event(openfl.events.Event.CHANGE,true));
	}
	,input_onKeyDown: function(event) {
		this.__isKeyDown = true;
		if(event == null) event == window.event;
		var keyCode = event.which;
		var isShift = event.shiftKey;
		if(keyCode == 65 && (event.ctrlKey || event.metaKey)) {
			this.__hiddenInput.selectionStart = 0;
			this.__hiddenInput.selectionEnd = this.get_text().length;
			event.preventDefault();
			this.__dirty = true;
			return;
		}
		if(keyCode == 17 || event.metaKey || event.ctrlKey) return;
		this.__text = this.__hiddenInput.value;
		this.__ranges = null;
		this.__isHTML = false;
		this.__selectionStart = this.__hiddenInput.selectionStart;
		this.__dirty = true;
	}
	,stage_onFocusOut: function(event) {
		this.__cursorPosition = -1;
		this.__hasFocus = false;
		this.__stopCursorTimer();
		this.__hiddenInput.blur();
		this.__dirty = true;
	}
	,stage_onMouseMove: function(event) {
		if(this.__hasFocus && this.__selectionStart >= 0) {
			this.__cursorPosition = this.__getPosition(event.localX,event.localY);
			this.__dirty = true;
		}
	}
	,stage_onMouseUp: function(event) {
		var upPos = this.__getPosition(event.localX,event.localY);
		var leftPos;
		var rightPos;
		leftPos = Std["int"](Math.min(this.__selectionStart,upPos));
		rightPos = Std["int"](Math.max(this.__selectionStart,upPos));
		this.__selectionStart = leftPos;
		this.__cursorPosition = rightPos;
		this.stage.removeEventListener(openfl.events.MouseEvent.MOUSE_MOVE,$bind(this,this.stage_onMouseMove));
		this.stage.addEventListener(openfl.events.MouseEvent.MOUSE_UP,$bind(this,this.stage_onMouseUp));
		this.stage.set_focus(this);
		if(this.__cursorPosition < 0) {
			this.__cursorPosition = this.__text.length;
			this.__selectionStart = this.__cursorPosition;
		}
		this.__hiddenInput.focus();
		this.__hiddenInput.selectionStart = this.__selectionStart;
		this.__hiddenInput.selectionEnd = this.__cursorPosition;
		this.__stopCursorTimer();
		this.__startCursorTimer();
		this.__hasFocus = true;
		this.__dirty = true;
	}
	,this_onAddedToStage: function(event) {
		this.stage.addEventListener(openfl.events.FocusEvent.FOCUS_OUT,$bind(this,this.stage_onFocusOut));
		this.__hiddenInput.addEventListener("keydown",$bind(this,this.input_onKeyDown));
		this.__hiddenInput.addEventListener("keyup",$bind(this,this.input_onKeyUp));
		this.__hiddenInput.addEventListener("input",$bind(this,this.input_onKeyUp));
		this.addEventListener(openfl.events.MouseEvent.MOUSE_DOWN,$bind(this,this.this_onMouseDown));
	}
	,this_onMouseDown: function(event) {
		this.__selectionStart = this.__getPosition(event.localX,event.localY);
		this.stage.addEventListener(openfl.events.MouseEvent.MOUSE_MOVE,$bind(this,this.stage_onMouseMove));
		this.stage.addEventListener(openfl.events.MouseEvent.MOUSE_UP,$bind(this,this.stage_onMouseUp));
	}
	,this_onRemovedFromStage: function(event) {
		if(this.stage != null) this.stage.removeEventListener(openfl.events.FocusEvent.FOCUS_OUT,$bind(this,this.stage_onFocusOut));
		if(this.__hiddenInput != null) this.__hiddenInput.removeEventListener("keydown",$bind(this,this.input_onKeyDown));
		if(this.__hiddenInput != null) this.__hiddenInput.removeEventListener("keyup",$bind(this,this.input_onKeyUp));
		if(this.__hiddenInput != null) this.__hiddenInput.removeEventListener("input",$bind(this,this.input_onKeyUp));
		this.removeEventListener(openfl.events.MouseEvent.MOUSE_DOWN,$bind(this,this.this_onMouseDown));
		if(this.stage != null) this.stage.removeEventListener(openfl.events.MouseEvent.MOUSE_MOVE,$bind(this,this.stage_onMouseMove));
		if(this.stage != null) this.stage.removeEventListener(openfl.events.MouseEvent.MOUSE_UP,$bind(this,this.stage_onMouseUp));
	}
	,set_autoSize: function(value) {
		if(value != this.autoSize) this.__dirty = true;
		return this.autoSize = value;
	}
	,set_background: function(value) {
		if(value != this.background) this.__dirty = true;
		return this.background = value;
	}
	,set_backgroundColor: function(value) {
		if(value != this.backgroundColor) this.__dirty = true;
		return this.backgroundColor = value;
	}
	,set_border: function(value) {
		if(value != this.border) this.__dirty = true;
		return this.border = value;
	}
	,set_borderColor: function(value) {
		if(value != this.borderColor) this.__dirty = true;
		return this.borderColor = value;
	}
	,get_bottomScrollV: function() {
		return this.get_numLines();
	}
	,get_caretPos: function() {
		return 0;
	}
	,get_defaultTextFormat: function() {
		return this.__textFormat.clone();
	}
	,set_defaultTextFormat: function(value) {
		this.__textFormat.__merge(value);
		return value;
	}
	,get_height: function() {
		return this.__height * this.get_scaleY();
	}
	,set_height: function(value) {
		if(this.get_scaleY() != 1 || value != this.__height) {
			if(!this.__transformDirty) {
				this.__transformDirty = true;
				openfl.display.DisplayObject.__worldTransformDirty++;
			}
			this.__dirty = true;
		}
		this.set_scaleY(1);
		return this.__height = value;
	}
	,get_htmlText: function() {
		return this.__text;
	}
	,set_htmlText: function(value) {
		if(!this.__isHTML || this.__text != value) this.__dirty = true;
		this.__ranges = null;
		this.__isHTML = true;
		if(this.__hiddenInput != null) this.__hiddenInput.value = value;
		return this.__text = value;
	}
	,get_maxScrollH: function() {
		return 0;
	}
	,get_maxScrollV: function() {
		return 1;
	}
	,get_numLines: function() {
		if(this.get_text() != "" && this.get_text() != null) {
			var count = this.get_text().split("\n").length;
			if(this.__isHTML) count += this.get_text().split("<br>").length - 1;
			return count;
		}
		return 1;
	}
	,get_text: function() {
		if(this.__isHTML) {
		}
		return this.__text;
	}
	,set_text: function(value) {
		if(this.__text != value && this.__hiddenInput != null) this.__hiddenInput.value = value;
		if(this.__isHTML || this.__text != value) this.__dirty = true;
		this.__ranges = null;
		this.__isHTML = false;
		return this.__text = value;
	}
	,get_textColor: function() {
		return this.__textFormat.color;
	}
	,set_textColor: function(value) {
		if(value != this.__textFormat.color) this.__dirty = true;
		if(this.__ranges != null) {
			var _g = 0;
			var _g1 = this.__ranges;
			while(_g < _g1.length) {
				var range = _g1[_g];
				++_g;
				range.format.color = value;
			}
		}
		return this.__textFormat.color = value;
	}
	,get_textWidth: function() {
		if(this.__canvas != null) {
			var sizes = this.__measureText();
			var total = 0;
			var _g = 0;
			while(_g < sizes.length) {
				var size = sizes[_g];
				++_g;
				total += size;
			}
			return total;
		} else if(this.__div != null) return this.__div.clientWidth; else {
			this.__measureTextWithDOM();
			return this.__measuredWidth;
		}
	}
	,get_textHeight: function() {
		if(this.__canvas != null) return this.__textFormat.size * 1.185; else if(this.__div != null) return this.__div.clientHeight; else {
			this.__measureTextWithDOM();
			return this.__measuredHeight + this.__textFormat.size * 0.185;
		}
	}
	,set_type: function(value) {
		if(value != this.type) this.__dirty = true;
		return this.type = value;
	}
	,get_width: function() {
		if(this.autoSize == openfl.text.TextFieldAutoSize.LEFT) return (this.get_textWidth() + 4) * this.get_scaleX(); else return this.__width * this.get_scaleX();
	}
	,set_width: function(value) {
		if(this.get_scaleX() != 1 || this.__width != value) {
			if(!this.__transformDirty) {
				this.__transformDirty = true;
				openfl.display.DisplayObject.__worldTransformDirty++;
			}
			this.__dirty = true;
		}
		this.set_scaleX(1);
		return this.__width = value;
	}
	,get_wordWrap: function() {
		return this.wordWrap;
	}
	,set_wordWrap: function(value) {
		return this.wordWrap = value;
	}
	,__class__: openfl.text.TextField
	,__properties__: $extend(openfl.display.InteractiveObject.prototype.__properties__,{set_wordWrap:"set_wordWrap",get_wordWrap:"get_wordWrap",set_type:"set_type",get_textWidth:"get_textWidth",get_textHeight:"get_textHeight",set_textColor:"set_textColor",get_textColor:"get_textColor",set_text:"set_text",get_text:"get_text",get_numLines:"get_numLines",get_maxScrollV:"get_maxScrollV",get_maxScrollH:"get_maxScrollH",set_htmlText:"set_htmlText",get_htmlText:"get_htmlText",set_defaultTextFormat:"set_defaultTextFormat",get_defaultTextFormat:"get_defaultTextFormat",get_caretPos:"get_caretPos",get_bottomScrollV:"get_bottomScrollV",set_borderColor:"set_borderColor",set_border:"set_border",set_backgroundColor:"set_backgroundColor",set_background:"set_background",set_autoSize:"set_autoSize"})
});
openfl.text.TextFormatRange = function(format,start,end) {
	this.format = format;
	this.start = start;
	this.end = end;
};
$hxClasses["openfl.text.TextFormatRange"] = openfl.text.TextFormatRange;
openfl.text.TextFormatRange.__name__ = ["openfl","text","TextFormatRange"];
openfl.text.TextFormatRange.prototype = {
	end: null
	,format: null
	,start: null
	,__class__: openfl.text.TextFormatRange
};
openfl.text.TextFieldAutoSize = $hxClasses["openfl.text.TextFieldAutoSize"] = { __ename__ : ["openfl","text","TextFieldAutoSize"], __constructs__ : ["CENTER","LEFT","NONE","RIGHT"] };
openfl.text.TextFieldAutoSize.CENTER = ["CENTER",0];
openfl.text.TextFieldAutoSize.CENTER.toString = $estr;
openfl.text.TextFieldAutoSize.CENTER.__enum__ = openfl.text.TextFieldAutoSize;
openfl.text.TextFieldAutoSize.LEFT = ["LEFT",1];
openfl.text.TextFieldAutoSize.LEFT.toString = $estr;
openfl.text.TextFieldAutoSize.LEFT.__enum__ = openfl.text.TextFieldAutoSize;
openfl.text.TextFieldAutoSize.NONE = ["NONE",2];
openfl.text.TextFieldAutoSize.NONE.toString = $estr;
openfl.text.TextFieldAutoSize.NONE.__enum__ = openfl.text.TextFieldAutoSize;
openfl.text.TextFieldAutoSize.RIGHT = ["RIGHT",3];
openfl.text.TextFieldAutoSize.RIGHT.toString = $estr;
openfl.text.TextFieldAutoSize.RIGHT.__enum__ = openfl.text.TextFieldAutoSize;
openfl.text.TextFieldAutoSize.__empty_constructs__ = [openfl.text.TextFieldAutoSize.CENTER,openfl.text.TextFieldAutoSize.LEFT,openfl.text.TextFieldAutoSize.NONE,openfl.text.TextFieldAutoSize.RIGHT];
openfl.text.TextFieldType = $hxClasses["openfl.text.TextFieldType"] = { __ename__ : ["openfl","text","TextFieldType"], __constructs__ : ["DYNAMIC","INPUT"] };
openfl.text.TextFieldType.DYNAMIC = ["DYNAMIC",0];
openfl.text.TextFieldType.DYNAMIC.toString = $estr;
openfl.text.TextFieldType.DYNAMIC.__enum__ = openfl.text.TextFieldType;
openfl.text.TextFieldType.INPUT = ["INPUT",1];
openfl.text.TextFieldType.INPUT.toString = $estr;
openfl.text.TextFieldType.INPUT.__enum__ = openfl.text.TextFieldType;
openfl.text.TextFieldType.__empty_constructs__ = [openfl.text.TextFieldType.DYNAMIC,openfl.text.TextFieldType.INPUT];
openfl.text.TextFormat = function(font,size,color,bold,italic,underline,url,target,align,leftMargin,rightMargin,indent,leading) {
	this.font = font;
	this.size = size;
	this.color = color;
	this.bold = bold;
	this.italic = italic;
	this.underline = underline;
	this.url = url;
	this.target = target;
	this.align = align;
	this.leftMargin = leftMargin;
	this.rightMargin = rightMargin;
	this.indent = indent;
	this.leading = leading;
};
$hxClasses["openfl.text.TextFormat"] = openfl.text.TextFormat;
openfl.text.TextFormat.__name__ = ["openfl","text","TextFormat"];
openfl.text.TextFormat.prototype = {
	align: null
	,blockIndent: null
	,bold: null
	,bullet: null
	,color: null
	,font: null
	,indent: null
	,italic: null
	,kerning: null
	,leading: null
	,leftMargin: null
	,letterSpacing: null
	,rightMargin: null
	,size: null
	,tabStops: null
	,target: null
	,underline: null
	,url: null
	,clone: function() {
		var newFormat = new openfl.text.TextFormat(this.font,this.size,this.color,this.bold,this.italic,this.underline,this.url,this.target);
		newFormat.align = this.align;
		newFormat.leftMargin = this.leftMargin;
		newFormat.rightMargin = this.rightMargin;
		newFormat.indent = this.indent;
		newFormat.leading = this.leading;
		newFormat.blockIndent = this.blockIndent;
		newFormat.bullet = this.bullet;
		newFormat.kerning = this.kerning;
		newFormat.letterSpacing = this.letterSpacing;
		newFormat.tabStops = this.tabStops;
		return newFormat;
	}
	,__merge: function(format) {
		if(format.font != null) this.font = format.font;
		if(format.size != null) this.size = format.size;
		if(format.color != null) this.color = format.color;
		if(format.bold != null) this.bold = format.bold;
		if(format.italic != null) this.italic = format.italic;
		if(format.underline != null) this.underline = format.underline;
		if(format.url != null) this.url = format.url;
		if(format.target != null) this.target = format.target;
		if(format.align != null) this.align = format.align;
		if(format.leftMargin != null) this.leftMargin = format.leftMargin;
		if(format.rightMargin != null) this.rightMargin = format.rightMargin;
		if(format.indent != null) this.indent = format.indent;
		if(format.leading != null) this.leading = format.leading;
		if(format.blockIndent != null) this.blockIndent = format.blockIndent;
		if(format.bullet != null) this.bullet = format.bullet;
		if(format.kerning != null) this.kerning = format.kerning;
		if(format.letterSpacing != null) this.letterSpacing = format.letterSpacing;
		if(format.tabStops != null) this.tabStops = format.tabStops;
	}
	,__class__: openfl.text.TextFormat
};
openfl.text.TextFormatAlign = $hxClasses["openfl.text.TextFormatAlign"] = { __ename__ : ["openfl","text","TextFormatAlign"], __constructs__ : ["LEFT","RIGHT","JUSTIFY","CENTER"] };
openfl.text.TextFormatAlign.LEFT = ["LEFT",0];
openfl.text.TextFormatAlign.LEFT.toString = $estr;
openfl.text.TextFormatAlign.LEFT.__enum__ = openfl.text.TextFormatAlign;
openfl.text.TextFormatAlign.RIGHT = ["RIGHT",1];
openfl.text.TextFormatAlign.RIGHT.toString = $estr;
openfl.text.TextFormatAlign.RIGHT.__enum__ = openfl.text.TextFormatAlign;
openfl.text.TextFormatAlign.JUSTIFY = ["JUSTIFY",2];
openfl.text.TextFormatAlign.JUSTIFY.toString = $estr;
openfl.text.TextFormatAlign.JUSTIFY.__enum__ = openfl.text.TextFormatAlign;
openfl.text.TextFormatAlign.CENTER = ["CENTER",3];
openfl.text.TextFormatAlign.CENTER.toString = $estr;
openfl.text.TextFormatAlign.CENTER.__enum__ = openfl.text.TextFormatAlign;
openfl.text.TextFormatAlign.__empty_constructs__ = [openfl.text.TextFormatAlign.LEFT,openfl.text.TextFormatAlign.RIGHT,openfl.text.TextFormatAlign.JUSTIFY,openfl.text.TextFormatAlign.CENTER];
openfl.text.TextLineMetrics = function(x,width,height,ascent,descent,leading) {
	this.x = x;
	this.width = width;
	this.height = height;
	this.ascent = ascent;
	this.descent = descent;
	this.leading = leading;
};
$hxClasses["openfl.text.TextLineMetrics"] = openfl.text.TextLineMetrics;
openfl.text.TextLineMetrics.__name__ = ["openfl","text","TextLineMetrics"];
openfl.text.TextLineMetrics.prototype = {
	ascent: null
	,descent: null
	,height: null
	,leading: null
	,width: null
	,x: null
	,__class__: openfl.text.TextLineMetrics
};
openfl.ui = {};
openfl.ui._KeyLocation = {};
openfl.ui._KeyLocation.KeyLocation_Impl_ = function() { };
$hxClasses["openfl.ui._KeyLocation.KeyLocation_Impl_"] = openfl.ui._KeyLocation.KeyLocation_Impl_;
openfl.ui._KeyLocation.KeyLocation_Impl_.__name__ = ["openfl","ui","_KeyLocation","KeyLocation_Impl_"];
openfl.ui.Keyboard = function() { };
$hxClasses["openfl.ui.Keyboard"] = openfl.ui.Keyboard;
openfl.ui.Keyboard.__name__ = ["openfl","ui","Keyboard"];
openfl.ui.Keyboard.capsLock = null;
openfl.ui.Keyboard.numLock = null;
openfl.ui.Keyboard.isAccessible = function() {
	return false;
};
openfl.ui.Keyboard.__convertMozillaCode = function(code) {
	switch(code) {
	case 8:
		return 8;
	case 9:
		return 9;
	case 13:
		return 13;
	case 14:
		return 13;
	case 16:
		return 16;
	case 17:
		return 17;
	case 20:
		return 20;
	case 27:
		return 27;
	case 32:
		return 32;
	case 33:
		return 33;
	case 34:
		return 34;
	case 35:
		return 35;
	case 36:
		return 36;
	case 37:
		return 37;
	case 39:
		return 39;
	case 38:
		return 38;
	case 40:
		return 40;
	case 45:
		return 45;
	case 46:
		return 46;
	case 144:
		return 144;
	default:
		return code;
	}
};
openfl.ui.Keyboard.__convertWebkitCode = function(code) {
	var _g = code.toLowerCase();
	switch(_g) {
	case "backspace":
		return 8;
	case "tab":
		return 9;
	case "enter":
		return 13;
	case "shift":
		return 16;
	case "control":
		return 17;
	case "capslock":
		return 20;
	case "escape":
		return 27;
	case "space":
		return 32;
	case "pageup":
		return 33;
	case "pagedown":
		return 34;
	case "end":
		return 35;
	case "home":
		return 36;
	case "left":
		return 37;
	case "right":
		return 39;
	case "up":
		return 38;
	case "down":
		return 40;
	case "insert":
		return 45;
	case "delete":
		return 46;
	case "numlock":
		return 144;
	case "break":
		return 19;
	}
	if(code.indexOf("U+") == 0) return Std.parseInt("0x" + HxOverrides.substr(code,3,null));
	throw "Unrecognized key code: " + code;
	return 0;
};
openfl.ui.Mouse = function() { };
$hxClasses["openfl.ui.Mouse"] = openfl.ui.Mouse;
openfl.ui.Mouse.__name__ = ["openfl","ui","Mouse"];
openfl.ui.Mouse.hide = function() {
	lime.ui.Mouse.hide();
};
openfl.ui.Mouse.show = function() {
	lime.ui.Mouse.show();
};
openfl.ui.Multitouch = function() { };
$hxClasses["openfl.ui.Multitouch"] = openfl.ui.Multitouch;
openfl.ui.Multitouch.__name__ = ["openfl","ui","Multitouch"];
openfl.ui.Multitouch.__properties__ = {get_supportsTouchEvents:"get_supportsTouchEvents",set_inputMode:"set_inputMode",get_inputMode:"get_inputMode"}
openfl.ui.Multitouch.maxTouchPoints = null;
openfl.ui.Multitouch.supportedGestures = null;
openfl.ui.Multitouch.supportsGestureEvents = null;
openfl.ui.Multitouch.supportsTouchEvents = null;
openfl.ui.Multitouch.get_inputMode = function() {
	return openfl.ui.MultitouchInputMode.TOUCH_POINT;
};
openfl.ui.Multitouch.set_inputMode = function(inMode) {
	if(inMode == openfl.ui.MultitouchInputMode.GESTURE) return openfl.ui.Multitouch.get_inputMode();
	return inMode;
};
openfl.ui.Multitouch.get_supportsTouchEvents = function() {
	if(('ontouchstart' in document.documentElement) || (window.DocumentTouch && document instanceof DocumentTouch)) return true;
	return false;
};
openfl.ui.MultitouchInputMode = $hxClasses["openfl.ui.MultitouchInputMode"] = { __ename__ : ["openfl","ui","MultitouchInputMode"], __constructs__ : ["NONE","TOUCH_POINT","GESTURE"] };
openfl.ui.MultitouchInputMode.NONE = ["NONE",0];
openfl.ui.MultitouchInputMode.NONE.toString = $estr;
openfl.ui.MultitouchInputMode.NONE.__enum__ = openfl.ui.MultitouchInputMode;
openfl.ui.MultitouchInputMode.TOUCH_POINT = ["TOUCH_POINT",1];
openfl.ui.MultitouchInputMode.TOUCH_POINT.toString = $estr;
openfl.ui.MultitouchInputMode.TOUCH_POINT.__enum__ = openfl.ui.MultitouchInputMode;
openfl.ui.MultitouchInputMode.GESTURE = ["GESTURE",2];
openfl.ui.MultitouchInputMode.GESTURE.toString = $estr;
openfl.ui.MultitouchInputMode.GESTURE.__enum__ = openfl.ui.MultitouchInputMode;
openfl.ui.MultitouchInputMode.__empty_constructs__ = [openfl.ui.MultitouchInputMode.NONE,openfl.ui.MultitouchInputMode.TOUCH_POINT,openfl.ui.MultitouchInputMode.GESTURE];
openfl.utils = {};
openfl.utils.AGALMiniAssembler = function() {
	this.r = new haxe.ds.StringMap();
	this.cur = new openfl._internal.aglsl.assembler.Part();
};
$hxClasses["openfl.utils.AGALMiniAssembler"] = openfl.utils.AGALMiniAssembler;
openfl.utils.AGALMiniAssembler.__name__ = ["openfl","utils","AGALMiniAssembler"];
openfl.utils.AGALMiniAssembler.prototype = {
	cur: null
	,r: null
	,addHeader: function(partname,version) {
		if(version == 0) version = 1;
		if(!this.r.exists(partname)) {
			this.r.set(partname,new openfl._internal.aglsl.assembler.Part(partname,version));
			this.emitHeader(this.r.get(partname));
		} else if(this.r.get(partname).version != (version | 0)) throw "Multiple versions for part " + partname;
		this.cur = this.r.get(partname);
	}
	,assemble: function(source,ext_part,ext_version) {
		if(ext_version == 0) ext_version = 1;
		if(ext_part != null) this.addHeader(ext_part,ext_version);
		var reg = new EReg("[\n\r]+","g");
		var lines = reg.split(source);
		var i;
		var _g1 = 0;
		var _g = lines.length;
		while(_g1 < _g) {
			var i1 = _g1++;
			this.processLine(lines[i1],i1);
		}
		return this.r;
	}
	,emitDest: function(pr,token,opdest) {
		var reg = this.getGroupMatches(new EReg("([fov]?[tpocidavs])(\\d*)(\\.[xyzw]{1,4})?","i"),token,3);
		if(openfl._internal.aglsl.assembler.RegMap.get_map().get(reg[1]) == null) return false;
		if(Std.parseInt(reg[2]) == null) reg[2] = "0";
		var em_num;
		if(reg[2] != null) em_num = reg[2]; else em_num = "0";
		var em_code = openfl._internal.aglsl.assembler.RegMap.get_map().get(reg[1]).code;
		var em_mask = this.stringToMask(reg[3]);
		pr.data.writeShort(Std.parseInt(em_num));
		pr.data.writeByte(em_mask);
		pr.data.writeByte(em_code);
		return true;
	}
	,emitHeader: function(pr) {
		pr.data.writeByte(160);
		pr.data.writeUnsignedInt(pr.version);
		if(pr.version >= 16) pr.data.writeByte(0);
		pr.data.writeByte(161);
		var _g = pr.name;
		switch(_g) {
		case "fragment":
			pr.data.writeByte(1);
			break;
		case "vertex":
			pr.data.writeByte(0);
			break;
		case "cpu":
			pr.data.writeByte(2);
			break;
		default:
			pr.data.writeByte(255);
		}
	}
	,emitOpcode: function(pr,opcode) {
		pr.data.writeUnsignedInt(opcode);
	}
	,emitSampler: function(pr,token,opsrc,opts) {
		var reg = this.getGroupMatches(new EReg("fs(\\d*)","i"),token,1);
		if(reg.length < 1) return false;
		pr.data.writeShort(Std.parseInt(reg[1]));
		pr.data.writeByte(0);
		pr.data.writeByte(0);
		var samplerbits = 5;
		var sampleroptset = 0;
		var _g1 = 0;
		var _g = opts.length;
		while(_g1 < _g) {
			var i = _g1++;
			var o = openfl._internal.aglsl.assembler.SamplerMap.get_map().get(opts[i].toLowerCase());
			if(o != null) {
				if((function($this) {
					var $r;
					var $int = sampleroptset >> o.shift & o.mask;
					$r = $int < 0?4294967296.0 + $int:$int + 0.0;
					return $r;
				}(this)) != 0) haxe.Log.trace("Warning, duplicate sampler option",{ fileName : "AGALMiniAssembler.hx", lineNumber : 173, className : "openfl.utils.AGALMiniAssembler", methodName : "emitSampler"});
				sampleroptset = sampleroptset | o.mask << o.shift;
				samplerbits = samplerbits & ~(o.mask << o.shift);
				samplerbits = samplerbits | o.value << o.shift;
			} else {
			}
		}
		pr.data.writeUnsignedInt(samplerbits);
		return true;
	}
	,emitSource: function(pr,token,opsrc) {
		var indexed = this.getGroupMatches(new EReg("vc\\[(v[tcai])(\\d+)\\.([xyzw])([\\+\\-]\\d+)?\\](\\.[xyzw]{1,4})?","i"),token,5);
		var reg;
		if(indexed.length > 0) {
			if(openfl._internal.aglsl.assembler.RegMap.get_map().get(indexed[1]) == null) return false;
			var selindex = { x : 0, y : 1, z : 2, w : 3};
			var em = { num : Std.parseInt(indexed[2]) | 0, code : openfl._internal.aglsl.assembler.RegMap.get_map().get(indexed[1]).code, swizzle : this.stringToSwizzle(indexed[5]), select : Reflect.getProperty(selindex,indexed[3]), offset : Std.parseInt(indexed[4]) | 0};
			pr.data.writeShort(em.num);
			pr.data.writeByte(em.offset);
			pr.data.writeByte(em.swizzle);
			pr.data.writeByte(1);
			pr.data.writeByte(em.code);
			pr.data.writeByte(em.select);
			pr.data.writeByte(128);
		} else {
			reg = this.getGroupMatches(new EReg("([fov]?[tpocidavs])(\\d*)(\\.[xyzw]{1,4})?","i"),token,3);
			if(openfl._internal.aglsl.assembler.RegMap.get_map().get(reg[1]) == null) return false;
			if(reg.length < 4) reg.push("");
			var em1 = { num : Std.parseInt(reg[2]) | 0, code : openfl._internal.aglsl.assembler.RegMap.get_map().get(reg[1]).code, swizzle : this.stringToSwizzle(reg[3])};
			pr.data.writeShort(em1.num);
			pr.data.writeByte(0);
			pr.data.writeByte(em1.swizzle);
			pr.data.writeByte(em1.code);
			pr.data.writeByte(0);
			pr.data.writeByte(0);
			pr.data.writeByte(0);
		}
		return true;
	}
	,emitZeroDword: function(pr) {
		pr.data.writeUnsignedInt(0);
	}
	,emitZeroQword: function(pr) {
		pr.data.writeUnsignedInt(0);
		pr.data.writeUnsignedInt(0);
	}
	,getGroupMatches: function(ereg,text,groupCount) {
		if(groupCount == null) groupCount = 0;
		var matches = [];
		if(!ereg.match(text)) return matches;
		var m = 0;
		var t = null;
		var completed = false;
		while(!completed && (t = ereg.matched(m++)) != null) {
			matches.push(t);
			if((function($this) {
				var $r;
				var $int = groupCount;
				$r = $int < 0?4294967296.0 + $int:$int + 0.0;
				return $r;
			}(this)) != 0 && (function($this) {
				var $r;
				var aNeg = m < 0;
				var bNeg = groupCount < 0;
				$r = aNeg != bNeg?aNeg:m > groupCount;
				return $r;
			}(this))) completed = true;
		}
		return matches;
	}
	,getMatches: function(ereg,text) {
		var matches = [];
		while(ereg.match(text)) {
			var t = ereg.matched(1);
			matches.push(t);
			text = ereg.matchedRight();
		}
		return matches;
	}
	,processLine: function(line,linenr) {
		var startcomment = line.indexOf("//");
		if(startcomment != -1) line = line.substring(0,startcomment);
		var r = new EReg("^\\s+|\\s+$","g");
		line = r.replace(line,"");
		if(!(line.length > 0)) return;
		r = new EReg("<.*>","g");
		var optsb = r.match(line);
		var opts = null;
		if(optsb) {
			var optsi = r.matchedPos().pos;
			opts = this.getMatches(new EReg("([\\w\\.\\-\\+]+)","gi"),line.substring(optsi));
			line = line.substring(0,optsi);
		}
		var tokens = this.getMatches(new EReg("([\\w\\.\\+\\[\\]]+)","gi"),line);
		if(tokens.length == 0) {
			if(line.length >= 3) haxe.Log.trace("Warning: bad line " + Std.string((function($this) {
				var $r;
				var $int = linenr;
				$r = $int < 0?4294967296.0 + $int:$int + 0.0;
				return $r;
			}(this))) + ": " + line,{ fileName : "AGALMiniAssembler.hx", lineNumber : 349, className : "openfl.utils.AGALMiniAssembler", methodName : "processLine"});
			return;
		}
		var _g = tokens[0];
		switch(_g) {
		case "part":
			this.addHeader(tokens[1],Std.parseInt(tokens[2]));
			break;
		case "endpart":
			if(this.cur == null) throw "Unexpected endpart";
			this.cur.data.position = 0;
			this.cur = null;
			return;
		default:
			if(this.cur == null) {
				haxe.Log.trace("Warning: bad line " + Std.string((function($this) {
					var $r;
					var int1 = linenr;
					$r = int1 < 0?4294967296.0 + int1:int1 + 0.0;
					return $r;
				}(this))) + ": " + line + " (Outside of any part definition)",{ fileName : "AGALMiniAssembler.hx", lineNumber : 380, className : "openfl.utils.AGALMiniAssembler", methodName : "processLine"});
				return;
			}
			if(this.cur.name == "comment") return;
			var op;
			var this1 = openfl._internal.aglsl.assembler.OpcodeMap.get_map();
			op = this1.get(tokens[0]);
			if(op == null) throw "Bad opcode " + tokens[0] + " " + Std.string((function($this) {
				var $r;
				var int2 = linenr;
				$r = int2 < 0?4294967296.0 + int2:int2 + 0.0;
				return $r;
			}(this))) + ": " + line;
			this.emitOpcode(this.cur,op.opcode);
			var ti = 1;
			if(op.dest != null && op.dest != "none") {
				if(!this.emitDest(this.cur,tokens[ti++],op.dest)) throw "Bad destination register " + tokens[ti - 1] + " " + Std.string((function($this) {
					var $r;
					var int3 = linenr;
					$r = int3 < 0?4294967296.0 + int3:int3 + 0.0;
					return $r;
				}(this))) + ": " + line;
			} else this.emitZeroDword(this.cur);
			if(op.a != null && op.a.format != "none") {
				if(!this.emitSource(this.cur,tokens[ti++],op.a)) throw "Bad source register " + tokens[ti - 1] + " " + Std.string((function($this) {
					var $r;
					var int4 = linenr;
					$r = int4 < 0?4294967296.0 + int4:int4 + 0.0;
					return $r;
				}(this))) + ": " + line;
			} else this.emitZeroQword(this.cur);
			if(op.b != null && op.b.format != "none") {
				if(op.b.format == "sampler") {
					if(!this.emitSampler(this.cur,tokens[ti++],op.b,opts)) throw "Bad sampler register " + tokens[ti - 1] + " " + Std.string((function($this) {
						var $r;
						var int5 = linenr;
						$r = int5 < 0?4294967296.0 + int5:int5 + 0.0;
						return $r;
					}(this))) + ": " + line;
				} else if(!this.emitSource(this.cur,tokens[ti++],op.b)) throw "Bad source register " + tokens[ti - 1] + " " + Std.string((function($this) {
					var $r;
					var int6 = linenr;
					$r = int6 < 0?4294967296.0 + int6:int6 + 0.0;
					return $r;
				}(this))) + ": " + line;
			} else this.emitZeroQword(this.cur);
		}
	}
	,stringToMask: function(s) {
		if(s == null) return 15;
		var r = 0;
		if(s.indexOf("x") != -1) r |= 1;
		if(s.indexOf("y") != -1) r |= 2;
		if(s.indexOf("z") != -1) r |= 4;
		if(s.indexOf("w") != -1) r |= 8;
		return r;
	}
	,stringToSwizzle: function(s) {
		if(s == "") return 228;
		var chartoindex = { x : 0, y : 1, z : 2, w : 3};
		var sw = 0;
		if(s.charAt(0) != ".") throw "Missing . for swizzle";
		if(s.length > 1) sw |= Reflect.field(chartoindex,s.charAt(1));
		if(s.length > 2) sw |= Reflect.field(chartoindex,s.charAt(2)) << 2; else sw |= (sw & 3) << 2;
		if(s.length > 3) sw |= Reflect.field(chartoindex,s.charAt(3)) << 4; else sw |= (sw & 12) << 2;
		if(s.length > 4) sw |= Reflect.field(chartoindex,s.charAt(4)) << 6; else sw |= (sw & 48) << 2;
		return sw;
	}
	,__class__: openfl.utils.AGALMiniAssembler
};
openfl.utils.Dictionary = function(weakKeys) {
	if(weakKeys == null) weakKeys = false;
};
$hxClasses["openfl.utils.Dictionary"] = openfl.utils.Dictionary;
openfl.utils.Dictionary.__name__ = ["openfl","utils","Dictionary"];
openfl.utils.Dictionary.prototype = {
	__class__: openfl.utils.Dictionary
};
openfl.utils.Endian = function() { };
$hxClasses["openfl.utils.Endian"] = openfl.utils.Endian;
openfl.utils.Endian.__name__ = ["openfl","utils","Endian"];
var scenes = {};
scenes.Scene = function() {
	starling.display.Sprite.call(this);
	this.mBackButton = new starling.display.Button(Game.get_assets().getTexture("button_back"),"Back");
	this.mBackButton.set_x(Constants.CenterX - this.mBackButton.get_width() / 2);
	this.mBackButton.set_y(Constants.GameHeight - this.mBackButton.get_height() + 1);
	this.mBackButton.set_name("backButton");
	this.addChild(this.mBackButton);
};
$hxClasses["scenes.Scene"] = scenes.Scene;
scenes.Scene.__name__ = ["scenes","Scene"];
scenes.Scene.__super__ = starling.display.Sprite;
scenes.Scene.prototype = $extend(starling.display.Sprite.prototype,{
	mBackButton: null
	,__class__: scenes.Scene
});
scenes.AnimationScene = function() {
	scenes.Scene.call(this);
	this.mTransitions = [starling.animation.Transitions.LINEAR,starling.animation.Transitions.EASE_IN_OUT,starling.animation.Transitions.EASE_OUT_BACK,starling.animation.Transitions.EASE_OUT_BOUNCE,starling.animation.Transitions.EASE_OUT_ELASTIC];
	var buttonTexture = Game.get_assets().getTexture("button_normal");
	this.mStartButton = new starling.display.Button(buttonTexture,"Start animation");
	this.mStartButton.set_name("startAnimation");
	this.mStartButton.addEventListener(starling.events.Event.TRIGGERED,$bind(this,this.onStartButtonTriggered));
	this.mStartButton.set_x(Constants.CenterX - this.mStartButton.get_width() / 2);
	this.mStartButton.set_y(20);
	this.addChild(this.mStartButton);
	this.mDelayButton = new starling.display.Button(buttonTexture,"Delayed call");
	this.mDelayButton.set_name("delayedCall");
	this.mDelayButton.addEventListener(starling.events.Event.TRIGGERED,$bind(this,this.onDelayButtonTriggered));
	this.mDelayButton.set_x(this.mStartButton.get_x());
	this.mDelayButton.set_y(this.mStartButton.get_y() + 40);
	this.addChild(this.mDelayButton);
	this.mEgg = new starling.display.Image(Game.get_assets().getTexture("starling_front"));
	this.addChild(this.mEgg);
	this.resetEgg();
	this.mTransitionLabel = new starling.text.TextField(320,30,"","Verdana",20,0,true);
	this.mTransitionLabel.set_y(this.mDelayButton.get_y() + 40);
	this.mTransitionLabel.set_alpha(0.0);
	this.addChild(this.mTransitionLabel);
};
$hxClasses["scenes.AnimationScene"] = scenes.AnimationScene;
scenes.AnimationScene.__name__ = ["scenes","AnimationScene"];
scenes.AnimationScene.__super__ = scenes.Scene;
scenes.AnimationScene.prototype = $extend(scenes.Scene.prototype,{
	mStartButton: null
	,mDelayButton: null
	,mEgg: null
	,mTransitionLabel: null
	,mTransitions: null
	,resetEgg: function() {
		this.mEgg.set_x(20);
		this.mEgg.set_y(100);
		this.mEgg.set_scaleX(this.mEgg.set_scaleY(1.0));
		this.mEgg.set_rotation(0.0);
	}
	,onStartButtonTriggered: function() {
		var _g = this;
		this.mStartButton.set_enabled(false);
		this.resetEgg();
		var transition = this.mTransitions.shift();
		this.mTransitions.push(transition);
		var tween = new starling.animation.Tween(this.mEgg,2.0,transition);
		tween.animate("rotation",starling.utils.StarlingUtils.deg2rad(90));
		tween.moveTo(300,360);
		tween.scaleTo(0.5);
		tween.set_onComplete(function() {
			_g.mStartButton.set_enabled(true);
		});
		starling.core.Starling.get_Juggler().add(tween);
		this.mTransitionLabel.set_text(transition);
		this.mTransitionLabel.set_alpha(1.0);
		var hideTween = new starling.animation.Tween(this.mTransitionLabel,2.0,starling.animation.Transitions.EASE_IN);
		hideTween.animate("alpha",0.0);
		starling.core.Starling.get_Juggler().add(hideTween);
	}
	,onDelayButtonTriggered: function() {
		var _g = this;
		this.mDelayButton.set_enabled(false);
		starling.core.Starling.get_Juggler().delayCall($bind(this,this.colorizeEgg),1.0,[true]);
		starling.core.Starling.get_Juggler().delayCall($bind(this,this.colorizeEgg),2.0,[false]);
		starling.core.Starling.get_Juggler().delayCall(function() {
			_g.mDelayButton.set_enabled(true);
		},2.0,[]);
	}
	,colorizeEgg: function(colorize) {
		this.mEgg.set_color(colorize?starling.utils.Color.RED:starling.utils.Color.WHITE);
	}
	,dispose: function() {
		this.mStartButton.removeEventListener(starling.events.Event.TRIGGERED,$bind(this,this.onStartButtonTriggered));
		this.mDelayButton.removeEventListener(starling.events.Event.TRIGGERED,$bind(this,this.onDelayButtonTriggered));
		scenes.Scene.prototype.dispose.call(this);
	}
	,__class__: scenes.AnimationScene
});
scenes.BenchmarkScene = function() {
	scenes.Scene.call(this);
	this.mContainer = new starling.display.Sprite();
	this.mContainer.set_touchable(false);
	this.addChildAt(this.mContainer,0);
	this.mStartButton = new starling.display.Button(Game.get_assets().getTexture("button_normal"),"Start benchmark");
	this.mStartButton.set_name("startBenchmark");
	this.mStartButton.addEventListener(starling.events.Event.TRIGGERED,$bind(this,this.onStartButtonTriggered));
	this.mStartButton.set_x(Constants.CenterX - Math.floor(this.mStartButton.get_width() / 2));
	this.mStartButton.set_y(20);
	this.addChild(this.mStartButton);
	this.mStarted = false;
	this.mElapsed = 0.0;
	this.addEventListener(starling.events.EnterFrameEvent.ENTER_FRAME,$bind(this,this.onEnterFrame));
};
$hxClasses["scenes.BenchmarkScene"] = scenes.BenchmarkScene;
scenes.BenchmarkScene.__name__ = ["scenes","BenchmarkScene"];
scenes.BenchmarkScene.__super__ = scenes.Scene;
scenes.BenchmarkScene.prototype = $extend(scenes.Scene.prototype,{
	mStartButton: null
	,mResultText: null
	,mContainer: null
	,mFrameCount: null
	,mElapsed: null
	,mStarted: null
	,mFailCount: null
	,mWaitFrames: null
	,dispose: function() {
		this.removeEventListener(starling.events.Event.ENTER_FRAME,$bind(this,this.onEnterFrame));
		this.mStartButton.removeEventListener(starling.events.Event.TRIGGERED,$bind(this,this.onStartButtonTriggered));
		scenes.Scene.prototype.dispose.call(this);
	}
	,onEnterFrame: function(event) {
		if(!this.mStarted) return;
		this.mElapsed += event.get_passedTime();
		this.mFrameCount++;
		if(this.mFrameCount % this.mWaitFrames == 0) {
			var fps = this.mWaitFrames / this.mElapsed;
			var targetFps = starling.core.Starling.get_current().get_nativeStage().frameRate;
			if(Math.ceil(fps) >= targetFps) {
				this.mFailCount = 0;
				this.addTestObjects();
			} else {
				this.mFailCount++;
				if(this.mFailCount > 20) this.mWaitFrames = 5;
				if(this.mFailCount > 30) this.mWaitFrames = 10;
				if(this.mFailCount == 40) this.benchmarkComplete();
			}
			this.mElapsed = this.mFrameCount = 0;
		}
		var numObjects = this.mContainer.get_numChildren();
		var passedTime = event.get_passedTime();
		var _g = 0;
		while(_g < numObjects) {
			var i = _g++;
			var _g1 = this.mContainer.getChildAt(i);
			_g1.set_rotation(_g1.get_rotation() + Math.PI / 2 * passedTime);
		}
	}
	,onStartButtonTriggered: function() {
		this.mStartButton.set_visible(false);
		this.mStarted = true;
		this.mFailCount = 0;
		this.mWaitFrames = 2;
		this.mFrameCount = 0;
		if(this.mResultText != null) {
			this.mResultText.removeFromParent(true);
			this.mResultText = null;
		}
		this.addTestObjects();
	}
	,addTestObjects: function() {
		var padding = 15;
		var numObjects;
		if(this.mFailCount > 20) numObjects = 2; else numObjects = 10;
		var _g = 0;
		while(_g < numObjects) {
			var i = _g++;
			var egg = new starling.display.Image(Game.get_assets().getTexture("benchmark_object"));
			egg.set_x(padding + Math.random() * (Constants.GameWidth - 2 * padding));
			egg.set_y(padding + Math.random() * (Constants.GameHeight - 2 * padding));
			this.mContainer.addChild(egg);
		}
	}
	,benchmarkComplete: function() {
		this.mStarted = false;
		this.mStartButton.set_visible(true);
		var fps = starling.core.Starling.get_current().get_nativeStage().frameRate;
		haxe.Log.trace("Benchmark complete!",{ fileName : "BenchmarkScene.hx", lineNumber : 132, className : "scenes.BenchmarkScene", methodName : "benchmarkComplete"});
		haxe.Log.trace("FPS: " + fps,{ fileName : "BenchmarkScene.hx", lineNumber : 133, className : "scenes.BenchmarkScene", methodName : "benchmarkComplete"});
		haxe.Log.trace("Float of objects: " + this.mContainer.get_numChildren(),{ fileName : "BenchmarkScene.hx", lineNumber : 134, className : "scenes.BenchmarkScene", methodName : "benchmarkComplete"});
		var resultString = "Result:\n" + this.mContainer.get_numChildren() + " objects\nwith " + fps + " fps";
		this.mResultText = new starling.text.TextField(240,200,resultString);
		this.mResultText.set_fontSize(30);
		this.mResultText.set_x(Constants.CenterX - this.mResultText.get_width() / 2);
		this.mResultText.set_y(Constants.CenterY - this.mResultText.get_height() / 2);
		this.addChild(this.mResultText);
		this.mContainer.removeChildren();
	}
	,__class__: scenes.BenchmarkScene
});
scenes.BlendModeScene = function() {
	this.mBlendModes = [starling.display.BlendMode.NORMAL,starling.display.BlendMode.MULTIPLY,starling.display.BlendMode.SCREEN,starling.display.BlendMode.ADD,starling.display.BlendMode.ERASE,starling.display.BlendMode.NONE];
	scenes.Scene.call(this);
	this.mButton = new starling.display.Button(Game.get_assets().getTexture("button_normal"),"Switch Mode");
	this.mButton.set_name("switchBlend");
	this.mButton.set_x(Constants.CenterX - this.mButton.get_width() / 2);
	this.mButton.set_y(15);
	this.mButton.addEventListener(starling.events.Event.TRIGGERED,$bind(this,this.onButtonTriggered));
	this.addChild(this.mButton);
	this.mImage = new starling.display.Image(Game.get_assets().getTexture("starling_rocket"));
	this.mImage.set_x(Constants.CenterX - this.mImage.get_width() / 2);
	this.mImage.set_y(170);
	this.addChild(this.mImage);
	this.mInfoText = new starling.text.TextField(300,32,"","Verdana",19);
	this.mInfoText.set_x(10);
	this.mInfoText.set_y(330);
	this.addChild(this.mInfoText);
	this.onButtonTriggered();
};
$hxClasses["scenes.BlendModeScene"] = scenes.BlendModeScene;
scenes.BlendModeScene.__name__ = ["scenes","BlendModeScene"];
scenes.BlendModeScene.__super__ = scenes.Scene;
scenes.BlendModeScene.prototype = $extend(scenes.Scene.prototype,{
	mButton: null
	,mImage: null
	,mInfoText: null
	,mBlendModes: null
	,onButtonTriggered: function() {
		var blendMode = this.mBlendModes.shift();
		this.mBlendModes.push(blendMode);
		this.mInfoText.set_text(blendMode);
		this.mImage.set_blendMode(blendMode);
	}
	,__class__: scenes.BlendModeScene
});
scenes.CustomHitTestScene = function() {
	scenes.Scene.call(this);
	var description = "Pushing the bird only works when the touch\noccurs within a circle." + "This can be accomplished\nby overriding the method 'hitTest'.";
	var infoText = new starling.text.TextField(300,100,description);
	infoText.set_x(infoText.set_y(10));
	infoText.set_vAlign(starling.utils.VAlign.TOP);
	infoText.set_hAlign(starling.utils.HAlign.CENTER);
	this.addChild(infoText);
	var button = new utils.RoundButton(Game.get_assets().getTexture("starling_round"));
	button.set_name("customHit");
	button.set_x(Constants.CenterX - Math.floor(button.get_width() / 2));
	button.set_y(150);
	this.addChild(button);
};
$hxClasses["scenes.CustomHitTestScene"] = scenes.CustomHitTestScene;
scenes.CustomHitTestScene.__name__ = ["scenes","CustomHitTestScene"];
scenes.CustomHitTestScene.__super__ = scenes.Scene;
scenes.CustomHitTestScene.prototype = $extend(scenes.Scene.prototype,{
	__class__: scenes.CustomHitTestScene
});
scenes.FilterScene = function() {
	scenes.Scene.call(this);
	this.mButton = new starling.display.Button(Game.get_assets().getTexture("button_normal"),"Switch Filter");
	this.mButton.set_name("switchFilers");
	this.mButton.set_x(Constants.CenterX - this.mButton.get_width() / 2);
	this.mButton.set_y(15);
	this.mButton.addEventListener(starling.events.Event.TRIGGERED,$bind(this,this.onButtonTriggered));
	this.addChild(this.mButton);
	this.mImage = new starling.display.Image(Game.get_assets().getTexture("starling_rocket"));
	this.mImage.set_x(Constants.CenterX - this.mImage.get_width() / 2);
	this.mImage.set_y(170);
	this.addChild(this.mImage);
	this.mInfoText = new starling.text.TextField(300,32,"","Verdana",19);
	this.mInfoText.set_x(10);
	this.mInfoText.set_y(330);
	this.addChild(this.mInfoText);
	this.initFilters();
	this.onButtonTriggered();
};
$hxClasses["scenes.FilterScene"] = scenes.FilterScene;
scenes.FilterScene.__name__ = ["scenes","FilterScene"];
scenes.FilterScene.__super__ = scenes.Scene;
scenes.FilterScene.prototype = $extend(scenes.Scene.prototype,{
	mButton: null
	,mImage: null
	,mInfoText: null
	,mFilterInfos: null
	,displacementFilter: null
	,onButtonTriggered: function() {
		var filterInfo = this.mFilterInfos.shift();
		this.mFilterInfos.push(filterInfo);
		this.mInfoText.set_text(filterInfo[0]);
		this.mImage.set_filter(filterInfo[1]);
	}
	,initFilters: function() {
		this.mFilterInfos = [["Identity",new starling.filters.ColorMatrixFilter()],["Blur",new starling.filters.BlurFilter()],["Drop Shadow",starling.filters.BlurFilter.createDropShadow()],["Glow",starling.filters.BlurFilter.createGlow()]];
		haxe.Log.trace("mImage = " + Std.string(this.mImage),{ fileName : "FilterScene.hx", lineNumber : 67, className : "scenes.FilterScene", methodName : "initFilters"});
		var displacementMap = this.createDisplacementMap(this.mImage.get_width(),this.mImage.get_height());
		haxe.Log.trace("displacementMap = " + Std.string(displacementMap),{ fileName : "FilterScene.hx", lineNumber : 69, className : "scenes.FilterScene", methodName : "initFilters"});
		this.displacementFilter = new starling.filters.DisplacementMapFilter(displacementMap,null,1,2,25,25);
		this.mFilterInfos.push(["Displacement Map",this.displacementFilter]);
		var invertFilter = new starling.filters.ColorMatrixFilter();
		invertFilter.invert();
		this.mFilterInfos.push(["Invert",invertFilter]);
		var grayscaleFilter = new starling.filters.ColorMatrixFilter();
		grayscaleFilter.adjustSaturation(-1);
		this.mFilterInfos.push(["Grayscale",grayscaleFilter]);
		var saturationFilter = new starling.filters.ColorMatrixFilter();
		saturationFilter.adjustSaturation(1);
		this.mFilterInfos.push(["Saturation",saturationFilter]);
		var contrastFilter = new starling.filters.ColorMatrixFilter();
		contrastFilter.adjustContrast(0.75);
		this.mFilterInfos.push(["Contrast",contrastFilter]);
		var brightnessFilter = new starling.filters.ColorMatrixFilter();
		brightnessFilter.adjustBrightness(-0.25);
		this.mFilterInfos.push(["Brightness",brightnessFilter]);
		var hueFilter = new starling.filters.ColorMatrixFilter();
		hueFilter.adjustHue(1);
		this.mFilterInfos.push(["Hue",hueFilter]);
	}
	,createDisplacementMap: function(width,height) {
		var scale = starling.core.Starling.get_ContentScaleFactor();
		var map = new openfl.display.BitmapData(width * scale,height * scale,false);
		map.perlinNoise(20 * scale,20 * scale,3,5,false,true);
		var texture = starling.textures.Texture.fromBitmapData(map,false,false,scale);
		return texture;
	}
	,__class__: scenes.FilterScene
});
scenes.MaskScene = function() {
	scenes.Scene.call(this);
};
$hxClasses["scenes.MaskScene"] = scenes.MaskScene;
scenes.MaskScene.__name__ = ["scenes","MaskScene"];
scenes.MaskScene.__super__ = scenes.Scene;
scenes.MaskScene.prototype = $extend(scenes.Scene.prototype,{
	mContents: null
	,mMaskDisplay: null
	,MaskScene: function() {
		this.mContents = new starling.display.Sprite();
		this.addChild(this.mContents);
		var stageWidth = starling.core.Starling.get_current().get_stage().get_stageWidth();
		var stageHeight = starling.core.Starling.get_current().get_stage().get_stageHeight();
		var touchQuad = new starling.display.Quad(stageWidth,stageHeight);
		touchQuad.set_alpha(0);
		this.addChildAt(touchQuad,0);
		var image = new starling.display.Image(Game.get_assets().getTexture("flight_00"));
		image.set_x((stageWidth - image.get_width()) / 2);
		image.set_y(80);
		this.mContents.addChild(image);
		var cm = new starling.filters.ColorMatrixFilter();
		cm.adjustHue(-0.5);
		image.set_filter(cm);
		var maskText = new starling.text.TextField(256,128,"Move the mouse (or a finger) over the screen to move the mask.");
		maskText.set_x((stageWidth - maskText.get_width()) / 2);
		maskText.set_y(260);
		maskText.set_fontSize(20);
		this.mContents.addChild(maskText);
		this.mMaskDisplay = this.createCircle();
		this.mMaskDisplay.set_alpha(0.1);
		this.mMaskDisplay.set_touchable(false);
		this.addChild(this.mMaskDisplay);
		this.mMask = this.createCircle();
		this.mContents.set_mask(this.mMask);
		this.addEventListener(starling.events.TouchEvent.TOUCH,$bind(this,this.onMaskTouch));
	}
	,onMaskTouch: function(event) {
		var touch = null;
		var hoverTouch = event.getTouch(this,starling.events.TouchPhase.HOVER);
		if(hoverTouch != null) touch = hoverTouch;
		var beginTouch = event.getTouch(this,starling.events.TouchPhase.BEGAN);
		if(beginTouch != null) touch = beginTouch;
		var moveTouch = event.getTouch(this,starling.events.TouchPhase.MOVED);
		if(moveTouch != null) touch = moveTouch;
		if(touch != null) {
			var localPos = touch.getLocation(this);
			this.mMask.set_x(this.mMaskDisplay.set_x(localPos.x));
			this.mMask.set_y(this.mMaskDisplay.set_y(localPos.y));
		}
	}
	,createCircle: function() {
		var circle = new starling.display.Canvas();
		circle.beginFill(16711680);
		circle.drawCircle(0,0,100);
		circle.endFill();
		return circle;
	}
	,__class__: scenes.MaskScene
});
scenes.MovieScene = function() {
	scenes.Scene.call(this);
	var frames;
	var value = Game.get_assets().getTextures("flight");
	var vectorData = new openfl.VectorData();
	vectorData.length = value.length;
	vectorData.fixed = true;
	var vec;
	var this1;
	this1 = new Array(value.length);
	vec = this1;
	var _g1 = 0;
	var _g = value.length;
	while(_g1 < _g) {
		var i = _g1++;
		vec[i] = value[i];
	}
	vectorData.data = vec;
	frames = vectorData;
	haxe.Log.trace("frames = " + haxe.ds._Vector.Vector_Impl_.toArray(frames.data).toString(),{ fileName : "MovieScene.hx", lineNumber : 20, className : "scenes.MovieScene", methodName : "new"});
	this.mMovie = new starling.display.MovieClip(frames,15);
	var stepSound = Game.get_assets().getSound("wing_flap");
	this.mMovie.setFrameSound(2,stepSound);
	this.mMovie.set_x(Constants.CenterX - this.mMovie.get_width() / 2);
	this.mMovie.set_y(Constants.CenterY - this.mMovie.get_height() / 2);
	this.addChild(this.mMovie);
	this.addEventListener(starling.events.Event.ADDED_TO_STAGE,$bind(this,this.onAddedToStage));
	this.addEventListener(starling.events.Event.REMOVED_FROM_STAGE,$bind(this,this.onRemovedFromStage));
};
$hxClasses["scenes.MovieScene"] = scenes.MovieScene;
scenes.MovieScene.__name__ = ["scenes","MovieScene"];
scenes.MovieScene.__super__ = scenes.Scene;
scenes.MovieScene.prototype = $extend(scenes.Scene.prototype,{
	mMovie: null
	,onAddedToStage: function() {
		starling.core.Starling.get_Juggler().add(this.mMovie);
	}
	,onRemovedFromStage: function() {
		haxe.Log.trace("onRemovedFromStage",{ fileName : "MovieScene.hx", lineNumber : 45, className : "scenes.MovieScene", methodName : "onRemovedFromStage"});
		starling.core.Starling.get_Juggler().remove(this.mMovie);
	}
	,dispose: function() {
		if(this.mMovie != null) this.onRemovedFromStage();
		haxe.Log.trace("MovieScene dispose",{ fileName : "MovieScene.hx", lineNumber : 54, className : "scenes.MovieScene", methodName : "dispose"});
		this.removeEventListener(starling.events.Event.REMOVED_FROM_STAGE,$bind(this,this.onRemovedFromStage));
		this.removeEventListener(starling.events.Event.ADDED_TO_STAGE,$bind(this,this.onAddedToStage));
		scenes.Scene.prototype.dispose.call(this);
	}
	,__class__: scenes.MovieScene
});
scenes.RenderTextureScene = function() {
	scenes.Scene.call(this);
	this.mColors = new haxe.ds.IntMap();
	this.mRenderTexture = new starling.textures.RenderTexture(320,435);
	this.mCanvas = new starling.display.Image(this.mRenderTexture);
	this.mCanvas.addEventListener(starling.events.TouchEvent.TOUCH,$bind(this,this.onRenderTexTouch));
	this.addChild(this.mCanvas);
	this.mBrush = new starling.display.Image(Game.get_assets().getTexture("brush"));
	this.mBrush.set_pivotX(this.mBrush.get_width() / 2);
	this.mBrush.set_pivotY(this.mBrush.get_height() / 2);
	this.mBrush.set_blendMode(starling.display.BlendMode.NORMAL);
	var infoText = new starling.text.TextField(256,128,"Touch the screen\nto draw!");
	infoText.set_fontSize(24);
	infoText.set_x(Constants.CenterX - infoText.get_width() / 2);
	infoText.set_y(Constants.CenterY - infoText.get_height() / 2);
	this.mRenderTexture.draw(infoText);
	this.mButton = new starling.display.Button(Game.get_assets().getTexture("button_normal"),"Mode: Draw");
	this.mButton.set_x(Constants.CenterX - this.mButton.get_width() / 2);
	this.mButton.set_y(15);
	this.mButton.set_name("modeDraw");
	this.mButton.addEventListener(starling.events.Event.TRIGGERED,$bind(this,this.onButtonTriggered));
	this.addChild(this.mButton);
};
$hxClasses["scenes.RenderTextureScene"] = scenes.RenderTextureScene;
scenes.RenderTextureScene.__name__ = ["scenes","RenderTextureScene"];
scenes.RenderTextureScene.__super__ = scenes.Scene;
scenes.RenderTextureScene.prototype = $extend(scenes.Scene.prototype,{
	mRenderTexture: null
	,mCanvas: null
	,mBrush: null
	,mButton: null
	,mColors: null
	,onRenderTexTouch: function(event) {
		var _g = this;
		this.mRenderTexture.drawBundled(function() {
			var touches = event.getTouches(_g.mCanvas);
			var _g1 = 0;
			while(_g1 < touches.length) {
				var touch = touches.data[_g1];
				++_g1;
				if(touch.get_phase() == starling.events.TouchPhase.BEGAN) {
					var k = touch.get_id();
					var v = Math.floor(Math.random() * 4294967295);
					_g.mColors.set(k,v);
					v;
				}
				if(touch.get_phase() == starling.events.TouchPhase.HOVER || touch.get_phase() == starling.events.TouchPhase.ENDED) continue;
				var location = touch.getLocation(_g.mCanvas);
				_g.mBrush.set_x(location.x);
				_g.mBrush.set_y(location.y);
				_g.mBrush.set_color((function($this) {
					var $r;
					var key = touch.get_id();
					$r = _g.mColors.get(key);
					return $r;
				}(this)));
				_g.mBrush.set_rotation(Math.random() * Math.PI * 2.0);
				_g.mRenderTexture.draw(_g.mBrush);
			}
		});
	}
	,onButtonTriggered: function() {
		if(this.mBrush.get_blendMode() == starling.display.BlendMode.NORMAL) {
			this.mBrush.set_blendMode(starling.display.BlendMode.ERASE);
			this.mButton.set_text("Mode: Erase");
		} else {
			this.mBrush.set_blendMode(starling.display.BlendMode.NORMAL);
			this.mButton.set_text("Mode: Draw");
		}
	}
	,dispose: function() {
		this.mRenderTexture.dispose();
		scenes.Scene.prototype.dispose.call(this);
	}
	,__class__: scenes.RenderTextureScene
});
scenes.Sprite3DScene = function() {
	scenes.Scene.call(this);
	var texture = Game.get_assets().getTexture("gamua-logo");
	this.mCube = this.createCube(texture);
	this.mCube.set_x(Constants.CenterX);
	this.mCube.set_y(Constants.CenterY);
	this.mCube.set_z(100);
	this.addChild(this.mCube);
	this.addEventListener(starling.events.Event.ADDED_TO_STAGE,$bind(this,this.start));
	this.addEventListener(starling.events.Event.REMOVED_FROM_STAGE,$bind(this,this.stop));
};
$hxClasses["scenes.Sprite3DScene"] = scenes.Sprite3DScene;
scenes.Sprite3DScene.__name__ = ["scenes","Sprite3DScene"];
scenes.Sprite3DScene.__super__ = scenes.Scene;
scenes.Sprite3DScene.prototype = $extend(scenes.Scene.prototype,{
	mCube: null
	,start: function() {
		starling.core.Starling.get_Juggler().tween(this.mCube,6,{ rotationX : 2 * Math.PI, repeatCount : 0});
		starling.core.Starling.get_Juggler().tween(this.mCube,7,{ rotationY : 2 * Math.PI, repeatCount : 0});
		starling.core.Starling.get_Juggler().tween(this.mCube,8,{ rotationZ : 2 * Math.PI, repeatCount : 0});
	}
	,stop: function() {
		starling.core.Starling.get_Juggler().removeTweens(this.mCube);
	}
	,createCube: function(texture) {
		var offset = texture.get_width() / 2;
		var front = this.createSidewall(texture,16711680);
		front.set_z(-offset);
		var back = this.createSidewall(texture,65280);
		back.set_rotationX(Math.PI);
		back.set_z(offset);
		var top = this.createSidewall(texture,255);
		top.set_y(-offset);
		top.set_rotationX(Math.PI / -2.0);
		var bottom = this.createSidewall(texture,16776960);
		bottom.set_y(offset);
		bottom.set_rotationX(Math.PI / 2.0);
		var left = this.createSidewall(texture,16711935);
		left.set_x(-offset);
		left.set_rotationY(Math.PI / 2.0);
		var right = this.createSidewall(texture,65535);
		right.set_x(offset);
		right.set_rotationY(Math.PI / -2.0);
		var cube = new starling.display.Sprite3D();
		cube.addChild(front);
		cube.addChild(back);
		cube.addChild(top);
		cube.addChild(bottom);
		cube.addChild(left);
		cube.addChild(right);
		return cube;
	}
	,createSidewall: function(texture,color) {
		if(color == null) color = 16777215;
		var image = new starling.display.Image(texture);
		image.set_color(color);
		image.alignPivot();
		var sprite = new starling.display.Sprite3D();
		sprite.addChild(image);
		return sprite;
	}
	,render: function(support,parentAlpha) {
		starling.core.Starling.get_current().get_context().setCulling(1028);
		scenes.Scene.prototype.render.call(this,support,parentAlpha);
		starling.core.Starling.get_current().get_context().setCulling(0);
	}
	,__class__: scenes.Sprite3DScene
});
scenes.TextScene = function() {
	scenes.Scene.call(this);
	this.init();
};
$hxClasses["scenes.TextScene"] = scenes.TextScene;
scenes.TextScene.__name__ = ["scenes","TextScene"];
scenes.TextScene.__super__ = scenes.Scene;
scenes.TextScene.prototype = $extend(scenes.Scene.prototype,{
	init: function() {
		var offset = 10;
		var ttFont = "Ubuntu";
		var ttFontSize = 19;
		var colorTF = new starling.text.TextField(300,80,"TextFields can have a border and\na color. They can be aligned in\ndifferent ways, ...",ttFont,ttFontSize);
		colorTF.set_x(colorTF.set_y(offset));
		colorTF.set_border(true);
		colorTF.set_color(3355545);
		colorTF.set_vAlign(starling.utils.VAlign.CENTER);
		this.addChild(colorTF);
		var leftTF = new starling.text.TextField(145,80,"... e.g.\ntop-left ...",ttFont,ttFontSize);
		leftTF.set_x(offset);
		leftTF.set_y(colorTF.get_y() + colorTF.get_height() + offset);
		leftTF.set_hAlign(starling.utils.HAlign.LEFT);
		leftTF.set_vAlign(starling.utils.VAlign.TOP);
		leftTF.set_border(true);
		leftTF.set_color(10040115);
		this.addChild(leftTF);
		var rightTF = new starling.text.TextField(145,80,"... or\nbottom right ...",ttFont,ttFontSize);
		rightTF.set_x(2 * offset + leftTF.get_width());
		rightTF.set_y(leftTF.get_y());
		rightTF.set_hAlign(starling.utils.HAlign.RIGHT);
		rightTF.set_vAlign(starling.utils.VAlign.BOTTOM);
		rightTF.set_color(2129952);
		rightTF.set_border(true);
		this.addChild(rightTF);
	}
	,__class__: scenes.TextScene
});
scenes.TextureScene = function() {
	scenes.Scene.call(this);
	var image1 = new starling.display.Image(Game.get_assets().getTexture("flight_00"));
	image1.set_x(-20);
	image1.set_y(0);
	this.addChild(image1);
	var image2 = new starling.display.Image(Game.get_assets().getTexture("flight_04"));
	image2.set_x(90);
	image2.set_y(85);
	this.addChild(image2);
	var image3 = new starling.display.Image(Game.get_assets().getTexture("flight_08"));
	image3.set_x(100);
	image3.set_y(-60);
	this.addChild(image3);
	try {
		var compressedTexture = Game.get_assets().getTexture("compressed_texture");
		var image = new starling.display.Image(compressedTexture);
		image.set_x(Constants.CenterX - image.get_width() / 2);
		image.set_y(280);
		this.addChild(image);
	} catch( e ) {
		if( js.Boot.__instanceof(e,openfl.errors.Error) ) {
			var textField = new starling.text.TextField(220,128,"Update to Flash Player 11.4 or\nAIR 3.4 (swf-version=17) to\nsee a compressed " + "ATF texture\ninstead of this boring text.","Verdana",14);
			textField.set_x(Constants.CenterX - textField.get_width() / 2);
			textField.set_y(280);
			this.addChild(textField);
		} else throw(e);
	}
};
$hxClasses["scenes.TextureScene"] = scenes.TextureScene;
scenes.TextureScene.__name__ = ["scenes","TextureScene"];
scenes.TextureScene.__super__ = scenes.Scene;
scenes.TextureScene.prototype = $extend(scenes.Scene.prototype,{
	__class__: scenes.TextureScene
});
scenes.TouchScene = function() {
	scenes.Scene.call(this);
	var description = "[use Ctrl/Cmd & Shift to simulate multi-touch]";
	var infoText = new starling.text.TextField(300,25,description);
	infoText.set_x(infoText.set_y(10));
	this.addChild(infoText);
	var texture = Game.get_assets().getTexture("starling_sheet");
	var sheet = new utils.TouchSheet(new starling.display.Image(texture));
	sheet.set_x(Constants.CenterX);
	sheet.set_y(Constants.CenterY);
	this.addChild(sheet);
};
$hxClasses["scenes.TouchScene"] = scenes.TouchScene;
scenes.TouchScene.__name__ = ["scenes","TouchScene"];
scenes.TouchScene.__super__ = scenes.Scene;
scenes.TouchScene.prototype = $extend(scenes.Scene.prototype,{
	__class__: scenes.TouchScene
});
starling.animation = {};
starling.animation.IAnimatable = function() { };
$hxClasses["starling.animation.IAnimatable"] = starling.animation.IAnimatable;
starling.animation.IAnimatable.__name__ = ["starling","animation","IAnimatable"];
starling.animation.IAnimatable.prototype = {
	advanceTime: null
	,__class__: starling.animation.IAnimatable
};
starling.animation.DelayedCall = function(call,delay,args) {
	starling.events.EventDispatcher.call(this);
	this.reset(call,delay,args);
};
$hxClasses["starling.animation.DelayedCall"] = starling.animation.DelayedCall;
starling.animation.DelayedCall.__name__ = ["starling","animation","DelayedCall"];
starling.animation.DelayedCall.__interfaces__ = [starling.animation.IAnimatable];
starling.animation.DelayedCall.fromPool = function(call,delay,args) {
	if(starling.animation.DelayedCall.sPool.length > 0) return starling.animation.DelayedCall.sPool.pop().reset(call,delay,args); else return new starling.animation.DelayedCall(call,delay,args);
};
starling.animation.DelayedCall.toPool = function(delayedCall) {
	delayedCall.mCall = null;
	delayedCall.mArgs = null;
	delayedCall.removeEventListeners();
	starling.animation.DelayedCall.sPool.push(delayedCall);
};
starling.animation.DelayedCall.__super__ = starling.events.EventDispatcher;
starling.animation.DelayedCall.prototype = $extend(starling.events.EventDispatcher.prototype,{
	mCurrentTime: null
	,mTotalTime: null
	,mCall: null
	,mArgs: null
	,mRepeatCount: null
	,isComplete: null
	,totalTime: null
	,currentTime: null
	,reset: function(call,delay,args) {
		this.mCurrentTime = 0;
		this.mTotalTime = Math.max(delay,0.0001);
		this.mCall = call;
		this.mArgs = args;
		this.mRepeatCount = 1;
		return this;
	}
	,advanceTime: function(time) {
		var previousTime = this.mCurrentTime;
		this.mCurrentTime += time;
		if(this.mCurrentTime > this.mTotalTime) this.mCurrentTime = this.mTotalTime;
		if(previousTime < this.mTotalTime && this.mCurrentTime >= this.mTotalTime) {
			var maxNumArgs = this.mArgs.length;
			haxe.Log.trace("mArgs = " + Std.string(this.mArgs),{ fileName : "DelayedCall.hx", lineNumber : 70, className : "starling.animation.DelayedCall", methodName : "advanceTime"});
			if(this.mRepeatCount == 0 || this.mRepeatCount > 1) {
				switch(maxNumArgs) {
				case 0:
					this.mCall();
					break;
				case 1:
					this.mCall(this.mArgs[0]);
					break;
				case 2:
					this.mCall(this.mArgs[0],this.mArgs[1]);
					break;
				case 3:
					this.mCall(this.mArgs[0],this.mArgs[1],this.mArgs[2]);
					break;
				case 4:
					this.mCall(this.mArgs[0],this.mArgs[1],this.mArgs[2],this.mArgs[3]);
					break;
				case 5:
					this.mCall(this.mArgs[0],this.mArgs[1],this.mArgs[2],this.mArgs[3],this.mArgs[4]);
					break;
				case 6:
					this.mCall(this.mArgs[0],this.mArgs[1],this.mArgs[2],this.mArgs[3],this.mArgs[4],this.mArgs[5]);
					break;
				case 7:
					this.mCall(this.mArgs[0],this.mArgs[1],this.mArgs[2],this.mArgs[3],this.mArgs[4],this.mArgs[5],this.mArgs[6]);
					break;
				}
				if(this.mRepeatCount > 0) this.mRepeatCount -= 1;
				this.mCurrentTime = 0;
				this.advanceTime(previousTime + time - this.mTotalTime);
			} else {
				var call = this.mCall;
				var args = this.mArgs;
				this.dispatchEventWith(starling.events.Event.REMOVE_FROM_JUGGLER);
				switch(maxNumArgs) {
				case 0:
					call();
					break;
				case 1:
					call(args[0]);
					break;
				case 2:
					call(args[0],args[1]);
					break;
				case 3:
					call(args[0],args[1],args[2]);
					break;
				case 4:
					call(args[0],args[1],args[2],args[3]);
					break;
				case 5:
					call(args[0],args[1],args[2],args[3],args[4]);
					break;
				case 6:
					call(args[0],args[1],args[2],args[3],args[4],args[5]);
					break;
				case 7:
					call(args[0],args[1],args[2],args[3],args[4],args[5],args[6]);
					break;
				}
			}
		}
	}
	,complete: function() {
		var restTime = this.mTotalTime - this.mCurrentTime;
		if(restTime > 0) this.advanceTime(restTime);
	}
	,get_isComplete: function() {
		return this.mRepeatCount == 1 && this.mCurrentTime >= this.mTotalTime;
	}
	,get_totalTime: function() {
		return this.mTotalTime;
	}
	,get_currentTime: function() {
		return this.mCurrentTime;
	}
	,get_repeatCount: function() {
		return this.mRepeatCount;
	}
	,set_repeatCount: function(value) {
		this.mRepeatCount = value;
		return value;
	}
	,__class__: starling.animation.DelayedCall
	,__properties__: {set_repeatCount:"set_repeatCount",get_repeatCount:"get_repeatCount",get_currentTime:"get_currentTime",get_totalTime:"get_totalTime",get_isComplete:"get_isComplete"}
});
starling.animation.Juggler = function() {
	this.mElapsedTime = 0;
	var this1;
	this1 = new openfl.VectorData();
	var this2;
	this2 = new Array(0);
	this1.data = this2;
	this1.length = 0;
	this1.fixed = false;
	this.mObjects = this1;
	this.mObjects.fixed = false;
};
$hxClasses["starling.animation.Juggler"] = starling.animation.Juggler;
starling.animation.Juggler.__name__ = ["starling","animation","Juggler"];
starling.animation.Juggler.__interfaces__ = [starling.animation.IAnimatable];
starling.animation.Juggler.prototype = {
	mObjects: null
	,mElapsedTime: null
	,elapsedTime: null
	,objects: null
	,add: function(object) {
		if(object != null && this.indexOf(this.mObjects,object) == -1) {
			var this1 = this.mObjects;
			var key = this.mObjects.length;
			if(!this1.fixed) {
				if(key >= this1.length) this1.length = key + 1;
				if(this1.data.length < this1.length) {
					var data;
					var this2;
					this2 = new Array(this1.data.length + 10);
					data = this2;
					haxe.ds._Vector.Vector_Impl_.blit(this1.data,0,data,0,this1.data.length);
					this1.data = data;
				}
			}
			this1.data[key] = object;
			var dispatcher = object;
			if(dispatcher != null) dispatcher.addEventListener(starling.events.Event.REMOVE_FROM_JUGGLER,$bind(this,this.onRemove));
		}
	}
	,indexOf: function(vec,obj) {
		var _g1 = 0;
		var _g = vec.length;
		while(_g1 < _g) {
			var i = _g1++;
			if(vec.data[i] == obj) return i;
		}
		return -1;
	}
	,contains: function(object) {
		return this.indexOf(this.mObjects,object) != -1;
	}
	,remove: function(object) {
		if(object == null) return;
		var dispatcher = object;
		if(dispatcher != null) dispatcher.removeEventListener(starling.events.Event.REMOVE_FROM_JUGGLER,$bind(this,this.onRemove));
		var index = this.indexOf(this.mObjects,object);
		if(index != -1) {
			var this1 = this.mObjects;
			if(!this1.fixed) {
				if(index >= this1.length) this1.length = index + 1;
				if(this1.data.length < this1.length) {
					var data;
					var this2;
					this2 = new Array(this1.data.length + 10);
					data = this2;
					haxe.ds._Vector.Vector_Impl_.blit(this1.data,0,data,0,this1.data.length);
					this1.data = data;
				}
			}
			this1.data[index] = null;
		}
	}
	,removeTweens: function(target) {
		if(target == null) return;
		var _g1 = 0;
		var _g = this.mObjects.length;
		while(_g1 < _g) {
			var j = _g1++;
			var i = j - (this.mObjects.length + 1);
			var tween = this.mObjects.data[i];
			if(tween != null && tween.get_target() == target) {
				tween.removeEventListener(starling.events.Event.REMOVE_FROM_JUGGLER,$bind(this,this.onRemove));
				var this1 = this.mObjects;
				if(!this1.fixed) {
					if(i >= this1.length) this1.length = i + 1;
					if(this1.data.length < this1.length) {
						var data;
						var this2;
						this2 = new Array(this1.data.length + 10);
						data = this2;
						haxe.ds._Vector.Vector_Impl_.blit(this1.data,0,data,0,this1.data.length);
						this1.data = data;
					}
				}
				this1.data[i] = null;
			}
		}
	}
	,containsTweens: function(target) {
		if(target == null) return false;
		var _g1 = 0;
		var _g = this.mObjects.length;
		while(_g1 < _g) {
			var j = _g1++;
			var i = j - (this.mObjects.length + 1);
			var tween = this.mObjects.data[i];
			if(tween != null && tween.get_target() == target) return true;
		}
		return false;
	}
	,purge: function() {
		var _g1 = 0;
		var _g = this.mObjects.length;
		while(_g1 < _g) {
			var j = _g1++;
			var i = j - (this.mObjects.length + 1);
			var dispatcher = this.mObjects.data[i];
			if(dispatcher != null) dispatcher.removeEventListener(starling.events.Event.REMOVE_FROM_JUGGLER,$bind(this,this.onRemove));
			var this1 = this.mObjects;
			if(!this1.fixed) {
				if(i >= this1.length) this1.length = i + 1;
				if(this1.data.length < this1.length) {
					var data;
					var this2;
					this2 = new Array(this1.data.length + 10);
					data = this2;
					haxe.ds._Vector.Vector_Impl_.blit(this1.data,0,data,0,this1.data.length);
					this1.data = data;
				}
			}
			this1.data[i] = null;
		}
	}
	,delayCall: function(call,delay,args) {
		if(call == null) return null;
		var delayedCall = starling.animation.DelayedCall.fromPool(call,delay,args);
		delayedCall.addEventListener(starling.events.Event.REMOVE_FROM_JUGGLER,$bind(this,this.onPooledDelayedCallComplete));
		this.add(delayedCall);
		return delayedCall;
	}
	,repeatCall: function(call,interval,repeatCount,args) {
		if(repeatCount == null) repeatCount = 0;
		if(call == null) return null;
		var delayedCall = starling.animation.DelayedCall.fromPool(call,interval,args);
		delayedCall.set_repeatCount(repeatCount);
		delayedCall.addEventListener(starling.events.Event.REMOVE_FROM_JUGGLER,$bind(this,this.onPooledDelayedCallComplete));
		this.add(delayedCall);
		return delayedCall;
	}
	,onPooledDelayedCallComplete: function(event) {
		starling.animation.DelayedCall.toPool(event.get_target());
	}
	,tween: function(target,time,properties) {
		if(target == null) throw new openfl.errors.ArgumentError("target must not be null");
		var tween = starling.animation.Tween.fromPool(target,time);
		var fields = Reflect.fields(properties);
		var _g = 0;
		while(_g < fields.length) {
			var property = fields[_g];
			++_g;
			var value = Reflect.getProperty(properties,property);
			haxe.Log.trace("CHECK",{ fileName : "Juggler.hx", lineNumber : 238, className : "starling.animation.Juggler", methodName : "tween"});
			var hasProperty = Object.prototype.hasOwnProperty.call(tween,property);
			var propertyName = starling.animation.Tween.getPropertyName(property);
			var targetHasProperty = target.hasOwnProperty(propertyName);
			haxe.Log.trace("hasProperty = " + (hasProperty == null?"null":"" + hasProperty),{ fileName : "Juggler.hx", lineNumber : 244, className : "starling.animation.Juggler", methodName : "tween"});
			haxe.Log.trace("targetHasProperty = " + (targetHasProperty == null?"null":"" + targetHasProperty),{ fileName : "Juggler.hx", lineNumber : 245, className : "starling.animation.Juggler", methodName : "tween"});
			if(hasProperty) Reflect.setProperty(tween,property,value);
			tween.animate(property,value);
		}
		tween.addEventListener(starling.events.Event.REMOVE_FROM_JUGGLER,$bind(this,this.onPooledTweenComplete));
		this.add(tween);
		return tween;
	}
	,onPooledTweenComplete: function(event) {
		starling.animation.Tween.toPool(event.get_target());
	}
	,advanceTime: function(time) {
		var numObjects = this.mObjects.length;
		var currentIndex = 0;
		var i = 0;
		this.mElapsedTime += time;
		if(numObjects == 0) return;
		var _g = 0;
		while(_g < numObjects) {
			var i1 = _g++;
			var object = this.mObjects.data[i1];
			if(object != null) {
				if(currentIndex != i1) {
					var this1 = this.mObjects;
					if(!this1.fixed) {
						if(currentIndex >= this1.length) this1.length = currentIndex + 1;
						if(this1.data.length < this1.length) {
							var data;
							var this2;
							this2 = new Array(this1.data.length + 10);
							data = this2;
							haxe.ds._Vector.Vector_Impl_.blit(this1.data,0,data,0,this1.data.length);
							this1.data = data;
						}
					}
					this1.data[currentIndex] = object;
					var this3 = this.mObjects;
					if(!this3.fixed) {
						if(i1 >= this3.length) this3.length = i1 + 1;
						if(this3.data.length < this3.length) {
							var data1;
							var this4;
							this4 = new Array(this3.data.length + 10);
							data1 = this4;
							haxe.ds._Vector.Vector_Impl_.blit(this3.data,0,data1,0,this3.data.length);
							this3.data = data1;
						}
					}
					this3.data[i1] = null;
				}
				object.advanceTime(time);
				++currentIndex;
			}
		}
	}
	,onRemove: function(event) {
		this.remove(event.get_target());
		var tween = null;
		try {
			tween = event.get_target();
		} catch( e ) {
			if( js.Boot.__instanceof(e,openfl.errors.Error) ) {
			} else throw(e);
		}
		if(tween != null) {
			if(tween.get_isComplete()) {
				var nextTween = Reflect.getProperty(tween,"nextTween");
				if(nextTween != null) this.add(nextTween);
			}
		}
	}
	,get_elapsedTime: function() {
		return this.mElapsedTime;
	}
	,get_objects: function() {
		var this1 = this.mObjects;
		var value = new Array();
		var _g1 = 0;
		var _g = this1.data.length;
		while(_g1 < _g) {
			var i = _g1++;
			value.push(this1.data[i]);
		}
		return value;
	}
	,__class__: starling.animation.Juggler
	,__properties__: {get_objects:"get_objects",get_elapsedTime:"get_elapsedTime"}
};
starling.animation.Transitions = function() {
	throw new starling.errors.AbstractClassError();
};
$hxClasses["starling.animation.Transitions"] = starling.animation.Transitions;
starling.animation.Transitions.__name__ = ["starling","animation","Transitions"];
starling.animation.Transitions.sTransitions = null;
starling.animation.Transitions.getTransition = function(name) {
	if(starling.animation.Transitions.sTransitions == null) starling.animation.Transitions.registerDefaults();
	return starling.animation.Transitions.sTransitions.get(name);
};
starling.animation.Transitions.register = function(name,func) {
	if(starling.animation.Transitions.sTransitions == null) starling.animation.Transitions.registerDefaults();
	starling.animation.Transitions.sTransitions.set(name,func);
	func;
};
starling.animation.Transitions.registerDefaults = function() {
	starling.animation.Transitions.sTransitions = new haxe.ds.StringMap();
	starling.animation.Transitions.register(starling.animation.Transitions.LINEAR,starling.animation.Transitions.linear);
	starling.animation.Transitions.register(starling.animation.Transitions.EASE_IN,starling.animation.Transitions.easeIn);
	starling.animation.Transitions.register(starling.animation.Transitions.EASE_OUT,starling.animation.Transitions.easeOut);
	starling.animation.Transitions.register(starling.animation.Transitions.EASE_IN_OUT,starling.animation.Transitions.easeInOut);
	starling.animation.Transitions.register(starling.animation.Transitions.EASE_OUT_IN,starling.animation.Transitions.easeOutIn);
	starling.animation.Transitions.register(starling.animation.Transitions.EASE_IN_BACK,starling.animation.Transitions.easeInBack);
	starling.animation.Transitions.register(starling.animation.Transitions.EASE_OUT_BACK,starling.animation.Transitions.easeOutBack);
	starling.animation.Transitions.register(starling.animation.Transitions.EASE_IN_OUT_BACK,starling.animation.Transitions.easeInOutBack);
	starling.animation.Transitions.register(starling.animation.Transitions.EASE_OUT_IN_BACK,starling.animation.Transitions.easeOutInBack);
	starling.animation.Transitions.register(starling.animation.Transitions.EASE_IN_ELASTIC,starling.animation.Transitions.easeInElastic);
	starling.animation.Transitions.register(starling.animation.Transitions.EASE_OUT_ELASTIC,starling.animation.Transitions.easeOutElastic);
	starling.animation.Transitions.register(starling.animation.Transitions.EASE_IN_OUT_ELASTIC,starling.animation.Transitions.easeInOutElastic);
	starling.animation.Transitions.register(starling.animation.Transitions.EASE_OUT_IN_ELASTIC,starling.animation.Transitions.easeOutInElastic);
	starling.animation.Transitions.register(starling.animation.Transitions.EASE_IN_BOUNCE,starling.animation.Transitions.easeInBounce);
	starling.animation.Transitions.register(starling.animation.Transitions.EASE_OUT_BOUNCE,starling.animation.Transitions.easeOutBounce);
	starling.animation.Transitions.register(starling.animation.Transitions.EASE_IN_OUT_BOUNCE,starling.animation.Transitions.easeInOutBounce);
	starling.animation.Transitions.register(starling.animation.Transitions.EASE_OUT_IN_BOUNCE,starling.animation.Transitions.easeOutInBounce);
};
starling.animation.Transitions.linear = function(ratio) {
	return ratio;
};
starling.animation.Transitions.easeIn = function(ratio) {
	return ratio * ratio * ratio;
};
starling.animation.Transitions.easeOut = function(ratio) {
	var invRatio = ratio - 1.0;
	return invRatio * invRatio * invRatio + 1;
};
starling.animation.Transitions.easeInOut = function(ratio) {
	return starling.animation.Transitions.easeCombined(starling.animation.Transitions.easeIn,starling.animation.Transitions.easeOut,ratio);
};
starling.animation.Transitions.easeOutIn = function(ratio) {
	return starling.animation.Transitions.easeCombined(starling.animation.Transitions.easeOut,starling.animation.Transitions.easeIn,ratio);
};
starling.animation.Transitions.easeInBack = function(ratio) {
	var s = 1.70158;
	return Math.pow(ratio,2) * ((s + 1.0) * ratio - s);
};
starling.animation.Transitions.easeOutBack = function(ratio) {
	var invRatio = ratio - 1.0;
	var s = 1.70158;
	return Math.pow(invRatio,2) * ((s + 1.0) * invRatio + s) + 1.0;
};
starling.animation.Transitions.easeInOutBack = function(ratio) {
	return starling.animation.Transitions.easeCombined(starling.animation.Transitions.easeInBack,starling.animation.Transitions.easeOutBack,ratio);
};
starling.animation.Transitions.easeOutInBack = function(ratio) {
	return starling.animation.Transitions.easeCombined(starling.animation.Transitions.easeOutBack,starling.animation.Transitions.easeInBack,ratio);
};
starling.animation.Transitions.easeInElastic = function(ratio) {
	if(ratio == 0 || ratio == 1) return ratio; else {
		var p = 0.3;
		var s = p / 4.0;
		var invRatio = ratio - 1;
		return -1. * Math.pow(2.0,10.0 * invRatio) * Math.sin((invRatio - s) * (2.0 * Math.PI) / p);
	}
};
starling.animation.Transitions.easeOutElastic = function(ratio) {
	if(ratio == 0 || ratio == 1) return ratio; else {
		var p = 0.3;
		var s = p / 4.0;
		return Math.pow(2.0,-10. * ratio) * Math.sin((ratio - s) * (2.0 * Math.PI) / p) + 1;
	}
};
starling.animation.Transitions.easeInOutElastic = function(ratio) {
	return starling.animation.Transitions.easeCombined(starling.animation.Transitions.easeInElastic,starling.animation.Transitions.easeOutElastic,ratio);
};
starling.animation.Transitions.easeOutInElastic = function(ratio) {
	return starling.animation.Transitions.easeCombined(starling.animation.Transitions.easeOutElastic,starling.animation.Transitions.easeInElastic,ratio);
};
starling.animation.Transitions.easeInBounce = function(ratio) {
	return 1.0 - starling.animation.Transitions.easeOutBounce(1.0 - ratio);
};
starling.animation.Transitions.easeOutBounce = function(ratio) {
	var s = 7.5625;
	var p = 2.75;
	var l;
	if(ratio < 1.0 / p) l = s * Math.pow(ratio,2); else if(ratio < 2.0 / p) {
		ratio -= 1.5 / p;
		l = s * Math.pow(ratio,2) + 0.75;
	} else if(ratio < 2.5 / p) {
		ratio -= 2.25 / p;
		l = s * Math.pow(ratio,2) + 0.9375;
	} else {
		ratio -= 2.625 / p;
		l = s * Math.pow(ratio,2) + 0.984375;
	}
	return l;
};
starling.animation.Transitions.easeInOutBounce = function(ratio) {
	return starling.animation.Transitions.easeCombined(starling.animation.Transitions.easeInBounce,starling.animation.Transitions.easeOutBounce,ratio);
};
starling.animation.Transitions.easeOutInBounce = function(ratio) {
	return starling.animation.Transitions.easeCombined(starling.animation.Transitions.easeOutBounce,starling.animation.Transitions.easeInBounce,ratio);
};
starling.animation.Transitions.easeCombined = function(startFunc,endFunc,ratio) {
	var dStartFunc = startFunc;
	var dEndFunc = endFunc;
	if(ratio < 0.5) return 0.5 * dStartFunc(ratio * 2.0);
	return 0.5 * dEndFunc((ratio - 0.5) * 2.0) + 0.5;
};
starling.animation.Transitions.prototype = {
	__class__: starling.animation.Transitions
};
starling.animation.Tween = function(target,time,transition) {
	if(transition == null) transition = "linear";
	starling.events.EventDispatcher.call(this);
	this.reset(target,time,transition);
};
$hxClasses["starling.animation.Tween"] = starling.animation.Tween;
starling.animation.Tween.__name__ = ["starling","animation","Tween"];
starling.animation.Tween.__interfaces__ = [starling.animation.IAnimatable];
starling.animation.Tween.getPropertyHint = function(property) {
	if(property.indexOf("color") != -1 || property.indexOf("Color") != -1) return "rgb";
	var hintMarkerIndex = property.indexOf(starling.animation.Tween.HINT_MARKER);
	if(hintMarkerIndex != -1) return HxOverrides.substr(property,hintMarkerIndex + 1,null); else return null;
};
starling.animation.Tween.getPropertyName = function(property) {
	var hintMarkerIndex = property.indexOf(starling.animation.Tween.HINT_MARKER);
	if(hintMarkerIndex != -1) return property.substring(0,hintMarkerIndex); else return property;
};
starling.animation.Tween.fromPool = function(target,time,transition) {
	if(transition == null) transition = "linear";
	if(starling.animation.Tween.sTweenPool.length > 0) return ((function($this) {
		var $r;
		var this1 = starling.animation.Tween.sTweenPool;
		var value = null;
		if(!this1.fixed) {
			if(this1.length > 0) {
				this1.length--;
				value = this1.data[this1.length];
			}
		}
		$r = value;
		return $r;
	}(this))).reset(target,time,transition); else return new starling.animation.Tween(target,time,transition);
};
starling.animation.Tween.toPool = function(tween) {
	tween.mOnStart = tween.mOnUpdate = tween.mOnRepeat = tween.mOnComplete = null;
	tween.mOnStartArgs = tween.mOnUpdateArgs = tween.mOnRepeatArgs = tween.mOnCompleteArgs = null;
	tween.mTarget = null;
	tween.mTransitionFunc = null;
	tween.removeEventListeners();
	var this1 = starling.animation.Tween.sTweenPool;
	if(!this1.fixed) {
		this1.length++;
		if(this1.data.length < this1.length) {
			var data;
			var this2;
			this2 = new Array(this1.data.length + 10);
			data = this2;
			haxe.ds._Vector.Vector_Impl_.blit(this1.data,0,data,0,this1.data.length);
			this1.data = data;
		}
		this1.data[this1.length - 1] = tween;
	}
	this1.length;
};
starling.animation.Tween.__super__ = starling.events.EventDispatcher;
starling.animation.Tween.prototype = $extend(starling.events.EventDispatcher.prototype,{
	mTarget: null
	,mTransitionFunc: null
	,mTransitionName: null
	,mProperties: null
	,mStartValues: null
	,mEndValues: null
	,mUpdateFuncs: null
	,mOnStart: null
	,mOnUpdate: null
	,mOnRepeat: null
	,mOnComplete: null
	,mOnStartArgs: null
	,mOnUpdateArgs: null
	,mOnRepeatArgs: null
	,mOnCompleteArgs: null
	,mTotalTime: null
	,mCurrentTime: null
	,mProgress: null
	,mDelay: null
	,mRoundToInt: null
	,mNextTween: null
	,mRepeatCount: null
	,mRepeatDelay: null
	,mReverse: null
	,mCurrentCycle: null
	,isComplete: null
	,target: null
	,totalTime: null
	,currentTime: null
	,progress: null
	,reset: function(target,time,transition) {
		if(transition == null) transition = "linear";
		this.mTarget = target;
		this.mCurrentTime = 0.0;
		this.mTotalTime = Math.max(0.0001,time);
		this.mProgress = 0.0;
		this.mDelay = this.mRepeatDelay = 0.0;
		this.mOnStart = this.mOnUpdate = this.mOnRepeat = this.mOnComplete = null;
		this.mOnStartArgs = this.mOnUpdateArgs = this.mOnRepeatArgs = this.mOnCompleteArgs = null;
		this.mRoundToInt = this.mReverse = false;
		this.mRepeatCount = 1;
		this.mCurrentCycle = -1;
		this.mNextTween = null;
		if(typeof(transition) == "string") this.set_transition(transition); else if(Reflect.isFunction(transition)) this.set_transitionFunc(transition); else throw new openfl.errors.ArgumentError("Transition must be either a string or a function");
		if(this.mProperties != null) {
			var this1 = this.mProperties;
			if(!this1.fixed) {
				if(0 > this1.length) {
					var data;
					var this2;
					this2 = new Array(0);
					data = this2;
					haxe.ds._Vector.Vector_Impl_.blit(this1.data,0,data,0,Std["int"](Math.min(this1.data.length,0)));
					this1.data = data;
				}
				this1.length = 0;
			}
			0;
		} else {
			var this3;
			this3 = new openfl.VectorData();
			var this4;
			this4 = new Array(0);
			this3.data = this4;
			this3.length = 0;
			this3.fixed = false;
			this.mProperties = this3;
		}
		if(this.mStartValues != null) {
			var this5 = this.mStartValues;
			if(!this5.fixed) {
				if(0 > this5.length) {
					var data1;
					var this6;
					this6 = new Array(0);
					data1 = this6;
					haxe.ds._Vector.Vector_Impl_.blit(this5.data,0,data1,0,Std["int"](Math.min(this5.data.length,0)));
					this5.data = data1;
				}
				this5.length = 0;
			}
			0;
		} else {
			var this7;
			this7 = new openfl.VectorData();
			var this8;
			this8 = new Array(0);
			this7.data = this8;
			this7.length = 0;
			this7.fixed = false;
			this.mStartValues = this7;
		}
		if(this.mEndValues != null) {
			var this9 = this.mEndValues;
			if(!this9.fixed) {
				if(0 > this9.length) {
					var data2;
					var this10;
					this10 = new Array(0);
					data2 = this10;
					haxe.ds._Vector.Vector_Impl_.blit(this9.data,0,data2,0,Std["int"](Math.min(this9.data.length,0)));
					this9.data = data2;
				}
				this9.length = 0;
			}
			0;
		} else {
			var this11;
			this11 = new openfl.VectorData();
			var this12;
			this12 = new Array(0);
			this11.data = this12;
			this11.length = 0;
			this11.fixed = false;
			this.mEndValues = this11;
		}
		if(this.mUpdateFuncs != null) {
			var this13 = this.mUpdateFuncs;
			if(!this13.fixed) {
				if(0 > this13.length) {
					var data3;
					var this14;
					this14 = new Array(0);
					data3 = this14;
					haxe.ds._Vector.Vector_Impl_.blit(this13.data,0,data3,0,Std["int"](Math.min(this13.data.length,0)));
					this13.data = data3;
				}
				this13.length = 0;
			}
			0;
		} else {
			var this15;
			this15 = new openfl.VectorData();
			var this16;
			this16 = new Array(0);
			this15.data = this16;
			this15.length = 0;
			this15.fixed = false;
			this.mUpdateFuncs = this15;
		}
		return this;
	}
	,animate: function(property,endValue) {
		if(this.mTarget == null) return;
		var pos = this.mProperties.length;
		var updateFunc = this.getUpdateFuncFromProperty(property);
		var this1 = this.mProperties;
		var value = starling.animation.Tween.getPropertyName(property);
		if(!this1.fixed) {
			if(pos >= this1.length) this1.length = pos + 1;
			if(this1.data.length < this1.length) {
				var data;
				var this2;
				this2 = new Array(this1.data.length + 10);
				data = this2;
				haxe.ds._Vector.Vector_Impl_.blit(this1.data,0,data,0,this1.data.length);
				this1.data = data;
			}
		}
		this1.data[pos] = value;
		var this3 = this.mStartValues;
		if(!this3.fixed) {
			if(pos >= this3.length) this3.length = pos + 1;
			if(this3.data.length < this3.length) {
				var data1;
				var this4;
				this4 = new Array(this3.data.length + 10);
				data1 = this4;
				haxe.ds._Vector.Vector_Impl_.blit(this3.data,0,data1,0,this3.data.length);
				this3.data = data1;
			}
		}
		this3.data[pos] = Math.NaN;
		var this5 = this.mEndValues;
		if(!this5.fixed) {
			if(pos >= this5.length) this5.length = pos + 1;
			if(this5.data.length < this5.length) {
				var data2;
				var this6;
				this6 = new Array(this5.data.length + 10);
				data2 = this6;
				haxe.ds._Vector.Vector_Impl_.blit(this5.data,0,data2,0,this5.data.length);
				this5.data = data2;
			}
		}
		this5.data[pos] = endValue;
		var this7 = this.mUpdateFuncs;
		var value1 = updateFunc;
		if(!this7.fixed) {
			if(pos >= this7.length) this7.length = pos + 1;
			if(this7.data.length < this7.length) {
				var data3;
				var this8;
				this8 = new Array(this7.data.length + 10);
				data3 = this8;
				haxe.ds._Vector.Vector_Impl_.blit(this7.data,0,data3,0,this7.data.length);
				this7.data = data3;
			}
		}
		this7.data[pos] = value1;
	}
	,scaleTo: function(factor) {
		this.animate("scaleX",factor);
		this.animate("scaleY",factor);
	}
	,moveTo: function(x,y) {
		this.animate("x",x);
		this.animate("y",y);
	}
	,fadeTo: function(alpha) {
		this.animate("alpha",alpha);
	}
	,rotateTo: function(angle,type) {
		if(type == null) type = "rad";
		this.animate("rotation#" + type,angle);
	}
	,advanceTime: function(time) {
		if(time == 0 || this.mRepeatCount == 1 && this.mCurrentTime == this.mTotalTime) return;
		var i;
		var previousTime = this.mCurrentTime;
		var restTime = this.mTotalTime - this.mCurrentTime;
		var carryOverTime;
		if(time > restTime) carryOverTime = time - restTime; else carryOverTime = 0.0;
		this.mCurrentTime += time;
		if(this.mCurrentTime <= 0) return; else if(this.mCurrentTime > this.mTotalTime) this.mCurrentTime = this.mTotalTime;
		if(this.mCurrentCycle < 0 && previousTime <= 0 && this.mCurrentTime > 0) {
			this.mCurrentCycle++;
			if(this.mOnStart != null) this.mOnStart.apply(this,this.mOnStartArgs);
		}
		var ratio = this.mCurrentTime / this.mTotalTime;
		var reversed = this.mReverse && this.mCurrentCycle % 2 == 1;
		var numProperties = this.mStartValues.length;
		if(reversed) this.mProgress = this.mTransitionFunc(1.0 - ratio); else this.mProgress = this.mTransitionFunc(ratio);
		var _g = 0;
		while(_g < numProperties) {
			var i1 = _g++;
			if(this.mStartValues.data[i1] != this.mStartValues.data[i1]) {
				var this1 = this.mStartValues;
				var value = Reflect.getProperty(this.mTarget,this.mProperties.data[i1]);
				if(!this1.fixed) {
					if(i1 >= this1.length) this1.length = i1 + 1;
					if(this1.data.length < this1.length) {
						var data;
						var this2;
						this2 = new Array(this1.data.length + 10);
						data = this2;
						haxe.ds._Vector.Vector_Impl_.blit(this1.data,0,data,0,this1.data.length);
						this1.data = data;
					}
				}
				this1.data[i1] = value;
			}
			var updateFunc = this.mUpdateFuncs.data[i1];
			updateFunc(this.mProperties.data[i1],this.mStartValues.data[i1],this.mEndValues.data[i1]);
		}
		if(this.mOnUpdate != null) this.mOnUpdate.apply(this,this.mOnUpdateArgs);
		if(previousTime < this.mTotalTime && this.mCurrentTime >= this.mTotalTime) {
			if(this.mRepeatCount == 0 || this.mRepeatCount > 1) {
				this.mCurrentTime = -this.mRepeatDelay;
				this.mCurrentCycle++;
				if(this.mRepeatCount > 1) this.mRepeatCount--;
				if(this.mOnRepeat != null) this.mOnRepeat.apply(this,this.mOnRepeatArgs);
			} else {
				var onComplete = this.mOnComplete;
				var onCompleteArgs = this.mOnCompleteArgs;
				this.dispatchEventWith(starling.events.Event.REMOVE_FROM_JUGGLER);
				if(onComplete != null) onComplete.apply(this,onCompleteArgs);
			}
		}
		if(carryOverTime != null) this.advanceTime(carryOverTime);
	}
	,getUpdateFuncFromProperty: function(property) {
		var updateFunc;
		var hint = starling.animation.Tween.getPropertyHint(property);
		if(hint == null) updateFunc = $bind(this,this.updateStandard); else switch(hint) {
		case "rgb":
			updateFunc = $bind(this,this.updateRgb);
			break;
		case "rad":
			updateFunc = $bind(this,this.updateRad);
			break;
		case "deg":
			updateFunc = $bind(this,this.updateDeg);
			break;
		default:
			haxe.Log.trace("[Starling] Ignoring unknown property hint:",{ fileName : "Tween.hx", lineNumber : 289, className : "starling.animation.Tween", methodName : "getUpdateFuncFromProperty", customParams : [hint]});
			updateFunc = $bind(this,this.updateStandard);
		}
		return updateFunc;
	}
	,updateStandard: function(property,startValue,endValue) {
		var newValue = startValue + this.mProgress * (endValue - startValue);
		if(this.mRoundToInt) newValue = Math.round(newValue);
		try {
			Reflect.setProperty(this.mTarget,property,newValue);
		} catch( e ) {
			if( js.Boot.__instanceof(e,openfl.errors.Error) ) {
			} else throw(e);
		}
	}
	,updateRgb: function(property,startValue,endValue) {
		var startColor = startValue;
		var endColor = endValue;
		var startA = startColor >> 24 & 255;
		var startR = startColor >> 16 & 255;
		var startG = startColor >> 8 & 255;
		var startB = startColor & 255;
		var endA = endColor >> 24 & 255;
		var endR = endColor >> 16 & 255;
		var endG = endColor >> 8 & 255;
		var endB = endColor & 255;
		var newA;
		newA = (function($this) {
			var $r;
			var $int = startA;
			$r = $int < 0?4294967296.0 + $int:$int + 0.0;
			return $r;
		}(this)) + (function($this) {
			var $r;
			var int1 = endA - startA;
			$r = int1 < 0?4294967296.0 + int1:int1 + 0.0;
			return $r;
		}(this)) * this.mProgress;
		var newR;
		newR = (function($this) {
			var $r;
			var int2 = startR;
			$r = int2 < 0?4294967296.0 + int2:int2 + 0.0;
			return $r;
		}(this)) + (function($this) {
			var $r;
			var int3 = endR - startR;
			$r = int3 < 0?4294967296.0 + int3:int3 + 0.0;
			return $r;
		}(this)) * this.mProgress;
		var newG;
		newG = (function($this) {
			var $r;
			var int4 = startG;
			$r = int4 < 0?4294967296.0 + int4:int4 + 0.0;
			return $r;
		}(this)) + (function($this) {
			var $r;
			var int5 = endG - startG;
			$r = int5 < 0?4294967296.0 + int5:int5 + 0.0;
			return $r;
		}(this)) * this.mProgress;
		var newB;
		newB = (function($this) {
			var $r;
			var int6 = startB;
			$r = int6 < 0?4294967296.0 + int6:int6 + 0.0;
			return $r;
		}(this)) + (function($this) {
			var $r;
			var int7 = endB - startB;
			$r = int7 < 0?4294967296.0 + int7:int7 + 0.0;
			return $r;
		}(this)) * this.mProgress;
		haxe.Log.trace("CHECK",{ fileName : "Tween.hx", lineNumber : 348, className : "starling.animation.Tween", methodName : "updateRgb"});
		Reflect.setProperty(this.mTarget,property,newA << 24 | newR << 16 | newG << 8 | newB);
	}
	,updateRad: function(property,startValue,endValue) {
		this.updateAngle(Math.PI,property,startValue,endValue);
	}
	,updateDeg: function(property,startValue,endValue) {
		this.updateAngle(180,property,startValue,endValue);
	}
	,updateAngle: function(pi,property,startValue,endValue) {
		while(Math.abs(endValue - startValue) > pi) if(startValue < endValue) endValue -= 2.0 * pi; else endValue += 2.0 * pi;
		this.updateStandard(property,startValue,endValue);
	}
	,getEndValue: function(property) {
		var index;
		var this1 = this.mProperties;
		var value = -1;
		var _g1 = 0;
		var _g = this1.length;
		while(_g1 < _g) {
			var i = _g1++;
			if(this1.data[i] == property) {
				value = i;
				break;
			}
		}
		index = value;
		if(index == -1) throw new openfl.errors.ArgumentError("The property '" + property + "' is not animated"); else return this.mEndValues.data[index];
	}
	,get_isComplete: function() {
		return this.mCurrentTime >= this.mTotalTime && this.mRepeatCount == 1;
	}
	,get_target: function() {
		return this.mTarget;
	}
	,get_transition: function() {
		return this.mTransitionName;
	}
	,set_transition: function(value) {
		this.mTransitionName = value;
		this.mTransitionFunc = starling.animation.Transitions.getTransition(value);
		if(this.mTransitionFunc == null) throw new openfl.errors.ArgumentError("Invalid transiton: " + value);
		return value;
	}
	,get_transitionFunc: function() {
		return this.mTransitionFunc;
	}
	,set_transitionFunc: function(value) {
		this.mTransitionName = "custom";
		this.mTransitionFunc = value;
		return value;
	}
	,get_totalTime: function() {
		return this.mTotalTime;
	}
	,get_currentTime: function() {
		return this.mCurrentTime;
	}
	,get_progress: function() {
		return this.mProgress;
	}
	,get_delay: function() {
		return this.mDelay;
	}
	,set_delay: function(value) {
		this.mCurrentTime = this.mCurrentTime + this.mDelay - value;
		this.mDelay = value;
		return value;
	}
	,get_repeatCount: function() {
		return this.mRepeatCount;
	}
	,set_repeatCount: function(value) {
		this.mRepeatCount = value;
		return value;
	}
	,get_repeatDelay: function() {
		return this.mRepeatDelay;
	}
	,set_repeatDelay: function(value) {
		this.mRepeatDelay = value;
		return value;
	}
	,get_reverse: function() {
		return this.mReverse;
	}
	,set_reverse: function(value) {
		this.mReverse = value;
		return value;
	}
	,get_roundToInt: function() {
		return this.mRoundToInt;
	}
	,set_roundToInt: function(value) {
		this.mRoundToInt = value;
		return value;
	}
	,get_onStart: function() {
		return this.mOnStart;
	}
	,set_onStart: function(value) {
		this.mOnStart = value;
		return value;
	}
	,get_onUpdate: function() {
		return this.mOnUpdate;
	}
	,set_onUpdate: function(value) {
		this.mOnUpdate = value;
		return value;
	}
	,get_onRepeat: function() {
		return this.mOnRepeat;
	}
	,set_onRepeat: function(value) {
		this.mOnRepeat = value;
		return value;
	}
	,get_onComplete: function() {
		return this.mOnComplete;
	}
	,set_onComplete: function(value) {
		this.mOnComplete = value;
		return value;
	}
	,get_onStartArgs: function() {
		return this.mOnStartArgs;
	}
	,set_onStartArgs: function(value) {
		this.mOnStartArgs = value;
		return value;
	}
	,get_onUpdateArgs: function() {
		return this.mOnUpdateArgs;
	}
	,set_onUpdateArgs: function(value) {
		this.mOnUpdateArgs = value;
		return value;
	}
	,get_onRepeatArgs: function() {
		return this.mOnRepeatArgs;
	}
	,set_onRepeatArgs: function(value) {
		this.mOnRepeatArgs = value;
		return value;
	}
	,get_onCompleteArgs: function() {
		return this.mOnCompleteArgs;
	}
	,set_onCompleteArgs: function(value) {
		this.mOnCompleteArgs = value;
		return value;
	}
	,get_nextTween: function() {
		return this.mNextTween;
	}
	,set_nextTween: function(value) {
		this.mNextTween = value;
		return value;
	}
	,__class__: starling.animation.Tween
	,__properties__: {set_nextTween:"set_nextTween",get_nextTween:"get_nextTween",set_onCompleteArgs:"set_onCompleteArgs",get_onCompleteArgs:"get_onCompleteArgs",set_onRepeatArgs:"set_onRepeatArgs",get_onRepeatArgs:"get_onRepeatArgs",set_onUpdateArgs:"set_onUpdateArgs",get_onUpdateArgs:"get_onUpdateArgs",set_onStartArgs:"set_onStartArgs",get_onStartArgs:"get_onStartArgs",set_onComplete:"set_onComplete",get_onComplete:"get_onComplete",set_onRepeat:"set_onRepeat",get_onRepeat:"get_onRepeat",set_onUpdate:"set_onUpdate",get_onUpdate:"get_onUpdate",set_onStart:"set_onStart",get_onStart:"get_onStart",set_roundToInt:"set_roundToInt",get_roundToInt:"get_roundToInt",set_reverse:"set_reverse",get_reverse:"get_reverse",set_repeatDelay:"set_repeatDelay",get_repeatDelay:"get_repeatDelay",set_repeatCount:"set_repeatCount",get_repeatCount:"get_repeatCount",set_delay:"set_delay",get_delay:"get_delay",get_progress:"get_progress",get_currentTime:"get_currentTime",get_totalTime:"get_totalTime",set_transitionFunc:"set_transitionFunc",get_transitionFunc:"get_transitionFunc",set_transition:"set_transition",get_transition:"get_transition",get_target:"get_target",get_isComplete:"get_isComplete"}
});
starling.core = {};
starling.core.RenderSupport = function() {
	this.mMasks = (function($this) {
		var $r;
		var this1;
		this1 = new openfl.VectorData();
		{
			var this2;
			this2 = new Array(0);
			this1.data = this2;
		}
		this1.length = 0;
		this1.fixed = false;
		$r = this1;
		return $r;
	}(this));
	this.mClipRectStackSize = 0;
	this.mProjectionMatrix = new openfl.geom.Matrix();
	this.mModelViewMatrix = new openfl.geom.Matrix();
	this.mMvpMatrix = new openfl.geom.Matrix();
	this.mMatrixStack = new Array();
	this.mMatrixStackSize = 0;
	this.mProjectionMatrix3D = new openfl.geom.Matrix3D();
	this.mModelViewMatrix3D = new openfl.geom.Matrix3D();
	this.mMvpMatrix3D = new openfl.geom.Matrix3D();
	this.mMatrixStack3D = new Array();
	this.mMatrixStack3DSize = 0;
	this.mDrawCount = 0;
	this.mRenderTarget = null;
	this.mBlendMode = starling.display.BlendMode.NORMAL;
	this.mClipRectStack = new Array();
	this.mCurrentQuadBatchID = 0;
	this.mQuadBatches = new Array();
	this.mQuadBatches.push(new starling.display.QuadBatch());
	this.loadIdentity();
	this.setProjectionMatrix(0,0,400,300);
};
$hxClasses["starling.core.RenderSupport"] = starling.core.RenderSupport;
starling.core.RenderSupport.__name__ = ["starling","core","RenderSupport"];
starling.core.RenderSupport.transformMatrixForObject = function(matrix,object) {
	starling.utils.MatrixUtil.prependMatrix(matrix,object.get_transformationMatrix());
};
starling.core.RenderSupport.setDefaultBlendFactors = function(premultipliedAlpha) {
	starling.core.RenderSupport.setBlendFactors(premultipliedAlpha);
};
starling.core.RenderSupport.setBlendFactors = function(premultipliedAlpha,blendMode) {
	if(blendMode == null) blendMode = "normal";
	var blendFactors = starling.display.BlendMode.getBlendFactors(blendMode,premultipliedAlpha);
	starling.core.Starling.get_Context().setBlendFactors(blendFactors[0],blendFactors[1]);
};
starling.core.RenderSupport.Clear = function(rgb,alpha) {
	if(alpha == null) alpha = 0.0;
	if(rgb == null) rgb = 0;
	starling.core.Starling.get_Context().clear(starling.utils.Color.getRed(rgb) / 255.0,starling.utils.Color.getGreen(rgb) / 255.0,starling.utils.Color.getBlue(rgb) / 255.0,alpha);
};
starling.core.RenderSupport.assembleAgal = function(vertexShader,fragmentShader,resultProgram) {
	if(resultProgram == null) {
		var context = starling.core.Starling.get_Context();
		if(context == null) throw new starling.errors.MissingContextError();
		resultProgram = context.createProgram();
	}
	var vertexByteCode = openfl.display3D._shaders.AGLSLShaderUtils.createShader(openfl.display3D.Context3DProgramType.VERTEX,vertexShader);
	var fragmentByteCode = openfl.display3D._shaders.AGLSLShaderUtils.createShader(openfl.display3D.Context3DProgramType.FRAGMENT,fragmentShader);
	resultProgram.upload(vertexByteCode,fragmentByteCode);
	return resultProgram;
};
starling.core.RenderSupport.getTextureLookupFlags = function(format,mipMapping,repeat,smoothing) {
	if(smoothing == null) smoothing = "bilinear";
	if(repeat == null) repeat = false;
	var options = ["2d",repeat?"repeat":"clamp"];
	if(format == openfl.display3D.Context3DTextureFormat.COMPRESSED) options.push("dxt1"); else if(format == openfl.display3D.Context3DTextureFormat.COMPRESSED_ALPHA) options.push("dxt5");
	if(smoothing == starling.textures.TextureSmoothing.NONE) {
		options.push("nearest");
		options.push(mipMapping?"mipnearest":"mipnone");
	} else if(smoothing == starling.textures.TextureSmoothing.BILINEAR) {
		options.push("linear");
		options.push(mipMapping?"mipnearest":"mipnone");
	} else {
		options.push("linear");
		options.push(mipMapping?"miplinear":"mipnone");
	}
	return "<" + options.join("") + ">";
};
starling.core.RenderSupport.prototype = {
	mProjectionMatrix: null
	,mModelViewMatrix: null
	,mMvpMatrix: null
	,mMatrixStack: null
	,mMatrixStackSize: null
	,mProjectionMatrix3D: null
	,mModelViewMatrix3D: null
	,mMvpMatrix3D: null
	,mMatrixStack3D: null
	,mMatrixStack3DSize: null
	,mDrawCount: null
	,mBlendMode: null
	,mRenderTarget: null
	,mClipRectStack: null
	,mClipRectStackSize: null
	,mQuadBatches: null
	,mCurrentQuadBatchID: null
	,mvpMatrix: null
	,modelViewMatrix: null
	,mvpMatrix3D: null
	,drawCount: null
	,dispose: function() {
		var _g = 0;
		var _g1 = this.mQuadBatches;
		while(_g < _g1.length) {
			var quadBatch = _g1[_g];
			++_g;
			quadBatch.dispose();
		}
	}
	,setProjectionMatrix: function(x,y,width,height,stageWidth,stageHeight,cameraPos) {
		if(stageHeight == null) stageHeight = 0;
		if(stageWidth == null) stageWidth = 0;
		if(stageWidth <= 0) stageWidth = width;
		if(stageHeight <= 0) stageHeight = height;
		if(cameraPos == null) {
			cameraPos = starling.core.RenderSupport.sPoint3D;
			cameraPos.setTo(stageWidth / 2,stageHeight / 2,stageWidth / Math.tan(0.5) * 0.5);
		}
		this.mProjectionMatrix.setTo(2.0 / width,0,0,-2. / height,-(2 * x + width) / width,(2 * y + height) / height);
		var focalLength = Math.abs(cameraPos.z);
		var offsetX = cameraPos.x - stageWidth / 2;
		var offsetY = cameraPos.y - stageHeight / 2;
		var far = focalLength * 20;
		var near = 1;
		var scaleX = stageWidth / width;
		var scaleY = stageHeight / height;
		starling.core.RenderSupport.sMatrixData[0] = 2 * focalLength / stageWidth;
		starling.core.RenderSupport.sMatrixData[5] = -2 * focalLength / stageHeight;
		starling.core.RenderSupport.sMatrixData[10] = far / (far - near);
		starling.core.RenderSupport.sMatrixData[14] = -far * near / (far - near);
		starling.core.RenderSupport.sMatrixData[11] = 1;
		starling.core.RenderSupport.sMatrixData[0] *= scaleX;
		starling.core.RenderSupport.sMatrixData[5] *= scaleY;
		starling.core.RenderSupport.sMatrixData[8] = scaleX - 1 - 2 * scaleX * (x - offsetX) / stageWidth;
		starling.core.RenderSupport.sMatrixData[9] = -scaleY + 1 + 2 * scaleY * (y - offsetY) / stageHeight;
		this.mProjectionMatrix3D.copyRawDataFrom((function($this) {
			var $r;
			var value = starling.core.RenderSupport.sMatrixData;
			var vectorData = new openfl.VectorData();
			vectorData.length = value.length;
			vectorData.fixed = true;
			{
				var vec;
				var this1;
				this1 = new Array(value.length);
				vec = this1;
				var _g1 = 0;
				var _g = value.length;
				while(_g1 < _g) {
					var i = _g1++;
					vec[i] = value[i];
				}
				vectorData.data = vec;
			}
			$r = vectorData;
			return $r;
		}(this)));
		this.mProjectionMatrix3D.prependTranslation(-stageWidth / 2.0 - offsetX,-stageHeight / 2.0 - offsetY,focalLength);
		this.applyClipRect();
	}
	,setOrthographicProjection: function(x,y,width,height) {
		haxe.Log.trace("Deprecated, use setProjectionMatrix instead",{ fileName : "RenderSupport.hx", lineNumber : 196, className : "starling.core.RenderSupport", methodName : "setOrthographicProjection"});
		this.setProjectionMatrix(x,y,width,height);
	}
	,loadIdentity: function() {
		this.mModelViewMatrix.identity();
		this.mModelViewMatrix3D.identity();
	}
	,translateMatrix: function(dx,dy) {
		starling.utils.MatrixUtil.prependTranslation(this.mModelViewMatrix,dx,dy);
	}
	,rotateMatrix: function(angle) {
		starling.utils.MatrixUtil.prependRotation(this.mModelViewMatrix,angle);
	}
	,scaleMatrix: function(sx,sy) {
		starling.utils.MatrixUtil.prependScale(this.mModelViewMatrix,sx,sy);
	}
	,prependMatrix: function(matrix) {
		starling.utils.MatrixUtil.prependMatrix(this.mModelViewMatrix,matrix);
	}
	,transformMatrix: function(object) {
		starling.utils.MatrixUtil.prependMatrix(this.mModelViewMatrix,object.get_transformationMatrix());
	}
	,pushMatrix: function() {
		if(this.mMatrixStack.length < this.mMatrixStackSize + 1) this.mMatrixStack.push(new openfl.geom.Matrix());
		this.mMatrixStack[js.Boot.__cast(this.mMatrixStackSize++ , Int)].copyFrom(this.mModelViewMatrix);
	}
	,popMatrix: function() {
		this.mModelViewMatrix.copyFrom(this.mMatrixStack[js.Boot.__cast(--this.mMatrixStackSize , Int)]);
	}
	,resetMatrix: function() {
		this.mMatrixStackSize = 0;
		this.mMatrixStack3DSize = 0;
		this.loadIdentity();
	}
	,get_mvpMatrix: function() {
		this.mMvpMatrix.copyFrom(this.mModelViewMatrix);
		this.mMvpMatrix.concat(this.mProjectionMatrix);
		return this.mMvpMatrix;
	}
	,get_modelViewMatrix: function() {
		return this.mModelViewMatrix;
	}
	,get_projectionMatrix: function() {
		return this.mProjectionMatrix;
	}
	,set_projectionMatrix: function(value) {
		this.mProjectionMatrix.copyFrom(value);
		this.applyClipRect();
		return value;
	}
	,transformMatrix3D: function(object) {
		this.mModelViewMatrix3D.prepend(starling.utils.MatrixUtil.convertTo3D(this.mModelViewMatrix,starling.core.RenderSupport.sMatrix3D));
		this.mModelViewMatrix3D.prepend(object.get_transformationMatrix3D());
		this.mModelViewMatrix.identity();
	}
	,pushMatrix3D: function() {
		if(this.mMatrixStack3D.length < this.mMatrixStack3DSize + 1) this.mMatrixStack3D.push(new openfl.geom.Matrix3D());
		this.mMatrixStack3D[js.Boot.__cast(this.mMatrixStack3DSize++ , Int)].copyFrom(this.mModelViewMatrix3D);
	}
	,popMatrix3D: function() {
		this.mModelViewMatrix3D.copyFrom(this.mMatrixStack3D[js.Boot.__cast(--this.mMatrixStack3DSize , Int)]);
	}
	,get_mvpMatrix3D: function() {
		if(this.mMatrixStack3DSize == 0) starling.utils.MatrixUtil.convertTo3D(this.get_mvpMatrix(),this.mMvpMatrix3D); else {
			this.mMvpMatrix3D.copyFrom(this.mProjectionMatrix3D);
			this.mMvpMatrix3D.prepend(this.mModelViewMatrix3D);
			this.mMvpMatrix3D.prepend(starling.utils.MatrixUtil.convertTo3D(this.mModelViewMatrix,starling.core.RenderSupport.sMatrix3D));
		}
		return this.mMvpMatrix3D;
	}
	,get_projectionMatrix3D: function() {
		return this.mProjectionMatrix3D;
	}
	,set_projectionMatrix3D: function(value) {
		this.mProjectionMatrix3D.copyFrom(value);
		return value;
	}
	,applyBlendMode: function(premultipliedAlpha) {
		starling.core.RenderSupport.setBlendFactors(premultipliedAlpha,this.mBlendMode);
	}
	,get_blendMode: function() {
		return this.mBlendMode;
	}
	,set_blendMode: function(value) {
		if(value != starling.display.BlendMode.AUTO) this.mBlendMode = value;
		return value;
	}
	,get_renderTarget: function() {
		return this.mRenderTarget;
	}
	,set_renderTarget: function(target) {
		this.setRenderTarget(target);
		return target;
	}
	,setRenderTarget: function(target,antiAliasing) {
		if(antiAliasing == null) antiAliasing = 0;
		this.mRenderTarget = target;
		this.applyClipRect();
		if(target != null) starling.core.Starling.get_Context().setRenderToTexture(target.get_base(),starling.utils.SystemUtil.get_supportsDepthAndStencil(),antiAliasing); else starling.core.Starling.get_Context().setRenderToBackBuffer();
	}
	,pushClipRect: function(rectangle) {
		if(this.mClipRectStack.length < this.mClipRectStackSize + 1) this.mClipRectStack.push(new openfl.geom.Rectangle());
		this.mClipRectStack[this.mClipRectStackSize].copyFrom(rectangle);
		rectangle = this.mClipRectStack[this.mClipRectStackSize];
		if(this.mClipRectStackSize > 0) starling.utils.RectangleUtil.intersect(rectangle,this.mClipRectStack[this.mClipRectStackSize - 1],rectangle);
		++this.mClipRectStackSize;
		this.applyClipRect();
		return rectangle;
	}
	,popClipRect: function() {
		if(this.mClipRectStackSize > 0) {
			--this.mClipRectStackSize;
			this.applyClipRect();
		}
	}
	,applyClipRect: function() {
		this.finishQuadBatch();
		var context = starling.core.Starling.get_Context();
		if(context == null) return;
		if(this.mClipRectStackSize > 0) {
			var width;
			var height;
			var rect = this.mClipRectStack[this.mClipRectStackSize - 1];
			if(this.mRenderTarget != null) {
				width = this.mRenderTarget.get_root().get_nativeWidth();
				height = this.mRenderTarget.get_root().get_nativeHeight();
			} else {
				width = starling.core.Starling.get_current().get_backBufferWidth();
				height = starling.core.Starling.get_current().get_backBufferHeight();
			}
			starling.utils.MatrixUtil.transformCoords(this.mProjectionMatrix,rect.x,rect.y,starling.core.RenderSupport.sPoint);
			starling.core.RenderSupport.sClipRect.x = (starling.core.RenderSupport.sPoint.x * 0.5 + 0.5) * width;
			starling.core.RenderSupport.sClipRect.y = (0.5 - starling.core.RenderSupport.sPoint.y * 0.5) * height;
			starling.utils.MatrixUtil.transformCoords(this.mProjectionMatrix,rect.get_right(),rect.get_bottom(),starling.core.RenderSupport.sPoint);
			starling.core.RenderSupport.sClipRect.set_right((starling.core.RenderSupport.sPoint.x * 0.5 + 0.5) * width);
			starling.core.RenderSupport.sClipRect.set_bottom((0.5 - starling.core.RenderSupport.sPoint.y * 0.5) * height);
			starling.core.RenderSupport.sBufferRect.setTo(0,0,width,height);
			starling.utils.RectangleUtil.intersect(starling.core.RenderSupport.sClipRect,starling.core.RenderSupport.sBufferRect,starling.core.RenderSupport.sScissorRect);
			if(starling.core.RenderSupport.sScissorRect.width < 1 || starling.core.RenderSupport.sScissorRect.height < 1) starling.core.RenderSupport.sScissorRect.setTo(0,0,1,1);
			context.setScissorRectangle(starling.core.RenderSupport.sScissorRect);
		} else context.setScissorRectangle(null);
	}
	,mMasks: null
	,pushMask: function(mask) {
		var this1 = this.mMasks;
		var key = this.mMasks.length;
		if(!this1.fixed) {
			if(key >= this1.length) this1.length = key + 1;
			if(this1.data.length < this1.length) {
				var data;
				var this2;
				this2 = new Array(this1.data.length + 10);
				data = this2;
				haxe.ds._Vector.Vector_Impl_.blit(this1.data,0,data,0,this1.data.length);
				this1.data = data;
			}
		}
		this1.data[key] = mask;
		var context = starling.core.Starling.get_Context();
		if(context == null) return;
		this.finishQuadBatch();
		context.setStencilActions(1032,514,7682);
		this.drawMask(mask);
		context.setStencilReferenceValue(this.mMasks.length);
		context.setStencilActions(1032,514,7680);
	}
	,popMask: function() {
		var mask;
		var this1 = this.mMasks;
		var value = null;
		if(!this1.fixed) {
			if(this1.length > 0) {
				this1.length--;
				value = this1.data[this1.length];
			}
		}
		mask = value;
		var context = starling.core.Starling.get_Context();
		if(context == null) return;
		this.finishQuadBatch();
		context.setStencilActions(1032,514,7683);
		this.drawMask(mask);
		context.setStencilReferenceValue(this.mMasks.length);
		context.setStencilActions(1032,514,7680);
	}
	,drawMask: function(mask) {
		this.pushMatrix();
		var stage = mask.get_stage();
		if(stage != null) mask.getTransformationMatrix(stage,this.mModelViewMatrix); else this.transformMatrix(mask);
		mask.render(this,0.0);
		this.finishQuadBatch();
		this.popMatrix();
	}
	,batchQuad: function(quad,parentAlpha,texture,smoothing) {
		if(this.mQuadBatches[this.mCurrentQuadBatchID].isStateChange(quad.get_tinted(),parentAlpha,texture,smoothing,this.mBlendMode)) this.finishQuadBatch();
		this.mQuadBatches[this.mCurrentQuadBatchID].addQuad(quad,parentAlpha,texture,smoothing,this.mModelViewMatrix,this.mBlendMode);
	}
	,batchQuadBatch: function(quadBatch,parentAlpha) {
		if(this.mQuadBatches[this.mCurrentQuadBatchID].isStateChange(quadBatch.get_tinted(),parentAlpha,quadBatch.get_texture(),quadBatch.get_smoothing(),this.mBlendMode)) this.finishQuadBatch();
		this.mQuadBatches[this.mCurrentQuadBatchID].addQuadBatch(quadBatch,parentAlpha,this.mModelViewMatrix,this.mBlendMode);
	}
	,finishQuadBatch: function() {
		var currentBatch = this.mQuadBatches[this.mCurrentQuadBatchID];
		if(currentBatch.get_numQuads() != 0) {
			if(this.mMatrixStack3DSize == 0) currentBatch.renderCustom(this.mProjectionMatrix3D); else {
				this.mMvpMatrix3D.copyFrom(this.mProjectionMatrix3D);
				this.mMvpMatrix3D.prepend(this.mModelViewMatrix3D);
				currentBatch.renderCustom(this.mMvpMatrix3D);
			}
			currentBatch.reset();
			++this.mCurrentQuadBatchID;
			++this.mDrawCount;
			if(this.mQuadBatches.length <= this.mCurrentQuadBatchID) this.mQuadBatches.push(new starling.display.QuadBatch());
		}
	}
	,nextFrame: function() {
		this.resetMatrix();
		this.trimQuadBatches();
		var this1 = this.mMasks;
		if(!this1.fixed) {
			if(0 > this1.length) {
				var data;
				var this2;
				this2 = new Array(0);
				data = this2;
				haxe.ds._Vector.Vector_Impl_.blit(this1.data,0,data,0,Std["int"](Math.min(this1.data.length,0)));
				this1.data = data;
			}
			this1.length = 0;
		}
		0;
		this.mCurrentQuadBatchID = 0;
		this.mBlendMode = starling.display.BlendMode.NORMAL;
		this.mDrawCount = 0;
	}
	,trimQuadBatches: function() {
		var numUsedBatches = this.mCurrentQuadBatchID + 1;
		var numTotalBatches = this.mQuadBatches.length;
		if(numTotalBatches >= 16 && numTotalBatches > 2 * numUsedBatches) {
			var numToRemove = numTotalBatches - numUsedBatches;
			var _g = 0;
			while(_g < numToRemove) {
				var i = _g++;
				this.mQuadBatches.pop().dispose();
			}
		}
	}
	,clear: function(rgb,alpha) {
		if(alpha == null) alpha = 0.0;
		if(rgb == null) rgb = 0;
		starling.core.RenderSupport.Clear(rgb,alpha);
	}
	,raiseDrawCount: function(value) {
		if(value == null) value = 1;
		this.mDrawCount = this.mDrawCount + value;
	}
	,get_drawCount: function() {
		return this.mDrawCount;
	}
	,__class__: starling.core.RenderSupport
	,__properties__: {get_drawCount:"get_drawCount",set_renderTarget:"set_renderTarget",get_renderTarget:"get_renderTarget",set_blendMode:"set_blendMode",get_blendMode:"get_blendMode",set_projectionMatrix3D:"set_projectionMatrix3D",get_projectionMatrix3D:"get_projectionMatrix3D",get_mvpMatrix3D:"get_mvpMatrix3D",set_projectionMatrix:"set_projectionMatrix",get_projectionMatrix:"get_projectionMatrix",get_modelViewMatrix:"get_modelViewMatrix",get_mvpMatrix:"get_mvpMatrix"}
};
starling.core.Starling = function(rootClass,stage,viewPort,stage3D,renderMode,profile) {
	if(profile == null) profile = "baselineConstrained";
	if(renderMode == null) renderMode = "auto";
	starling.events.EventDispatcher.call(this);
	if(stage == null) throw new openfl.errors.ArgumentError("Stage must not be null");
	if(viewPort == null) viewPort = new openfl.geom.Rectangle(0,0,stage.stageWidth,stage.stageHeight);
	if(stage3D == null) stage3D = stage.stage3Ds.data[0];
	starling.utils.SystemUtil.initialize();
	starling.core.Starling.sAll.push(this);
	this.makeCurrent();
	this.mRootClass = rootClass;
	this.mViewPort = viewPort;
	this.mPreviousViewPort = new openfl.geom.Rectangle();
	this.mStage3D = stage3D;
	this.mStage = new starling.display.Stage(viewPort.width,viewPort.height,stage.get_color());
	this.mNativeOverlay = new openfl.display.Sprite();
	this.mNativeStage = stage;
	this.mNativeStage.addChild(this.mNativeOverlay);
	this.mNativeStageContentScaleFactor = 1.0;
	this.mTouchProcessor = new starling.events.TouchProcessor(this.mStage);
	this.mJuggler = new starling.animation.Juggler();
	this.mAntiAliasing = 0;
	this.mSimulateMultitouch = false;
	this.mEnableErrorChecking = false;
	this.mSupportHighResolutions = false;
	this.mLastFrameTimestamp = openfl.Lib.getTimer() / 1000.0;
	this.mSupport = new starling.core.RenderSupport();
	var v = new haxe.ds.StringMap();
	starling.core.Starling.sContextData.set(stage3D,v);
	v;
	var this1 = starling.core.Starling.sContextData.h[stage3D.__id__];
	var v1 = new haxe.ds.StringMap();
	this1.set(starling.core.Starling.PROGRAM_DATA_NAME,v1);
	v1;
	stage.scaleMode = openfl.display.StageScaleMode.NO_SCALE;
	stage.align = openfl.display.StageAlign.TOP_LEFT;
	var _g = 0;
	var _g1 = this.get_touchEventTypes();
	while(_g < _g1.length) {
		var touchEventType = _g1[_g];
		++_g;
		stage.addEventListener(touchEventType,$bind(this,this.onTouch),false,0,true);
	}
	stage.addEventListener(openfl.events.Event.ENTER_FRAME,$bind(this,this.onEnterFrame),false,0,true);
	stage.addEventListener(openfl.events.KeyboardEvent.KEY_DOWN,$bind(this,this.onKey),false,0,true);
	stage.addEventListener(openfl.events.KeyboardEvent.KEY_UP,$bind(this,this.onKey),false,0,true);
	stage.addEventListener(openfl.events.Event.RESIZE,$bind(this,this.onResize),false,0,true);
	stage.addEventListener(openfl.events.Event.MOUSE_LEAVE,$bind(this,this.onMouseLeave),false,0,true);
	this.mStage3D.addEventListener(openfl.events.Event.CONTEXT3D_CREATE,$bind(this,this.onContextCreated),false,10,true);
	this.mStage3D.addEventListener(openfl.events.ErrorEvent.ERROR,$bind(this,this.onStage3DError),false,10,true);
	if(this.mStage3D.context3D != null && this.mStage3D.context3D.driverInfo != "Disposed") {
		if(profile == "auto" || (profile instanceof Array) && profile.__enum__ == null) throw new openfl.errors.ArgumentError("When sharing the context3D, " + "the actual profile has to be supplied"); else if(Object.prototype.hasOwnProperty.call(this.mStage3D.context3D,"profile")) this.mProfile = Reflect.getProperty(this.mStage3D.context3D,"profile"); else this.mProfile = profile;
		this.mShareContext = true;
		haxe.Timer.delay($bind(this,this.initialize),1);
	} else {
		if(!starling.utils.SystemUtil.get_supportsDepthAndStencil()) haxe.Log.trace("[Starling] Mask support requires 'depthAndStencil' to be enabled" + " in the application descriptor.",{ fileName : "Starling.hx", lineNumber : 370, className : "starling.core.Starling", methodName : "new"});
		this.mShareContext = false;
		this.requestContext3D(stage3D,renderMode,profile);
	}
};
$hxClasses["starling.core.Starling"] = starling.core.Starling;
starling.core.Starling.__name__ = ["starling","core","Starling"];
starling.core.Starling.__properties__ = {set_handleLostContext:"set_handleLostContext",get_handleLostContext:"get_handleLostContext",set_multitouchEnabled:"set_multitouchEnabled",get_multitouchEnabled:"get_multitouchEnabled",get_ContentScaleFactor:"get_ContentScaleFactor",get_Juggler:"get_Juggler",get_Context:"get_Context",get_all:"get_all",get_current:"get_current"}
starling.core.Starling.sCurrent = null;
starling.core.Starling.current = null;
starling.core.Starling.all = null;
starling.core.Starling.Context = null;
starling.core.Starling.Juggler = null;
starling.core.Starling.ContentScaleFactor = null;
starling.core.Starling.get_current = function() {
	return starling.core.Starling.sCurrent;
};
starling.core.Starling.get_all = function() {
	return starling.core.Starling.sAll;
};
starling.core.Starling.get_Context = function() {
	if(starling.core.Starling.sCurrent != null) return starling.core.Starling.sCurrent.get_context(); else return null;
};
starling.core.Starling.get_Juggler = function() {
	if(starling.core.Starling.sCurrent != null) return starling.core.Starling.sCurrent.get_juggler(); else return null;
};
starling.core.Starling.get_ContentScaleFactor = function() {
	if(starling.core.Starling.sCurrent != null) return starling.core.Starling.sCurrent.get_contentScaleFactor(); else return 1.0;
};
starling.core.Starling.get_multitouchEnabled = function() {
	return openfl.ui.Multitouch.get_inputMode() == openfl.ui.MultitouchInputMode.TOUCH_POINT;
};
starling.core.Starling.set_multitouchEnabled = function(value) {
	if(starling.core.Starling.sCurrent != null) throw new openfl.errors.IllegalOperationError("'multitouchEnabled' must be set before Starling instance is created"); else openfl.ui.Multitouch.set_inputMode(value?openfl.ui.MultitouchInputMode.TOUCH_POINT:openfl.ui.MultitouchInputMode.NONE);
	return value;
};
starling.core.Starling.get_handleLostContext = function() {
	return starling.core.Starling.sHandleLostContext;
};
starling.core.Starling.set_handleLostContext = function(value) {
	if(starling.core.Starling.sCurrent != null) throw new openfl.errors.IllegalOperationError("'handleLostContext' must be set before Starling instance is created"); else starling.core.Starling.sHandleLostContext = value;
	return value;
};
starling.core.Starling.__super__ = starling.events.EventDispatcher;
starling.core.Starling.prototype = $extend(starling.events.EventDispatcher.prototype,{
	mStage3D: null
	,mStage: null
	,mRootClass: null
	,mRoot: null
	,mJuggler: null
	,mSupport: null
	,mTouchProcessor: null
	,mAntiAliasing: null
	,mSimulateMultitouch: null
	,mEnableErrorChecking: null
	,mLastFrameTimestamp: null
	,mLeftMouseDown: null
	,mStatsDisplay: null
	,mShareContext: null
	,mProfile: null
	,mContext: null
	,mStarted: null
	,mRendering: null
	,mSupportHighResolutions: null
	,mViewPort: null
	,mPreviousViewPort: null
	,mClippedViewPort: null
	,mNativeStage: null
	,mNativeOverlay: null
	,mNativeStageContentScaleFactor: null
	,profiles: null
	,currentProfile: null
	,tempRenderMode: null
	,stageWidth: null
	,stageHeight: null
	,statsHAlign: null
	,statsVAlign: null
	,statsScale: null
	,touchEventTypes: null
	,programs: null
	,isStarted: null
	,juggler: null
	,context: null
	,contextData: null
	,backBufferWidth: null
	,backBufferHeight: null
	,backBufferPixelsPerPoint: null
	,contentScaleFactor: null
	,nativeOverlay: null
	,stage: null
	,stage3D: null
	,nativeStage: null
	,root: null
	,profile: null
	,contextValid: null
	,dispose: function() {
		this.stop(true);
		this.mNativeStage.removeEventListener(openfl.events.Event.ENTER_FRAME,$bind(this,this.onEnterFrame),false);
		this.mNativeStage.removeEventListener(openfl.events.KeyboardEvent.KEY_DOWN,$bind(this,this.onKey),false);
		this.mNativeStage.removeEventListener(openfl.events.KeyboardEvent.KEY_UP,$bind(this,this.onKey),false);
		this.mNativeStage.removeEventListener(openfl.events.Event.RESIZE,$bind(this,this.onResize),false);
		this.mNativeStage.removeEventListener(openfl.events.Event.MOUSE_LEAVE,$bind(this,this.onMouseLeave),false);
		this.mNativeStage.removeChild(this.mNativeOverlay);
		this.mStage3D.removeEventListener(openfl.events.Event.CONTEXT3D_CREATE,$bind(this,this.onContextCreated),false);
		this.mStage3D.removeEventListener(openfl.events.ErrorEvent.ERROR,$bind(this,this.onStage3DError),false);
		var _g = 0;
		var _g1 = this.get_touchEventTypes();
		while(_g < _g1.length) {
			var touchEventType = _g1[_g];
			++_g;
			this.mNativeStage.removeEventListener(touchEventType,$bind(this,this.onTouch),false);
		}
		if(this.mStage != null) this.mStage.dispose();
		if(this.mSupport != null) this.mSupport.dispose();
		if(this.mTouchProcessor != null) this.mTouchProcessor.dispose();
		if(starling.core.Starling.sCurrent == this) starling.core.Starling.sCurrent = null;
		if(this.mContext != null && this.mShareContext) starling.utils.StarlingUtils.execute(($_=this.mContext,$bind($_,$_.dispose)),[false]);
		var index = HxOverrides.indexOf(starling.core.Starling.sAll,this,0);
		if(index != -1) starling.core.Starling.sAll.splice(index,1);
	}
	,requestContext3D: function(stage3D,renderMode,profile) {
		this.tempRenderMode = renderMode;
		this.profiles = null;
		this.currentProfile = null;
		if(profile == "auto") this.profiles = ["standardExtended","standard","standardConstrained","baselineExtended","baseline","baselineConstrained"]; else if(typeof(profile) == "string") this.profiles = [js.Boot.__cast(profile , String)]; else if((profile instanceof Array) && profile.__enum__ == null) this.profiles = profile; else throw new openfl.errors.ArgumentError("Profile must be of type 'String' or 'Array'");
		this.mStage3D.addEventListener(openfl.events.Event.CONTEXT3D_CREATE,$bind(this,this.onCreated),false,100);
		this.mStage3D.addEventListener(openfl.events.ErrorEvent.ERROR,$bind(this,this.onError),false,100);
		this.requestNextProfile();
	}
	,requestNextProfile: function() {
		this.currentProfile = this.profiles.shift();
		try {
			starling.utils.StarlingUtils.execute(($_=this.mStage3D,$bind($_,$_.requestContext3D)),[this.tempRenderMode]);
		} catch( error ) {
			if( js.Boot.__instanceof(error,openfl.errors.Error) ) {
				if(this.profiles.length != 0) haxe.Timer.delay($bind(this,this.requestNextProfile),1); else throw error;
			} else throw(error);
		}
	}
	,onCreated: function(event) {
		var context = this.get_stage3D().context3D;
		context.setStencilActions(1032,514,7683);
		var renderModeStr = "";
		var auto = "auto";
		auto = openfl.display3D.Context3DRenderMode.AUTO[0];
		if(this.tempRenderMode == auto && this.profiles.length != 0 && context.driverInfo.indexOf("Software") != -1) this.onError(event); else {
			this.mProfile = this.currentProfile;
			this.onFinished();
		}
	}
	,onError: function(event) {
		if(this.profiles.length != 0) {
			event.stopImmediatePropagation();
			haxe.Timer.delay($bind(this,this.requestNextProfile),1);
		} else this.onFinished();
	}
	,onFinished: function() {
		this.mStage3D.removeEventListener(openfl.events.Event.CONTEXT3D_CREATE,$bind(this,this.onCreated));
		this.mStage3D.removeEventListener(openfl.events.ErrorEvent.ERROR,$bind(this,this.onError));
	}
	,initialize: function() {
		this.makeCurrent();
		this.initializeGraphicsAPI();
		haxe.Timer.delay($bind(this,this.initializeRoot),1);
		this.mTouchProcessor.set_simulateMultitouch(this.mSimulateMultitouch);
		this.mLastFrameTimestamp = openfl.Lib.getTimer() / 1000.0;
	}
	,initializeGraphicsAPI: function() {
		this.mContext = this.mStage3D.context3D;
		this.mContext.enableErrorChecking = this.mEnableErrorChecking;
		var this1 = this.get_contextData();
		var v = new haxe.ds.StringMap();
		this1.set(starling.core.Starling.PROGRAM_DATA_NAME,v);
		v;
		haxe.Log.trace("[Starling] Initialization complete.",{ fileName : "Starling.hx", lineNumber : 511, className : "starling.core.Starling", methodName : "initializeGraphicsAPI"});
		haxe.Log.trace("[Starling] Display Driver:",{ fileName : "Starling.hx", lineNumber : 512, className : "starling.core.Starling", methodName : "initializeGraphicsAPI", customParams : [this.mContext.driverInfo]});
		this.updateViewPort(true);
		this.dispatchEventWith(openfl.events.Event.CONTEXT3D_CREATE,false,this.mContext);
	}
	,initializeRoot: function() {
		if(this.mRoot == null && this.mRootClass != null) {
			this.mRoot = js.Boot.__cast(Type.createInstance(this.mRootClass,[]) , starling.display.DisplayObject);
			if(this.mRoot == null) throw new openfl.errors.Error("Invalid root class: " + Std.string(this.mRootClass));
			this.mStage.addChildAt(this.mRoot,0);
			this.dispatchEventWith(starling.events.Event.ROOT_CREATED,false,this.mRoot);
		}
	}
	,nextFrame: function() {
		var now = openfl.Lib.getTimer() / 1000.0;
		var passedTime = now - this.mLastFrameTimestamp;
		this.mLastFrameTimestamp = now;
		if(passedTime > 1.0) passedTime = 1.0;
		this.advanceTime(passedTime);
		this.render();
	}
	,advanceTime: function(passedTime) {
		if(!this.get_contextValid()) return;
		this.makeCurrent();
		this.mTouchProcessor.advanceTime(passedTime);
		this.mStage.advanceTime(passedTime);
		this.mJuggler.advanceTime(passedTime);
	}
	,render: function() {
		if(!this.get_contextValid()) return;
		this.makeCurrent();
		this.updateViewPort();
		this.mSupport.nextFrame();
		var scaleX = this.mViewPort.width / this.mStage.get_stageWidth();
		var scaleY = this.mViewPort.height / this.mStage.get_stageHeight();
		this.mContext.setDepthTest(false,519);
		this.mContext.setCulling(0);
		this.mContext.setStencilReferenceValue(0);
		this.mSupport.set_renderTarget(null);
		this.mSupport.setProjectionMatrix(this.mViewPort.x < 0?-this.mViewPort.x / scaleX:0.0,this.mViewPort.y < 0?-this.mViewPort.y / scaleY:0.0,this.mClippedViewPort.width / scaleX,this.mClippedViewPort.height / scaleY,this.mStage.get_stageWidth(),this.mStage.get_stageHeight(),this.mStage.get_cameraPosition());
		if(this.mShareContext == false) starling.core.RenderSupport.Clear(this.mStage.get_color(),1.0);
		this.mStage.render(this.mSupport,1.0);
		this.mSupport.finishQuadBatch();
		if(this.mStatsDisplay != null) this.mStatsDisplay.set_drawCount(this.mSupport.get_drawCount());
		if(this.mShareContext == false) this.mContext.present();
	}
	,updateViewPort: function(forceUpdate) {
		if(forceUpdate == null) forceUpdate = false;
		if(forceUpdate || this.mPreviousViewPort.width != this.mViewPort.width || this.mPreviousViewPort.height != this.mViewPort.height || this.mPreviousViewPort.x != this.mViewPort.x || this.mPreviousViewPort.y != this.mViewPort.y) {
			this.mPreviousViewPort.setTo(this.mViewPort.x,this.mViewPort.y,this.mViewPort.width,this.mViewPort.height);
			this.mClippedViewPort = this.mViewPort.intersection(new openfl.geom.Rectangle(0,0,this.mNativeStage.stageWidth,this.mNativeStage.stageHeight));
			if(!this.mShareContext) {
				if(this.mProfile == "baselineConstrained") this.configureBackBuffer(32,32,this.mAntiAliasing,true);
				this.mStage3D.x = this.mClippedViewPort.x;
				this.mStage3D.y = this.mClippedViewPort.y;
				this.configureBackBuffer(this.mClippedViewPort.width,this.mClippedViewPort.height,this.mAntiAliasing,true,this.mSupportHighResolutions);
				if(this.mSupportHighResolutions && Object.prototype.hasOwnProperty.call(this.mNativeStage,"contentsScaleFactor")) this.mNativeStageContentScaleFactor = Reflect.getProperty(this.mNativeStage,"contentsScaleFactor"); else this.mNativeStageContentScaleFactor = 1.0;
			}
		}
	}
	,configureBackBuffer: function(width,height,antiAlias,enableDepthAndStencil,wantsBestResolution) {
		if(wantsBestResolution == null) wantsBestResolution = false;
		if(enableDepthAndStencil && starling.utils.SystemUtil.get_supportsDepthAndStencil()) enableDepthAndStencil = true; else enableDepthAndStencil = false;
		var configureBackBuffer = ($_=this.mContext,$bind($_,$_.configureBackBuffer));
		var methodArgs = [width,height,antiAlias,enableDepthAndStencil];
		if(configureBackBuffer.length > 4) methodArgs.push(wantsBestResolution);
		configureBackBuffer.apply(this.mContext,methodArgs);
	}
	,updateNativeOverlay: function() {
		this.mNativeOverlay.set_x(this.mViewPort.x);
		this.mNativeOverlay.set_y(this.mViewPort.y);
		this.mNativeOverlay.set_scaleX(this.mViewPort.width / this.mStage.get_stageWidth());
		this.mNativeOverlay.set_scaleY(this.mViewPort.height / this.mStage.get_stageHeight());
	}
	,stopWithFatalError: function(message) {
		var background = new openfl.display.Shape();
		background.get_graphics().beginFill(0,0.8);
		background.get_graphics().drawRect(0,0,this.mStage.get_stageWidth(),this.mStage.get_stageHeight());
		background.get_graphics().endFill();
		var textField = new openfl.text.TextField();
		var textFormat = new openfl.text.TextFormat("Verdana",14,16777215);
		textFormat.align = openfl.text.TextFormatAlign.CENTER;
		textField.set_defaultTextFormat(textFormat);
		textField.set_wordWrap(true);
		textField.set_width(this.mStage.get_stageWidth() * 0.75);
		textField.set_autoSize(openfl.text.TextFieldAutoSize.CENTER);
		textField.set_text(message);
		textField.set_x((this.mStage.get_stageWidth() - textField.get_width()) / 2);
		textField.set_y((this.mStage.get_stageHeight() - textField.get_height()) / 2);
		textField.set_background(true);
		textField.set_backgroundColor(5570560);
		this.updateNativeOverlay();
		this.get_nativeOverlay().addChild(background);
		this.get_nativeOverlay().addChild(textField);
		this.stop(true);
		haxe.Log.trace("[Starling]",{ fileName : "Starling.hx", lineNumber : 691, className : "starling.core.Starling", methodName : "stopWithFatalError", customParams : [message]});
		this.dispatchEventWith(starling.events.Event.FATAL_ERROR,false,message);
	}
	,makeCurrent: function() {
		starling.core.Starling.sCurrent = this;
	}
	,start: function() {
		this.mStarted = this.mRendering = true;
		this.mLastFrameTimestamp = openfl.Lib.getTimer() / 1000.0;
	}
	,stop: function(suspendRendering) {
		if(suspendRendering == null) suspendRendering = false;
		this.mStarted = false;
		this.mRendering = !suspendRendering;
	}
	,onStage3DError: function(event) {
		if(event.errorID == 3702) {
			var mode;
			if(openfl.system.Capabilities.playerType == "Desktop") mode = "renderMode"; else mode = "wmode";
			this.stopWithFatalError("Context3D not available! Possible reasons: wrong " + mode + " or missing device support.");
		} else this.stopWithFatalError("Stage3D error: " + event.text);
	}
	,onContextCreated: function(event) {
		if(!starling.core.Starling.get_handleLostContext() && this.mContext != null) {
			event.stopImmediatePropagation();
			this.stopWithFatalError("The application lost the device context!");
			haxe.Log.trace("[Starling] Enable 'Starling.handleLostContext' to avoid this error.",{ fileName : "Starling.hx", lineNumber : 746, className : "starling.core.Starling", methodName : "onContextCreated"});
		} else this.initialize();
	}
	,onEnterFrame: function(event) {
		if(!this.mShareContext) {
			if(this.mStarted) this.nextFrame(); else if(this.mRendering) this.render();
		}
		this.updateNativeOverlay();
	}
	,onKey: function(event) {
		if(this.mStarted == true) return;
		var keyEvent = new starling.events.KeyboardEvent(event.type,event.charCode,event.keyCode,event.keyLocation,event.ctrlKey,event.altKey,event.shiftKey);
		this.makeCurrent();
		this.mStage.broadcastEvent(keyEvent);
	}
	,onResize: function(event) {
		this.stageWidth = event.target.stageWidth;
		this.stageHeight = event.target.stageHeight;
		if(this.get_contextValid()) this.dispatchResizeEvent(); else this.addEventListener(openfl.events.Event.CONTEXT3D_CREATE,$bind(this,this.dispatchResizeEvent));
	}
	,dispatchResizeEvent: function() {
		this.makeCurrent();
		this.removeEventListener(openfl.events.Event.CONTEXT3D_CREATE,$bind(this,this.dispatchResizeEvent));
		this.mStage.dispatchEvent(new starling.events.ResizeEvent(openfl.events.Event.RESIZE,this.stageWidth,this.stageHeight));
	}
	,onMouseLeave: function(event) {
		this.mTouchProcessor.enqueueMouseLeftStage();
	}
	,onTouch: function(event) {
		if(this.mStarted == false) return;
		var globalX;
		var globalY;
		var touchID;
		var phase = null;
		var pressure = 1.0;
		var width = 1.0;
		var height = 1.0;
		if(js.Boot.__instanceof(event,openfl.events.MouseEvent)) {
			var mouseEvent = event;
			globalX = mouseEvent.stageX;
			globalY = mouseEvent.stageY;
			touchID = 0;
			if(event.type == openfl.events.MouseEvent.MOUSE_DOWN) this.mLeftMouseDown = true; else if(event.type == openfl.events.MouseEvent.MOUSE_UP) this.mLeftMouseDown = false;
		} else {
			var touchEvent = event;
			haxe.Log.trace("FIX",{ fileName : "Starling.hx", lineNumber : 841, className : "starling.core.Starling", methodName : "onTouch"});
			if(touchEvent.isPrimaryTouchPoint) return; else {
				globalX = touchEvent.stageX;
				globalY = touchEvent.stageY;
				touchID = touchEvent.touchPointID;
				pressure = touchEvent.pressure;
				width = touchEvent.sizeX;
				height = touchEvent.sizeY;
			}
		}
		var _g = event.type;
		switch(_g) {
		case "touchBegin":
			phase = starling.events.TouchPhase.BEGAN;
			break;
		case "touchMove":
			phase = starling.events.TouchPhase.MOVED;
			break;
		case "touchEnd":
			phase = starling.events.TouchPhase.ENDED;
			break;
		case openfl.events.MouseEvent.MOUSE_DOWN:
			phase = starling.events.TouchPhase.BEGAN;
			break;
		case openfl.events.MouseEvent.MOUSE_UP:
			phase = starling.events.TouchPhase.ENDED;
			break;
		case openfl.events.MouseEvent.MOUSE_MOVE:
			if(this.mLeftMouseDown) phase = starling.events.TouchPhase.MOVED; else phase = starling.events.TouchPhase.HOVER;
			break;
		}
		globalX = this.mStage.get_stageWidth() * (globalX - this.mViewPort.x) / this.mViewPort.width;
		globalY = this.mStage.get_stageHeight() * (globalY - this.mViewPort.y) / this.mViewPort.height;
		if(phase != null) this.mTouchProcessor.enqueue(touchID,phase,globalX,globalY,pressure,width,height);
	}
	,get_touchEventTypes: function() {
		var types = new Array();
		if(starling.core.Starling.get_multitouchEnabled() == true) {
			types.push("touchBegin");
			types.push("touchMove");
			types.push("touchEnd");
		}
		types.push(openfl.events.MouseEvent.MOUSE_DOWN);
		types.push(openfl.events.MouseEvent.MOUSE_MOVE);
		types.push(openfl.events.MouseEvent.MOUSE_UP);
		return types;
	}
	,registerProgram: function(name,vertexShader,fragmentShader) {
		this.deleteProgram(name);
		var program = this.mContext.createProgram();
		program.upload(vertexShader,fragmentShader);
		var this1 = this.get_programs();
		this1.set(name,program);
		program;
		return program;
	}
	,registerProgramFromSource: function(name,vertexShader,fragmentShader) {
		this.deleteProgram(name);
		var program = starling.core.RenderSupport.assembleAgal(vertexShader,fragmentShader);
		var this1 = this.get_programs();
		this1.set(name,program);
		program;
		return program;
	}
	,deleteProgram: function(name) {
		var program = this.getProgram(name);
		if(program != null) {
			program.dispose();
			var this1 = this.get_programs();
			this1.remove(name);
		}
	}
	,getProgram: function(name) {
		var this1 = this.get_programs();
		return this1.get(name);
	}
	,hasProgram: function(name) {
		var this1 = this.get_programs();
		return this1.exists(name);
	}
	,get_programs: function() {
		var this1 = this.get_contextData();
		return this1.get(starling.core.Starling.PROGRAM_DATA_NAME);
	}
	,get_isStarted: function() {
		return this.mStarted;
	}
	,get_juggler: function() {
		return this.mJuggler;
	}
	,get_context: function() {
		return this.mContext;
	}
	,get_contextData: function() {
		return starling.core.Starling.sContextData.h[this.mStage3D.__id__];
	}
	,get_backBufferWidth: function() {
		return this.mClippedViewPort.width;
	}
	,get_backBufferHeight: function() {
		return this.mClippedViewPort.height;
	}
	,get_backBufferPixelsPerPoint: function() {
		return this.mNativeStageContentScaleFactor;
	}
	,get_simulateMultitouch: function() {
		return this.mSimulateMultitouch;
	}
	,set_simulateMultitouch: function(value) {
		this.mSimulateMultitouch = value;
		if(this.mContext != null) this.mTouchProcessor.set_simulateMultitouch(value);
		return value;
	}
	,get_enableErrorChecking: function() {
		return this.mEnableErrorChecking;
	}
	,set_enableErrorChecking: function(value) {
		this.mEnableErrorChecking = value;
		if(this.mContext != null) this.mContext.enableErrorChecking = value;
		return value;
	}
	,get_antiAliasing: function() {
		return this.mAntiAliasing;
	}
	,set_antiAliasing: function(value) {
		if(this.mAntiAliasing != value) {
			this.mAntiAliasing = value;
			if(this.get_contextValid()) this.updateViewPort(true);
		}
		return value;
	}
	,get_viewPort: function() {
		return this.mViewPort;
	}
	,set_viewPort: function(value) {
		this.mViewPort = value.clone();
		return value;
	}
	,get_contentScaleFactor: function() {
		return this.mViewPort.width * this.mNativeStageContentScaleFactor / this.mStage.get_stageWidth();
	}
	,get_nativeOverlay: function() {
		return this.mNativeOverlay;
	}
	,get_showStats: function() {
		return this.mStatsDisplay != null && this.mStatsDisplay.get_parent() != null;
	}
	,set_showStats: function(value) {
		if(value == this.get_showStats()) return value;
		if(value) {
			if(this.mStatsDisplay != null) this.mStage.addChild(this.mStatsDisplay); else this.showStatsAt();
		} else this.mStatsDisplay.removeFromParent();
		return value;
	}
	,showStatsAt: function(hAlign,vAlign,scale) {
		if(scale == null) scale = 1;
		if(hAlign == null) hAlign = starling.utils.HAlign.LEFT;
		if(vAlign == null) vAlign = starling.utils.VAlign.TOP;
		this.statsHAlign = hAlign;
		this.statsVAlign = vAlign;
		this.statsScale = scale;
		if(this.mContext == null) this.addEventListener(starling.events.Event.ROOT_CREATED,$bind(this,this.onRootCreated)); else {
			if(this.mStatsDisplay == null) {
				this.mStatsDisplay = new starling.core.StatsDisplay();
				this.mStatsDisplay.set_touchable(false);
				this.mStage.addChild(this.mStatsDisplay);
			}
			var stageWidth = this.mStage.get_stageWidth();
			var stageHeight = this.mStage.get_stageHeight();
			this.mStatsDisplay.set_scaleX(this.mStatsDisplay.set_scaleY(scale));
			if(hAlign == starling.utils.HAlign.LEFT) this.mStatsDisplay.set_x(0); else if(hAlign == starling.utils.HAlign.RIGHT) this.mStatsDisplay.set_x(stageWidth - this.mStatsDisplay.get_width()); else this.mStatsDisplay.set_x((stageWidth - this.mStatsDisplay.get_width()) / 2);
			if(vAlign == starling.utils.VAlign.TOP) this.mStatsDisplay.set_y(0); else if(vAlign == starling.utils.VAlign.BOTTOM) this.mStatsDisplay.set_y(stageHeight - this.mStatsDisplay.get_height()); else this.mStatsDisplay.set_y((stageHeight - this.mStatsDisplay.get_height()) / 2);
		}
	}
	,onRootCreated: function() {
		this.showStatsAt(this.statsHAlign,this.statsVAlign,this.statsScale);
		this.removeEventListener(starling.events.Event.ROOT_CREATED,$bind(this,this.onRootCreated));
	}
	,get_stage: function() {
		return this.mStage;
	}
	,get_stage3D: function() {
		return this.mStage3D;
	}
	,get_nativeStage: function() {
		return this.mNativeStage;
	}
	,get_root: function() {
		return this.mRoot;
	}
	,get_rootClass: function() {
		return this.mRootClass;
	}
	,set_rootClass: function(value) {
		if(this.mRootClass != null && this.mRoot != null) throw new openfl.errors.Error("Root class may not change after root has been instantiated"); else if(this.mRootClass == null) {
			this.mRootClass = value;
			if(this.mContext != null) haxe.Timer.delay($bind(this,this.initializeRoot),1);
		}
		return value;
	}
	,get_shareContext: function() {
		return this.mShareContext;
	}
	,set_shareContext: function(value) {
		this.mShareContext = value;
		return value;
	}
	,get_profile: function() {
		return this.mProfile;
	}
	,get_supportHighResolutions: function() {
		return this.mSupportHighResolutions;
	}
	,set_supportHighResolutions: function(value) {
		if(this.mSupportHighResolutions != value) {
			this.mSupportHighResolutions = value;
			if(this.get_contextValid()) this.updateViewPort(true);
		}
		return value;
	}
	,get_touchProcessor: function() {
		return this.mTouchProcessor;
	}
	,set_touchProcessor: function(value) {
		if(value != this.mTouchProcessor) {
			this.mTouchProcessor.dispose();
			this.mTouchProcessor = value;
		}
		return value;
	}
	,get_contextValid: function() {
		return this.mContext != null && this.mContext.driverInfo != "Disposed";
	}
	,__class__: starling.core.Starling
	,__properties__: {get_contextValid:"get_contextValid",set_touchProcessor:"set_touchProcessor",get_touchProcessor:"get_touchProcessor",set_supportHighResolutions:"set_supportHighResolutions",get_supportHighResolutions:"get_supportHighResolutions",get_profile:"get_profile",set_shareContext:"set_shareContext",get_shareContext:"get_shareContext",set_rootClass:"set_rootClass",get_rootClass:"get_rootClass",get_root:"get_root",get_nativeStage:"get_nativeStage",get_stage3D:"get_stage3D",get_stage:"get_stage",set_showStats:"set_showStats",get_showStats:"get_showStats",get_nativeOverlay:"get_nativeOverlay",get_contentScaleFactor:"get_contentScaleFactor",set_viewPort:"set_viewPort",get_viewPort:"get_viewPort",set_antiAliasing:"set_antiAliasing",get_antiAliasing:"get_antiAliasing",set_enableErrorChecking:"set_enableErrorChecking",get_enableErrorChecking:"get_enableErrorChecking",set_simulateMultitouch:"set_simulateMultitouch",get_simulateMultitouch:"get_simulateMultitouch",get_backBufferPixelsPerPoint:"get_backBufferPixelsPerPoint",get_backBufferHeight:"get_backBufferHeight",get_backBufferWidth:"get_backBufferWidth",get_contextData:"get_contextData",get_context:"get_context",get_juggler:"get_juggler",get_isStarted:"get_isStarted",get_programs:"get_programs",get_touchEventTypes:"get_touchEventTypes"}
});
starling.core.StatsDisplay = function() {
	this.mDrawCount = 0;
	this.mMemory = 0;
	this.mFps = 0;
	this.mTotalTime = 0;
	this.mFrameCount = 0;
	this.UPDATE_INTERVAL = 0.5;
	starling.display.Sprite.call(this);
	this.mBackground = new starling.display.Quad(50,25,0);
	this.mTextField = new starling.text.TextField(48,25,"",starling.text.BitmapFont.MINI,starling.text.BitmapFont.NATIVE_SIZE,16777215);
	this.mTextField.set_x(2);
	this.mTextField.set_hAlign(starling.utils.HAlign.LEFT);
	this.mTextField.set_vAlign(starling.utils.VAlign.TOP);
	this.addChild(this.mBackground);
	this.addChild(this.mTextField);
	this.set_blendMode(starling.display.BlendMode.NONE);
	this.addEventListener(starling.events.Event.ADDED_TO_STAGE,$bind(this,this.onAddedToStage));
	this.addEventListener(starling.events.Event.REMOVED_FROM_STAGE,$bind(this,this.onRemovedFromStage));
};
$hxClasses["starling.core.StatsDisplay"] = starling.core.StatsDisplay;
starling.core.StatsDisplay.__name__ = ["starling","core","StatsDisplay"];
starling.core.StatsDisplay.__super__ = starling.display.Sprite;
starling.core.StatsDisplay.prototype = $extend(starling.display.Sprite.prototype,{
	UPDATE_INTERVAL: null
	,mBackground: null
	,mTextField: null
	,mFrameCount: null
	,mTotalTime: null
	,mFps: null
	,mMemory: null
	,mDrawCount: null
	,onAddedToStage: function() {
		this.addEventListener(starling.events.Event.ENTER_FRAME,$bind(this,this.onEnterFrame));
		this.mTotalTime = this.mFrameCount = 0;
		this.update();
	}
	,onRemovedFromStage: function() {
		this.removeEventListener(starling.events.Event.ENTER_FRAME,$bind(this,this.onEnterFrame));
	}
	,onEnterFrame: function(event) {
		this.mTotalTime += event.get_passedTime();
		this.mFrameCount++;
		if(this.mTotalTime > this.UPDATE_INTERVAL) {
			this.update();
			this.mFrameCount = this.mTotalTime = 0;
		}
	}
	,update: function() {
		if(this.mTotalTime > 0) this.mFps = this.mFrameCount / this.mTotalTime; else this.mFps = 0;
		this.mMemory = openfl.system.System.get_totalMemory() * 0.000000954;
		this.mTextField.set_text("FPS: " + Math.floor(this.mFps) + "\nMEM: " + Math.floor(this.mMemory) + "\nDRW: " + (this.mTotalTime > 0?this.mDrawCount - 2:this.mDrawCount));
	}
	,render: function(support,parentAlpha) {
		support.finishQuadBatch();
		starling.display.Sprite.prototype.render.call(this,support,parentAlpha);
	}
	,get_drawCount: function() {
		return this.mDrawCount;
	}
	,set_drawCount: function(value) {
		this.mDrawCount = value;
		return value;
	}
	,get_fps: function() {
		return this.mFps;
	}
	,set_fps: function(value) {
		this.mFps = value;
		return value;
	}
	,get_memory: function() {
		return this.mMemory;
	}
	,set_memory: function(value) {
		this.mMemory = value;
		return value;
	}
	,__class__: starling.core.StatsDisplay
	,__properties__: $extend(starling.display.Sprite.prototype.__properties__,{set_memory:"set_memory",get_memory:"get_memory",set_fps:"set_fps",get_fps:"get_fps",set_drawCount:"set_drawCount",get_drawCount:"get_drawCount"})
});
starling.display.BlendMode = function() {
	throw new starling.errors.AbstractClassError();
};
$hxClasses["starling.display.BlendMode"] = starling.display.BlendMode;
starling.display.BlendMode.__name__ = ["starling","display","BlendMode"];
starling.display.BlendMode.__properties__ = {get_sBlendFactors:"get_sBlendFactors"}
starling.display.BlendMode.sBlendFactors = null;
starling.display.BlendMode.get_sBlendFactors = function() {
	var vec = new Array();
	vec.push({ none : [1,0], normal : [770,771], add : [770,772], multiply : [774,771], screen : [770,1], erase : [0,771], below : [773,772]});
	vec.push({ none : [1,0], normal : [1,771], add : [1,1], multiply : [774,771], screen : [1,769], erase : [0,771], below : [773,772]});
	return vec;
};
starling.display.BlendMode.getBlendFactors = function(mode,premultipliedAlpha) {
	if(premultipliedAlpha == null) premultipliedAlpha = true;
	var vec = starling.display.BlendMode.get_sBlendFactors();
	var modeIndex = 0;
	if(premultipliedAlpha == true) modeIndex = 1;
	haxe.Log.trace("modeIndex = " + modeIndex,{ fileName : "BlendMode.hx", lineNumber : 109, className : "starling.display.BlendMode", methodName : "getBlendFactors"});
	var modes = vec[modeIndex];
	var returnVal = Reflect.getProperty(modes,mode);
	if(returnVal == null) throw new openfl.errors.ArgumentError("Invalid blend mode");
	return returnVal;
};
starling.display.BlendMode.register = function(name,sourceFactor,destFactor,premultipliedAlpha) {
	if(premultipliedAlpha == null) premultipliedAlpha = true;
	var vec = starling.display.BlendMode.get_sBlendFactors();
	var modeIndex = premultipliedAlpha;
	var modes = vec[modeIndex];
	Reflect.setProperty(modes,name,[sourceFactor,destFactor]);
	haxe.Log.trace("CHECK",{ fileName : "BlendMode.hx", lineNumber : 137, className : "starling.display.BlendMode", methodName : "register"});
	var otherModes = vec[js.Boot.__cast(!premultipliedAlpha , Int)];
	var returnVal = Reflect.getProperty(otherModes,name);
	if(returnVal == null) Reflect.setProperty(otherModes,name,[sourceFactor,destFactor]);
};
starling.display.BlendMode.prototype = {
	__class__: starling.display.BlendMode
};
starling.display.Button = function(upState,text,downState,overState,disabledState) {
	if(text == null) text = "";
	starling.display.DisplayObjectContainer.call(this);
	if(upState == null) throw new openfl.errors.ArgumentError("Texture 'upState' cannot be null");
	this.mUpState = upState;
	this.mDownState = downState;
	this.mOverState = overState;
	this.mDisabledState = disabledState;
	this.mState = starling.display.ButtonState.UP;
	this.mBody = new starling.display.Image(upState);
	if(downState != null) this.mScaleWhenDown = 1.0; else this.mScaleWhenDown = 0.9;
	this.mScaleWhenOver = 1.0;
	if(disabledState != null) this.mAlphaWhenDisabled = 1.0; else this.mAlphaWhenDisabled = 0.5;
	this.mEnabled = true;
	this.mUseHandCursor = true;
	this.mTextBounds = new openfl.geom.Rectangle(0,0,this.mBody.get_width(),this.mBody.get_height());
	this.mContents = new starling.display.Sprite();
	this.mContents.addChild(this.mBody);
	this.addChild(this.mContents);
	this.addEventListener(starling.events.TouchEvent.TOUCH,$bind(this,this.onButtonTouch));
	this.set_touchGroup(true);
	this.set_text(text);
};
$hxClasses["starling.display.Button"] = starling.display.Button;
starling.display.Button.__name__ = ["starling","display","Button"];
starling.display.Button.__super__ = starling.display.DisplayObjectContainer;
starling.display.Button.prototype = $extend(starling.display.DisplayObjectContainer.prototype,{
	mUpState: null
	,mDownState: null
	,mOverState: null
	,mDisabledState: null
	,mContents: null
	,mBody: null
	,mTextField: null
	,mTextBounds: null
	,mOverlay: null
	,mScaleWhenDown: null
	,mScaleWhenOver: null
	,mAlphaWhenDisabled: null
	,mEnabled: null
	,mState: null
	,mTriggerBounds: null
	,overlay: null
	,dispose: function() {
		if(this.mTextField != null) this.mTextField.dispose();
		starling.display.DisplayObjectContainer.prototype.dispose.call(this);
	}
	,readjustSize: function(resetTextBounds) {
		if(resetTextBounds == null) resetTextBounds = true;
		this.mBody.readjustSize();
		if(resetTextBounds && this.mTextField != null) this.set_textBounds(new openfl.geom.Rectangle(0,0,this.mBody.get_width(),this.mBody.get_height()));
	}
	,createTextField: function() {
		if(this.mTextField == null) {
			this.mTextField = new starling.text.TextField(this.mTextBounds.width,this.mTextBounds.height,"");
			this.mTextField.set_vAlign(starling.utils.VAlign.CENTER);
			this.mTextField.set_hAlign(starling.utils.HAlign.CENTER);
			this.mTextField.set_touchable(false);
			this.mTextField.set_autoScale(true);
			this.mTextField.set_batchable(true);
		}
		this.mTextField.set_width(this.mTextBounds.width);
		this.mTextField.set_height(this.mTextBounds.height);
		this.mTextField.set_x(this.mTextBounds.x);
		this.mTextField.set_y(this.mTextBounds.y);
	}
	,onButtonTouch: function(event) {
		var cursor;
		if(this.mUseHandCursor && this.mEnabled && event.interactsWith(this)) cursor = "pointer"; else cursor = "auto";
		window.document.getElementById("openfl-content").style.cursor = cursor;
		var touch = event.getTouch(this);
		var isWithinBounds;
		if(!this.mEnabled) return; else if(touch == null) this.set_state(starling.display.ButtonState.UP); else if(touch.get_phase() == starling.events.TouchPhase.HOVER) this.set_state(starling.display.ButtonState.OVER); else if(touch.get_phase() == starling.events.TouchPhase.BEGAN && this.mState != starling.display.ButtonState.DOWN) {
			this.mTriggerBounds = this.getBounds(this.get_stage(),this.mTriggerBounds);
			this.mTriggerBounds.inflate(starling.display.Button.MAX_DRAG_DIST,starling.display.Button.MAX_DRAG_DIST);
			this.set_state(starling.display.ButtonState.DOWN);
		} else if(touch.get_phase() == starling.events.TouchPhase.MOVED) {
			isWithinBounds = this.mTriggerBounds.contains(touch.get_globalX(),touch.get_globalY());
			if(this.mState == starling.display.ButtonState.DOWN && !isWithinBounds) this.set_state(starling.display.ButtonState.UP); else if(this.mState == starling.display.ButtonState.UP && isWithinBounds) this.set_state(starling.display.ButtonState.DOWN);
		} else if(touch.get_phase() == starling.events.TouchPhase.ENDED && this.mState == starling.display.ButtonState.DOWN) {
			this.set_state(starling.display.ButtonState.UP);
			this.dispatchEventWith(starling.events.Event.TRIGGERED,true);
		}
	}
	,get_state: function() {
		return this.mState;
	}
	,set_state: function(value) {
		this.mState = value;
		this.mContents.set_scaleX(this.mContents.set_scaleY(1.0));
		var _g = this.mState;
		switch(_g) {
		case starling.display.ButtonState.DOWN:
			this.setStateTexture(this.mDownState);
			this.mContents.set_scaleX(this.mContents.set_scaleY(this.mScaleWhenDown));
			this.mContents.set_x((1.0 - this.mScaleWhenDown) / 2.0 * this.mBody.get_width());
			this.mContents.set_y((1.0 - this.mScaleWhenDown) / 2.0 * this.mBody.get_height());
			break;
		case starling.display.ButtonState.UP:
			this.setStateTexture(this.mUpState);
			this.mContents.set_x(this.mContents.set_y(0));
			break;
		case starling.display.ButtonState.OVER:
			this.setStateTexture(this.mOverState);
			this.mContents.set_scaleX(this.mContents.set_scaleY(this.mScaleWhenOver));
			this.mContents.set_x((1.0 - this.mScaleWhenOver) / 2.0 * this.mBody.get_width());
			this.mContents.set_y((1.0 - this.mScaleWhenOver) / 2.0 * this.mBody.get_height());
			break;
		case starling.display.ButtonState.DISABLED:
			this.setStateTexture(this.mDisabledState);
			this.mContents.set_x(this.mContents.set_y(0));
			break;
		default:
			throw new openfl.errors.ArgumentError("Invalid button state: " + this.mState);
		}
		return value;
	}
	,setStateTexture: function(texture) {
		this.mBody.set_texture(texture != null?texture:this.mUpState);
	}
	,get_scaleWhenDown: function() {
		return this.mScaleWhenDown;
	}
	,set_scaleWhenDown: function(value) {
		this.mScaleWhenDown = value;
		return value;
	}
	,get_scaleWhenOver: function() {
		return this.mScaleWhenOver;
	}
	,set_scaleWhenOver: function(value) {
		this.mScaleWhenOver = value;
		return value;
	}
	,get_alphaWhenDisabled: function() {
		return this.mAlphaWhenDisabled;
	}
	,set_alphaWhenDisabled: function(value) {
		this.mAlphaWhenDisabled = value;
		return value;
	}
	,get_enabled: function() {
		return this.mEnabled;
	}
	,set_enabled: function(value) {
		if(this.mEnabled != value) {
			this.mEnabled = value;
			this.mContents.set_alpha(value?1.0:this.mAlphaWhenDisabled);
			this.set_state(value?starling.display.ButtonState.UP:starling.display.ButtonState.DISABLED);
		}
		return value;
	}
	,get_text: function() {
		if(this.mTextField != null) return this.mTextField.get_text(); else return "";
	}
	,set_text: function(value) {
		if(value.length == 0) {
			if(this.mTextField != null) {
				this.mTextField.set_text(value);
				this.mTextField.removeFromParent();
			}
		} else {
			this.createTextField();
			this.mTextField.set_text(value);
			if(this.mTextField.get_parent() == null) this.mContents.addChild(this.mTextField);
		}
		return value;
	}
	,get_fontName: function() {
		if(this.mTextField != null) return this.mTextField.get_fontName(); else return "Verdana";
	}
	,set_fontName: function(value) {
		this.createTextField();
		this.mTextField.set_fontName(value);
		return value;
	}
	,get_fontSize: function() {
		if(this.mTextField != null) return this.mTextField.get_fontSize(); else return 12;
	}
	,set_fontSize: function(value) {
		this.createTextField();
		this.mTextField.set_fontSize(value);
		return value;
	}
	,get_fontColor: function() {
		if(this.mTextField != null) return this.mTextField.get_color(); else return 0;
	}
	,set_fontColor: function(value) {
		this.createTextField();
		this.mTextField.set_color(value);
		return value;
	}
	,get_fontBold: function() {
		if(this.mTextField != null) return this.mTextField.get_bold(); else return false;
	}
	,set_fontBold: function(value) {
		this.createTextField();
		this.mTextField.set_bold(value);
		return value;
	}
	,get_upState: function() {
		return this.mUpState;
	}
	,set_upState: function(value) {
		if(value == null) throw new openfl.errors.ArgumentError("Texture 'upState' cannot be null");
		if(this.mUpState != value) {
			this.mUpState = value;
			if(this.mState == starling.display.ButtonState.UP || this.mState == starling.display.ButtonState.DISABLED && this.mDisabledState == null || this.mState == starling.display.ButtonState.DOWN && this.mDownState == null || this.mState == starling.display.ButtonState.OVER && this.mOverState == null) this.setStateTexture(value);
		}
		return value;
	}
	,get_downState: function() {
		return this.mDownState;
	}
	,set_downState: function(value) {
		if(this.mDownState != value) {
			this.mDownState = value;
			if(this.mState == starling.display.ButtonState.DOWN) this.setStateTexture(value);
		}
		return value;
	}
	,get_overState: function() {
		return this.mOverState;
	}
	,set_overState: function(value) {
		if(this.mOverState != value) {
			this.mOverState = value;
			if(this.mState == starling.display.ButtonState.OVER) this.setStateTexture(value);
		}
		return value;
	}
	,get_disabledState: function() {
		return this.mDisabledState;
	}
	,set_disabledState: function(value) {
		if(this.mDisabledState != value) {
			this.mDisabledState = value;
			if(this.mState == starling.display.ButtonState.DISABLED) this.setStateTexture(value);
		}
		return value;
	}
	,get_textVAlign: function() {
		if(this.mTextField != null) return this.mTextField.get_vAlign(); else return starling.utils.VAlign.CENTER;
	}
	,set_textVAlign: function(value) {
		this.createTextField();
		this.mTextField.set_vAlign(value);
		return value;
	}
	,get_textHAlign: function() {
		if(this.mTextField != null) return this.mTextField.get_hAlign(); else return starling.utils.HAlign.CENTER;
	}
	,set_textHAlign: function(value) {
		this.createTextField();
		this.mTextField.set_hAlign(value);
		return value;
	}
	,get_textBounds: function() {
		return this.mTextBounds.clone();
	}
	,set_textBounds: function(value) {
		this.mTextBounds = value.clone();
		this.createTextField();
		return value;
	}
	,get_color: function() {
		return this.mBody.get_color();
	}
	,set_color: function(value) {
		this.mBody.set_color(value);
		return value;
	}
	,get_overlay: function() {
		if(this.mOverlay == null) this.mOverlay = new starling.display.Sprite();
		this.mContents.addChild(this.mOverlay);
		return this.mOverlay;
	}
	,get_useHandCursor: function() {
		return this.mUseHandCursor;
	}
	,set_useHandCursor: function(value) {
		this.mUseHandCursor = value;
		return value;
	}
	,__class__: starling.display.Button
	,__properties__: $extend(starling.display.DisplayObjectContainer.prototype.__properties__,{get_overlay:"get_overlay",set_color:"set_color",get_color:"get_color",set_textBounds:"set_textBounds",get_textBounds:"get_textBounds",set_textHAlign:"set_textHAlign",get_textHAlign:"get_textHAlign",set_textVAlign:"set_textVAlign",get_textVAlign:"get_textVAlign",set_disabledState:"set_disabledState",get_disabledState:"get_disabledState",set_overState:"set_overState",get_overState:"get_overState",set_downState:"set_downState",get_downState:"get_downState",set_upState:"set_upState",get_upState:"get_upState",set_fontBold:"set_fontBold",get_fontBold:"get_fontBold",set_fontColor:"set_fontColor",get_fontColor:"get_fontColor",set_fontSize:"set_fontSize",get_fontSize:"get_fontSize",set_fontName:"set_fontName",get_fontName:"get_fontName",set_text:"set_text",get_text:"get_text",set_enabled:"set_enabled",get_enabled:"get_enabled",set_alphaWhenDisabled:"set_alphaWhenDisabled",get_alphaWhenDisabled:"get_alphaWhenDisabled",set_scaleWhenOver:"set_scaleWhenOver",get_scaleWhenOver:"get_scaleWhenOver",set_scaleWhenDown:"set_scaleWhenDown",get_scaleWhenDown:"get_scaleWhenDown",set_state:"set_state",get_state:"get_state"})
});
starling.display.ButtonState = function() {
	throw new starling.errors.AbstractClassError();
};
$hxClasses["starling.display.ButtonState"] = starling.display.ButtonState;
starling.display.ButtonState.__name__ = ["starling","display","ButtonState"];
starling.display.ButtonState.prototype = {
	__class__: starling.display.ButtonState
};
starling.display.Canvas = function() {
	starling.display.DisplayObject.call(this);
};
$hxClasses["starling.display.Canvas"] = starling.display.Canvas;
starling.display.Canvas.__name__ = ["starling","display","Canvas"];
starling.display.Canvas.__properties__ = {set_sRenderAlpha:"set_sRenderAlpha",get_sRenderAlpha:"get_sRenderAlpha"}
starling.display.Canvas._sRenderAlpha = null;
starling.display.Canvas.registerPrograms = function() {
	var target = starling.core.Starling.get_current();
	if(target.hasProgram(starling.display.Canvas.PROGRAM_NAME)) return;
	var vertexShader = "m44 op, va0, vc0 \n" + "mul v0, va1, vc4 \n";
	var fragmentShader = "mov oc, v0";
	target.registerProgramFromSource(starling.display.Canvas.PROGRAM_NAME,vertexShader,fragmentShader);
};
starling.display.Canvas.get_sRenderAlpha = function() {
	if(starling.display.Canvas._sRenderAlpha == null) {
		var this1;
		this1 = new openfl.VectorData();
		var this2;
		this2 = new Array(0);
		this1.data = this2;
		this1.length = 0;
		this1.fixed = false;
		starling.display.Canvas._sRenderAlpha = this1;
		var this3 = starling.display.Canvas._sRenderAlpha;
		if(!this3.fixed) {
			this3.length++;
			if(this3.data.length < this3.length) {
				var data;
				var this4;
				this4 = new Array(this3.data.length + 10);
				data = this4;
				haxe.ds._Vector.Vector_Impl_.blit(this3.data,0,data,0,this3.data.length);
				this3.data = data;
			}
			this3.data[this3.length - 1] = 1;
		}
		this3.length;
		var this5 = starling.display.Canvas._sRenderAlpha;
		if(!this5.fixed) {
			this5.length++;
			if(this5.data.length < this5.length) {
				var data1;
				var this6;
				this6 = new Array(this5.data.length + 10);
				data1 = this6;
				haxe.ds._Vector.Vector_Impl_.blit(this5.data,0,data1,0,this5.data.length);
				this5.data = data1;
			}
			this5.data[this5.length - 1] = 1;
		}
		this5.length;
		var this7 = starling.display.Canvas._sRenderAlpha;
		if(!this7.fixed) {
			this7.length++;
			if(this7.data.length < this7.length) {
				var data2;
				var this8;
				this8 = new Array(this7.data.length + 10);
				data2 = this8;
				haxe.ds._Vector.Vector_Impl_.blit(this7.data,0,data2,0,this7.data.length);
				this7.data = data2;
			}
			this7.data[this7.length - 1] = 1;
		}
		this7.length;
		var this9 = starling.display.Canvas._sRenderAlpha;
		if(!this9.fixed) {
			this9.length++;
			if(this9.data.length < this9.length) {
				var data3;
				var this10;
				this10 = new Array(this9.data.length + 10);
				data3 = this10;
				haxe.ds._Vector.Vector_Impl_.blit(this9.data,0,data3,0,this9.data.length);
				this9.data = data3;
			}
			this9.data[this9.length - 1] = 1;
		}
		this9.length;
	}
	return starling.display.Canvas._sRenderAlpha;
};
starling.display.Canvas.set_sRenderAlpha = function(value) {
	return starling.display.Canvas._sRenderAlpha = value;
};
starling.display.Canvas.__super__ = starling.display.DisplayObject;
starling.display.Canvas.prototype = $extend(starling.display.DisplayObject.prototype,{
	mSyncRequired: null
	,mPolygons: null
	,mVertexData: null
	,mVertexBuffer: null
	,mIndexData: null
	,mIndexBuffer: null
	,mFillColor: null
	,mFillAlpha: null
	,Canvas: function() {
		this.mPolygons = new Array();
		this.mVertexData = new starling.utils.VertexData(0);
		var this1;
		this1 = new openfl.VectorData();
		var this2;
		this2 = new Array(0);
		this1.data = this2;
		this1.length = 0;
		this1.fixed = false;
		this.mIndexData = this1;
		this.mSyncRequired = false;
		this.mFillColor = 16777215;
		this.mFillAlpha = 1.0;
		starling.display.Canvas.registerPrograms();
		starling.core.Starling.get_current().addEventListener(starling.events.Event.CONTEXT3D_CREATE,$bind(this,this.onContextCreated));
	}
	,onContextCreated: function(event) {
		starling.display.Canvas.registerPrograms();
		this.syncBuffers();
	}
	,dispose: function() {
		this.destroyBuffers();
		starling.display.DisplayObject.prototype.dispose.call(this);
	}
	,drawCircle: function(x,y,radius) {
		this.appendPolygon(starling.geom.Polygon.createCircle(x,y,radius));
	}
	,drawEllipse: function(x,y,width,height) {
		var radiusX = width / 2.0;
		var radiusY = height / 2.0;
		this.appendPolygon(starling.geom.Polygon.createEllipse(x + radiusX,y + radiusY,radiusX,radiusY));
	}
	,drawRectangle: function(x,y,width,height) {
		this.appendPolygon(starling.geom.Polygon.createRectangle(x,y,width,height));
	}
	,drawPolygon: function(polygon) {
		this.appendPolygon(polygon);
	}
	,beginFill: function(color,alpha) {
		if(alpha == null) alpha = 1.0;
		if(color == null) color = 16777215;
		this.mFillColor = color;
		this.mFillAlpha = alpha;
	}
	,endFill: function() {
		this.mFillColor = 16777215;
		this.mFillAlpha = 1.0;
	}
	,clear: function() {
		this.mVertexData.set_numVertices(0);
		var this1 = this.mIndexData;
		if(!this1.fixed) {
			if(0 > this1.length) {
				var data;
				var this2;
				this2 = new Array(0);
				data = this2;
				haxe.ds._Vector.Vector_Impl_.blit(this1.data,0,data,0,Std["int"](Math.min(this1.data.length,0)));
				this1.data = data;
			}
			this1.length = 0;
		}
		0;
	}
	,render: function(support,parentAlpha) {
		if(this.mIndexData.length == 0) return;
		if(this.mSyncRequired) this.syncBuffers();
		support.finishQuadBatch();
		support.raiseDrawCount();
		var this1 = starling.display.Canvas.get_sRenderAlpha();
		var value;
		var this2 = starling.display.Canvas.get_sRenderAlpha();
		var value1;
		var this3 = starling.display.Canvas.get_sRenderAlpha();
		if(!this3.fixed) {
			if(2 >= this3.length) this3.length = 3;
			if(this3.data.length < this3.length) {
				var data;
				var this4;
				this4 = new Array(this3.data.length + 10);
				data = this4;
				haxe.ds._Vector.Vector_Impl_.blit(this3.data,0,data,0,this3.data.length);
				this3.data = data;
			}
		}
		value1 = this3.data[2] = 1.0;
		if(!this2.fixed) {
			if(1 >= this2.length) this2.length = 2;
			if(this2.data.length < this2.length) {
				var data1;
				var this5;
				this5 = new Array(this2.data.length + 10);
				data1 = this5;
				haxe.ds._Vector.Vector_Impl_.blit(this2.data,0,data1,0,this2.data.length);
				this2.data = data1;
			}
		}
		value = this2.data[1] = value1;
		if(!this1.fixed) {
			if(0 >= this1.length) this1.length = 1;
			if(this1.data.length < this1.length) {
				var data2;
				var this6;
				this6 = new Array(this1.data.length + 10);
				data2 = this6;
				haxe.ds._Vector.Vector_Impl_.blit(this1.data,0,data2,0,this1.data.length);
				this1.data = data2;
			}
		}
		this1.data[0] = value;
		var this7 = starling.display.Canvas.get_sRenderAlpha();
		var value2 = parentAlpha * this.get_alpha();
		if(!this7.fixed) {
			if(3 >= this7.length) this7.length = 4;
			if(this7.data.length < this7.length) {
				var data3;
				var this8;
				this8 = new Array(this7.data.length + 10);
				data3 = this8;
				haxe.ds._Vector.Vector_Impl_.blit(this7.data,0,data3,0,this7.data.length);
				this7.data = data3;
			}
		}
		this7.data[3] = value2;
		var context = starling.core.Starling.get_Context();
		if(context == null) throw new starling.errors.MissingContextError();
		support.applyBlendMode(false);
		context.setProgram(starling.core.Starling.get_current().getProgram(starling.display.Canvas.PROGRAM_NAME));
		context.setVertexBufferAt(0,this.mVertexBuffer,0,openfl.display3D.Context3DVertexBufferFormat.FLOAT_2);
		context.setVertexBufferAt(1,this.mVertexBuffer,starling.utils.VertexData.COLOR_OFFSET,openfl.display3D.Context3DVertexBufferFormat.FLOAT_4);
		context.setProgramConstantsFromMatrix(openfl.display3D.Context3DProgramType.VERTEX,0,support.get_mvpMatrix3D(),true);
		context.setProgramConstantsFromVector(openfl.display3D.Context3DProgramType.VERTEX,4,(function($this) {
			var $r;
			var this9 = starling.display.Canvas.get_sRenderAlpha();
			var value3 = new Array();
			{
				var _g1 = 0;
				var _g = this9.data.length;
				while(_g1 < _g) {
					var i = _g1++;
					value3.push(this9.data[i]);
				}
			}
			$r = value3;
			return $r;
		}(this)),1);
		context.drawTriangles(this.mIndexBuffer,0,this.mIndexData.length / 3);
		context.setVertexBufferAt(0,null);
		context.setVertexBufferAt(1,null);
	}
	,getBounds: function(targetSpace,resultRect) {
		if(resultRect == null) resultRect = new openfl.geom.Rectangle();
		var transformationMatrix;
		if(targetSpace == this) transformationMatrix = null; else transformationMatrix = this.getTransformationMatrix(targetSpace,starling.display.Canvas.sHelperMatrix);
		return this.mVertexData.getBounds(transformationMatrix,0,-1,resultRect);
	}
	,hitTest: function(localPoint,forTouch) {
		if(forTouch == null) forTouch = false;
		if(forTouch && (!this.get_visible() || !this.get_touchable())) return null;
		if(!this.hitTestMask(localPoint)) return null;
		var _g1 = 0;
		var _g = this.mPolygons.length;
		while(_g1 < _g) {
			var i = _g1++;
			if(this.mPolygons[i].containsPoint(localPoint)) return this;
		}
		return null;
	}
	,appendPolygon: function(polygon) {
		var oldNumVertices = this.mVertexData.get_numVertices();
		var oldNumIndices = this.mIndexData.length;
		polygon.triangulate((function($this) {
			var $r;
			var this1 = $this.mIndexData;
			var value = new Array();
			{
				var _g1 = 0;
				var _g = this1.data.length;
				while(_g1 < _g) {
					var i = _g1++;
					value.push(this1.data[i]);
				}
			}
			$r = value;
			return $r;
		}(this)));
		polygon.copyToVertexData(this.mVertexData,oldNumVertices);
		var newNumIndices = this.mIndexData.length;
		var _g2 = oldNumIndices;
		while(_g2 < newNumIndices) {
			var i1 = _g2++;
			var _g11 = i1;
			var this2 = this.mIndexData;
			if(!this2.fixed) {
				if(_g11 >= this2.length) this2.length = _g11 + 1;
				if(this2.data.length < this2.length) {
					var data;
					var this3;
					this3 = new Array(this2.data.length + 10);
					data = this3;
					haxe.ds._Vector.Vector_Impl_.blit(this2.data,0,data,0,this2.data.length);
					this2.data = data;
				}
			}
			this2.data[_g11] = this.mIndexData.data[_g11] + oldNumVertices;
		}
		this.applyFillColor(oldNumVertices,polygon.get_numVertices());
		this.mPolygons[this.mPolygons.length] = polygon;
		this.mSyncRequired = true;
	}
	,applyFillColor: function(vertexIndex,numVertices) {
		var endIndex = vertexIndex + numVertices;
		var _g = vertexIndex;
		while(_g < endIndex) {
			var i = _g++;
			this.mVertexData.setColorAndAlpha(i,this.mFillColor,this.mFillAlpha);
		}
	}
	,syncBuffers: function() {
		this.destroyBuffers();
		var context = starling.core.Starling.get_Context();
		if(context == null) throw new starling.errors.MissingContextError();
		var numVertices = this.mVertexData.get_numVertices();
		var numIndices = this.mIndexData.length;
		this.mVertexBuffer = context.createVertexBuffer(numVertices,starling.utils.VertexData.ELEMENTS_PER_VERTEX);
		this.mVertexBuffer.uploadFromVector(this.mVertexData.get_rawData(),0,numVertices);
		this.mIndexBuffer = context.createIndexBuffer(numIndices);
		this.mIndexBuffer.uploadFromVector(this.mIndexData,0,numIndices);
		this.mSyncRequired = false;
	}
	,destroyBuffers: function() {
		if(this.mVertexBuffer != null) this.mVertexBuffer.dispose();
		if(this.mIndexBuffer != null) this.mIndexBuffer.dispose();
		this.mVertexBuffer = null;
		this.mIndexBuffer = null;
		this.mSyncRequired = true;
	}
	,__class__: starling.display.Canvas
});
starling.display.Quad = function(width,height,color,premultipliedAlpha) {
	if(premultipliedAlpha == null) premultipliedAlpha = true;
	if(color == null) color = 16777215;
	starling.display.DisplayObject.call(this);
	if(width == 0.0 || height == 0.0) throw new openfl.errors.ArgumentError("Invalid size: width and height must not be zero");
	this.mTinted = (function($this) {
		var $r;
		var $int = color;
		$r = $int < 0?4294967296.0 + $int:$int + 0.0;
		return $r;
	}(this)) != 16777215;
	this.mVertexData = new starling.utils.VertexData(4,premultipliedAlpha);
	this.mVertexData.setPosition(0,0.0,0.0);
	this.mVertexData.setPosition(1,width,0.0);
	this.mVertexData.setPosition(2,0.0,height);
	this.mVertexData.setPosition(3,width,height);
	this.mVertexData.setUniformColor(color);
	this.onVertexDataChanged();
};
$hxClasses["starling.display.Quad"] = starling.display.Quad;
starling.display.Quad.__name__ = ["starling","display","Quad"];
starling.display.Quad.__super__ = starling.display.DisplayObject;
starling.display.Quad.prototype = $extend(starling.display.DisplayObject.prototype,{
	mTinted: null
	,mVertexData: null
	,tinted: null
	,premultipliedAlpha: null
	,onVertexDataChanged: function() {
	}
	,getBounds: function(targetSpace,resultRect) {
		if(resultRect == null) resultRect = new openfl.geom.Rectangle();
		if(targetSpace == this) {
			this.mVertexData.getPosition(3,starling.display.Quad.sHelperPoint);
			resultRect.setTo(0.0,0.0,starling.display.Quad.sHelperPoint.x,starling.display.Quad.sHelperPoint.y);
		} else if(targetSpace == this.get_parent() && this.get_rotation() == 0.0) {
			var scaleX = this.get_scaleX();
			var scaleY = this.get_scaleY();
			this.mVertexData.getPosition(3,starling.display.Quad.sHelperPoint);
			resultRect.setTo(this.get_x() - this.get_pivotX() * scaleX,this.get_y() - this.get_pivotY() * scaleY,starling.display.Quad.sHelperPoint.x * scaleX,starling.display.Quad.sHelperPoint.y * scaleY);
			if(scaleX < 0) {
				resultRect.width *= -1;
				resultRect.x -= resultRect.width;
			}
			if(scaleY < 0) {
				resultRect.height *= -1;
				resultRect.y -= resultRect.height;
			}
		} else if(this.get_is3D() && this.get_stage() != null) {
			this.get_stage().getCameraPosition(targetSpace,starling.display.Quad.sHelperPoint3D);
			this.getTransformationMatrix3D(targetSpace,starling.display.Quad.sHelperMatrix3D);
			this.mVertexData.getBoundsProjected(starling.display.Quad.sHelperMatrix3D,starling.display.Quad.sHelperPoint3D,0,4,resultRect);
		} else {
			this.getTransformationMatrix(targetSpace,starling.display.Quad.sHelperMatrix);
			this.mVertexData.getBounds(starling.display.Quad.sHelperMatrix,0,4,resultRect);
		}
		return resultRect;
	}
	,getVertexColor: function(vertexID) {
		return this.mVertexData.getColor(vertexID);
	}
	,setVertexColor: function(vertexID,color) {
		this.mVertexData.setColor(vertexID,color);
		this.onVertexDataChanged();
		if((function($this) {
			var $r;
			var $int = color;
			$r = $int < 0?4294967296.0 + $int:$int + 0.0;
			return $r;
		}(this)) != 16777215) this.mTinted = true; else this.mTinted = this.mVertexData.get_tinted();
	}
	,getVertexAlpha: function(vertexID) {
		return this.mVertexData.getAlpha(vertexID);
	}
	,setVertexAlpha: function(vertexID,alpha) {
		this.mVertexData.setAlpha(vertexID,alpha);
		this.onVertexDataChanged();
		if(alpha != 1.0) this.mTinted = true; else this.mTinted = this.mVertexData.get_tinted();
	}
	,get_color: function() {
		return this.mVertexData.getColor(0);
	}
	,set_color: function(value) {
		this.mVertexData.setUniformColor(value);
		this.onVertexDataChanged();
		if((function($this) {
			var $r;
			var $int = value;
			$r = $int < 0?4294967296.0 + $int:$int + 0.0;
			return $r;
		}(this)) != 16777215 || this.get_alpha() != 1.0) this.mTinted = true; else this.mTinted = this.mVertexData.get_tinted();
		return value;
	}
	,set_alpha: function(value) {
		starling.display.DisplayObject.prototype.set_alpha.call(this,value);
		if(value < 1.0) this.mTinted = true; else this.mTinted = this.mVertexData.get_tinted();
		return value;
	}
	,copyVertexDataTo: function(targetData,targetVertexID) {
		if(targetVertexID == null) targetVertexID = 0;
		this.mVertexData.copyTo(targetData,targetVertexID);
	}
	,copyVertexDataTransformedTo: function(targetData,targetVertexID,matrix) {
		if(targetVertexID == null) targetVertexID = 0;
		this.mVertexData.copyTransformedTo(targetData,targetVertexID,matrix,0,4);
	}
	,render: function(support,parentAlpha) {
		support.batchQuad(this,parentAlpha);
	}
	,get_tinted: function() {
		return this.mTinted;
	}
	,get_premultipliedAlpha: function() {
		return this.mVertexData.get_premultipliedAlpha();
	}
	,__class__: starling.display.Quad
	,__properties__: $extend(starling.display.DisplayObject.prototype.__properties__,{get_premultipliedAlpha:"get_premultipliedAlpha",get_tinted:"get_tinted",set_color:"set_color",get_color:"get_color"})
});
starling.display.Image = function(texture) {
	this.random = 0;
	if(texture != null) {
		this.random = Math.random() * 200000;
		var frame = texture.get_frame();
		var width;
		if(frame != null) width = frame.width; else width = texture.get_width();
		var height;
		if(frame != null) height = frame.height; else height = texture.get_height();
		var pma = texture.get_premultipliedAlpha();
		starling.display.Quad.call(this,width,height,16777215,pma);
		this.mVertexData.setTexCoords(0,0.0,0.0);
		this.mVertexData.setTexCoords(1,1.0,0.0);
		this.mVertexData.setTexCoords(2,0.0,1.0);
		this.mVertexData.setTexCoords(3,1.0,1.0);
		this.mTexture = texture;
		this.mSmoothing = starling.textures.TextureSmoothing.BILINEAR;
		this.mVertexDataCache = new starling.utils.VertexData(4,pma);
		this.mVertexDataCacheInvalid = true;
	} else throw new openfl.errors.ArgumentError("Texture cannot be null");
};
$hxClasses["starling.display.Image"] = starling.display.Image;
starling.display.Image.__name__ = ["starling","display","Image"];
starling.display.Image.fromBitmap = function(bitmap,generateMipMaps,scale) {
	if(scale == null) scale = 1;
	if(generateMipMaps == null) generateMipMaps = true;
	return new starling.display.Image(starling.textures.Texture.fromBitmap(bitmap,generateMipMaps,false,scale));
};
starling.display.Image.__super__ = starling.display.Quad;
starling.display.Image.prototype = $extend(starling.display.Quad.prototype,{
	mTexture: null
	,mSmoothing: null
	,mVertexDataCache: null
	,mVertexDataCacheInvalid: null
	,random: null
	,onVertexDataChanged: function() {
		this.mVertexDataCacheInvalid = true;
	}
	,readjustSize: function() {
		var frame = this.get_texture().get_frame();
		var width;
		if(frame != null) width = frame.width; else width = this.get_texture().get_width();
		var height;
		if(frame != null) height = frame.height; else height = this.get_texture().get_height();
		this.mVertexData.setPosition(0,0.0,0.0);
		this.mVertexData.setPosition(1,width,0.0);
		this.mVertexData.setPosition(2,0.0,height);
		this.mVertexData.setPosition(3,width,height);
		this.onVertexDataChanged();
	}
	,setTexCoords: function(vertexID,coords) {
		this.mVertexData.setTexCoords(vertexID,coords.x,coords.y);
		this.onVertexDataChanged();
	}
	,setTexCoordsTo: function(vertexID,u,v) {
		this.mVertexData.setTexCoords(vertexID,u,v);
		this.onVertexDataChanged();
	}
	,getTexCoords: function(vertexID,resultPoint) {
		if(resultPoint == null) resultPoint = new openfl.geom.Point();
		this.mVertexData.getTexCoords(vertexID,resultPoint);
		return resultPoint;
	}
	,copyVertexDataTo: function(targetData,targetVertexID) {
		if(targetVertexID == null) targetVertexID = 0;
		this.copyVertexDataTransformedTo(targetData,targetVertexID,null);
	}
	,copyVertexDataTransformedTo: function(targetData,targetVertexID,matrix) {
		if(targetVertexID == null) targetVertexID = 0;
		if(this.mVertexDataCacheInvalid) {
			this.mVertexDataCacheInvalid = false;
			this.mVertexData.copyTo(this.mVertexDataCache);
			this.mTexture.adjustVertexData(this.mVertexDataCache,0,4);
		}
		this.mVertexDataCache.copyTransformedTo(targetData,targetVertexID,matrix,0,4);
	}
	,get_texture: function() {
		return this.mTexture;
	}
	,set_texture: function(value) {
		if(value == null) throw new openfl.errors.ArgumentError("Texture cannot be null"); else if(value != this.mTexture) {
			this.mTexture = value;
			this.mVertexData.setPremultipliedAlpha(this.mTexture.get_premultipliedAlpha());
			this.mVertexDataCache.setPremultipliedAlpha(this.mTexture.get_premultipliedAlpha(),false);
			this.onVertexDataChanged();
		}
		return value;
	}
	,get_smoothing: function() {
		return this.mSmoothing;
	}
	,set_smoothing: function(value) {
		if(starling.textures.TextureSmoothing.isValid(value)) this.mSmoothing = value; else throw new openfl.errors.ArgumentError("Invalid smoothing mode: " + value);
		return value;
	}
	,render: function(support,parentAlpha) {
		support.batchQuad(this,parentAlpha,this.mTexture,this.mSmoothing);
	}
	,__class__: starling.display.Image
	,__properties__: $extend(starling.display.Quad.prototype.__properties__,{set_smoothing:"set_smoothing",get_smoothing:"get_smoothing",set_texture:"set_texture",get_texture:"get_texture"})
});
starling.display.MovieClip = function(textures,fps) {
	if(fps == null) fps = 12;
	this.mSoundTransform = null;
	if(textures.length > 0) {
		starling.display.Image.call(this,textures.data[0]);
		this.init((function($this) {
			var $r;
			var value = new Array();
			{
				var _g1 = 0;
				var _g = textures.data.length;
				while(_g1 < _g) {
					var i = _g1++;
					value.push(textures.data[i]);
				}
			}
			$r = value;
			return $r;
		}(this)),fps);
	} else throw new openfl.errors.ArgumentError("Empty texture array");
};
$hxClasses["starling.display.MovieClip"] = starling.display.MovieClip;
starling.display.MovieClip.__name__ = ["starling","display","MovieClip"];
starling.display.MovieClip.__interfaces__ = [starling.animation.IAnimatable];
starling.display.MovieClip.__super__ = starling.display.Image;
starling.display.MovieClip.prototype = $extend(starling.display.Image.prototype,{
	mTextures: null
	,mSounds: null
	,mDurations: null
	,mStartTimes: null
	,mDefaultFrameDuration: null
	,mCurrentTime: null
	,mCurrentFrame: null
	,mLoop: null
	,mPlaying: null
	,mMuted: null
	,mSoundTransform: null
	,totalTime: null
	,currentTime: null
	,numFrames: null
	,isPlaying: null
	,isComplete: null
	,init: function(textures,fps) {
		if(fps <= 0) throw new openfl.errors.ArgumentError("Invalid fps: " + fps);
		var numFrames = textures.length;
		this.mDefaultFrameDuration = 1.0 / fps;
		this.mLoop = true;
		this.mPlaying = true;
		this.mCurrentTime = 0.0;
		this.mCurrentFrame = 0;
		this.mTextures = textures.concat(new Array());
		haxe.Log.trace("CHECK INIT LENGTH IS NOT NEEDED",{ fileName : "MovieClip.hx", lineNumber : 99, className : "starling.display.MovieClip", methodName : "init"});
		this.mSounds = new Array();
		this.mDurations = new Array();
		this.mStartTimes = new Array();
		var _g = 0;
		while(_g < numFrames) {
			var i = _g++;
			this.mDurations[i] = this.mDefaultFrameDuration;
			this.mStartTimes[i] = i * this.mDefaultFrameDuration;
		}
	}
	,addFrame: function(texture,sound,duration) {
		if(duration == null) duration = -1;
		this.addFrameAt(this.get_numFrames(),texture,sound,duration);
	}
	,addFrameAt: function(frameID,texture,sound,duration) {
		if(duration == null) duration = -1;
		if(frameID < 0 || frameID > this.get_numFrames()) throw new openfl.errors.ArgumentError("Invalid frame id");
		if(duration < 0) duration = this.mDefaultFrameDuration;
		this.mTextures.splice(frameID,0,texture);
		this.mSounds.splice(frameID,0,sound);
		this.mDurations.splice(frameID,0,duration);
		if(frameID > 0 && frameID == this.get_numFrames()) this.mStartTimes[frameID] = this.mStartTimes[frameID - 1] + this.mDurations[frameID - 1]; else this.updateStartTimes();
	}
	,removeFrameAt: function(frameID) {
		if(frameID < 0 || frameID >= this.get_numFrames()) throw new openfl.errors.ArgumentError("Invalid frame id");
		if(this.get_numFrames() == 1) throw new openfl.errors.IllegalOperationError("Movie clip must not be empty");
		this.mTextures.splice(frameID,1);
		this.mSounds.splice(frameID,1);
		this.mDurations.splice(frameID,1);
		this.updateStartTimes();
	}
	,getFrameTexture: function(frameID) {
		if(frameID < 0 || frameID >= this.get_numFrames()) throw new openfl.errors.ArgumentError("Invalid frame id");
		return this.mTextures[frameID];
	}
	,setFrameTexture: function(frameID,texture) {
		if(frameID < 0 || frameID >= this.get_numFrames()) throw new openfl.errors.ArgumentError("Invalid frame id");
		this.mTextures[frameID] = texture;
	}
	,getFrameSound: function(frameID) {
		if(frameID < 0 || frameID >= this.get_numFrames()) throw new openfl.errors.ArgumentError("Invalid frame id");
		return this.mSounds[frameID];
	}
	,setFrameSound: function(frameID,sound) {
		if(frameID < 0 || frameID >= this.get_numFrames()) throw new openfl.errors.ArgumentError("Invalid frame id");
		this.mSounds[frameID] = sound;
	}
	,getFrameDuration: function(frameID) {
		if(frameID < 0 || frameID >= this.get_numFrames()) throw new openfl.errors.ArgumentError("Invalid frame id");
		return this.mDurations[frameID];
	}
	,setFrameDuration: function(frameID,duration) {
		if(frameID < 0 || frameID >= this.get_numFrames()) throw new openfl.errors.ArgumentError("Invalid frame id");
		this.mDurations[frameID] = duration;
		this.updateStartTimes();
	}
	,play: function() {
		this.mPlaying = true;
	}
	,pause: function() {
		this.mPlaying = false;
	}
	,stop: function() {
		this.mPlaying = false;
		this.set_currentFrame(0);
	}
	,updateStartTimes: function() {
		var numFrames = this.get_numFrames();
		this.mStartTimes = [];
		this.mStartTimes[0] = 0;
		var _g = 1;
		while(_g < numFrames) {
			var i = _g++;
			this.mStartTimes[i] = this.mStartTimes[i - 1] + this.mDurations[i - 1];
		}
	}
	,advanceTime: function(passedTime) {
		if(!this.mPlaying || passedTime <= 0.0) return;
		var finalFrame;
		var previousFrame = this.mCurrentFrame;
		var restTime = 0.0;
		var breakAfterFrame = false;
		var dispatchCompleteEvent = false;
		var totalTime = this.get_totalTime();
		if(this.mLoop && this.mCurrentTime >= totalTime) {
			this.mCurrentTime = 0.0;
			this.mCurrentFrame = 0;
		}
		if(this.mCurrentTime < totalTime) {
			this.mCurrentTime += passedTime;
			finalFrame = this.mTextures.length - 1;
			while(this.mCurrentTime > this.mStartTimes[this.mCurrentFrame] + this.mDurations[this.mCurrentFrame]) {
				if(this.mCurrentFrame == finalFrame) {
					if(this.mLoop && !this.hasEventListener(starling.events.Event.COMPLETE)) {
						this.mCurrentTime -= totalTime;
						this.mCurrentFrame = 0;
					} else {
						breakAfterFrame = true;
						restTime = this.mCurrentTime - totalTime;
						dispatchCompleteEvent = true;
						this.mCurrentFrame = finalFrame;
						this.mCurrentTime = totalTime;
					}
				} else this.mCurrentFrame++;
				var sound = this.mSounds[this.mCurrentFrame];
				if(sound != null && !this.mMuted) sound.play(0,0,this.mSoundTransform);
				if(breakAfterFrame) break;
			}
			if(this.mCurrentFrame == finalFrame && this.mCurrentTime == totalTime) dispatchCompleteEvent = true;
		}
		if(this.mCurrentFrame != previousFrame) this.set_texture(this.mTextures[this.mCurrentFrame]);
		if(dispatchCompleteEvent) this.dispatchEventWith(starling.events.Event.COMPLETE);
		if(this.mLoop && restTime > 0.0) this.advanceTime(restTime);
	}
	,get_totalTime: function() {
		var numFrames = this.mTextures.length;
		return this.mStartTimes[numFrames - 1] + this.mDurations[numFrames - 1];
	}
	,get_currentTime: function() {
		return this.mCurrentTime;
	}
	,get_numFrames: function() {
		return this.mTextures.length;
	}
	,get_loop: function() {
		return this.mLoop;
	}
	,set_loop: function(value) {
		this.mLoop = value;
		return value;
	}
	,get_muted: function() {
		return this.mMuted;
	}
	,set_muted: function(value) {
		this.mMuted = value;
		return value;
	}
	,get_soundTransform: function() {
		return this.mSoundTransform;
	}
	,set_soundTransform: function(value) {
		this.mSoundTransform = value;
		return value;
	}
	,get_currentFrame: function() {
		return this.mCurrentFrame;
	}
	,set_currentFrame: function(value) {
		this.mCurrentFrame = value;
		this.mCurrentTime = 0.0;
		var _g = 0;
		while(_g < value) {
			var i = _g++;
			this.mCurrentTime += this.getFrameDuration(i);
		}
		this.set_texture(this.mTextures[this.mCurrentFrame]);
		if(!this.mMuted && this.mSounds[this.mCurrentFrame] != null) this.mSounds[this.mCurrentFrame].play();
		return value;
	}
	,get_fps: function() {
		return 1.0 / this.mDefaultFrameDuration;
	}
	,set_fps: function(value) {
		if(value <= 0) throw new openfl.errors.ArgumentError("Invalid fps: " + value);
		var newFrameDuration = 1.0 / value;
		var acceleration = newFrameDuration / this.mDefaultFrameDuration;
		this.mCurrentTime *= acceleration;
		this.mDefaultFrameDuration = newFrameDuration;
		var _g1 = 0;
		var _g = this.get_numFrames();
		while(_g1 < _g) {
			var i = _g1++;
			this.mDurations[i] *= acceleration;
		}
		this.updateStartTimes();
		return value;
	}
	,get_isPlaying: function() {
		if(this.mPlaying) return this.mLoop || this.mCurrentTime < this.get_totalTime(); else return false;
	}
	,get_isComplete: function() {
		return !this.mLoop && this.mCurrentTime >= this.get_totalTime();
	}
	,__class__: starling.display.MovieClip
	,__properties__: $extend(starling.display.Image.prototype.__properties__,{get_isComplete:"get_isComplete",get_isPlaying:"get_isPlaying",set_fps:"set_fps",get_fps:"get_fps",set_currentFrame:"set_currentFrame",get_currentFrame:"get_currentFrame",set_soundTransform:"set_soundTransform",get_soundTransform:"get_soundTransform",set_muted:"set_muted",get_muted:"get_muted",set_loop:"set_loop",get_loop:"get_loop",get_numFrames:"get_numFrames",get_currentTime:"get_currentTime",get_totalTime:"get_totalTime"})
});
starling.display.QuadBatch = function() {
	starling.display.DisplayObject.call(this);
	this.mVertexData = new starling.utils.VertexData(0,true);
	var value = new Array();
	var vectorData = new openfl.VectorData();
	vectorData.length = value.length;
	vectorData.fixed = true;
	var vec;
	var this1;
	this1 = new Array(value.length);
	vec = this1;
	var _g1 = 0;
	var _g = value.length;
	while(_g1 < _g) {
		var i = _g1++;
		vec[i] = value[i];
	}
	vectorData.data = vec;
	this.mIndexData = vectorData;
	this.mIndexData.fixed = false;
	this.mNumQuads = 0;
	this.mTinted = false;
	this.mSyncRequired = false;
	this.mBatchable = false;
	starling.core.Starling.get_current().get_stage3D().addEventListener(starling.events.Event.CONTEXT3D_CREATE,$bind(this,this.onContextCreated),false,0,true);
};
$hxClasses["starling.display.QuadBatch"] = starling.display.QuadBatch;
starling.display.QuadBatch.__name__ = ["starling","display","QuadBatch"];
starling.display.QuadBatch.__properties__ = {set_sRenderAlpha:"set_sRenderAlpha",get_sRenderAlpha:"get_sRenderAlpha"}
starling.display.QuadBatch.sRenderAlpha = null;
starling.display.QuadBatch.compile = function(object,quadBatches) {
	starling.display.QuadBatch.compileObject(object,quadBatches,-1,new openfl.geom.Matrix());
};
starling.display.QuadBatch.optimize = function(quadBatches) {
	var batch1;
	var batch2;
	var _g1 = 0;
	var _g = quadBatches.length;
	while(_g1 < _g) {
		var i = _g1++;
		batch1 = quadBatches[i];
		haxe.Log.trace("CHECK",{ fileName : "QuadBatch.hx", lineNumber : 529, className : "starling.display.QuadBatch", methodName : "optimize"});
		var _g3 = i + 1;
		var _g2 = quadBatches.length;
		while(_g3 < _g2) {
			var k = _g3++;
			var j = quadBatches.length - 1 - k;
			batch2 = quadBatches[j];
			if(!batch1.isStateChange(batch2.get_tinted(),1.0,batch2.get_texture(),batch2.get_smoothing(),batch2.get_blendMode())) {
				batch1.addQuadBatch(batch2);
				batch2.dispose();
				quadBatches.splice(j,1);
			}
		}
	}
};
starling.display.QuadBatch.compileObject = function(object,quadBatches,quadBatchID,transformationMatrix,alpha,blendMode,ignoreCurrentFilter) {
	if(ignoreCurrentFilter == null) ignoreCurrentFilter = false;
	if(alpha == null) alpha = 1.0;
	if(js.Boot.__instanceof(object,starling.display.Sprite3D)) throw new openfl.errors.IllegalOperationError("Sprite3D objects cannot be flattened");
	var i;
	var quadBatch;
	var isRootObject = false;
	var objectAlpha = object.get_alpha();
	var container = object;
	var quad = object;
	var batch = object;
	var filter = object.get_filter();
	if(quadBatchID == -1) {
		isRootObject = true;
		quadBatchID = 0;
		objectAlpha = 1.0;
		blendMode = object.get_blendMode();
		ignoreCurrentFilter = true;
		if(quadBatches.length == 0) quadBatches.push(new starling.display.QuadBatch()); else quadBatches[0].reset();
	} else {
		if(object.get_mask() != null) haxe.Log.trace("[Starling] Masks are ignored on children of a flattened sprite.",{ fileName : "QuadBatch.hx", lineNumber : 580, className : "starling.display.QuadBatch", methodName : "compileObject"});
		if(js.Boot.__instanceof(object,starling.display.Sprite) && (js.Boot.__cast(object , starling.display.Sprite)).get_clipRect() != null) haxe.Log.trace("[Starling] ClipRects are ignored on children of a flattened sprite.",{ fileName : "QuadBatch.hx", lineNumber : 583, className : "starling.display.QuadBatch", methodName : "compileObject"});
	}
	if(filter != null && ignoreCurrentFilter) {
		if(filter.get_mode() == starling.filters.FragmentFilterMode.ABOVE) quadBatchID = starling.display.QuadBatch.compileObject(object,quadBatches,quadBatchID,transformationMatrix,alpha,blendMode,true);
		quadBatchID = starling.display.QuadBatch.compileObject(filter.compile(object),quadBatches,quadBatchID,transformationMatrix,alpha,blendMode);
		if(filter.get_mode() == starling.filters.FragmentFilterMode.BELOW) quadBatchID = starling.display.QuadBatch.compileObject(object,quadBatches,quadBatchID,transformationMatrix,alpha,blendMode,true);
	} else if(container != null) {
		var numChildren = container.get_numChildren();
		var childMatrix = new openfl.geom.Matrix();
		var _g = 0;
		while(_g < numChildren) {
			var i1 = _g++;
			var child = container.getChildAt(i1);
			if(child.get_hasVisibleArea()) {
				var childBlendMode;
				if(child.get_blendMode() == starling.display.BlendMode.AUTO) childBlendMode = blendMode; else childBlendMode = child.get_blendMode();
				childMatrix.copyFrom(transformationMatrix);
				starling.core.RenderSupport.transformMatrixForObject(childMatrix,child);
				quadBatchID = starling.display.QuadBatch.compileObject(child,quadBatches,quadBatchID,childMatrix,alpha * objectAlpha,childBlendMode);
			}
		}
	} else if(quad != null || batch != null) {
		var texture;
		var smoothing;
		var tinted;
		var numQuads;
		if(quad != null) {
			var image = quad;
			if(image != null) texture = image.get_texture(); else texture = null;
			if(image != null) smoothing = image.get_smoothing(); else smoothing = null;
			tinted = quad.get_tinted();
			numQuads = 1;
		} else {
			texture = batch.mTexture;
			smoothing = batch.mSmoothing;
			tinted = batch.mTinted;
			numQuads = batch.mNumQuads;
		}
		quadBatch = quadBatches[quadBatchID];
		if(quadBatch.isStateChange(tinted,alpha * objectAlpha,texture,smoothing,blendMode,numQuads)) {
			quadBatchID++;
			if(quadBatches.length <= quadBatchID) quadBatches.push(new starling.display.QuadBatch());
			quadBatch = quadBatches[quadBatchID];
			quadBatch.reset();
		}
		if(quad != null) quadBatch.addQuad(quad,alpha,texture,smoothing,transformationMatrix,blendMode); else quadBatch.addQuadBatch(batch,alpha,transformationMatrix,blendMode);
	} else throw new openfl.errors.Error("Unsupported display object: " + Type.getClassName(Type.getClass(object)));
	if(isRootObject) {
		haxe.Log.trace("CHECK",{ fileName : "QuadBatch.hx", lineNumber : 669, className : "starling.display.QuadBatch", methodName : "compileObject"});
		var _g1 = quadBatchID + 1;
		var _g2 = quadBatches.length;
		while(_g1 < _g2) {
			var j = _g1++;
			var i2 = quadBatches.length - j - 1;
			quadBatches.pop().dispose();
		}
	}
	return quadBatchID;
};
starling.display.QuadBatch.get_sRenderAlpha = function() {
	if(starling.display.QuadBatch.sRenderAlpha == null) {
		starling.display.QuadBatch.set_sRenderAlpha((function($this) {
			var $r;
			var this1;
			this1 = new openfl.VectorData();
			{
				var this2;
				this2 = new Array(0);
				this1.data = this2;
			}
			this1.length = 0;
			this1.fixed = false;
			$r = this1;
			return $r;
		}(this)));
		var this3 = starling.display.QuadBatch.sRenderAlpha;
		if(!this3.fixed) {
			this3.length++;
			if(this3.data.length < this3.length) {
				var data;
				var this4;
				this4 = new Array(this3.data.length + 10);
				data = this4;
				haxe.ds._Vector.Vector_Impl_.blit(this3.data,0,data,0,this3.data.length);
				this3.data = data;
			}
			this3.data[this3.length - 1] = 1;
		}
		this3.length;
		var this5 = starling.display.QuadBatch.sRenderAlpha;
		if(!this5.fixed) {
			this5.length++;
			if(this5.data.length < this5.length) {
				var data1;
				var this6;
				this6 = new Array(this5.data.length + 10);
				data1 = this6;
				haxe.ds._Vector.Vector_Impl_.blit(this5.data,0,data1,0,this5.data.length);
				this5.data = data1;
			}
			this5.data[this5.length - 1] = 1;
		}
		this5.length;
		var this7 = starling.display.QuadBatch.sRenderAlpha;
		if(!this7.fixed) {
			this7.length++;
			if(this7.data.length < this7.length) {
				var data2;
				var this8;
				this8 = new Array(this7.data.length + 10);
				data2 = this8;
				haxe.ds._Vector.Vector_Impl_.blit(this7.data,0,data2,0,this7.data.length);
				this7.data = data2;
			}
			this7.data[this7.length - 1] = 1;
		}
		this7.length;
		var this9 = starling.display.QuadBatch.sRenderAlpha;
		if(!this9.fixed) {
			this9.length++;
			if(this9.data.length < this9.length) {
				var data3;
				var this10;
				this10 = new Array(this9.data.length + 10);
				data3 = this10;
				haxe.ds._Vector.Vector_Impl_.blit(this9.data,0,data3,0,this9.data.length);
				this9.data = data3;
			}
			this9.data[this9.length - 1] = 1;
		}
		this9.length;
	}
	return starling.display.QuadBatch.sRenderAlpha;
};
starling.display.QuadBatch.set_sRenderAlpha = function(value) {
	return starling.display.QuadBatch.sRenderAlpha = value;
};
starling.display.QuadBatch.getImageProgramName = function(tinted,mipMap,repeat,format,smoothing) {
	if(smoothing == null) smoothing = "bilinear";
	if(repeat == null) repeat = false;
	if(mipMap == null) mipMap = true;
	if(format == null) format = openfl.display3D.Context3DTextureFormat.BGRA;
	var bitField = 0;
	if(tinted) bitField = bitField | 1;
	if(mipMap) bitField = bitField | 2;
	if(repeat) bitField = bitField | 4;
	if(smoothing == starling.textures.TextureSmoothing.NONE) bitField = bitField | 8; else if(smoothing == starling.textures.TextureSmoothing.TRILINEAR) bitField = bitField | 16;
	if(format == openfl.display3D.Context3DTextureFormat.COMPRESSED) bitField = bitField | 32; else if(format == openfl.display3D.Context3DTextureFormat.COMPRESSED_ALPHA) bitField = bitField | 64;
	var name = starling.display.QuadBatch.sProgramNameCache.get(bitField);
	if(name == null) {
		name = "QB_i." + StringTools.hex(bitField);
		starling.display.QuadBatch.sProgramNameCache.set(bitField,name);
		name;
	}
	return name;
};
starling.display.QuadBatch.__super__ = starling.display.DisplayObject;
starling.display.QuadBatch.prototype = $extend(starling.display.DisplayObject.prototype,{
	mNumQuads: null
	,mSyncRequired: null
	,mBatchable: null
	,mTinted: null
	,mTexture: null
	,mSmoothing: null
	,mVertexBuffer: null
	,mIndexData: null
	,mIndexBuffer: null
	,mVertexData: null
	,numQuads: null
	,tinted: null
	,texture: null
	,smoothing: null
	,premultipliedAlpha: null
	,dispose: function() {
		starling.core.Starling.get_current().get_stage3D().removeEventListener(starling.events.Event.CONTEXT3D_CREATE,$bind(this,this.onContextCreated));
		this.destroyBuffers();
		this.mVertexData.set_numVertices(0);
		var this1 = this.mIndexData;
		if(!this1.fixed) {
			if(0 > this1.length) {
				var data;
				var this2;
				this2 = new Array(0);
				data = this2;
				haxe.ds._Vector.Vector_Impl_.blit(this1.data,0,data,0,Std["int"](Math.min(this1.data.length,0)));
				this1.data = data;
			}
			this1.length = 0;
		}
		0;
		this.mNumQuads = 0;
		starling.display.DisplayObject.prototype.dispose.call(this);
	}
	,onContextCreated: function(event) {
		this.createBuffers();
	}
	,onVertexDataChanged: function() {
		this.mSyncRequired = true;
	}
	,clone: function() {
		var clone = new starling.display.QuadBatch();
		clone.mVertexData = this.mVertexData.clone(0,this.mNumQuads * 4);
		var this1 = this.mIndexData;
		var pos = 0;
		var end = this.mNumQuads * 6;
		if(pos < 0) pos += this1.length;
		if(end <= 0) end += this1.length;
		if(end > this1.length) end = this1.length;
		var length = end - pos;
		if(length <= 0 || length > this1.length) length = this1.length;
		var vectorData = new openfl.VectorData();
		vectorData.length = end - pos;
		vectorData.fixed = true;
		var this2;
		this2 = new Array(length);
		vectorData.data = this2;
		haxe.ds._Vector.Vector_Impl_.blit(this1.data,pos,vectorData.data,0,length);
		clone.mIndexData = vectorData;
		clone.mNumQuads = this.mNumQuads;
		clone.mTinted = this.mTinted;
		clone.mTexture = this.mTexture;
		clone.mSmoothing = this.mSmoothing;
		clone.mSyncRequired = true;
		clone.set_blendMode(this.get_blendMode());
		clone.set_alpha(this.get_alpha());
		return clone;
	}
	,expand: function() {
		var oldCapacity = this.get_capacity();
		if(oldCapacity >= starling.display.QuadBatch.MAX_NUM_QUADS) throw new openfl.errors.Error("Exceeded maximum number of quads!");
		this.set_capacity(oldCapacity < 8?16:oldCapacity * 2);
	}
	,createBuffers: function() {
		this.destroyBuffers();
		var numVertices = this.mVertexData.get_numVertices();
		var numIndices = this.mIndexData.length;
		var context = starling.core.Starling.get_Context();
		if(numVertices == 0) return;
		if(context == null) throw new starling.errors.MissingContextError();
		this.mVertexBuffer = context.createVertexBuffer(numVertices,starling.utils.VertexData.ELEMENTS_PER_VERTEX);
		this.mVertexBuffer.uploadFromVector(this.mVertexData.get_rawData(),0,numVertices);
		this.mIndexBuffer = context.createIndexBuffer(numIndices);
		this.mIndexBuffer.uploadFromVector(this.mIndexData,0,numIndices);
		this.mSyncRequired = false;
	}
	,destroyBuffers: function() {
		if(this.mVertexBuffer != null) {
			this.mVertexBuffer.dispose();
			this.mVertexBuffer = null;
		}
		if(this.mIndexBuffer != null) {
			this.mIndexBuffer.dispose();
			this.mIndexBuffer = null;
		}
	}
	,syncBuffers: function() {
		if(this.mVertexBuffer == null) this.createBuffers(); else {
			this.mVertexBuffer.uploadFromVector(this.mVertexData.get_rawData(),0,this.mVertexData.get_numVertices());
			this.mSyncRequired = false;
		}
	}
	,renderCustom: function(mvpMatrix,parentAlpha,blendMode) {
		if(parentAlpha == null) parentAlpha = 1.0;
		if(this.mNumQuads == 0) return;
		if(this.mSyncRequired) this.syncBuffers();
		var pma = this.mVertexData.get_premultipliedAlpha();
		var context = starling.core.Starling.get_Context();
		var tinted = this.mTinted || parentAlpha != 1.0;
		var this1 = starling.display.QuadBatch.get_sRenderAlpha();
		var value;
		var this2 = starling.display.QuadBatch.get_sRenderAlpha();
		var value1;
		var this3 = starling.display.QuadBatch.get_sRenderAlpha();
		if(!this3.fixed) {
			if(2 >= this3.length) this3.length = 3;
			if(this3.data.length < this3.length) {
				var data;
				var this4;
				this4 = new Array(this3.data.length + 10);
				data = this4;
				haxe.ds._Vector.Vector_Impl_.blit(this3.data,0,data,0,this3.data.length);
				this3.data = data;
			}
		}
		if(pma) value1 = this3.data[2] = parentAlpha; else value1 = this3.data[2] = 1.0;
		if(!this2.fixed) {
			if(1 >= this2.length) this2.length = 2;
			if(this2.data.length < this2.length) {
				var data1;
				var this5;
				this5 = new Array(this2.data.length + 10);
				data1 = this5;
				haxe.ds._Vector.Vector_Impl_.blit(this2.data,0,data1,0,this2.data.length);
				this2.data = data1;
			}
		}
		value = this2.data[1] = value1;
		if(!this1.fixed) {
			if(0 >= this1.length) this1.length = 1;
			if(this1.data.length < this1.length) {
				var data2;
				var this6;
				this6 = new Array(this1.data.length + 10);
				data2 = this6;
				haxe.ds._Vector.Vector_Impl_.blit(this1.data,0,data2,0,this1.data.length);
				this1.data = data2;
			}
		}
		this1.data[0] = value;
		var this7 = starling.display.QuadBatch.get_sRenderAlpha();
		if(!this7.fixed) {
			if(3 >= this7.length) this7.length = 4;
			if(this7.data.length < this7.length) {
				var data3;
				var this8;
				this8 = new Array(this7.data.length + 10);
				data3 = this8;
				haxe.ds._Vector.Vector_Impl_.blit(this7.data,0,data3,0,this7.data.length);
				this7.data = data3;
			}
		}
		this7.data[3] = parentAlpha;
		starling.core.RenderSupport.setBlendFactors(pma,blendMode != null?blendMode:this.get_blendMode());
		context.setProgram(this.getProgram(tinted));
		context.setProgramConstantsFromVector(openfl.display3D.Context3DProgramType.VERTEX,0,(function($this) {
			var $r;
			var this9 = starling.display.QuadBatch.get_sRenderAlpha();
			var value2 = new Array();
			{
				var _g1 = 0;
				var _g = this9.data.length;
				while(_g1 < _g) {
					var i = _g1++;
					value2.push(this9.data[i]);
				}
			}
			$r = value2;
			return $r;
		}(this)),1);
		context.setProgramConstantsFromMatrix(openfl.display3D.Context3DProgramType.VERTEX,1,mvpMatrix,true);
		context.setVertexBufferAt(0,this.mVertexBuffer,starling.utils.VertexData.POSITION_OFFSET,openfl.display3D.Context3DVertexBufferFormat.FLOAT_2);
		if(this.mTexture == null || tinted) context.setVertexBufferAt(1,this.mVertexBuffer,starling.utils.VertexData.COLOR_OFFSET,openfl.display3D.Context3DVertexBufferFormat.FLOAT_4);
		if(this.mTexture != null) {
			context.setTextureAt(0,this.mTexture.get_base());
			context.setVertexBufferAt(2,this.mVertexBuffer,starling.utils.VertexData.TEXCOORD_OFFSET,openfl.display3D.Context3DVertexBufferFormat.FLOAT_2);
		}
		context.drawTriangles(this.mIndexBuffer,0,this.mNumQuads * 2);
		if(this.mTexture != null) {
			context.setTextureAt(0,null);
			context.setVertexBufferAt(2,null);
		}
		context.setVertexBufferAt(1,null);
		context.setVertexBufferAt(0,null);
	}
	,reset: function() {
		this.mNumQuads = 0;
		this.mTexture = null;
		this.mSmoothing = null;
		this.mSyncRequired = true;
	}
	,addImage: function(image,parentAlpha,modelViewMatrix,blendMode) {
		if(parentAlpha == null) parentAlpha = 1.0;
		this.addQuad(image,parentAlpha,image.get_texture(),image.get_smoothing(),modelViewMatrix,blendMode);
	}
	,addQuad: function(quad,parentAlpha,texture,smoothing,modelViewMatrix,blendMode) {
		if(parentAlpha == null) parentAlpha = 1.0;
		if(modelViewMatrix == null) modelViewMatrix = quad.get_transformationMatrix();
		var alpha = parentAlpha * quad.get_alpha();
		var vertexID = this.mNumQuads * 4;
		if(this.mNumQuads + 1 > this.mVertexData.get_numVertices() / 4) this.expand();
		if(this.mNumQuads == 0) {
			this.set_blendMode(blendMode != null?blendMode:quad.get_blendMode());
			this.mTexture = texture;
			if(texture != null) this.mTinted = quad.get_tinted() || parentAlpha != 1.0; else this.mTinted = false;
			this.mSmoothing = smoothing;
			this.mVertexData.setPremultipliedAlpha(quad.get_premultipliedAlpha());
		}
		quad.copyVertexDataTransformedTo(this.mVertexData,vertexID,modelViewMatrix);
		if(alpha != 1.0) this.mVertexData.scaleAlpha(vertexID,alpha,4);
		this.mSyncRequired = true;
		this.mNumQuads++;
	}
	,addQuadBatch: function(quadBatch,parentAlpha,modelViewMatrix,blendMode) {
		if(parentAlpha == null) parentAlpha = 1.0;
		if(modelViewMatrix == null) modelViewMatrix = quadBatch.get_transformationMatrix();
		var tinted = quadBatch.mTinted || parentAlpha != 1.0;
		var alpha = parentAlpha * quadBatch.get_alpha();
		var vertexID = this.mNumQuads * 4;
		var numQuads = quadBatch.get_numQuads();
		if(this.mNumQuads + numQuads > this.get_capacity()) this.set_capacity(this.mNumQuads + numQuads);
		if(this.mNumQuads == 0) {
			this.set_blendMode(blendMode != null?blendMode:quadBatch.get_blendMode());
			this.mTexture = quadBatch.mTexture;
			this.mTinted = tinted;
			this.mSmoothing = quadBatch.mSmoothing;
			this.mVertexData.setPremultipliedAlpha(quadBatch.mVertexData.get_premultipliedAlpha(),false);
		}
		quadBatch.mVertexData.copyTransformedTo(this.mVertexData,vertexID,modelViewMatrix,0,numQuads * 4);
		if(alpha != 1.0) this.mVertexData.scaleAlpha(vertexID,alpha,numQuads * 4);
		this.mSyncRequired = true;
		this.mNumQuads += numQuads;
	}
	,isStateChange: function(tinted,parentAlpha,texture,smoothing,blendMode,numQuads) {
		if(numQuads == null) numQuads = 1;
		if(this.mNumQuads == 0) return false; else if(this.mNumQuads + numQuads > starling.display.QuadBatch.MAX_NUM_QUADS) return true; else if(this.mTexture == null && texture == null) return this.get_blendMode() != blendMode; else if(this.mTexture != null && texture != null) return this.mTexture.get_base() != texture.get_base() || this.mTexture.get_repeat() != texture.get_repeat() || this.mSmoothing != smoothing || this.mTinted != (tinted || parentAlpha != 1.0) || this.get_blendMode() != blendMode; else return true;
	}
	,transformQuad: function(quadID,matrix) {
		this.mVertexData.transformVertex(quadID * 4,matrix,4);
		this.mSyncRequired = true;
	}
	,getVertexColor: function(quadID,vertexID) {
		return this.mVertexData.getColor(quadID * 4 + vertexID);
	}
	,setVertexColor: function(quadID,vertexID,color) {
		this.mVertexData.setColor(quadID * 4 + vertexID,color);
		this.mSyncRequired = true;
	}
	,getVertexAlpha: function(quadID,vertexID) {
		return this.mVertexData.getAlpha(quadID * 4 + vertexID);
	}
	,setVertexAlpha: function(quadID,vertexID,alpha) {
		this.mVertexData.setAlpha(quadID * 4 + vertexID,alpha);
		this.mSyncRequired = true;
	}
	,getQuadColor: function(quadID) {
		return this.mVertexData.getColor(quadID * 4);
	}
	,setQuadColor: function(quadID,color) {
		var _g = 0;
		while(_g < 4) {
			var i = _g++;
			this.mVertexData.setColor(quadID * 4 + i,color);
		}
		this.mSyncRequired = true;
	}
	,getQuadAlpha: function(quadID) {
		return this.mVertexData.getAlpha(quadID * 4);
	}
	,setQuadAlpha: function(quadID,alpha) {
		var _g = 0;
		while(_g < 4) {
			var i = _g++;
			this.mVertexData.setAlpha(quadID * 4 + i,alpha);
		}
		this.mSyncRequired = true;
	}
	,setQuad: function(quadID,quad) {
		var matrix = quad.get_transformationMatrix();
		var alpha = quad.get_alpha();
		var vertexID = quadID * 4;
		quad.copyVertexDataTransformedTo(this.mVertexData,vertexID,matrix);
		if(alpha != 1.0) this.mVertexData.scaleAlpha(vertexID,alpha,4);
		this.mSyncRequired = true;
	}
	,getQuadBounds: function(quadID,transformationMatrix,resultRect) {
		return this.mVertexData.getBounds(transformationMatrix,quadID * 4,4,resultRect);
	}
	,getBounds: function(targetSpace,resultRect) {
		if(resultRect == null) resultRect = new openfl.geom.Rectangle();
		var transformationMatrix;
		if(targetSpace == this) transformationMatrix = null; else transformationMatrix = this.getTransformationMatrix(targetSpace,starling.display.QuadBatch.sHelperMatrix);
		return this.mVertexData.getBounds(transformationMatrix,0,this.mNumQuads * 4,resultRect);
	}
	,render: function(support,parentAlpha) {
		if(this.mNumQuads != null) {
			if(this.mBatchable) support.batchQuadBatch(this,parentAlpha); else {
				support.finishQuadBatch();
				support.raiseDrawCount();
				this.renderCustom(support.get_mvpMatrix3D(),this.get_alpha() * parentAlpha,support.get_blendMode());
			}
		}
	}
	,get_numQuads: function() {
		return this.mNumQuads;
	}
	,get_tinted: function() {
		return this.mTinted;
	}
	,get_texture: function() {
		return this.mTexture;
	}
	,get_smoothing: function() {
		return this.mSmoothing;
	}
	,get_premultipliedAlpha: function() {
		return this.mVertexData.get_premultipliedAlpha();
	}
	,get_batchable: function() {
		return this.mBatchable;
	}
	,set_batchable: function(value) {
		this.mBatchable = value;
		return value;
	}
	,get_capacity: function() {
		return this.mVertexData.get_numVertices() / 4;
	}
	,set_capacity: function(value) {
		var oldCapacity = this.get_capacity();
		if(value == oldCapacity) return value; else if(value == 0) throw new openfl.errors.Error("Capacity must be > 0"); else if(value > starling.display.QuadBatch.MAX_NUM_QUADS) value = starling.display.QuadBatch.MAX_NUM_QUADS;
		if(this.mNumQuads > value) this.mNumQuads = value;
		this.mVertexData.set_numVertices(value * 4);
		var this1 = this.mIndexData;
		var value1 = value * 6;
		if(!this1.fixed) {
			if(value1 > this1.length) {
				var data;
				var this2;
				this2 = new Array(value1);
				data = this2;
				haxe.ds._Vector.Vector_Impl_.blit(this1.data,0,data,0,Std["int"](Math.min(this1.data.length,value1)));
				this1.data = data;
			}
			this1.length = value1;
		}
		value1;
		var _g = oldCapacity;
		while(_g < value) {
			var i = _g++;
			var this3 = this.mIndexData;
			var key = i * 6;
			if(!this3.fixed) {
				if(key >= this3.length) this3.length = key + 1;
				if(this3.data.length < this3.length) {
					var data1;
					var this4;
					this4 = new Array(this3.data.length + 10);
					data1 = this4;
					haxe.ds._Vector.Vector_Impl_.blit(this3.data,0,data1,0,this3.data.length);
					this3.data = data1;
				}
			}
			this3.data[key] = i * 4;
			var this5 = this.mIndexData;
			var key1 = i * 6 + 1;
			if(!this5.fixed) {
				if(key1 >= this5.length) this5.length = key1 + 1;
				if(this5.data.length < this5.length) {
					var data2;
					var this6;
					this6 = new Array(this5.data.length + 10);
					data2 = this6;
					haxe.ds._Vector.Vector_Impl_.blit(this5.data,0,data2,0,this5.data.length);
					this5.data = data2;
				}
			}
			this5.data[key1] = i * 4 + 1;
			var this7 = this.mIndexData;
			var key2 = i * 6 + 2;
			if(!this7.fixed) {
				if(key2 >= this7.length) this7.length = key2 + 1;
				if(this7.data.length < this7.length) {
					var data3;
					var this8;
					this8 = new Array(this7.data.length + 10);
					data3 = this8;
					haxe.ds._Vector.Vector_Impl_.blit(this7.data,0,data3,0,this7.data.length);
					this7.data = data3;
				}
			}
			this7.data[key2] = i * 4 + 2;
			var this9 = this.mIndexData;
			var key3 = i * 6 + 3;
			if(!this9.fixed) {
				if(key3 >= this9.length) this9.length = key3 + 1;
				if(this9.data.length < this9.length) {
					var data4;
					var this10;
					this10 = new Array(this9.data.length + 10);
					data4 = this10;
					haxe.ds._Vector.Vector_Impl_.blit(this9.data,0,data4,0,this9.data.length);
					this9.data = data4;
				}
			}
			this9.data[key3] = i * 4 + 1;
			var this11 = this.mIndexData;
			var key4 = i * 6 + 4;
			if(!this11.fixed) {
				if(key4 >= this11.length) this11.length = key4 + 1;
				if(this11.data.length < this11.length) {
					var data5;
					var this12;
					this12 = new Array(this11.data.length + 10);
					data5 = this12;
					haxe.ds._Vector.Vector_Impl_.blit(this11.data,0,data5,0,this11.data.length);
					this11.data = data5;
				}
			}
			this11.data[key4] = i * 4 + 3;
			var this13 = this.mIndexData;
			var key5 = i * 6 + 5;
			if(!this13.fixed) {
				if(key5 >= this13.length) this13.length = key5 + 1;
				if(this13.data.length < this13.length) {
					var data6;
					var this14;
					this14 = new Array(this13.data.length + 10);
					data6 = this14;
					haxe.ds._Vector.Vector_Impl_.blit(this13.data,0,data6,0,this13.data.length);
					this13.data = data6;
				}
			}
			this13.data[key5] = i * 4 + 2;
		}
		this.destroyBuffers();
		this.mSyncRequired = true;
		return value;
	}
	,getProgram: function(tinted) {
		var target = starling.core.Starling.get_current();
		var programName = starling.display.QuadBatch.QUAD_PROGRAM_NAME;
		if(this.mTexture != null) programName = starling.display.QuadBatch.getImageProgramName(tinted,this.mTexture.get_mipMapping(),this.mTexture.get_repeat(),this.mTexture.get_format(),this.mSmoothing);
		var program = target.getProgram(programName);
		if(program == null) {
			var vertexShader;
			var fragmentShader;
			if(this.mTexture == null) {
				vertexShader = "m44 op, va0, vc1 \n" + "mul v0, va1, vc0 \n";
				fragmentShader = "mov oc, v0       \n";
			} else {
				if(tinted) vertexShader = "m44 op, va0, vc1 \n" + "mul v0, va1, vc0 \n" + "mov v1, va2      \n"; else vertexShader = "m44 op, va0, vc1 \n" + "mov v1, va2      \n";
				if(tinted) fragmentShader = "tex ft1,  v1, fs0 <???> \n" + "mul  oc, ft1,  v0       \n"; else fragmentShader = "tex  oc,  v1, fs0 <???> \n";
				fragmentShader = StringTools.replace(fragmentShader,"<???>",starling.core.RenderSupport.getTextureLookupFlags(this.mTexture.get_format(),this.mTexture.get_mipMapping(),this.mTexture.get_repeat(),this.get_smoothing()));
			}
			program = target.registerProgramFromSource(programName,vertexShader,fragmentShader);
		}
		return program;
	}
	,__class__: starling.display.QuadBatch
	,__properties__: $extend(starling.display.DisplayObject.prototype.__properties__,{set_capacity:"set_capacity",get_capacity:"get_capacity",set_batchable:"set_batchable",get_batchable:"get_batchable",get_premultipliedAlpha:"get_premultipliedAlpha",get_smoothing:"get_smoothing",get_texture:"get_texture",get_tinted:"get_tinted",get_numQuads:"get_numQuads"})
});
starling.display.Sprite3D = function() {
	starling.display.DisplayObjectContainer.call(this);
	this.mScaleZ = 1.0;
	this.mRotationX = this.mRotationY = this.mPivotZ = this.mZ = 0.0;
	this.mTransformationMatrix = new openfl.geom.Matrix();
	this.mTransformationMatrix3D = new openfl.geom.Matrix3D();
	this.setIs3D(true);
	this.addEventListener(starling.events.Event.ADDED,$bind(this,this.onAddedChild));
	this.addEventListener(starling.events.Event.REMOVED,$bind(this,this.onRemovedChild));
};
$hxClasses["starling.display.Sprite3D"] = starling.display.Sprite3D;
starling.display.Sprite3D.__name__ = ["starling","display","Sprite3D"];
starling.display.Sprite3D.__super__ = starling.display.DisplayObjectContainer;
starling.display.Sprite3D.prototype = $extend(starling.display.DisplayObjectContainer.prototype,{
	mRotationX: null
	,mRotationY: null
	,mScaleZ: null
	,mPivotZ: null
	,mZ: null
	,mTransformationChanged: null
	,is2D: null
	,render: function(support,parentAlpha) {
		if(this.mZ > -starling.display.Sprite3D.E && this.mZ < starling.display.Sprite3D.E && this.mRotationX > -starling.display.Sprite3D.E && this.mRotationX < starling.display.Sprite3D.E && this.mRotationY > -starling.display.Sprite3D.E && this.mRotationY < starling.display.Sprite3D.E && this.mPivotZ > -starling.display.Sprite3D.E && this.mPivotZ < starling.display.Sprite3D.E) starling.display.DisplayObjectContainer.prototype.render.call(this,support,parentAlpha); else {
			support.finishQuadBatch();
			support.pushMatrix3D();
			support.transformMatrix3D(this);
			starling.display.DisplayObjectContainer.prototype.render.call(this,support,parentAlpha);
			support.finishQuadBatch();
			support.popMatrix3D();
		}
	}
	,hitTest: function(localPoint,forTouch) {
		if(forTouch == null) forTouch = false;
		if(this.mZ > -starling.display.Sprite3D.E && this.mZ < starling.display.Sprite3D.E && this.mRotationX > -starling.display.Sprite3D.E && this.mRotationX < starling.display.Sprite3D.E && this.mRotationY > -starling.display.Sprite3D.E && this.mRotationY < starling.display.Sprite3D.E && this.mPivotZ > -starling.display.Sprite3D.E && this.mPivotZ < starling.display.Sprite3D.E) return starling.display.DisplayObjectContainer.prototype.hitTest.call(this,localPoint,forTouch); else {
			if(forTouch && (!this.get_visible() || !this.get_touchable())) return null;
			starling.display.Sprite3D.sHelperMatrix.copyFrom(this.get_transformationMatrix3D());
			starling.display.Sprite3D.sHelperMatrix.invert();
			this.get_stage().getCameraPosition(this,starling.display.Sprite3D.sHelperPoint);
			starling.utils.MatrixUtil.transformCoords3D(starling.display.Sprite3D.sHelperMatrix,localPoint.x,localPoint.y,0,starling.display.Sprite3D.sHelperPointAlt);
			starling.utils.MathUtil.intersectLineWithXYPlane(starling.display.Sprite3D.sHelperPoint,starling.display.Sprite3D.sHelperPointAlt,localPoint);
			return starling.display.DisplayObjectContainer.prototype.hitTest.call(this,localPoint,forTouch);
		}
	}
	,onAddedChild: function(event) {
		this.recursivelySetIs3D(event.get_target(),true);
	}
	,onRemovedChild: function(event) {
		this.recursivelySetIs3D(event.get_target(),false);
	}
	,recursivelySetIs3D: function(object,value) {
		if(js.Boot.__instanceof(object,starling.display.Sprite3D)) return;
		if(js.Boot.__instanceof(object,starling.display.DisplayObjectContainer)) {
			var container = object;
			var numChildren = container.get_numChildren();
			var _g = 0;
			while(_g < numChildren) {
				var i = _g++;
				this.recursivelySetIs3D(container.getChildAt(i),value);
			}
		}
		object.setIs3D(value);
	}
	,updateMatrices: function() {
		var x = this.get_x();
		var y = this.get_y();
		var scaleX = this.get_scaleX();
		var scaleY = this.get_scaleY();
		var pivotX = this.get_pivotX();
		var pivotY = this.get_pivotY();
		var rotationZ = this.get_rotation();
		this.mTransformationMatrix3D.identity();
		if(scaleX != 1.0 || scaleY != 1.0 || this.mScaleZ != 1.0) this.mTransformationMatrix3D.appendScale(scaleX || starling.display.Sprite3D.E,scaleY || starling.display.Sprite3D.E,this.get_scaleZ() || starling.display.Sprite3D.E);
		if(this.mRotationX != 0.0) this.mTransformationMatrix3D.appendRotation(starling.utils.StarlingUtils.rad2deg(this.mRotationX),new openfl.geom.Vector3D(1,0,0),null);
		if(this.mRotationY != 0.0) this.mTransformationMatrix3D.appendRotation(starling.utils.StarlingUtils.rad2deg(this.mRotationY),new openfl.geom.Vector3D(0,1,0),null);
		if(rotationZ != 0.0) this.mTransformationMatrix3D.appendRotation(starling.utils.StarlingUtils.rad2deg(rotationZ),new openfl.geom.Vector3D(0,0,1),null);
		if(x != 0.0 || y != 0.0 || this.mZ != 0.0) this.mTransformationMatrix3D.appendTranslation(x,y,this.mZ);
		if(pivotX != 0.0 || pivotY != 0.0 || this.mPivotZ != 0.0) this.mTransformationMatrix3D.prependTranslation(-pivotX,-pivotY,-this.mPivotZ);
		if(this.mZ > -starling.display.Sprite3D.E && this.mZ < starling.display.Sprite3D.E && this.mRotationX > -starling.display.Sprite3D.E && this.mRotationX < starling.display.Sprite3D.E && this.mRotationY > -starling.display.Sprite3D.E && this.mRotationY < starling.display.Sprite3D.E && this.mPivotZ > -starling.display.Sprite3D.E && this.mPivotZ < starling.display.Sprite3D.E) starling.utils.MatrixUtil.convertTo2D(this.mTransformationMatrix3D,this.mTransformationMatrix); else this.mTransformationMatrix.identity();
	}
	,get_is2D: function() {
		return this.mZ > -starling.display.Sprite3D.E && this.mZ < starling.display.Sprite3D.E && this.mRotationX > -starling.display.Sprite3D.E && this.mRotationX < starling.display.Sprite3D.E && this.mRotationY > -starling.display.Sprite3D.E && this.mRotationY < starling.display.Sprite3D.E && this.mPivotZ > -starling.display.Sprite3D.E && this.mPivotZ < starling.display.Sprite3D.E;
	}
	,get_transformationMatrix: function() {
		if(this.mTransformationChanged) {
			this.updateMatrices();
			this.mTransformationChanged = false;
		}
		return this.mTransformationMatrix;
	}
	,set_transformationMatrix: function(value) {
		starling.display.DisplayObjectContainer.prototype.set_transformationMatrix.call(this,value);
		this.mRotationX = this.mRotationY = this.mPivotZ = this.mZ = 0;
		this.mTransformationChanged = true;
		return value;
	}
	,get_transformationMatrix3D: function() {
		if(this.mTransformationChanged) {
			this.updateMatrices();
			this.mTransformationChanged = false;
		}
		return this.mTransformationMatrix3D;
	}
	,set_x: function(value) {
		starling.display.DisplayObjectContainer.prototype.set_x.call(this,value);
		this.mTransformationChanged = true;
		return value;
	}
	,set_y: function(value) {
		starling.display.DisplayObjectContainer.prototype.set_y.call(this,value);
		this.mTransformationChanged = true;
		return value;
	}
	,get_z: function() {
		return this.mZ;
	}
	,set_z: function(value) {
		this.mZ = value;
		this.mTransformationChanged = true;
		return value;
	}
	,set_pivotX: function(value) {
		starling.display.DisplayObjectContainer.prototype.set_pivotX.call(this,value);
		this.mTransformationChanged = true;
		return value;
	}
	,set_pivotY: function(value) {
		starling.display.DisplayObjectContainer.prototype.set_pivotY.call(this,value);
		this.mTransformationChanged = true;
		return value;
	}
	,get_pivotZ: function() {
		return this.mPivotZ;
	}
	,set_pivotZ: function(value) {
		this.mPivotZ = value;
		this.mTransformationChanged = true;
		return value;
	}
	,set_scaleX: function(value) {
		starling.display.DisplayObjectContainer.prototype.set_scaleX.call(this,value);
		this.mTransformationChanged = true;
		return value;
	}
	,set_scaleY: function(value) {
		starling.display.DisplayObjectContainer.prototype.set_scaleY.call(this,value);
		this.mTransformationChanged = true;
		return value;
	}
	,get_scaleZ: function() {
		return this.mScaleZ;
	}
	,set_scaleZ: function(value) {
		this.mScaleZ = value;
		this.mTransformationChanged = true;
		return value;
	}
	,set_skewX: function(value) {
		throw new openfl.errors.Error("3D objects do not support skewing");
		return value;
	}
	,set_skewY: function(value) {
		throw new openfl.errors.Error("3D objects do not support skewing");
		return value;
	}
	,set_rotation: function(value) {
		starling.display.DisplayObjectContainer.prototype.set_rotation.call(this,value);
		this.mTransformationChanged = true;
		return value;
	}
	,get_rotationX: function() {
		return this.mRotationX;
	}
	,set_rotationX: function(value) {
		this.mRotationX = starling.utils.MathUtil.normalizeAngle(value);
		this.mTransformationChanged = true;
		return value;
	}
	,get_rotationY: function() {
		return this.mRotationY;
	}
	,set_rotationY: function(value) {
		this.mRotationY = starling.utils.MathUtil.normalizeAngle(value);
		this.mTransformationChanged = true;
		return value;
	}
	,get_rotationZ: function() {
		return this.get_rotation();
	}
	,set_rotationZ: function(value) {
		this.set_rotation(value);
		return value;
	}
	,__class__: starling.display.Sprite3D
	,__properties__: $extend(starling.display.DisplayObjectContainer.prototype.__properties__,{set_rotationZ:"set_rotationZ",get_rotationZ:"get_rotationZ",set_rotationY:"set_rotationY",get_rotationY:"get_rotationY",set_rotationX:"set_rotationX",get_rotationX:"get_rotationX",set_scaleZ:"set_scaleZ",get_scaleZ:"get_scaleZ",set_pivotZ:"set_pivotZ",get_pivotZ:"get_pivotZ",set_z:"set_z",get_z:"get_z",get_is2D:"get_is2D"})
});
starling.display.Stage = function(width,height,color) {
	if(color == null) color = 0;
	starling.display.DisplayObjectContainer.call(this);
	this.mWidth = width;
	this.mHeight = height;
	this.mColor = color;
	this.mFieldOfView = 1.0;
	this.mProjectionOffset = new openfl.geom.Point();
	this.mCameraPosition = new openfl.geom.Vector3D();
	this.mEnterFrameEvent = new starling.events.EnterFrameEvent(starling.events.Event.ENTER_FRAME,0.0);
	this.mEnterFrameListeners = new Array();
};
$hxClasses["starling.display.Stage"] = starling.display.Stage;
starling.display.Stage.__name__ = ["starling","display","Stage"];
starling.display.Stage.__super__ = starling.display.DisplayObjectContainer;
starling.display.Stage.prototype = $extend(starling.display.DisplayObjectContainer.prototype,{
	mWidth: null
	,mHeight: null
	,mColor: null
	,mFieldOfView: null
	,mProjectionOffset: null
	,mCameraPosition: null
	,mEnterFrameEvent: null
	,mEnterFrameListeners: null
	,cameraPosition: null
	,advanceTime: function(passedTime) {
		this.mEnterFrameEvent.reset(starling.events.Event.ENTER_FRAME,false,passedTime);
		this.broadcastEvent(this.mEnterFrameEvent);
	}
	,hitTest: function(localPoint,forTouch) {
		if(forTouch == null) forTouch = false;
		if(forTouch && (!this.get_visible() || !this.get_touchable())) return null;
		if(localPoint.x < 0 || localPoint.x > this.mWidth || localPoint.y < 0 || localPoint.y > this.mHeight) return null;
		var target = starling.display.DisplayObjectContainer.prototype.hitTest.call(this,localPoint,forTouch);
		if(target == null) target = this;
		return target;
	}
	,drawToBitmapData: function(destination,transparent) {
		if(transparent == null) transparent = true;
		var support = new starling.core.RenderSupport();
		var star = starling.core.Starling.get_current();
		if(destination == null) {
			var width = star.get_backBufferWidth() * star.get_backBufferPixelsPerPoint();
			var height = star.get_backBufferHeight() * star.get_backBufferPixelsPerPoint();
			destination = new openfl.display.BitmapData(width,height,transparent);
		}
		support.set_renderTarget(null);
		support.setProjectionMatrix(0,0,this.mWidth,this.mHeight,this.mWidth,this.mHeight,this.get_cameraPosition());
		if(transparent) support.clear(); else support.clear(this.mColor,1);
		this.render(support,1.0);
		support.finishQuadBatch();
		support.dispose();
		starling.core.Starling.get_current().get_context().drawToBitmapData(destination);
		starling.core.Starling.get_current().get_context().present();
		return destination;
	}
	,getCameraPosition: function(space,result) {
		this.getTransformationMatrix3D(space,starling.display.Stage.sHelperMatrix);
		return starling.utils.MatrixUtil.transformCoords3D(starling.display.Stage.sHelperMatrix,this.mWidth / 2 + this.mProjectionOffset.x,this.mHeight / 2 + this.mProjectionOffset.y,-this.get_focalLength(),result);
	}
	,addEnterFrameListener: function(listener) {
		this.mEnterFrameListeners.push(listener);
	}
	,removeEnterFrameListener: function(listener) {
		var index = HxOverrides.indexOf(this.mEnterFrameListeners,listener,0);
		if(index >= 0) this.mEnterFrameListeners.splice(index,1);
	}
	,getChildEventListeners: function(object,eventType,listeners) {
		if(eventType == starling.events.Event.ENTER_FRAME && object == this) {
			var length = this.mEnterFrameListeners.length;
			var _g = 0;
			while(_g < length) {
				var i = _g++;
				listeners[listeners.length] = this.mEnterFrameListeners[i];
			}
		} else listeners = starling.display.DisplayObjectContainer.prototype.getChildEventListeners.call(this,object,eventType,listeners);
		return listeners;
	}
	,set_width: function(value) {
		throw new openfl.errors.IllegalOperationError("Cannot set width of stage");
		return value;
	}
	,set_height: function(value) {
		throw new openfl.errors.IllegalOperationError("Cannot set height of stage");
		return value;
	}
	,set_x: function(value) {
		throw new openfl.errors.IllegalOperationError("Cannot set x-coordinate of stage");
		return value;
	}
	,set_y: function(value) {
		throw new openfl.errors.IllegalOperationError("Cannot set y-coordinate of stage");
		return value;
	}
	,set_scaleX: function(value) {
		throw new openfl.errors.IllegalOperationError("Cannot scale stage");
		return value;
	}
	,set_scaleY: function(value) {
		throw new openfl.errors.IllegalOperationError("Cannot scale stage");
		return value;
	}
	,set_rotation: function(value) {
		throw new openfl.errors.IllegalOperationError("Cannot rotate stage");
		return value;
	}
	,set_skewX: function(value) {
		throw new openfl.errors.IllegalOperationError("Cannot skew stage");
		return value;
	}
	,set_skewY: function(value) {
		throw new openfl.errors.IllegalOperationError("Cannot skew stage");
		return value;
	}
	,set_filter: function(value) {
		throw new openfl.errors.IllegalOperationError("Cannot add filter to stage. Add it to 'root' instead!");
		return value;
	}
	,get_color: function() {
		return this.mColor;
	}
	,set_color: function(value) {
		this.mColor = value;
		return value;
	}
	,get_stageWidth: function() {
		return this.mWidth;
	}
	,set_stageWidth: function(value) {
		this.mWidth = value;
		return value;
	}
	,get_stageHeight: function() {
		return this.mHeight;
	}
	,set_stageHeight: function(value) {
		this.mHeight = value;
		return value;
	}
	,get_focalLength: function() {
		return this.mWidth / (2 * Math.tan(this.mFieldOfView / 2));
	}
	,set_focalLength: function(value) {
		this.mFieldOfView = 2 * Math.atan(this.get_stageWidth() / (2 * value));
		return value;
	}
	,get_fieldOfView: function() {
		return this.mFieldOfView;
	}
	,set_fieldOfView: function(value) {
		this.mFieldOfView = value;
		return value;
	}
	,get_projectionOffset: function() {
		return this.mProjectionOffset;
	}
	,set_projectionOffset: function(value) {
		this.mProjectionOffset.setTo(value.x,value.y);
		return value;
	}
	,get_cameraPosition: function() {
		return this.getCameraPosition(null,this.mCameraPosition);
	}
	,__class__: starling.display.Stage
	,__properties__: $extend(starling.display.DisplayObjectContainer.prototype.__properties__,{get_cameraPosition:"get_cameraPosition",set_projectionOffset:"set_projectionOffset",get_projectionOffset:"get_projectionOffset",set_fieldOfView:"set_fieldOfView",get_fieldOfView:"get_fieldOfView",set_focalLength:"set_focalLength",get_focalLength:"get_focalLength",set_stageHeight:"set_stageHeight",get_stageHeight:"get_stageHeight",set_stageWidth:"set_stageWidth",get_stageWidth:"get_stageWidth",set_color:"set_color",get_color:"get_color"})
});
starling.errors = {};
starling.errors.AbstractClassError = function(message,id) {
	if(id == null) id = 0;
	if(message == null) message = "Cannot instantiate abstract class";
	openfl.errors.Error.call(this,message,id);
};
$hxClasses["starling.errors.AbstractClassError"] = starling.errors.AbstractClassError;
starling.errors.AbstractClassError.__name__ = ["starling","errors","AbstractClassError"];
starling.errors.AbstractClassError.__super__ = openfl.errors.Error;
starling.errors.AbstractClassError.prototype = $extend(openfl.errors.Error.prototype,{
	__class__: starling.errors.AbstractClassError
});
starling.errors.AbstractMethodError = function(message,id) {
	if(id == null) id = 0;
	if(message == null) message = "Method needs to be implemented in subclass";
	openfl.errors.Error.call(this,message,id);
};
$hxClasses["starling.errors.AbstractMethodError"] = starling.errors.AbstractMethodError;
starling.errors.AbstractMethodError.__name__ = ["starling","errors","AbstractMethodError"];
starling.errors.AbstractMethodError.__super__ = openfl.errors.Error;
starling.errors.AbstractMethodError.prototype = $extend(openfl.errors.Error.prototype,{
	__class__: starling.errors.AbstractMethodError
});
starling.errors.MissingContextError = function(message,id) {
	if(id == null) id = 0;
	if(message == null) message = "Starling context is missing";
	openfl.errors.Error.call(this,message,id);
};
$hxClasses["starling.errors.MissingContextError"] = starling.errors.MissingContextError;
starling.errors.MissingContextError.__name__ = ["starling","errors","MissingContextError"];
starling.errors.MissingContextError.__super__ = openfl.errors.Error;
starling.errors.MissingContextError.prototype = $extend(openfl.errors.Error.prototype,{
	__class__: starling.errors.MissingContextError
});
starling.errors.NotSupportedError = function(message,id) {
	if(id == null) id = 0;
	if(message == null) message = "";
	openfl.errors.Error.call(this,message,id);
};
$hxClasses["starling.errors.NotSupportedError"] = starling.errors.NotSupportedError;
starling.errors.NotSupportedError.__name__ = ["starling","errors","NotSupportedError"];
starling.errors.NotSupportedError.__super__ = openfl.errors.Error;
starling.errors.NotSupportedError.prototype = $extend(openfl.errors.Error.prototype,{
	__class__: starling.errors.NotSupportedError
});
starling.events.Event = function(type,bubbles,data) {
	if(bubbles == null) bubbles = false;
	this.mType = type;
	this.mBubbles = bubbles;
	this.mData = data;
};
$hxClasses["starling.events.Event"] = starling.events.Event;
starling.events.Event.__name__ = ["starling","events","Event"];
starling.events.Event.fromPool = function(type,bubbles,data) {
	if(bubbles == null) bubbles = false;
	if(starling.events.Event.sEventPool.length > 0) return starling.events.Event.sEventPool.pop().reset(type,bubbles,data); else return new starling.events.Event(type,bubbles,data);
};
starling.events.Event.toPool = function(event) {
	event.mData = event.mTarget = event.mCurrentTarget = null;
	starling.events.Event.sEventPool[starling.events.Event.sEventPool.length] = event;
};
starling.events.Event.prototype = {
	mTarget: null
	,mCurrentTarget: null
	,mType: null
	,mBubbles: null
	,mStopsPropagation: null
	,mStopsImmediatePropagation: null
	,mData: null
	,bubbles: null
	,target: null
	,currentTarget: null
	,type: null
	,data: null
	,stopsPropagation: null
	,stopsImmediatePropagation: null
	,stopPropagation: function() {
		this.mStopsPropagation = true;
	}
	,stopImmediatePropagation: function() {
		this.mStopsPropagation = this.mStopsImmediatePropagation = true;
	}
	,toString: function() {
		var name = Type.getClassName(Type.getClass(this));
		haxe.Log.trace("CHECK name = " + name.split(".").pop(),{ fileName : "Event.hx", lineNumber : 133, className : "starling.events.Event", methodName : "toString"});
		return starling.utils.StarlingUtils.formatString("[{0} type=\"{1}\" bubbles={2}]",[name.split(".").pop(),this.mType,this.mBubbles]);
	}
	,get_bubbles: function() {
		return this.mBubbles;
	}
	,get_target: function() {
		return this.mTarget;
	}
	,get_currentTarget: function() {
		return this.mCurrentTarget;
	}
	,get_type: function() {
		return this.mType;
	}
	,get_data: function() {
		return this.mData;
	}
	,setTarget: function(value) {
		this.mTarget = value;
	}
	,setCurrentTarget: function(value) {
		this.mCurrentTarget = value;
	}
	,setData: function(value) {
		this.mData = value;
	}
	,get_stopsPropagation: function() {
		return this.mStopsPropagation;
	}
	,get_stopsImmediatePropagation: function() {
		return this.mStopsImmediatePropagation;
	}
	,reset: function(type,bubbles,data) {
		if(bubbles == null) bubbles = false;
		this.mType = type;
		this.mBubbles = bubbles;
		this.mData = data;
		this.mTarget = this.mCurrentTarget = null;
		this.mStopsPropagation = this.mStopsImmediatePropagation = false;
		return this;
	}
	,__class__: starling.events.Event
	,__properties__: {get_stopsImmediatePropagation:"get_stopsImmediatePropagation",get_stopsPropagation:"get_stopsPropagation",get_data:"get_data",get_type:"get_type",get_currentTarget:"get_currentTarget",get_target:"get_target",get_bubbles:"get_bubbles"}
};
starling.events.EnterFrameEvent = function(type,passedTime,bubbles) {
	if(bubbles == null) bubbles = false;
	starling.events.Event.call(this,type,bubbles,passedTime);
};
$hxClasses["starling.events.EnterFrameEvent"] = starling.events.EnterFrameEvent;
starling.events.EnterFrameEvent.__name__ = ["starling","events","EnterFrameEvent"];
starling.events.EnterFrameEvent.__super__ = starling.events.Event;
starling.events.EnterFrameEvent.prototype = $extend(starling.events.Event.prototype,{
	passedTime: null
	,get_passedTime: function() {
		return this.get_data();
	}
	,__class__: starling.events.EnterFrameEvent
	,__properties__: $extend(starling.events.Event.prototype.__properties__,{get_passedTime:"get_passedTime"})
});
starling.events.KeyboardEvent = function(type,charCode,keyCode,keyLocation,ctrlKey,altKey,shiftKey) {
	if(shiftKey == null) shiftKey = false;
	if(altKey == null) altKey = false;
	if(ctrlKey == null) ctrlKey = false;
	if(keyCode == null) keyCode = 0;
	if(charCode == null) charCode = 0;
	starling.events.Event.call(this,type,false,keyCode);
	this.mCharCode = charCode;
	this.mKeyCode = keyCode;
	this.mKeyLocation = keyLocation;
	this.mCtrlKey = ctrlKey;
	this.mAltKey = altKey;
	this.mShiftKey = shiftKey;
};
$hxClasses["starling.events.KeyboardEvent"] = starling.events.KeyboardEvent;
starling.events.KeyboardEvent.__name__ = ["starling","events","KeyboardEvent"];
starling.events.KeyboardEvent.__super__ = starling.events.Event;
starling.events.KeyboardEvent.prototype = $extend(starling.events.Event.prototype,{
	mCharCode: null
	,mKeyCode: null
	,mKeyLocation: null
	,mAltKey: null
	,mCtrlKey: null
	,mShiftKey: null
	,mIsDefaultPrevented: null
	,charCode: null
	,keyCode: null
	,keyLocation: null
	,altKey: null
	,ctrlKey: null
	,shiftKey: null
	,preventDefault: function() {
		this.mIsDefaultPrevented = true;
	}
	,isDefaultPrevented: function() {
		return this.mIsDefaultPrevented;
	}
	,get_charCode: function() {
		return this.mCharCode;
	}
	,get_keyCode: function() {
		return this.mKeyCode;
	}
	,get_keyLocation: function() {
		return this.mKeyLocation;
	}
	,get_altKey: function() {
		return this.mAltKey;
	}
	,get_ctrlKey: function() {
		return this.mCtrlKey;
	}
	,get_shiftKey: function() {
		return this.mShiftKey;
	}
	,__class__: starling.events.KeyboardEvent
	,__properties__: $extend(starling.events.Event.prototype.__properties__,{get_shiftKey:"get_shiftKey",get_ctrlKey:"get_ctrlKey",get_altKey:"get_altKey",get_keyLocation:"get_keyLocation",get_keyCode:"get_keyCode",get_charCode:"get_charCode"})
});
starling.events.ResizeEvent = function(type,width,height,bubbles) {
	if(bubbles == null) bubbles = false;
	starling.events.Event.call(this,type,bubbles,new openfl.geom.Point(width,height));
};
$hxClasses["starling.events.ResizeEvent"] = starling.events.ResizeEvent;
starling.events.ResizeEvent.__name__ = ["starling","events","ResizeEvent"];
starling.events.ResizeEvent.__super__ = starling.events.Event;
starling.events.ResizeEvent.prototype = $extend(starling.events.Event.prototype,{
	width: null
	,height: null
	,get_width: function() {
		return (js.Boot.__cast(this.get_data() , openfl.geom.Point)).x;
	}
	,get_height: function() {
		return (js.Boot.__cast(this.get_data() , openfl.geom.Point)).y;
	}
	,__class__: starling.events.ResizeEvent
	,__properties__: $extend(starling.events.Event.prototype.__properties__,{get_height:"get_height",get_width:"get_width"})
});
starling.events.Touch = function(id) {
	this.mPhase = "";
	this.mID = id;
	this.mTapCount = 0;
	this.mPhase = starling.events.TouchPhase.HOVER;
	this.mPressure = this.mWidth = this.mHeight = 1.0;
	var this1;
	this1 = new openfl.VectorData();
	var this2;
	this2 = new Array(0);
	this1.data = this2;
	this1.length = 0;
	this1.fixed = false;
	this.mBubbleChain = this1;
};
$hxClasses["starling.events.Touch"] = starling.events.Touch;
starling.events.Touch.__name__ = ["starling","events","Touch"];
starling.events.Touch.prototype = {
	mID: null
	,mGlobalX: null
	,mGlobalY: null
	,mPreviousGlobalX: null
	,mPreviousGlobalY: null
	,mTapCount: null
	,mPhase: null
	,mTarget: null
	,mTimestamp: null
	,mPressure: null
	,mWidth: null
	,mHeight: null
	,mBubbleChain: null
	,id: null
	,previousGlobalX: null
	,previousGlobalY: null
	,bubbleChain: null
	,getLocation: function(space,resultPoint) {
		starling.events.Touch.sHelperPoint.setTo(this.mGlobalX,this.mGlobalY);
		return space.globalToLocal(starling.events.Touch.sHelperPoint,resultPoint);
	}
	,getPreviousLocation: function(space,resultPoint) {
		starling.events.Touch.sHelperPoint.setTo(this.mPreviousGlobalX,this.mPreviousGlobalY);
		return space.globalToLocal(starling.events.Touch.sHelperPoint,resultPoint);
	}
	,getMovement: function(space,resultPoint) {
		if(resultPoint == null) resultPoint = new openfl.geom.Point();
		this.getLocation(space,resultPoint);
		var x = resultPoint.x;
		var y = resultPoint.y;
		this.getPreviousLocation(space,resultPoint);
		resultPoint.x = x - resultPoint.x;
		resultPoint.y = y - resultPoint.y;
		return resultPoint;
	}
	,isTouching: function(target) {
		return (function($this) {
			var $r;
			var this1 = $this.mBubbleChain;
			var value = -1;
			{
				var _g1 = 0;
				var _g = this1.length;
				while(_g1 < _g) {
					var i = _g1++;
					if(this1.data[i] == target) {
						value = i;
						break;
					}
				}
			}
			$r = value;
			return $r;
		}(this)) != -1;
	}
	,toString: function() {
		return starling.utils.StarlingUtils.formatString("Touch {0}: globalX={1}, globalY={2}, phase={3}",[this.mID,this.mGlobalX,this.mGlobalY,this.mPhase]);
	}
	,clone: function() {
		var clone = new starling.events.Touch(this.mID);
		clone.mGlobalX = this.mGlobalX;
		clone.mGlobalY = this.mGlobalY;
		clone.mPreviousGlobalX = this.mPreviousGlobalX;
		clone.mPreviousGlobalY = this.mPreviousGlobalY;
		clone.mPhase = this.mPhase;
		clone.mTapCount = this.mTapCount;
		clone.mTimestamp = this.mTimestamp;
		clone.mPressure = this.mPressure;
		clone.mWidth = this.mWidth;
		clone.mHeight = this.mHeight;
		clone.set_target(this.mTarget);
		return clone;
	}
	,updateBubbleChain: function() {
		if(this.mTarget != null) {
			var length = 1;
			var element = this.mTarget;
			var this1 = this.mBubbleChain;
			if(!this1.fixed) {
				if(1 > this1.length) {
					var data;
					var this2;
					this2 = new Array(1);
					data = this2;
					haxe.ds._Vector.Vector_Impl_.blit(this1.data,0,data,0,Std["int"](Math.min(this1.data.length,1)));
					this1.data = data;
				}
				this1.length = 1;
			}
			1;
			var this3 = this.mBubbleChain;
			if(!this3.fixed) {
				if(0 >= this3.length) this3.length = 1;
				if(this3.data.length < this3.length) {
					var data1;
					var this4;
					this4 = new Array(this3.data.length + 10);
					data1 = this4;
					haxe.ds._Vector.Vector_Impl_.blit(this3.data,0,data1,0,this3.data.length);
					this3.data = data1;
				}
			}
			this3.data[0] = element;
			while((element = element.get_parent()) != null) {
				var this5 = this.mBubbleChain;
				var key = length++;
				if(!this5.fixed) {
					if(key >= this5.length) this5.length = key + 1;
					if(this5.data.length < this5.length) {
						var data2;
						var this6;
						this6 = new Array(this5.data.length + 10);
						data2 = this6;
						haxe.ds._Vector.Vector_Impl_.blit(this5.data,0,data2,0,this5.data.length);
						this5.data = data2;
					}
				}
				this5.data[key] = element;
			}
		} else {
			var this7 = this.mBubbleChain;
			if(!this7.fixed) {
				if(0 > this7.length) {
					var data3;
					var this8;
					this8 = new Array(0);
					data3 = this8;
					haxe.ds._Vector.Vector_Impl_.blit(this7.data,0,data3,0,Std["int"](Math.min(this7.data.length,0)));
					this7.data = data3;
				}
				this7.length = 0;
			}
			0;
		}
	}
	,get_id: function() {
		return this.mID;
	}
	,get_previousGlobalX: function() {
		return this.mPreviousGlobalX;
	}
	,get_previousGlobalY: function() {
		return this.mPreviousGlobalY;
	}
	,get_globalX: function() {
		return this.mGlobalX;
	}
	,set_globalX: function(value) {
		if(this.mGlobalX != this.mGlobalX) this.mPreviousGlobalX = value; else this.mPreviousGlobalX = this.mGlobalX;
		this.mGlobalX = value;
		return value;
	}
	,get_globalY: function() {
		return this.mGlobalY;
	}
	,set_globalY: function(value) {
		if(this.mGlobalY != this.mGlobalY) this.mPreviousGlobalY = value; else this.mPreviousGlobalY = this.mGlobalY;
		this.mGlobalY = value;
		return value;
	}
	,get_tapCount: function() {
		return this.mTapCount;
	}
	,set_tapCount: function(value) {
		this.mTapCount = value;
		return value;
	}
	,get_phase: function() {
		return this.mPhase;
	}
	,set_phase: function(value) {
		this.mPhase = value;
		return value;
	}
	,get_target: function() {
		return this.mTarget;
	}
	,set_target: function(value) {
		if(this.mTarget != value) {
			this.mTarget = value;
			this.updateBubbleChain();
		}
		return value;
	}
	,get_timestamp: function() {
		return this.mTimestamp;
	}
	,set_timestamp: function(value) {
		this.mTimestamp = value;
		return value;
	}
	,get_pressure: function() {
		return this.mPressure;
	}
	,set_pressure: function(value) {
		this.mPressure = value;
		return value;
	}
	,get_width: function() {
		return this.mWidth;
	}
	,set_width: function(value) {
		this.mWidth = value;
		return value;
	}
	,get_height: function() {
		return this.mHeight;
	}
	,set_height: function(value) {
		this.mHeight = value;
		return value;
	}
	,dispatchEvent: function(event) {
		if(this.mTarget != null) event.dispatch(this.mBubbleChain);
	}
	,get_bubbleChain: function() {
		var this1 = this.mBubbleChain;
		var a;
		var this2;
		var this3;
		this3 = new openfl.VectorData();
		var this4;
		this4 = new Array(0);
		this3.data = this4;
		this3.length = 0;
		this3.fixed = false;
		this2 = this3;
		a = this2;
		var vectorData = new openfl.VectorData();
		if(a != null) vectorData.length = this1.length + a.length; else vectorData.length = this1.length;
		vectorData.fixed = false;
		var this5;
		this5 = new Array(vectorData.length);
		vectorData.data = this5;
		haxe.ds._Vector.Vector_Impl_.blit(this1.data,0,vectorData.data,0,this1.length);
		if(a != null) haxe.ds._Vector.Vector_Impl_.blit(a.data,0,vectorData.data,this1.length,a.length);
		return vectorData;
	}
	,__class__: starling.events.Touch
	,__properties__: {get_bubbleChain:"get_bubbleChain",set_height:"set_height",get_height:"get_height",set_width:"set_width",get_width:"get_width",set_pressure:"set_pressure",get_pressure:"get_pressure",set_timestamp:"set_timestamp",get_timestamp:"get_timestamp",set_target:"set_target",get_target:"get_target",set_phase:"set_phase",get_phase:"get_phase",set_tapCount:"set_tapCount",get_tapCount:"get_tapCount",set_globalY:"set_globalY",get_globalY:"get_globalY",set_globalX:"set_globalX",get_globalX:"get_globalX",get_previousGlobalY:"get_previousGlobalY",get_previousGlobalX:"get_previousGlobalX",get_id:"get_id"}
};
starling.events.TouchEvent = function(type,touches,shiftKey,ctrlKey,bubbles) {
	if(bubbles == null) bubbles = true;
	if(ctrlKey == null) ctrlKey = false;
	if(shiftKey == null) shiftKey = false;
	starling.events.Event.call(this,type,bubbles,touches);
	this.mShiftKey = shiftKey;
	this.mCtrlKey = ctrlKey;
	this.mTimestamp = -1.0;
	this.mVisitedObjects = new Array();
	var numTouches = touches.length;
	var _g = 0;
	while(_g < numTouches) {
		var i = _g++;
		if(touches.data[i].get_timestamp() > this.mTimestamp) this.mTimestamp = touches.data[i].get_timestamp();
	}
};
$hxClasses["starling.events.TouchEvent"] = starling.events.TouchEvent;
starling.events.TouchEvent.__name__ = ["starling","events","TouchEvent"];
starling.events.TouchEvent.__super__ = starling.events.Event;
starling.events.TouchEvent.prototype = $extend(starling.events.Event.prototype,{
	mShiftKey: null
	,mCtrlKey: null
	,mTimestamp: null
	,mVisitedObjects: null
	,timestamp: null
	,touches: null
	,shiftKey: null
	,ctrlKey: null
	,getTouches: function(target,phase,result) {
		if(result == null) {
			var this1;
			this1 = new openfl.VectorData();
			var this2;
			this2 = new Array(0);
			this1.data = this2;
			this1.length = 0;
			this1.fixed = false;
			result = this1;
		}
		var allTouches = this.get_data();
		var numTouches = allTouches.length;
		var _g = 0;
		while(_g < numTouches) {
			var i = _g++;
			var touch = allTouches.data[i];
			var correctTarget = touch.isTouching(target);
			var correctPhase = phase == null || phase == touch.get_phase();
			if(correctTarget && correctPhase) {
				var key = result.length;
				if(!result.fixed) {
					if(key >= result.length) result.length = key + 1;
					if(result.data.length < result.length) {
						var data;
						var this3;
						this3 = new Array(result.data.length + 10);
						data = this3;
						haxe.ds._Vector.Vector_Impl_.blit(result.data,0,data,0,result.data.length);
						result.data = data;
					}
				}
				result.data[key] = touch;
			}
		}
		return result;
	}
	,getTouch: function(target,phase,id) {
		if(id == null) id = -1;
		starling.events.TouchEvent.sTouches = this.getTouches(target,phase,starling.events.TouchEvent.sTouches);
		var numTouches = starling.events.TouchEvent.sTouches.length;
		if(numTouches > 0) {
			var touch = null;
			if(id < 0) touch = starling.events.TouchEvent.sTouches.data[0]; else {
				var _g = 0;
				while(_g < numTouches) {
					var i = _g++;
					if(starling.events.TouchEvent.sTouches.data[i].get_id() == id) {
						touch = starling.events.TouchEvent.sTouches.data[i];
						break;
					}
				}
			}
			var this1 = starling.events.TouchEvent.sTouches;
			if(!this1.fixed) {
				if(0 > this1.length) {
					var data;
					var this2;
					this2 = new Array(0);
					data = this2;
					haxe.ds._Vector.Vector_Impl_.blit(this1.data,0,data,0,Std["int"](Math.min(this1.data.length,0)));
					this1.data = data;
				}
				this1.length = 0;
			}
			0;
			return touch;
		} else return null;
	}
	,interactsWith: function(target) {
		var result = false;
		starling.events.TouchEvent.sTouches = this.getTouches(target,null,starling.events.TouchEvent.sTouches);
		var _g1 = 0;
		var _g = starling.events.TouchEvent.sTouches.length;
		while(_g1 < _g) {
			var j = _g1++;
			var i = starling.events.TouchEvent.sTouches.length - 1 - j;
			if(starling.events.TouchEvent.sTouches.data[i].get_phase() != starling.events.TouchPhase.ENDED) {
				result = true;
				break;
			}
		}
		var this1 = starling.events.TouchEvent.sTouches;
		if(!this1.fixed) {
			if(0 > this1.length) {
				var data;
				var this2;
				this2 = new Array(0);
				data = this2;
				haxe.ds._Vector.Vector_Impl_.blit(this1.data,0,data,0,Std["int"](Math.min(this1.data.length,0)));
				this1.data = data;
			}
			this1.length = 0;
		}
		0;
		return result;
	}
	,dispatch: function(chain) {
		if(chain != null && chain.length) {
			var chainLength;
			if(this.get_bubbles()) chainLength = chain.length; else chainLength = 1;
			var previousTarget = this.get_target();
			var eventDispatcher = chain.data[0];
			this.setTarget(eventDispatcher);
			var _g = 0;
			while(_g < chainLength) {
				var i = _g++;
				var chainElement = chain.data[i];
				if(HxOverrides.indexOf(this.mVisitedObjects,chainElement,0) == -1) {
					var stopPropagation = chainElement.invokeEvent(this);
					this.mVisitedObjects[this.mVisitedObjects.length] = chainElement;
					if(stopPropagation) break;
				}
			}
			this.setTarget(previousTarget);
		}
	}
	,get_timestamp: function() {
		return this.mTimestamp;
	}
	,get_touches: function() {
		return this.get_data().concat();
	}
	,get_shiftKey: function() {
		return this.mShiftKey;
	}
	,get_ctrlKey: function() {
		return this.mCtrlKey;
	}
	,__class__: starling.events.TouchEvent
	,__properties__: $extend(starling.events.Event.prototype.__properties__,{get_ctrlKey:"get_ctrlKey",get_shiftKey:"get_shiftKey",get_touches:"get_touches",get_timestamp:"get_timestamp"})
});
starling.events.TouchMarker = function() {
	starling.display.Sprite.call(this);
	this.mCenter = new openfl.geom.Point();
	this.mTexture = this.createTexture();
	var _g = 0;
	while(_g < 2) {
		var i = _g++;
		var marker = new starling.display.Image(this.mTexture);
		marker.set_pivotX(this.mTexture.get_width() / 2);
		marker.set_pivotY(this.mTexture.get_height() / 2);
		marker.set_touchable(false);
		this.addChild(marker);
	}
};
$hxClasses["starling.events.TouchMarker"] = starling.events.TouchMarker;
starling.events.TouchMarker.__name__ = ["starling","events","TouchMarker"];
starling.events.TouchMarker.__super__ = starling.display.Sprite;
starling.events.TouchMarker.prototype = $extend(starling.display.Sprite.prototype,{
	mCenter: null
	,mTexture: null
	,realMarker: null
	,mockMarker: null
	,realX: null
	,realY: null
	,mockX: null
	,mockY: null
	,dispose: function() {
		this.mTexture.dispose();
		starling.display.Sprite.prototype.dispose.call(this);
	}
	,moveMarker: function(x,y,withCenter) {
		if(withCenter == null) withCenter = false;
		if(withCenter) {
			this.mCenter.x += x - this.get_realMarker().get_x();
			this.mCenter.y += y - this.get_realMarker().get_y();
		}
		this.get_realMarker().set_x(x);
		this.get_realMarker().set_y(y);
		this.get_mockMarker().set_x(2 * this.mCenter.x - x);
		this.get_mockMarker().set_y(2 * this.mCenter.y - y);
	}
	,moveCenter: function(x,y) {
		this.mCenter.x = x;
		this.mCenter.y = y;
		this.moveMarker(this.get_realX(),this.get_realY());
	}
	,createTexture: function() {
		var scale = starling.core.Starling.get_ContentScaleFactor();
		var radius = 12 * scale;
		var width = 32 * scale;
		var height = 32 * scale;
		var thickness = 1.5 * scale;
		var shape = new openfl.display.Shape();
		shape.get_graphics().lineStyle(thickness,0,0.3);
		shape.get_graphics().drawCircle(width / 2,height / 2,radius + thickness);
		shape.get_graphics().beginFill(16777215,0.4);
		shape.get_graphics().lineStyle(thickness,16777215);
		shape.get_graphics().drawCircle(width / 2,height / 2,radius);
		shape.get_graphics().endFill();
		var bmpData = new openfl.display.BitmapData(width,height,true,0);
		bmpData.draw(shape);
		return starling.textures.Texture.fromBitmapData(bmpData,false,false,scale);
	}
	,get_realMarker: function() {
		return this.getChildAt(0);
	}
	,get_mockMarker: function() {
		return this.getChildAt(1);
	}
	,get_realX: function() {
		return this.get_realMarker().get_x();
	}
	,get_realY: function() {
		return this.get_realMarker().get_y();
	}
	,get_mockX: function() {
		return this.get_mockMarker().get_x();
	}
	,get_mockY: function() {
		return this.get_mockMarker().get_y();
	}
	,__class__: starling.events.TouchMarker
	,__properties__: $extend(starling.display.Sprite.prototype.__properties__,{get_mockY:"get_mockY",get_mockX:"get_mockX",get_realY:"get_realY",get_realX:"get_realX",get_mockMarker:"get_mockMarker",get_realMarker:"get_realMarker"})
});
starling.events.TouchPhase = function() {
	throw new starling.errors.AbstractClassError();
};
$hxClasses["starling.events.TouchPhase"] = starling.events.TouchPhase;
starling.events.TouchPhase.__name__ = ["starling","events","TouchPhase"];
starling.events.TouchPhase.prototype = {
	__class__: starling.events.TouchPhase
};
starling.events.TouchProcessor = function(stage) {
	this.mCurrentTouches = (function($this) {
		var $r;
		var this1;
		this1 = new openfl.VectorData();
		{
			var this2;
			this2 = new Array(0);
			this1.data = this2;
		}
		this1.length = 0;
		this1.fixed = false;
		$r = this1;
		return $r;
	}(this));
	this.mMultitapDistance = 25;
	this.mMultitapTime = 0.3;
	this.mCtrlDown = false;
	this.mShiftDown = false;
	this.mRoot = this.mStage = stage;
	this.mElapsedTime = 0.0;
	var this1;
	this1 = new openfl.VectorData();
	var this2;
	this2 = new Array(0);
	this1.data = this2;
	this1.length = 0;
	this1.fixed = false;
	this.mQueue = this1;
	this.mLastTaps = new Array();
	var this3 = this.mCurrentTouches;
	if(!this3.fixed) {
		if(0 > this3.length) {
			var data;
			var this4;
			this4 = new Array(0);
			data = this4;
			haxe.ds._Vector.Vector_Impl_.blit(this3.data,0,data,0,Std["int"](Math.min(this3.data.length,0)));
			this3.data = data;
		}
		this3.length = 0;
	}
	0;
	this.mStage.addEventListener(starling.events.KeyboardEvent.KEY_DOWN,$bind(this,this.onKey));
	this.mStage.addEventListener(starling.events.KeyboardEvent.KEY_UP,$bind(this,this.onKey));
	this.monitorInterruptions(true);
};
$hxClasses["starling.events.TouchProcessor"] = starling.events.TouchProcessor;
starling.events.TouchProcessor.__name__ = ["starling","events","TouchProcessor"];
starling.events.TouchProcessor.prototype = {
	mStage: null
	,mRoot: null
	,mElapsedTime: null
	,mTouchMarker: null
	,mLastTaps: null
	,mShiftDown: null
	,mCtrlDown: null
	,mMultitapTime: null
	,mMultitapDistance: null
	,mQueue: null
	,mCurrentTouches: null
	,stage: null
	,numCurrentTouches: null
	,dispose: function() {
		this.monitorInterruptions(false);
		this.mStage.removeEventListener(starling.events.KeyboardEvent.KEY_DOWN,$bind(this,this.onKey));
		this.mStage.removeEventListener(starling.events.KeyboardEvent.KEY_UP,$bind(this,this.onKey));
		if(this.mTouchMarker != null) this.mTouchMarker.dispose();
	}
	,advanceTime: function(passedTime) {
		var touch;
		this.mElapsedTime += passedTime;
		var this1 = starling.events.TouchProcessor.sUpdatedTouches;
		if(!this1.fixed) {
			if(0 > this1.length) {
				var data;
				var this2;
				this2 = new Array(0);
				data = this2;
				haxe.ds._Vector.Vector_Impl_.blit(this1.data,0,data,0,Std["int"](Math.min(this1.data.length,0)));
				this1.data = data;
			}
			this1.length = 0;
		}
		0;
		var len = this.mQueue.length;
		var _g = 0;
		while(_g < len) {
			var i = _g++;
			var j = len - 1 - i;
			var mQueueItem = this.mQueue.data[j];
			if(mQueueItem == null) continue;
			var _g1 = 0;
			var _g2 = this.mCurrentTouches;
			while(_g1 < _g2.length) {
				var touch1 = _g2.data[_g1];
				++_g1;
				if(touch1.get_phase() == starling.events.TouchPhase.BEGAN || touch1.get_phase() == starling.events.TouchPhase.MOVED) touch1.set_phase(starling.events.TouchPhase.STATIONARY);
			}
			while(this.mQueue.length > 0 && this.containsTouchWithID((function($this) {
				var $r;
				var this3 = starling.events.TouchProcessor.sUpdatedTouches;
				var value = new Array();
				{
					var _g11 = 0;
					var _g3 = this3.data.length;
					while(_g11 < _g3) {
						var i1 = _g11++;
						value.push(this3.data[i1]);
					}
				}
				$r = value;
				return $r;
			}(this)),mQueueItem[0]) == false) {
				var touchArgs;
				var this4 = this.mQueue;
				var value1 = null;
				if(!this4.fixed) {
					if(this4.length > 0) {
						this4.length--;
						value1 = this4.data[this4.length];
					}
				}
				touchArgs = value1;
				touch = this.createOrUpdateTouch(touchArgs[0],touchArgs[1],touchArgs[2],touchArgs[3],touchArgs[4],touchArgs[5],touchArgs[6]);
				var this5 = starling.events.TouchProcessor.sUpdatedTouches;
				var key = starling.events.TouchProcessor.sUpdatedTouches.length;
				if(!this5.fixed) {
					if(key >= this5.length) this5.length = key + 1;
					if(this5.data.length < this5.length) {
						var data1;
						var this6;
						this6 = new Array(this5.data.length + 10);
						data1 = this6;
						haxe.ds._Vector.Vector_Impl_.blit(this5.data,0,data1,0,this5.data.length);
						this5.data = data1;
					}
				}
				this5.data[key] = touch;
			}
			this.processTouches(starling.events.TouchProcessor.sUpdatedTouches,this.mShiftDown,this.mCtrlDown);
			var _g21 = 0;
			var _g12 = this.mCurrentTouches.length;
			while(_g21 < _g12) {
				var k = _g21++;
				var i2 = this.mCurrentTouches.length - k - 1;
				if(this.mCurrentTouches.data[i2].get_phase() == starling.events.TouchPhase.ENDED) {
					var this7 = this.mCurrentTouches;
					var pos = i2;
					var len1 = 1;
					if(pos < 0) pos += this7.length;
					if(pos + len1 > this7.length) len1 = this7.length - pos;
					if(len1 < 0) len1 = 0;
					var vectorData = new openfl.VectorData();
					vectorData.length = len1;
					vectorData.fixed = false;
					var this8;
					this8 = new Array(len1);
					vectorData.data = this8;
					haxe.ds._Vector.Vector_Impl_.blit(this7.data,pos,vectorData.data,0,len1);
					if(len1 > 0) {
						this7.length -= len1;
						haxe.ds._Vector.Vector_Impl_.blit(this7.data,pos + len1,this7.data,pos,this7.length - pos);
					}
					vectorData;
				}
			}
			var this9;
			this9 = new openfl.VectorData();
			var this10;
			this10 = new Array(0);
			this9.data = this10;
			this9.length = 0;
			this9.fixed = false;
			starling.events.TouchProcessor.sUpdatedTouches = this9;
		}
		var this11;
		this11 = new openfl.VectorData();
		var this12;
		this12 = new Array(0);
		this11.data = this12;
		this11.length = 0;
		this11.fixed = false;
		this.mQueue = this11;
	}
	,processTouches: function(touches,shiftDown,ctrlDown) {
		var this1 = starling.events.TouchProcessor.sHoveringTouchData;
		if(!this1.fixed) {
			if(0 > this1.length) {
				var data;
				var this2;
				this2 = new Array(0);
				data = this2;
				haxe.ds._Vector.Vector_Impl_.blit(this1.data,0,data,0,Std["int"](Math.min(this1.data.length,0)));
				this1.data = data;
			}
			this1.length = 0;
		}
		0;
		var touchEvent = new starling.events.TouchEvent(starling.events.TouchEvent.TOUCH,this.mCurrentTouches,shiftDown,ctrlDown);
		var touch;
		var _g = 0;
		while(_g < touches.length) {
			var touch1 = touches.data[_g];
			++_g;
			if(touch1.get_phase() == starling.events.TouchPhase.HOVER && touch1.get_target() != null) {
				var this3 = starling.events.TouchProcessor.sHoveringTouchData;
				var key = starling.events.TouchProcessor.sHoveringTouchData.length;
				var value = { touch : touch1, target : touch1.get_target(), bubbleChain : touch1.get_bubbleChain()};
				if(!this3.fixed) {
					if(key >= this3.length) this3.length = key + 1;
					if(this3.data.length < this3.length) {
						var data1;
						var this4;
						this4 = new Array(this3.data.length + 10);
						data1 = this4;
						haxe.ds._Vector.Vector_Impl_.blit(this3.data,0,data1,0,this3.data.length);
						this3.data = data1;
					}
				}
				this3.data[key] = value;
			}
			if(touch1.get_phase() == starling.events.TouchPhase.HOVER || touch1.get_phase() == starling.events.TouchPhase.BEGAN) {
				starling.events.TouchProcessor.sHelperPoint.setTo(touch1.get_globalX(),touch1.get_globalY());
				touch1.set_target(this.mRoot.hitTest(starling.events.TouchProcessor.sHelperPoint,true));
			}
		}
		var _g1 = 0;
		var _g11 = starling.events.TouchProcessor.sHoveringTouchData;
		while(_g1 < _g11.length) {
			var touchData = _g11.data[_g1];
			++_g1;
			var touch2 = touchData.touch;
			if(touch2 != touchData.target) touchEvent.dispatch(touchData.bubbleChain);
		}
		var _g2 = 0;
		while(_g2 < touches.length) {
			var touch3 = touches.data[_g2];
			++_g2;
			touch3.dispatchEvent(touchEvent);
		}
	}
	,enqueue: function(touchID,phase,globalX,globalY,pressure,width,height) {
		if(height == null) height = 1.0;
		if(width == null) width = 1.0;
		if(pressure == null) pressure = 1.0;
		var $arguments = [touchID,phase,globalX,globalY,pressure,width,height];
		var this1 = this.mQueue;
		if(!this1.fixed) {
			this1.length++;
			if(this1.data.length < this1.length) {
				var data;
				var this2;
				this2 = new Array(this1.length + 10);
				data = this2;
				haxe.ds._Vector.Vector_Impl_.blit(this1.data,0,data,1,this1.data.length);
				this1.data = data;
			} else haxe.ds._Vector.Vector_Impl_.blit(this1.data,0,this1.data,1,this1.length - 1);
			this1.data[0] = $arguments;
		}
		if(this.mCtrlDown && this.get_simulateMultitouch() && touchID == 0) {
			this.mTouchMarker.moveMarker(globalX,globalY,this.mShiftDown);
			var this3 = this.mQueue;
			var x = [1,phase,this.mTouchMarker.get_mockX(),this.mTouchMarker.get_mockY()];
			if(!this3.fixed) {
				this3.length++;
				if(this3.data.length < this3.length) {
					var data1;
					var this4;
					this4 = new Array(this3.length + 10);
					data1 = this4;
					haxe.ds._Vector.Vector_Impl_.blit(this3.data,0,data1,1,this3.data.length);
					this3.data = data1;
				} else haxe.ds._Vector.Vector_Impl_.blit(this3.data,0,this3.data,1,this3.length - 1);
				this3.data[0] = x;
			}
		}
	}
	,enqueueMouseLeftStage: function() {
		var mouse = this.getCurrentTouch(0);
		if(mouse == null || mouse.get_phase() != starling.events.TouchPhase.HOVER) return;
		var offset = 1;
		var exitX = mouse.get_globalX();
		var exitY = mouse.get_globalY();
		var distLeft = mouse.get_globalX();
		var distRight = this.mStage.get_stageWidth() - distLeft;
		var distTop = mouse.get_globalY();
		var distBottom = this.mStage.get_stageHeight() - distTop;
		var minDist = this.min([distLeft,distRight,distTop,distBottom]);
		if(minDist == distLeft) exitX = -offset; else if(minDist == distRight) exitX = this.mStage.get_stageWidth() + offset; else if(minDist == distTop) exitY = -offset; else exitY = this.mStage.get_stageHeight() + offset;
		this.enqueue(0,starling.events.TouchPhase.HOVER,exitX,exitY);
	}
	,min: function(value) {
		var minValue = Math.POSITIVE_INFINITY;
		var minIndex = 0;
		var _g1 = 0;
		var _g = value.length;
		while(_g1 < _g) {
			var i = _g1++;
			if(value[i] < minValue) {
				minValue = value[i];
				minIndex = i;
			}
		}
		return value[minIndex];
	}
	,createOrUpdateTouch: function(touchID,phase,globalX,globalY,pressure,width,height) {
		if(height == null) height = 1.0;
		if(width == null) width = 1.0;
		if(pressure == null) pressure = 1.0;
		var touch = this.getCurrentTouch(touchID);
		if(touch == null) {
			touch = new starling.events.Touch(touchID);
			this.addCurrentTouch(touch);
		}
		touch.set_globalX(globalX);
		touch.set_globalY(globalY);
		touch.set_phase(phase);
		touch.set_timestamp(this.mElapsedTime);
		touch.set_pressure(pressure);
		touch.set_width(width);
		touch.set_height(height);
		if(phase == starling.events.TouchPhase.BEGAN) this.updateTapCount(touch);
		return touch;
	}
	,updateTapCount: function(touch) {
		var nearbyTap = null;
		var minSqDist = this.mMultitapDistance * this.mMultitapDistance;
		var _g = 0;
		var _g1 = this.mLastTaps;
		while(_g < _g1.length) {
			var tap = _g1[_g];
			++_g;
			var sqDist = Math.pow(tap.get_globalX() - touch.get_globalX(),2) + Math.pow(tap.get_globalY() - touch.get_globalY(),2);
			if(sqDist <= minSqDist) {
				nearbyTap = tap;
				break;
			}
		}
		if(nearbyTap != null) {
			touch.set_tapCount(nearbyTap.get_tapCount() + 1);
			this.mLastTaps.splice(HxOverrides.indexOf(this.mLastTaps,nearbyTap,0),1);
		} else touch.set_tapCount(1);
		this.mLastTaps.push(touch.clone());
	}
	,addCurrentTouch: function(touch) {
		var _g1 = 0;
		var _g = this.mCurrentTouches.length;
		while(_g1 < _g) {
			var j = _g1++;
			var i = this.mCurrentTouches.length - j - 1;
			if(this.mCurrentTouches.data[i].get_id() == touch.get_id()) {
				var this1 = this.mCurrentTouches;
				var pos = i;
				var len = 1;
				if(pos < 0) pos += this1.length;
				if(pos + len > this1.length) len = this1.length - pos;
				if(len < 0) len = 0;
				var vectorData = new openfl.VectorData();
				vectorData.length = len;
				vectorData.fixed = false;
				var this2;
				this2 = new Array(len);
				vectorData.data = this2;
				haxe.ds._Vector.Vector_Impl_.blit(this1.data,pos,vectorData.data,0,len);
				if(len > 0) {
					this1.length -= len;
					haxe.ds._Vector.Vector_Impl_.blit(this1.data,pos + len,this1.data,pos,this1.length - pos);
				}
				vectorData;
			}
		}
		if(touch != null) {
			var this3 = this.mCurrentTouches;
			if(!this3.fixed) {
				this3.length++;
				if(this3.data.length < this3.length) {
					var data;
					var this4;
					this4 = new Array(this3.data.length + 10);
					data = this4;
					haxe.ds._Vector.Vector_Impl_.blit(this3.data,0,data,0,this3.data.length);
					this3.data = data;
				}
				this3.data[this3.length - 1] = touch;
			}
			this3.length;
		}
	}
	,getCurrentTouch: function(touchID) {
		var _g = 0;
		var _g1 = this.mCurrentTouches;
		while(_g < _g1.length) {
			var touch = _g1.data[_g];
			++_g;
			if(touch.get_id() == touchID) return touch;
		}
		return null;
	}
	,containsTouchWithID: function(touches,touchID) {
		var _g = 0;
		while(_g < touches.length) {
			var touch = touches[_g];
			++_g;
			if(touch.get_id() == touchID) return true;
		}
		return false;
	}
	,get_simulateMultitouch: function() {
		return this.mTouchMarker != null;
	}
	,set_simulateMultitouch: function(value) {
		if(this.get_simulateMultitouch() == value) return value;
		if(value) {
			this.mTouchMarker = new starling.events.TouchMarker();
			this.mTouchMarker.set_visible(false);
			this.mStage.addChild(this.mTouchMarker);
		} else {
			this.mTouchMarker.removeFromParent(true);
			this.mTouchMarker = null;
		}
		return value;
	}
	,get_multitapTime: function() {
		return this.mMultitapTime;
	}
	,set_multitapTime: function(value) {
		this.mMultitapTime = value;
		return value;
	}
	,get_multitapDistance: function() {
		return this.mMultitapDistance;
	}
	,set_multitapDistance: function(value) {
		this.mMultitapDistance = value;
		return value;
	}
	,get_root: function() {
		return this.mRoot;
	}
	,set_root: function(value) {
		this.mRoot = value;
		return value;
	}
	,get_stage: function() {
		return this.mStage;
	}
	,get_numCurrentTouches: function() {
		return this.mCurrentTouches.length;
	}
	,onKey: function(event) {
		if((function($this) {
			var $r;
			var a = event.get_keyCode();
			$r = (function($this) {
				var $r;
				var $int = a;
				$r = $int < 0?4294967296.0 + $int:$int + 0.0;
				return $r;
			}($this)) == 17;
			return $r;
		}(this)) || (function($this) {
			var $r;
			var a1 = event.get_keyCode();
			$r = (function($this) {
				var $r;
				var int1 = a1;
				$r = int1 < 0?4294967296.0 + int1:int1 + 0.0;
				return $r;
			}($this)) == 15;
			return $r;
		}(this))) {
			var wasCtrlDown = this.mCtrlDown;
			this.mCtrlDown = event.get_type() == starling.events.KeyboardEvent.KEY_DOWN;
			if(this.get_simulateMultitouch() && wasCtrlDown != this.mCtrlDown) {
				this.mTouchMarker.set_visible(this.mCtrlDown);
				this.mTouchMarker.moveCenter(this.mStage.get_stageWidth() / 2,this.mStage.get_stageHeight() / 2);
				var mouseTouch = this.getCurrentTouch(0);
				var mockedTouch = this.getCurrentTouch(1);
				if(mouseTouch != null) this.mTouchMarker.moveMarker(mouseTouch.get_globalX(),mouseTouch.get_globalY());
				if(wasCtrlDown && mockedTouch != null && mockedTouch.get_phase() != starling.events.TouchPhase.ENDED) {
					var this1 = this.mQueue;
					var x = [1,starling.events.TouchPhase.ENDED,mockedTouch.get_globalX(),mockedTouch.get_globalY()];
					if(!this1.fixed) {
						this1.length++;
						if(this1.data.length < this1.length) {
							var data;
							var this2;
							this2 = new Array(this1.length + 10);
							data = this2;
							haxe.ds._Vector.Vector_Impl_.blit(this1.data,0,data,1,this1.data.length);
							this1.data = data;
						} else haxe.ds._Vector.Vector_Impl_.blit(this1.data,0,this1.data,1,this1.length - 1);
						this1.data[0] = x;
					}
				} else if(this.mCtrlDown && mouseTouch != null) {
					if(mouseTouch.get_phase() == starling.events.TouchPhase.HOVER || mouseTouch.get_phase() == starling.events.TouchPhase.ENDED) {
						var this3 = this.mQueue;
						var x1 = [1,starling.events.TouchPhase.HOVER,this.mTouchMarker.get_mockX(),this.mTouchMarker.get_mockY()];
						if(!this3.fixed) {
							this3.length++;
							if(this3.data.length < this3.length) {
								var data1;
								var this4;
								this4 = new Array(this3.length + 10);
								data1 = this4;
								haxe.ds._Vector.Vector_Impl_.blit(this3.data,0,data1,1,this3.data.length);
								this3.data = data1;
							} else haxe.ds._Vector.Vector_Impl_.blit(this3.data,0,this3.data,1,this3.length - 1);
							this3.data[0] = x1;
						}
					} else {
						var this5 = this.mQueue;
						var x2 = [1,starling.events.TouchPhase.BEGAN,this.mTouchMarker.get_mockX(),this.mTouchMarker.get_mockY()];
						if(!this5.fixed) {
							this5.length++;
							if(this5.data.length < this5.length) {
								var data2;
								var this6;
								this6 = new Array(this5.length + 10);
								data2 = this6;
								haxe.ds._Vector.Vector_Impl_.blit(this5.data,0,data2,1,this5.data.length);
								this5.data = data2;
							} else haxe.ds._Vector.Vector_Impl_.blit(this5.data,0,this5.data,1,this5.length - 1);
							this5.data[0] = x2;
						}
					}
				}
			}
		} else if((function($this) {
			var $r;
			var a2 = event.get_keyCode();
			$r = (function($this) {
				var $r;
				var int2 = a2;
				$r = int2 < 0?4294967296.0 + int2:int2 + 0.0;
				return $r;
			}($this)) == 16;
			return $r;
		}(this))) this.mShiftDown = event.get_type() == starling.events.KeyboardEvent.KEY_DOWN;
	}
	,monitorInterruptions: function(enable) {
		haxe.Log.trace("ONLY RUN WHEN PUBLISHING FOR AIR",{ fileName : "TouchProcessor.hx", lineNumber : 477, className : "starling.events.TouchProcessor", methodName : "monitorInterruptions"});
	}
	,onInterruption: function(event) {
		if(this.mCurrentTouches.length > 0) {
			var _g = 0;
			var _g1 = this.mCurrentTouches;
			while(_g < _g1.length) {
				var touch = _g1.data[_g];
				++_g;
				if(touch.get_phase() == starling.events.TouchPhase.BEGAN || touch.get_phase() == starling.events.TouchPhase.MOVED || touch.get_phase() == starling.events.TouchPhase.STATIONARY) touch.set_phase(starling.events.TouchPhase.ENDED);
			}
			this.processTouches(this.mCurrentTouches,this.mShiftDown,this.mCtrlDown);
		}
		var this1 = this.mCurrentTouches;
		if(!this1.fixed) {
			if(0 > this1.length) {
				var data;
				var this2;
				this2 = new Array(0);
				data = this2;
				haxe.ds._Vector.Vector_Impl_.blit(this1.data,0,data,0,Std["int"](Math.min(this1.data.length,0)));
				this1.data = data;
			}
			this1.length = 0;
		}
		0;
		var this3;
		this3 = new openfl.VectorData();
		var this4;
		this4 = new Array(0);
		this3.data = this4;
		this3.length = 0;
		this3.fixed = false;
		this.mQueue = this3;
	}
	,__class__: starling.events.TouchProcessor
	,__properties__: {get_numCurrentTouches:"get_numCurrentTouches",get_stage:"get_stage",set_root:"set_root",get_root:"get_root",set_multitapDistance:"set_multitapDistance",get_multitapDistance:"get_multitapDistance",set_multitapTime:"set_multitapTime",get_multitapTime:"get_multitapTime",set_simulateMultitouch:"set_simulateMultitouch",get_simulateMultitouch:"get_simulateMultitouch"}
};
starling.filters = {};
starling.filters.FragmentFilter = function(numPasses,resolution) {
	if(resolution == null) resolution = 1.0;
	if(numPasses == null) numPasses = 1;
	this.mHelperRect2 = new openfl.geom.Rectangle();
	this.mHelperRect = new openfl.geom.Rectangle();
	this.mHelperMatrix3D = new openfl.geom.Matrix3D();
	this.mHelperMatrix = new openfl.geom.Matrix();
	this.mMvpConstantID = 0;
	this.mBaseTextureID = 0;
	this.mTexCoordsAtID = 1;
	this.mVertexPosAtID = 0;
	this.STD_FRAGMENT_SHADER = "tex oc, v0, fs0 <2d, clamp, linear, mipnone>";
	this.STD_VERTEX_SHADER = "m44 op, va0, vc0 \n" + "mov v0, va1      \n";
	this.PMA = true;
	this.MIN_TEXTURE_SIZE = 64;
	var name = Type.getClassName(Type.getClass(this));
	haxe.Log.trace("CHECK name = " + name,{ fileName : "FragmentFilter.hx", lineNumber : 150, className : "starling.filters.FragmentFilter", methodName : "new"});
	if(openfl.system.Capabilities.isDebugger && name == "starling.filters.FragmentFilter") throw new starling.errors.AbstractClassError();
	if(numPasses < 1) throw new openfl.errors.ArgumentError("At least one pass is required.");
	this.mNumPasses = numPasses;
	this.mMarginX = this.mMarginY = 0.0;
	this.mOffsetX = this.mOffsetY = 0;
	this.mResolution = resolution;
	this.mPassTextures = new Array();
	this.mMode = starling.filters.FragmentFilterMode.REPLACE;
	this.mVertexData = new starling.utils.VertexData(4);
	this.mVertexData.setTexCoords(0,0,0);
	this.mVertexData.setTexCoords(1,1,0);
	this.mVertexData.setTexCoords(2,0,1);
	this.mVertexData.setTexCoords(3,1,1);
	var this1;
	this1 = new openfl.VectorData();
	var this2;
	this2 = new Array(0);
	this1.data = this2;
	this1.length = 0;
	this1.fixed = false;
	this.mIndexData = this1;
	var this3 = this.mIndexData;
	if(!this3.fixed) {
		this3.length++;
		if(this3.data.length < this3.length) {
			var data;
			var this4;
			this4 = new Array(this3.data.length + 10);
			data = this4;
			haxe.ds._Vector.Vector_Impl_.blit(this3.data,0,data,0,this3.data.length);
			this3.data = data;
		}
		this3.data[this3.length - 1] = 0;
	}
	this3.length;
	var this5 = this.mIndexData;
	if(!this5.fixed) {
		this5.length++;
		if(this5.data.length < this5.length) {
			var data1;
			var this6;
			this6 = new Array(this5.data.length + 10);
			data1 = this6;
			haxe.ds._Vector.Vector_Impl_.blit(this5.data,0,data1,0,this5.data.length);
			this5.data = data1;
		}
		this5.data[this5.length - 1] = 1;
	}
	this5.length;
	var this7 = this.mIndexData;
	if(!this7.fixed) {
		this7.length++;
		if(this7.data.length < this7.length) {
			var data2;
			var this8;
			this8 = new Array(this7.data.length + 10);
			data2 = this8;
			haxe.ds._Vector.Vector_Impl_.blit(this7.data,0,data2,0,this7.data.length);
			this7.data = data2;
		}
		this7.data[this7.length - 1] = 2;
	}
	this7.length;
	var this9 = this.mIndexData;
	if(!this9.fixed) {
		this9.length++;
		if(this9.data.length < this9.length) {
			var data3;
			var this10;
			this10 = new Array(this9.data.length + 10);
			data3 = this10;
			haxe.ds._Vector.Vector_Impl_.blit(this9.data,0,data3,0,this9.data.length);
			this9.data = data3;
		}
		this9.data[this9.length - 1] = 1;
	}
	this9.length;
	var this11 = this.mIndexData;
	if(!this11.fixed) {
		this11.length++;
		if(this11.data.length < this11.length) {
			var data4;
			var this12;
			this12 = new Array(this11.data.length + 10);
			data4 = this12;
			haxe.ds._Vector.Vector_Impl_.blit(this11.data,0,data4,0,this11.data.length);
			this11.data = data4;
		}
		this11.data[this11.length - 1] = 3;
	}
	this11.length;
	var this13 = this.mIndexData;
	if(!this13.fixed) {
		this13.length++;
		if(this13.data.length < this13.length) {
			var data5;
			var this14;
			this14 = new Array(this13.data.length + 10);
			data5 = this14;
			haxe.ds._Vector.Vector_Impl_.blit(this13.data,0,data5,0,this13.data.length);
			this13.data = data5;
		}
		this13.data[this13.length - 1] = 4;
	}
	this13.length;
	this.mIndexData.fixed = true;
	if(starling.core.Starling.get_current().get_contextValid()) this.createPrograms();
	starling.core.Starling.get_current().get_stage3D().addEventListener(starling.events.Event.CONTEXT3D_CREATE,$bind(this,this.onContextCreated),false,0,true);
};
$hxClasses["starling.filters.FragmentFilter"] = starling.filters.FragmentFilter;
starling.filters.FragmentFilter.__name__ = ["starling","filters","FragmentFilter"];
starling.filters.FragmentFilter.prototype = {
	MIN_TEXTURE_SIZE: null
	,PMA: null
	,STD_VERTEX_SHADER: null
	,STD_FRAGMENT_SHADER: null
	,mVertexPosAtID: null
	,mTexCoordsAtID: null
	,mBaseTextureID: null
	,mMvpConstantID: null
	,mNumPasses: null
	,mPassTextures: null
	,mMode: null
	,mResolution: null
	,mMarginX: null
	,mMarginY: null
	,mOffsetX: null
	,mOffsetY: null
	,mVertexData: null
	,mVertexBuffer: null
	,mIndexData: null
	,mIndexBuffer: null
	,mCacheRequested: null
	,mCache: null
	,mHelperMatrix: null
	,mHelperMatrix3D: null
	,mHelperRect: null
	,mHelperRect2: null
	,isCached: null
	,dispose: function() {
		starling.core.Starling.get_current().get_stage3D().removeEventListener(starling.events.Event.CONTEXT3D_CREATE,$bind(this,this.onContextCreated));
		if(this.mVertexBuffer != null) this.mVertexBuffer.dispose();
		if(this.mIndexBuffer != null) this.mIndexBuffer.dispose();
		this.disposePassTextures();
		this.disposeCache();
	}
	,onContextCreated: function(event) {
		this.mVertexBuffer = null;
		this.mIndexBuffer = null;
		this.disposePassTextures();
		this.createPrograms();
		if(this.mCache != null) this.cache();
	}
	,render: function(object,support,parentAlpha) {
		if(this.get_mode() == starling.filters.FragmentFilterMode.ABOVE) object.render(support,parentAlpha);
		if(this.mCacheRequested) {
			this.mCacheRequested = false;
			this.mCache = this.renderPasses(object,support,1.0,true);
			this.disposePassTextures();
		}
		if(this.mCache != null) this.mCache.render(support,parentAlpha); else this.renderPasses(object,support,parentAlpha,false);
		if(this.get_mode() == starling.filters.FragmentFilterMode.BELOW) object.render(support,parentAlpha);
	}
	,renderPasses: function(object,support,parentAlpha,intoCache) {
		if(intoCache == null) intoCache = false;
		var passTexture;
		var cacheTexture = null;
		var context = starling.core.Starling.get_Context();
		var targetSpace = object.get_stage();
		var stage = starling.core.Starling.get_current().get_stage();
		var scale = starling.core.Starling.get_current().get_contentScaleFactor();
		var projMatrix = this.mHelperMatrix;
		var projMatrix3D = this.mHelperMatrix3D;
		var bounds = this.mHelperRect;
		var boundsPot = this.mHelperRect2;
		if(context == null) throw new starling.errors.MissingContextError();
		this.calculateBounds(object,targetSpace,this.mResolution * scale,!intoCache,bounds,boundsPot);
		if(bounds.isEmpty()) {
			this.disposePassTextures();
			if(intoCache) return new starling.display.QuadBatch(); else return null;
		}
		this.updateBuffers(context,boundsPot);
		this.updatePassTextures(boundsPot.width,boundsPot.height,this.mResolution * scale);
		support.finishQuadBatch();
		support.raiseDrawCount(this.mNumPasses);
		support.pushMatrix();
		support.pushMatrix3D();
		projMatrix.copyFrom(support.get_projectionMatrix());
		projMatrix3D.copyFrom(support.get_projectionMatrix3D());
		var previousRenderTarget = support.get_renderTarget();
		if(previousRenderTarget != null && !starling.utils.SystemUtil.get_supportsRelaxedTargetClearRequirement()) throw new openfl.errors.IllegalOperationError("To nest filters, you need at least Flash Player / AIR version 15.");
		if(intoCache) cacheTexture = starling.textures.Texture.empty(boundsPot.width,boundsPot.height,this.PMA,false,true,this.mResolution * scale);
		support.set_renderTarget(this.mPassTextures[0]);
		support.clear();
		support.set_blendMode(starling.display.BlendMode.NORMAL);
		support.setProjectionMatrix(bounds.x,bounds.y,boundsPot.width,boundsPot.height,stage.get_stageWidth(),stage.get_stageHeight(),stage.get_cameraPosition());
		object.render(support,parentAlpha);
		support.finishQuadBatch();
		starling.core.RenderSupport.setBlendFactors(this.PMA);
		support.loadIdentity();
		support.pushClipRect(bounds);
		context.setVertexBufferAt(this.mVertexPosAtID,this.mVertexBuffer,starling.utils.VertexData.POSITION_OFFSET,openfl.display3D.Context3DVertexBufferFormat.FLOAT_2);
		context.setVertexBufferAt(this.mTexCoordsAtID,this.mVertexBuffer,starling.utils.VertexData.TEXCOORD_OFFSET,openfl.display3D.Context3DVertexBufferFormat.FLOAT_2);
		var _g1 = 0;
		var _g = this.mNumPasses;
		while(_g1 < _g) {
			var i = _g1++;
			if(i < this.mNumPasses - 1) {
				support.set_renderTarget(this.getPassTexture(i + 1));
				support.clear();
			} else if(intoCache) {
				support.set_renderTarget(cacheTexture);
				support.clear();
			} else {
				support.set_projectionMatrix(projMatrix);
				support.set_projectionMatrix3D(projMatrix3D);
				support.set_renderTarget(previousRenderTarget);
				support.translateMatrix(this.mOffsetX,this.mOffsetY);
				support.set_blendMode(object.get_blendMode());
				support.applyBlendMode(this.PMA);
			}
			passTexture = this.getPassTexture(i);
			context.setProgramConstantsFromMatrix(openfl.display3D.Context3DProgramType.VERTEX,this.mMvpConstantID,support.get_mvpMatrix3D(),true);
			context.setTextureAt(this.mBaseTextureID,passTexture.get_base());
			this.activate(i,context,passTexture);
			context.drawTriangles(this.mIndexBuffer,0,2);
			this.deactivate(i,context,passTexture);
		}
		context.setVertexBufferAt(this.mVertexPosAtID,null);
		context.setVertexBufferAt(this.mTexCoordsAtID,null);
		context.setTextureAt(this.mBaseTextureID,null);
		support.popMatrix();
		support.popMatrix3D();
		support.popClipRect();
		if(intoCache) {
			support.set_renderTarget(previousRenderTarget);
			support.get_projectionMatrix().copyFrom(projMatrix);
			support.get_projectionMatrix3D().copyFrom(projMatrix3D);
			var quadBatch = new starling.display.QuadBatch();
			var image = new starling.display.Image(cacheTexture);
			object.getTransformationMatrix(targetSpace,starling.filters.FragmentFilter.sTransformationMatrix).invert();
			starling.utils.MatrixUtil.prependTranslation(starling.filters.FragmentFilter.sTransformationMatrix,bounds.x + this.mOffsetX,bounds.y + this.mOffsetY);
			quadBatch.addImage(image,1.0,starling.filters.FragmentFilter.sTransformationMatrix);
			return quadBatch;
		} else return null;
	}
	,updateBuffers: function(context,bounds) {
		this.mVertexData.setPosition(0,bounds.x,bounds.y);
		this.mVertexData.setPosition(1,bounds.get_right(),bounds.y);
		this.mVertexData.setPosition(2,bounds.x,bounds.get_bottom());
		this.mVertexData.setPosition(3,bounds.get_right(),bounds.get_bottom());
		if(this.mVertexBuffer == null) {
			this.mVertexBuffer = context.createVertexBuffer(4,starling.utils.VertexData.ELEMENTS_PER_VERTEX);
			this.mIndexBuffer = context.createIndexBuffer(6);
			this.mIndexBuffer.uploadFromVector(this.mIndexData,0,6);
		}
		this.mVertexBuffer.uploadFromVector(this.mVertexData.get_rawData(),0,4);
	}
	,updatePassTextures: function(width,height,scale) {
		var numPassTextures;
		if(this.mNumPasses > 1) numPassTextures = 2; else numPassTextures = 1;
		var needsUpdate = this.mPassTextures.length != numPassTextures || Math.abs(this.mPassTextures[0].get_nativeWidth() - width * scale) > 0.1 || Math.abs(this.mPassTextures[0].get_nativeHeight() - height * scale) > 0.1;
		if(needsUpdate) {
			this.disposePassTextures();
			var _g = 0;
			while(_g < numPassTextures) {
				var i = _g++;
				this.mPassTextures[i] = starling.textures.Texture.empty(width,height,this.PMA,false,true,scale);
			}
		}
	}
	,getPassTexture: function(pass) {
		return this.mPassTextures[pass % 2];
	}
	,calculateBounds: function(object,targetSpace,scale,intersectWithStage,resultRect,resultPotRect) {
		var stage;
		var marginX = this.mMarginX;
		var marginY = this.mMarginY;
		if(js.Boot.__instanceof(targetSpace,starling.display.Stage)) {
			stage = targetSpace;
			if(object == stage || object == object.get_root()) {
				marginX = marginY = 0;
				resultRect.setTo(0,0,stage.get_stageWidth(),stage.get_stageHeight());
			} else object.getBounds(stage,resultRect);
			if(intersectWithStage) {
				starling.filters.FragmentFilter.sStageBounds.setTo(0,0,stage.get_stageWidth(),stage.get_stageHeight());
				starling.utils.RectangleUtil.intersect(resultRect,starling.filters.FragmentFilter.sStageBounds,resultRect);
			}
		} else object.getBounds(targetSpace,resultRect);
		if(!resultRect.isEmpty()) {
			resultRect.inflate(marginX,marginY);
			var minSize = this.MIN_TEXTURE_SIZE / scale;
			var minWidth;
			if(resultRect.width > minSize) minWidth = resultRect.width; else minWidth = minSize;
			var minHeight;
			if(resultRect.height > minSize) minHeight = resultRect.height; else minHeight = minSize;
			resultPotRect.setTo(resultRect.x,resultRect.y,starling.utils.StarlingUtils.getNextPowerOfTwo(minWidth * scale) / scale,starling.utils.StarlingUtils.getNextPowerOfTwo(minHeight * scale) / scale);
		}
	}
	,disposePassTextures: function() {
		var _g = 0;
		var _g1 = this.mPassTextures;
		while(_g < _g1.length) {
			var texture = _g1[_g];
			++_g;
			texture.dispose();
		}
		this.mPassTextures = new Array();
	}
	,disposeCache: function() {
		if(this.mCache != null) {
			if(this.mCache.get_texture() != null) this.mCache.get_texture().dispose();
			this.mCache.dispose();
			this.mCache = null;
		}
	}
	,createPrograms: function() {
		throw new openfl.errors.Error("Method has to be implemented in subclass!");
	}
	,activate: function(pass,context,texture) {
		throw new openfl.errors.Error("Method has to be implemented in subclass!");
	}
	,deactivate: function(pass,context,texture) {
	}
	,assembleAgal: function(fragmentShader,vertexShader) {
		if(fragmentShader == null) fragmentShader = this.STD_FRAGMENT_SHADER;
		if(vertexShader == null) vertexShader = this.STD_VERTEX_SHADER;
		return starling.core.RenderSupport.assembleAgal(vertexShader,fragmentShader);
	}
	,cache: function() {
		this.mCacheRequested = true;
		this.disposeCache();
	}
	,clearCache: function() {
		this.mCacheRequested = false;
		this.disposeCache();
	}
	,compile: function(object) {
		if(this.mCache != null) return this.mCache; else {
			var support;
			var stage = object.get_stage();
			var quadBatch;
			support = new starling.core.RenderSupport();
			object.getTransformationMatrix(stage,support.get_modelViewMatrix());
			quadBatch = this.renderPasses(object,support,1.0,true);
			support.dispose();
			return quadBatch;
		}
	}
	,get_isCached: function() {
		return this.mCache != null || this.mCacheRequested;
	}
	,get_resolution: function() {
		return this.mResolution;
	}
	,set_resolution: function(value) {
		if(value <= 0) throw new openfl.errors.ArgumentError("Resolution must be > 0"); else this.mResolution = value;
		return value;
	}
	,get_mode: function() {
		return this.mMode;
	}
	,set_mode: function(value) {
		this.mMode = value;
		return value;
	}
	,get_offsetX: function() {
		return this.mOffsetX;
	}
	,set_offsetX: function(value) {
		this.mOffsetX = value;
		return value;
	}
	,get_offsetY: function() {
		return this.mOffsetY;
	}
	,set_offsetY: function(value) {
		this.mOffsetY = value;
		return value;
	}
	,get_marginX: function() {
		return this.mMarginX;
	}
	,set_marginX: function(value) {
		this.mMarginX = value;
		return value;
	}
	,get_marginY: function() {
		return this.mMarginY;
	}
	,set_marginY: function(value) {
		this.mMarginY = value;
		return value;
	}
	,set_numPasses: function(value) {
		this.mNumPasses = value;
		return value;
	}
	,get_numPasses: function() {
		return this.mNumPasses;
	}
	,get_vertexPosAtID: function() {
		return this.mVertexPosAtID;
	}
	,set_vertexPosAtID: function(value) {
		this.mVertexPosAtID = value;
		return value;
	}
	,get_texCoordsAtID: function() {
		return this.mTexCoordsAtID;
	}
	,set_texCoordsAtID: function(value) {
		this.mTexCoordsAtID = value;
		return value;
	}
	,get_baseTextureID: function() {
		return this.mBaseTextureID;
	}
	,set_baseTextureID: function(value) {
		this.mBaseTextureID = value;
		return value;
	}
	,get_mvpConstantID: function() {
		return this.mMvpConstantID;
	}
	,set_mvpConstantID: function(value) {
		this.mMvpConstantID = value;
		return value;
	}
	,__class__: starling.filters.FragmentFilter
	,__properties__: {set_mvpConstantID:"set_mvpConstantID",get_mvpConstantID:"get_mvpConstantID",set_baseTextureID:"set_baseTextureID",get_baseTextureID:"get_baseTextureID",set_texCoordsAtID:"set_texCoordsAtID",get_texCoordsAtID:"get_texCoordsAtID",set_vertexPosAtID:"set_vertexPosAtID",get_vertexPosAtID:"get_vertexPosAtID",set_numPasses:"set_numPasses",get_numPasses:"get_numPasses",set_marginY:"set_marginY",get_marginY:"get_marginY",set_marginX:"set_marginX",get_marginX:"get_marginX",set_offsetY:"set_offsetY",get_offsetY:"get_offsetY",set_offsetX:"set_offsetX",get_offsetX:"get_offsetX",set_mode:"set_mode",get_mode:"get_mode",set_resolution:"set_resolution",get_resolution:"get_resolution",get_isCached:"get_isCached"}
};
starling.filters.BlurFilter = function(blurX,blurY,resolution) {
	if(resolution == null) resolution = 1;
	if(blurY == null) blurY = 1;
	if(blurX == null) blurX = 1;
	this.sTmpWeights = (function($this) {
		var $r;
		var this1;
		this1 = new openfl.VectorData();
		{
			var this2;
			this2 = new Array(5);
			this1.data = this2;
		}
		this1.length = 5;
		this1.fixed = true;
		$r = this1;
		return $r;
	}(this));
	this.mColor = (function($this) {
		var $r;
		var this1;
		this1 = new openfl.VectorData();
		{
			var this2;
			this2 = new Array(0);
			this1.data = this2;
		}
		this1.length = 0;
		this1.fixed = false;
		$r = this1;
		return $r;
	}(this));
	this.mWeights = (function($this) {
		var $r;
		var this1;
		this1 = new openfl.VectorData();
		{
			var this2;
			this2 = new Array(0);
			this1.data = this2;
		}
		this1.length = 0;
		this1.fixed = false;
		$r = this1;
		return $r;
	}(this));
	this.mOffsets = (function($this) {
		var $r;
		var this1;
		this1 = new openfl.VectorData();
		{
			var this2;
			this2 = new Array(0);
			this1.data = this2;
		}
		this1.length = 0;
		this1.fixed = false;
		$r = this1;
		return $r;
	}(this));
	var this1 = this.mOffsets;
	if(!this1.fixed) {
		this1.length++;
		if(this1.data.length < this1.length) {
			var data;
			var this2;
			this2 = new Array(this1.data.length + 10);
			data = this2;
			haxe.ds._Vector.Vector_Impl_.blit(this1.data,0,data,0,this1.data.length);
			this1.data = data;
		}
		this1.data[this1.length - 1] = 0;
	}
	this1.length;
	var this3 = this.mOffsets;
	if(!this3.fixed) {
		this3.length++;
		if(this3.data.length < this3.length) {
			var data1;
			var this4;
			this4 = new Array(this3.data.length + 10);
			data1 = this4;
			haxe.ds._Vector.Vector_Impl_.blit(this3.data,0,data1,0,this3.data.length);
			this3.data = data1;
		}
		this3.data[this3.length - 1] = 0;
	}
	this3.length;
	var this5 = this.mOffsets;
	if(!this5.fixed) {
		this5.length++;
		if(this5.data.length < this5.length) {
			var data2;
			var this6;
			this6 = new Array(this5.data.length + 10);
			data2 = this6;
			haxe.ds._Vector.Vector_Impl_.blit(this5.data,0,data2,0,this5.data.length);
			this5.data = data2;
		}
		this5.data[this5.length - 1] = 0;
	}
	this5.length;
	var this7 = this.mOffsets;
	if(!this7.fixed) {
		this7.length++;
		if(this7.data.length < this7.length) {
			var data3;
			var this8;
			this8 = new Array(this7.data.length + 10);
			data3 = this8;
			haxe.ds._Vector.Vector_Impl_.blit(this7.data,0,data3,0,this7.data.length);
			this7.data = data3;
		}
		this7.data[this7.length - 1] = 0;
	}
	this7.length;
	var this9 = this.mWeights;
	if(!this9.fixed) {
		this9.length++;
		if(this9.data.length < this9.length) {
			var data4;
			var this10;
			this10 = new Array(this9.data.length + 10);
			data4 = this10;
			haxe.ds._Vector.Vector_Impl_.blit(this9.data,0,data4,0,this9.data.length);
			this9.data = data4;
		}
		this9.data[this9.length - 1] = 0;
	}
	this9.length;
	var this11 = this.mWeights;
	if(!this11.fixed) {
		this11.length++;
		if(this11.data.length < this11.length) {
			var data5;
			var this12;
			this12 = new Array(this11.data.length + 10);
			data5 = this12;
			haxe.ds._Vector.Vector_Impl_.blit(this11.data,0,data5,0,this11.data.length);
			this11.data = data5;
		}
		this11.data[this11.length - 1] = 0;
	}
	this11.length;
	var this13 = this.mWeights;
	if(!this13.fixed) {
		this13.length++;
		if(this13.data.length < this13.length) {
			var data6;
			var this14;
			this14 = new Array(this13.data.length + 10);
			data6 = this14;
			haxe.ds._Vector.Vector_Impl_.blit(this13.data,0,data6,0,this13.data.length);
			this13.data = data6;
		}
		this13.data[this13.length - 1] = 0;
	}
	this13.length;
	var this15 = this.mWeights;
	if(!this15.fixed) {
		this15.length++;
		if(this15.data.length < this15.length) {
			var data7;
			var this16;
			this16 = new Array(this15.data.length + 10);
			data7 = this16;
			haxe.ds._Vector.Vector_Impl_.blit(this15.data,0,data7,0,this15.data.length);
			this15.data = data7;
		}
		this15.data[this15.length - 1] = 0;
	}
	this15.length;
	var this17 = this.mColor;
	if(!this17.fixed) {
		this17.length++;
		if(this17.data.length < this17.length) {
			var data8;
			var this18;
			this18 = new Array(this17.data.length + 10);
			data8 = this18;
			haxe.ds._Vector.Vector_Impl_.blit(this17.data,0,data8,0,this17.data.length);
			this17.data = data8;
		}
		this17.data[this17.length - 1] = 1;
	}
	this17.length;
	var this19 = this.mColor;
	if(!this19.fixed) {
		this19.length++;
		if(this19.data.length < this19.length) {
			var data9;
			var this20;
			this20 = new Array(this19.data.length + 10);
			data9 = this20;
			haxe.ds._Vector.Vector_Impl_.blit(this19.data,0,data9,0,this19.data.length);
			this19.data = data9;
		}
		this19.data[this19.length - 1] = 1;
	}
	this19.length;
	var this21 = this.mColor;
	if(!this21.fixed) {
		this21.length++;
		if(this21.data.length < this21.length) {
			var data10;
			var this22;
			this22 = new Array(this21.data.length + 10);
			data10 = this22;
			haxe.ds._Vector.Vector_Impl_.blit(this21.data,0,data10,0,this21.data.length);
			this21.data = data10;
		}
		this21.data[this21.length - 1] = 1;
	}
	this21.length;
	var this23 = this.mColor;
	if(!this23.fixed) {
		this23.length++;
		if(this23.data.length < this23.length) {
			var data11;
			var this24;
			this24 = new Array(this23.data.length + 10);
			data11 = this24;
			haxe.ds._Vector.Vector_Impl_.blit(this23.data,0,data11,0,this23.data.length);
			this23.data = data11;
		}
		this23.data[this23.length - 1] = 1;
	}
	this23.length;
	starling.filters.FragmentFilter.call(this,1,resolution);
	this.mBlurX = blurX;
	this.mBlurY = blurY;
	this.updateMarginsAndPasses();
};
$hxClasses["starling.filters.BlurFilter"] = starling.filters.BlurFilter;
starling.filters.BlurFilter.__name__ = ["starling","filters","BlurFilter"];
starling.filters.BlurFilter.createDropShadow = function(distance,angle,color,alpha,blur,resolution) {
	if(resolution == null) resolution = 0.5;
	if(blur == null) blur = 1.0;
	if(alpha == null) alpha = 0.5;
	if(color == null) color = 0;
	if(angle == null) angle = 0.785;
	if(distance == null) distance = 4.0;
	var dropShadow = new starling.filters.BlurFilter(blur,blur,resolution);
	dropShadow.set_offsetX(Math.cos(angle) * distance);
	dropShadow.set_offsetY(Math.sin(angle) * distance);
	dropShadow.set_mode(starling.filters.FragmentFilterMode.BELOW);
	dropShadow.setUniformColor(true,color,alpha);
	return dropShadow;
};
starling.filters.BlurFilter.createGlow = function(color,alpha,blur,resolution) {
	if(resolution == null) resolution = 0.5;
	if(blur == null) blur = 1.0;
	if(alpha == null) alpha = 1.0;
	if(color == null) color = 16776960;
	var glow = new starling.filters.BlurFilter(blur,blur,resolution);
	glow.set_mode(starling.filters.FragmentFilterMode.BELOW);
	glow.setUniformColor(true,color,alpha);
	return glow;
};
starling.filters.BlurFilter.__super__ = starling.filters.FragmentFilter;
starling.filters.BlurFilter.prototype = $extend(starling.filters.FragmentFilter.prototype,{
	mNormalProgram: null
	,mTintedProgram: null
	,mOffsets: null
	,mWeights: null
	,mColor: null
	,mBlurX: null
	,mBlurY: null
	,mUniformColor: null
	,sTmpWeights: null
	,createPrograms: function() {
		this.mNormalProgram = this.createProgram(false);
		this.mTintedProgram = this.createProgram(true);
	}
	,createProgram: function(tinted) {
		var programName;
		if(tinted) programName = starling.filters.BlurFilter.TINTED_PROGRAM_NAME; else programName = starling.filters.BlurFilter.NORMAL_PROGRAM_NAME;
		var target = starling.core.Starling.get_current();
		if(target.hasProgram(programName)) return target.getProgram(programName);
		var vertexShader = "m44 op, va0, vc0       \n" + "mov v0, va1            \n" + "sub v1, va1, vc4.zwxx  \n" + "sub v2, va1, vc4.xyxx  \n" + "add v3, va1, vc4.xyxx  \n" + "add v4, va1, vc4.zwxx  \n";
		var fragmentShader = "tex ft0,  v0, fs0 <2d, clamp, linear, mipnone> \n" + "mul ft5, ft0, fc0.xxxx                         \n" + "tex ft1,  v1, fs0 <2d, clamp, linear, mipnone> \n" + "mul ft1, ft1, fc0.zzzz                         \n" + "add ft5, ft5, ft1                              \n" + "tex ft2,  v2, fs0 <2d, clamp, linear, mipnone> \n" + "mul ft2, ft2, fc0.yyyy                         \n" + "add ft5, ft5, ft2                              \n" + "tex ft3,  v3, fs0 <2d, clamp, linear, mipnone> \n" + "mul ft3, ft3, fc0.yyyy                         \n" + "add ft5, ft5, ft3                              \n" + "tex ft4,  v4, fs0 <2d, clamp, linear, mipnone> \n" + "mul ft4, ft4, fc0.zzzz                         \n";
		if(tinted) fragmentShader += "add ft5, ft5, ft4                              \n" + "mul ft5.xyz, fc1.xyz, ft5.www                  \n" + "mul oc, ft5, fc1.wwww                          \n"; else fragmentShader += "add  oc, ft5, ft4                              \n";
		return target.registerProgramFromSource(programName,vertexShader,fragmentShader);
	}
	,activate: function(pass,context,texture) {
		this.updateParameters(pass,texture.get_nativeWidth(),texture.get_nativeHeight());
		context.setProgramConstantsFromVector(openfl.display3D.Context3DProgramType.VERTEX,4,this.mOffsets);
		context.setProgramConstantsFromVector(openfl.display3D.Context3DProgramType.FRAGMENT,0,this.mWeights);
		if(this.mUniformColor && pass == this.get_numPasses() - 1) {
			context.setProgramConstantsFromVector(openfl.display3D.Context3DProgramType.FRAGMENT,1,this.mColor);
			context.setProgram(this.mTintedProgram);
		} else context.setProgram(this.mNormalProgram);
	}
	,updateParameters: function(pass,textureWidth,textureHeight) {
		var sigma;
		var horizontal = pass < this.mBlurX;
		var pixelSize;
		if(horizontal) {
			sigma = Math.min(1.0,this.mBlurX - pass) * starling.filters.BlurFilter.MAX_SIGMA;
			pixelSize = 1.0 / textureWidth;
		} else {
			sigma = Math.min(1.0,this.mBlurY - (pass - Math.ceil(this.mBlurX))) * starling.filters.BlurFilter.MAX_SIGMA;
			pixelSize = 1.0 / textureHeight;
		}
		var twoSigmaSq = 2 * sigma * sigma;
		var multiplier = 1.0 / Math.sqrt(twoSigmaSq * Math.PI);
		var _g = 0;
		while(_g < 5) {
			var i = _g++;
			var this1 = this.sTmpWeights;
			var value = multiplier * Math.exp(-i * i / twoSigmaSq);
			if(!this1.fixed) {
				if(i >= this1.length) this1.length = i + 1;
				if(this1.data.length < this1.length) {
					var data;
					var this2;
					this2 = new Array(this1.data.length + 10);
					data = this2;
					haxe.ds._Vector.Vector_Impl_.blit(this1.data,0,data,0,this1.data.length);
					this1.data = data;
				}
			}
			this1.data[i] = value;
		}
		var this3 = this.mWeights;
		if(!this3.fixed) {
			if(0 >= this3.length) this3.length = 1;
			if(this3.data.length < this3.length) {
				var data1;
				var this4;
				this4 = new Array(this3.data.length + 10);
				data1 = this4;
				haxe.ds._Vector.Vector_Impl_.blit(this3.data,0,data1,0,this3.data.length);
				this3.data = data1;
			}
		}
		this3.data[0] = this.sTmpWeights.data[0];
		var this5 = this.mWeights;
		if(!this5.fixed) {
			if(1 >= this5.length) this5.length = 2;
			if(this5.data.length < this5.length) {
				var data2;
				var this6;
				this6 = new Array(this5.data.length + 10);
				data2 = this6;
				haxe.ds._Vector.Vector_Impl_.blit(this5.data,0,data2,0,this5.data.length);
				this5.data = data2;
			}
		}
		this5.data[1] = this.sTmpWeights.data[1] + this.sTmpWeights.data[2];
		var this7 = this.mWeights;
		if(!this7.fixed) {
			if(2 >= this7.length) this7.length = 3;
			if(this7.data.length < this7.length) {
				var data3;
				var this8;
				this8 = new Array(this7.data.length + 10);
				data3 = this8;
				haxe.ds._Vector.Vector_Impl_.blit(this7.data,0,data3,0,this7.data.length);
				this7.data = data3;
			}
		}
		this7.data[2] = this.sTmpWeights.data[3] + this.sTmpWeights.data[4];
		var weightSum = this.mWeights.data[0] + 2 * this.mWeights.data[1] + 2 * this.mWeights.data[2];
		var invWeightSum = 1.0 / weightSum;
		var this9 = this.mWeights;
		if(!this9.fixed) {
			if(0 >= this9.length) this9.length = 1;
			if(this9.data.length < this9.length) {
				var data4;
				var this10;
				this10 = new Array(this9.data.length + 10);
				data4 = this10;
				haxe.ds._Vector.Vector_Impl_.blit(this9.data,0,data4,0,this9.data.length);
				this9.data = data4;
			}
		}
		this9.data[0] = this.mWeights.data[0] * invWeightSum;
		var this11 = this.mWeights;
		if(!this11.fixed) {
			if(1 >= this11.length) this11.length = 2;
			if(this11.data.length < this11.length) {
				var data5;
				var this12;
				this12 = new Array(this11.data.length + 10);
				data5 = this12;
				haxe.ds._Vector.Vector_Impl_.blit(this11.data,0,data5,0,this11.data.length);
				this11.data = data5;
			}
		}
		this11.data[1] = this.mWeights.data[1] * invWeightSum;
		var this13 = this.mWeights;
		if(!this13.fixed) {
			if(2 >= this13.length) this13.length = 3;
			if(this13.data.length < this13.length) {
				var data6;
				var this14;
				this14 = new Array(this13.data.length + 10);
				data6 = this14;
				haxe.ds._Vector.Vector_Impl_.blit(this13.data,0,data6,0,this13.data.length);
				this13.data = data6;
			}
		}
		this13.data[2] = this.mWeights.data[2] * invWeightSum;
		var offset1 = (pixelSize * this.sTmpWeights.data[1] + 2 * pixelSize * this.sTmpWeights.data[2]) / this.mWeights.data[1];
		var offset2 = (3 * pixelSize * this.sTmpWeights.data[3] + 4 * pixelSize * this.sTmpWeights.data[4]) / this.mWeights.data[2];
		if(horizontal) {
			var this15 = this.mOffsets;
			if(!this15.fixed) {
				if(0 >= this15.length) this15.length = 1;
				if(this15.data.length < this15.length) {
					var data7;
					var this16;
					this16 = new Array(this15.data.length + 10);
					data7 = this16;
					haxe.ds._Vector.Vector_Impl_.blit(this15.data,0,data7,0,this15.data.length);
					this15.data = data7;
				}
			}
			this15.data[0] = offset1;
			var this17 = this.mOffsets;
			if(!this17.fixed) {
				if(1 >= this17.length) this17.length = 2;
				if(this17.data.length < this17.length) {
					var data8;
					var this18;
					this18 = new Array(this17.data.length + 10);
					data8 = this18;
					haxe.ds._Vector.Vector_Impl_.blit(this17.data,0,data8,0,this17.data.length);
					this17.data = data8;
				}
			}
			this17.data[1] = 0;
			var this19 = this.mOffsets;
			if(!this19.fixed) {
				if(2 >= this19.length) this19.length = 3;
				if(this19.data.length < this19.length) {
					var data9;
					var this20;
					this20 = new Array(this19.data.length + 10);
					data9 = this20;
					haxe.ds._Vector.Vector_Impl_.blit(this19.data,0,data9,0,this19.data.length);
					this19.data = data9;
				}
			}
			this19.data[2] = offset2;
			var this21 = this.mOffsets;
			if(!this21.fixed) {
				if(3 >= this21.length) this21.length = 4;
				if(this21.data.length < this21.length) {
					var data10;
					var this22;
					this22 = new Array(this21.data.length + 10);
					data10 = this22;
					haxe.ds._Vector.Vector_Impl_.blit(this21.data,0,data10,0,this21.data.length);
					this21.data = data10;
				}
			}
			this21.data[3] = 0;
		} else {
			var this23 = this.mOffsets;
			if(!this23.fixed) {
				if(0 >= this23.length) this23.length = 1;
				if(this23.data.length < this23.length) {
					var data11;
					var this24;
					this24 = new Array(this23.data.length + 10);
					data11 = this24;
					haxe.ds._Vector.Vector_Impl_.blit(this23.data,0,data11,0,this23.data.length);
					this23.data = data11;
				}
			}
			this23.data[0] = 0;
			var this25 = this.mOffsets;
			if(!this25.fixed) {
				if(1 >= this25.length) this25.length = 2;
				if(this25.data.length < this25.length) {
					var data12;
					var this26;
					this26 = new Array(this25.data.length + 10);
					data12 = this26;
					haxe.ds._Vector.Vector_Impl_.blit(this25.data,0,data12,0,this25.data.length);
					this25.data = data12;
				}
			}
			this25.data[1] = offset1;
			var this27 = this.mOffsets;
			if(!this27.fixed) {
				if(2 >= this27.length) this27.length = 3;
				if(this27.data.length < this27.length) {
					var data13;
					var this28;
					this28 = new Array(this27.data.length + 10);
					data13 = this28;
					haxe.ds._Vector.Vector_Impl_.blit(this27.data,0,data13,0,this27.data.length);
					this27.data = data13;
				}
			}
			this27.data[2] = 0;
			var this29 = this.mOffsets;
			if(!this29.fixed) {
				if(3 >= this29.length) this29.length = 4;
				if(this29.data.length < this29.length) {
					var data14;
					var this30;
					this30 = new Array(this29.data.length + 10);
					data14 = this30;
					haxe.ds._Vector.Vector_Impl_.blit(this29.data,0,data14,0,this29.data.length);
					this29.data = data14;
				}
			}
			this29.data[3] = offset2;
		}
	}
	,updateMarginsAndPasses: function() {
		if(this.mBlurX == 0 && this.mBlurY == 0) this.mBlurX = 0.001;
		this.set_numPasses(Math.ceil(this.mBlurX) + Math.ceil(this.mBlurY));
		this.set_marginX((3 + Math.ceil(this.mBlurX)) / this.get_resolution());
		this.set_marginY((3 + Math.ceil(this.mBlurY)) / this.get_resolution());
	}
	,setUniformColor: function(enable,color,alpha) {
		if(alpha == null) alpha = 1.0;
		if(color == null) color = 0;
		var this1 = this.mColor;
		var value = starling.utils.Color.getRed(color) / 255.0;
		if(!this1.fixed) {
			if(0 >= this1.length) this1.length = 1;
			if(this1.data.length < this1.length) {
				var data;
				var this2;
				this2 = new Array(this1.data.length + 10);
				data = this2;
				haxe.ds._Vector.Vector_Impl_.blit(this1.data,0,data,0,this1.data.length);
				this1.data = data;
			}
		}
		this1.data[0] = value;
		var this3 = this.mColor;
		var value1 = starling.utils.Color.getGreen(color) / 255.0;
		if(!this3.fixed) {
			if(1 >= this3.length) this3.length = 2;
			if(this3.data.length < this3.length) {
				var data1;
				var this4;
				this4 = new Array(this3.data.length + 10);
				data1 = this4;
				haxe.ds._Vector.Vector_Impl_.blit(this3.data,0,data1,0,this3.data.length);
				this3.data = data1;
			}
		}
		this3.data[1] = value1;
		var this5 = this.mColor;
		var value2 = starling.utils.Color.getBlue(color) / 255.0;
		if(!this5.fixed) {
			if(2 >= this5.length) this5.length = 3;
			if(this5.data.length < this5.length) {
				var data2;
				var this6;
				this6 = new Array(this5.data.length + 10);
				data2 = this6;
				haxe.ds._Vector.Vector_Impl_.blit(this5.data,0,data2,0,this5.data.length);
				this5.data = data2;
			}
		}
		this5.data[2] = value2;
		var this7 = this.mColor;
		if(!this7.fixed) {
			if(3 >= this7.length) this7.length = 4;
			if(this7.data.length < this7.length) {
				var data3;
				var this8;
				this8 = new Array(this7.data.length + 10);
				data3 = this8;
				haxe.ds._Vector.Vector_Impl_.blit(this7.data,0,data3,0,this7.data.length);
				this7.data = data3;
			}
		}
		this7.data[3] = alpha;
		this.mUniformColor = enable;
	}
	,get_blurX: function() {
		return this.mBlurX;
	}
	,set_blurX: function(value) {
		this.mBlurX = value;
		this.updateMarginsAndPasses();
		return value;
	}
	,get_blurY: function() {
		return this.mBlurY;
	}
	,set_blurY: function(value) {
		this.mBlurY = value;
		this.updateMarginsAndPasses();
		return value;
	}
	,__class__: starling.filters.BlurFilter
	,__properties__: $extend(starling.filters.FragmentFilter.prototype.__properties__,{set_blurY:"set_blurY",get_blurY:"get_blurY",set_blurX:"set_blurX",get_blurX:"get_blurX"})
});
starling.filters.ColorMatrixFilter = function(matrix) {
	var this1;
	this1 = new openfl.VectorData();
	var this2;
	this2 = new Array(0);
	this1.data = this2;
	this1.length = 0;
	this1.fixed = false;
	this.mUserMatrix = this1;
	var value = new Array();
	var vectorData = new openfl.VectorData();
	vectorData.length = value.length;
	vectorData.fixed = true;
	var vec;
	var this3;
	this3 = new Array(value.length);
	vec = this3;
	var _g1 = 0;
	var _g = value.length;
	while(_g1 < _g) {
		var i = _g1++;
		vec[i] = value[i];
	}
	vectorData.data = vec;
	this.mShaderMatrix = vectorData;
	this.set_matrix(matrix);
	starling.filters.FragmentFilter.call(this);
};
$hxClasses["starling.filters.ColorMatrixFilter"] = starling.filters.ColorMatrixFilter;
starling.filters.ColorMatrixFilter.__name__ = ["starling","filters","ColorMatrixFilter"];
starling.filters.ColorMatrixFilter.__properties__ = {set_IDENTITY:"set_IDENTITY",get_IDENTITY:"get_IDENTITY",set_MIN_COLOR:"set_MIN_COLOR",get_MIN_COLOR:"get_MIN_COLOR"}
starling.filters.ColorMatrixFilter._MIN_COLOR = null;
starling.filters.ColorMatrixFilter._IDENTITY = null;
starling.filters.ColorMatrixFilter.get_IDENTITY = function() {
	if(starling.filters.ColorMatrixFilter._IDENTITY == null) {
		starling.filters.ColorMatrixFilter._IDENTITY = new Array();
		starling.filters.ColorMatrixFilter._IDENTITY.push(1);
		starling.filters.ColorMatrixFilter._IDENTITY.push(0);
		starling.filters.ColorMatrixFilter._IDENTITY.push(0);
		starling.filters.ColorMatrixFilter._IDENTITY.push(0);
		starling.filters.ColorMatrixFilter._IDENTITY.push(0);
		starling.filters.ColorMatrixFilter._IDENTITY.push(0);
		starling.filters.ColorMatrixFilter._IDENTITY.push(1);
		starling.filters.ColorMatrixFilter._IDENTITY.push(0);
		starling.filters.ColorMatrixFilter._IDENTITY.push(0);
		starling.filters.ColorMatrixFilter._IDENTITY.push(0);
		starling.filters.ColorMatrixFilter._IDENTITY.push(0);
		starling.filters.ColorMatrixFilter._IDENTITY.push(0);
		starling.filters.ColorMatrixFilter._IDENTITY.push(1);
		starling.filters.ColorMatrixFilter._IDENTITY.push(0);
		starling.filters.ColorMatrixFilter._IDENTITY.push(0);
		starling.filters.ColorMatrixFilter._IDENTITY.push(0);
		starling.filters.ColorMatrixFilter._IDENTITY.push(0);
		starling.filters.ColorMatrixFilter._IDENTITY.push(0);
		starling.filters.ColorMatrixFilter._IDENTITY.push(1);
		starling.filters.ColorMatrixFilter._IDENTITY.push(0);
	}
	return starling.filters.ColorMatrixFilter._IDENTITY;
};
starling.filters.ColorMatrixFilter.set_IDENTITY = function(value) {
	return starling.filters.ColorMatrixFilter._IDENTITY = value;
};
starling.filters.ColorMatrixFilter.get_MIN_COLOR = function() {
	if(starling.filters.ColorMatrixFilter._MIN_COLOR == null) {
		var this1;
		this1 = new openfl.VectorData();
		var this2;
		this2 = new Array(0);
		this1.data = this2;
		this1.length = 0;
		this1.fixed = false;
		starling.filters.ColorMatrixFilter._MIN_COLOR = this1;
		var this3 = starling.filters.ColorMatrixFilter._MIN_COLOR;
		if(!this3.fixed) {
			this3.length++;
			if(this3.data.length < this3.length) {
				var data;
				var this4;
				this4 = new Array(this3.data.length + 10);
				data = this4;
				haxe.ds._Vector.Vector_Impl_.blit(this3.data,0,data,0,this3.data.length);
				this3.data = data;
			}
			this3.data[this3.length - 1] = 0;
		}
		this3.length;
		var this5 = starling.filters.ColorMatrixFilter._MIN_COLOR;
		if(!this5.fixed) {
			this5.length++;
			if(this5.data.length < this5.length) {
				var data1;
				var this6;
				this6 = new Array(this5.data.length + 10);
				data1 = this6;
				haxe.ds._Vector.Vector_Impl_.blit(this5.data,0,data1,0,this5.data.length);
				this5.data = data1;
			}
			this5.data[this5.length - 1] = 0;
		}
		this5.length;
		var this7 = starling.filters.ColorMatrixFilter._MIN_COLOR;
		if(!this7.fixed) {
			this7.length++;
			if(this7.data.length < this7.length) {
				var data2;
				var this8;
				this8 = new Array(this7.data.length + 10);
				data2 = this8;
				haxe.ds._Vector.Vector_Impl_.blit(this7.data,0,data2,0,this7.data.length);
				this7.data = data2;
			}
			this7.data[this7.length - 1] = 0;
		}
		this7.length;
		var this9 = starling.filters.ColorMatrixFilter._MIN_COLOR;
		if(!this9.fixed) {
			this9.length++;
			if(this9.data.length < this9.length) {
				var data3;
				var this10;
				this10 = new Array(this9.data.length + 10);
				data3 = this10;
				haxe.ds._Vector.Vector_Impl_.blit(this9.data,0,data3,0,this9.data.length);
				this9.data = data3;
			}
			this9.data[this9.length - 1] = 0.0001;
		}
		this9.length;
	}
	return starling.filters.ColorMatrixFilter._MIN_COLOR;
};
starling.filters.ColorMatrixFilter.set_MIN_COLOR = function(value) {
	return starling.filters.ColorMatrixFilter._MIN_COLOR = value;
};
starling.filters.ColorMatrixFilter.__super__ = starling.filters.FragmentFilter;
starling.filters.ColorMatrixFilter.prototype = $extend(starling.filters.FragmentFilter.prototype,{
	mShaderProgram: null
	,mUserMatrix: null
	,mShaderMatrix: null
	,createPrograms: function() {
		var target = starling.core.Starling.get_current();
		if(target.hasProgram(starling.filters.ColorMatrixFilter.PROGRAM_NAME)) this.mShaderProgram = target.getProgram(starling.filters.ColorMatrixFilter.PROGRAM_NAME); else {
			var fragmentShader = "tex ft0, v0,  fs0 <2d, clamp, linear, mipnone>  \n" + "max ft0, ft0, fc5              \n" + "div ft0.xyz, ft0.xyz, ft0.www  \n" + "m44 ft0, ft0, fc0              \n" + "add ft0, ft0, fc4              \n" + "mul ft0.xyz, ft0.xyz, ft0.www  \n" + "mov oc, ft0                    \n";
			this.mShaderProgram = target.registerProgramFromSource(starling.filters.ColorMatrixFilter.PROGRAM_NAME,this.STD_VERTEX_SHADER,fragmentShader);
		}
	}
	,activate: function(pass,context,texture) {
		context.setProgramConstantsFromVector(openfl.display3D.Context3DProgramType.FRAGMENT,0,(function($this) {
			var $r;
			var this1 = $this.mShaderMatrix;
			var value = new Array();
			{
				var _g1 = 0;
				var _g = this1.data.length;
				while(_g1 < _g) {
					var i = _g1++;
					value.push(this1.data[i]);
				}
			}
			$r = value;
			return $r;
		}(this)));
		context.setProgramConstantsFromVector(openfl.display3D.Context3DProgramType.FRAGMENT,5,(function($this) {
			var $r;
			var this2 = starling.filters.ColorMatrixFilter.get_MIN_COLOR();
			var value1 = new Array();
			{
				var _g11 = 0;
				var _g2 = this2.data.length;
				while(_g11 < _g2) {
					var i1 = _g11++;
					value1.push(this2.data[i1]);
				}
			}
			$r = value1;
			return $r;
		}(this)));
		context.setProgram(this.mShaderProgram);
	}
	,invert: function() {
		return this.concatValues(-1,0,0,0,255,0,-1,0,0,255,0,0,-1,0,255,0,0,0,1,0);
	}
	,adjustSaturation: function(sat) {
		sat += 1;
		var invSat = 1 - sat;
		var invLumR = invSat * starling.filters.ColorMatrixFilter.LUMA_R;
		var invLumG = invSat * starling.filters.ColorMatrixFilter.LUMA_G;
		var invLumB = invSat * starling.filters.ColorMatrixFilter.LUMA_B;
		return this.concatValues(invLumR + sat,invLumG,invLumB,0,0,invLumR,invLumG + sat,invLumB,0,0,invLumR,invLumG,invLumB + sat,0,0,0,0,0,1,0);
	}
	,adjustContrast: function(value) {
		var s = value + 1;
		var o = 128 * (1 - s);
		return this.concatValues(s,0,0,0,o,0,s,0,0,o,0,0,s,0,o,0,0,0,1,0);
	}
	,adjustBrightness: function(value) {
		value *= 255;
		return this.concatValues(1,0,0,0,value,0,1,0,0,value,0,0,1,0,value,0,0,0,1,0);
	}
	,adjustHue: function(value) {
		value *= Math.PI;
		var cos = Math.cos(value);
		var sin = Math.sin(value);
		return this.concatValues(starling.filters.ColorMatrixFilter.LUMA_R + cos * (1 - starling.filters.ColorMatrixFilter.LUMA_R) + sin * -starling.filters.ColorMatrixFilter.LUMA_R,starling.filters.ColorMatrixFilter.LUMA_G + cos * -starling.filters.ColorMatrixFilter.LUMA_G + sin * -starling.filters.ColorMatrixFilter.LUMA_G,starling.filters.ColorMatrixFilter.LUMA_B + cos * -starling.filters.ColorMatrixFilter.LUMA_B + sin * (1 - starling.filters.ColorMatrixFilter.LUMA_B),0,0,starling.filters.ColorMatrixFilter.LUMA_R + cos * -starling.filters.ColorMatrixFilter.LUMA_R + sin * 0.143,starling.filters.ColorMatrixFilter.LUMA_G + cos * (1 - starling.filters.ColorMatrixFilter.LUMA_G) + sin * 0.14,starling.filters.ColorMatrixFilter.LUMA_B + cos * -starling.filters.ColorMatrixFilter.LUMA_B + sin * -0.283,0,0,starling.filters.ColorMatrixFilter.LUMA_R + cos * -starling.filters.ColorMatrixFilter.LUMA_R + sin * -(1 - starling.filters.ColorMatrixFilter.LUMA_R),starling.filters.ColorMatrixFilter.LUMA_G + cos * -starling.filters.ColorMatrixFilter.LUMA_G + sin * starling.filters.ColorMatrixFilter.LUMA_G,starling.filters.ColorMatrixFilter.LUMA_B + cos * (1 - starling.filters.ColorMatrixFilter.LUMA_B) + sin * starling.filters.ColorMatrixFilter.LUMA_B,0,0,0,0,0,1,0);
	}
	,tint: function(color,amount) {
		if(amount == null) amount = 1.0;
		var r = starling.utils.Color.getRed(color) / 255.0;
		var g = starling.utils.Color.getGreen(color) / 255.0;
		var b = starling.utils.Color.getBlue(color) / 255.0;
		var q = 1 - amount;
		var rA = amount * r;
		var gA = amount * g;
		var bA = amount * b;
		return this.concatValues(q + rA * starling.filters.ColorMatrixFilter.LUMA_R,rA * starling.filters.ColorMatrixFilter.LUMA_G,rA * starling.filters.ColorMatrixFilter.LUMA_B,0,0,gA * starling.filters.ColorMatrixFilter.LUMA_R,q + gA * starling.filters.ColorMatrixFilter.LUMA_G,gA * starling.filters.ColorMatrixFilter.LUMA_B,0,0,bA * starling.filters.ColorMatrixFilter.LUMA_R,bA * starling.filters.ColorMatrixFilter.LUMA_G,q + bA * starling.filters.ColorMatrixFilter.LUMA_B,0,0,0,0,0,1,0);
	}
	,reset: function() {
		this.set_matrix(null);
		return this;
	}
	,concat: function(matrix) {
		var i = 0;
		var _g = 0;
		while(_g < 4) {
			var y = _g++;
			var _g1 = 0;
			while(_g1 < 5) {
				var x = _g1++;
				var this1 = starling.filters.ColorMatrixFilter.sTmpMatrix1;
				var key = i + x;
				if(!this1.fixed) {
					if(key >= this1.length) this1.length = key + 1;
					if(this1.data.length < this1.length) {
						var data;
						var this2;
						this2 = new Array(this1.data.length + 10);
						data = this2;
						haxe.ds._Vector.Vector_Impl_.blit(this1.data,0,data,0,this1.data.length);
						this1.data = data;
					}
				}
				this1.data[key] = matrix[i] * this.mUserMatrix.data[x] + matrix[i + 1] * this.mUserMatrix.data[x + 5] + matrix[i + 2] * this.mUserMatrix.data[x + 10] + matrix[i + 3] * this.mUserMatrix.data[x + 15] + (x == 4?matrix[i + 4]:0);
			}
			i += 5;
		}
		this.copyMatrix((function($this) {
			var $r;
			var this3 = starling.filters.ColorMatrixFilter.sTmpMatrix1;
			var value = new Array();
			{
				var _g11 = 0;
				var _g2 = this3.data.length;
				while(_g11 < _g2) {
					var i1 = _g11++;
					value.push(this3.data[i1]);
				}
			}
			$r = value;
			return $r;
		}(this)),(function($this) {
			var $r;
			var this4 = $this.mUserMatrix;
			var value1 = new Array();
			{
				var _g12 = 0;
				var _g3 = this4.data.length;
				while(_g12 < _g3) {
					var i2 = _g12++;
					value1.push(this4.data[i2]);
				}
			}
			$r = value1;
			return $r;
		}(this)));
		this.updateShaderMatrix();
		return this;
	}
	,concatValues: function(m0,m1,m2,m3,m4,m5,m6,m7,m8,m9,m10,m11,m12,m13,m14,m15,m16,m17,m18,m19) {
		var this1 = starling.filters.ColorMatrixFilter.sTmpMatrix2;
		if(!this1.fixed) {
			if(0 > this1.length) {
				var data;
				var this2;
				this2 = new Array(0);
				data = this2;
				haxe.ds._Vector.Vector_Impl_.blit(this1.data,0,data,0,Std["int"](Math.min(this1.data.length,0)));
				this1.data = data;
			}
			this1.length = 0;
		}
		0;
		var this3 = starling.filters.ColorMatrixFilter.sTmpMatrix2;
		if(!this3.fixed) {
			this3.length++;
			if(this3.data.length < this3.length) {
				var data1;
				var this4;
				this4 = new Array(this3.data.length + 10);
				data1 = this4;
				haxe.ds._Vector.Vector_Impl_.blit(this3.data,0,data1,0,this3.data.length);
				this3.data = data1;
			}
			this3.data[this3.length - 1] = m0;
		}
		this3.length;
		var this5 = starling.filters.ColorMatrixFilter.sTmpMatrix2;
		if(!this5.fixed) {
			this5.length++;
			if(this5.data.length < this5.length) {
				var data2;
				var this6;
				this6 = new Array(this5.data.length + 10);
				data2 = this6;
				haxe.ds._Vector.Vector_Impl_.blit(this5.data,0,data2,0,this5.data.length);
				this5.data = data2;
			}
			this5.data[this5.length - 1] = m1;
		}
		this5.length;
		var this7 = starling.filters.ColorMatrixFilter.sTmpMatrix2;
		if(!this7.fixed) {
			this7.length++;
			if(this7.data.length < this7.length) {
				var data3;
				var this8;
				this8 = new Array(this7.data.length + 10);
				data3 = this8;
				haxe.ds._Vector.Vector_Impl_.blit(this7.data,0,data3,0,this7.data.length);
				this7.data = data3;
			}
			this7.data[this7.length - 1] = m2;
		}
		this7.length;
		var this9 = starling.filters.ColorMatrixFilter.sTmpMatrix2;
		if(!this9.fixed) {
			this9.length++;
			if(this9.data.length < this9.length) {
				var data4;
				var this10;
				this10 = new Array(this9.data.length + 10);
				data4 = this10;
				haxe.ds._Vector.Vector_Impl_.blit(this9.data,0,data4,0,this9.data.length);
				this9.data = data4;
			}
			this9.data[this9.length - 1] = m3;
		}
		this9.length;
		var this11 = starling.filters.ColorMatrixFilter.sTmpMatrix2;
		if(!this11.fixed) {
			this11.length++;
			if(this11.data.length < this11.length) {
				var data5;
				var this12;
				this12 = new Array(this11.data.length + 10);
				data5 = this12;
				haxe.ds._Vector.Vector_Impl_.blit(this11.data,0,data5,0,this11.data.length);
				this11.data = data5;
			}
			this11.data[this11.length - 1] = m4;
		}
		this11.length;
		var this13 = starling.filters.ColorMatrixFilter.sTmpMatrix2;
		if(!this13.fixed) {
			this13.length++;
			if(this13.data.length < this13.length) {
				var data6;
				var this14;
				this14 = new Array(this13.data.length + 10);
				data6 = this14;
				haxe.ds._Vector.Vector_Impl_.blit(this13.data,0,data6,0,this13.data.length);
				this13.data = data6;
			}
			this13.data[this13.length - 1] = m5;
		}
		this13.length;
		var this15 = starling.filters.ColorMatrixFilter.sTmpMatrix2;
		if(!this15.fixed) {
			this15.length++;
			if(this15.data.length < this15.length) {
				var data7;
				var this16;
				this16 = new Array(this15.data.length + 10);
				data7 = this16;
				haxe.ds._Vector.Vector_Impl_.blit(this15.data,0,data7,0,this15.data.length);
				this15.data = data7;
			}
			this15.data[this15.length - 1] = m6;
		}
		this15.length;
		var this17 = starling.filters.ColorMatrixFilter.sTmpMatrix2;
		if(!this17.fixed) {
			this17.length++;
			if(this17.data.length < this17.length) {
				var data8;
				var this18;
				this18 = new Array(this17.data.length + 10);
				data8 = this18;
				haxe.ds._Vector.Vector_Impl_.blit(this17.data,0,data8,0,this17.data.length);
				this17.data = data8;
			}
			this17.data[this17.length - 1] = m7;
		}
		this17.length;
		var this19 = starling.filters.ColorMatrixFilter.sTmpMatrix2;
		if(!this19.fixed) {
			this19.length++;
			if(this19.data.length < this19.length) {
				var data9;
				var this20;
				this20 = new Array(this19.data.length + 10);
				data9 = this20;
				haxe.ds._Vector.Vector_Impl_.blit(this19.data,0,data9,0,this19.data.length);
				this19.data = data9;
			}
			this19.data[this19.length - 1] = m8;
		}
		this19.length;
		var this21 = starling.filters.ColorMatrixFilter.sTmpMatrix2;
		if(!this21.fixed) {
			this21.length++;
			if(this21.data.length < this21.length) {
				var data10;
				var this22;
				this22 = new Array(this21.data.length + 10);
				data10 = this22;
				haxe.ds._Vector.Vector_Impl_.blit(this21.data,0,data10,0,this21.data.length);
				this21.data = data10;
			}
			this21.data[this21.length - 1] = m9;
		}
		this21.length;
		var this23 = starling.filters.ColorMatrixFilter.sTmpMatrix2;
		if(!this23.fixed) {
			this23.length++;
			if(this23.data.length < this23.length) {
				var data11;
				var this24;
				this24 = new Array(this23.data.length + 10);
				data11 = this24;
				haxe.ds._Vector.Vector_Impl_.blit(this23.data,0,data11,0,this23.data.length);
				this23.data = data11;
			}
			this23.data[this23.length - 1] = m10;
		}
		this23.length;
		var this25 = starling.filters.ColorMatrixFilter.sTmpMatrix2;
		if(!this25.fixed) {
			this25.length++;
			if(this25.data.length < this25.length) {
				var data12;
				var this26;
				this26 = new Array(this25.data.length + 10);
				data12 = this26;
				haxe.ds._Vector.Vector_Impl_.blit(this25.data,0,data12,0,this25.data.length);
				this25.data = data12;
			}
			this25.data[this25.length - 1] = m11;
		}
		this25.length;
		var this27 = starling.filters.ColorMatrixFilter.sTmpMatrix2;
		if(!this27.fixed) {
			this27.length++;
			if(this27.data.length < this27.length) {
				var data13;
				var this28;
				this28 = new Array(this27.data.length + 10);
				data13 = this28;
				haxe.ds._Vector.Vector_Impl_.blit(this27.data,0,data13,0,this27.data.length);
				this27.data = data13;
			}
			this27.data[this27.length - 1] = m12;
		}
		this27.length;
		var this29 = starling.filters.ColorMatrixFilter.sTmpMatrix2;
		if(!this29.fixed) {
			this29.length++;
			if(this29.data.length < this29.length) {
				var data14;
				var this30;
				this30 = new Array(this29.data.length + 10);
				data14 = this30;
				haxe.ds._Vector.Vector_Impl_.blit(this29.data,0,data14,0,this29.data.length);
				this29.data = data14;
			}
			this29.data[this29.length - 1] = m13;
		}
		this29.length;
		var this31 = starling.filters.ColorMatrixFilter.sTmpMatrix2;
		if(!this31.fixed) {
			this31.length++;
			if(this31.data.length < this31.length) {
				var data15;
				var this32;
				this32 = new Array(this31.data.length + 10);
				data15 = this32;
				haxe.ds._Vector.Vector_Impl_.blit(this31.data,0,data15,0,this31.data.length);
				this31.data = data15;
			}
			this31.data[this31.length - 1] = m14;
		}
		this31.length;
		var this33 = starling.filters.ColorMatrixFilter.sTmpMatrix2;
		if(!this33.fixed) {
			this33.length++;
			if(this33.data.length < this33.length) {
				var data16;
				var this34;
				this34 = new Array(this33.data.length + 10);
				data16 = this34;
				haxe.ds._Vector.Vector_Impl_.blit(this33.data,0,data16,0,this33.data.length);
				this33.data = data16;
			}
			this33.data[this33.length - 1] = m15;
		}
		this33.length;
		var this35 = starling.filters.ColorMatrixFilter.sTmpMatrix2;
		if(!this35.fixed) {
			this35.length++;
			if(this35.data.length < this35.length) {
				var data17;
				var this36;
				this36 = new Array(this35.data.length + 10);
				data17 = this36;
				haxe.ds._Vector.Vector_Impl_.blit(this35.data,0,data17,0,this35.data.length);
				this35.data = data17;
			}
			this35.data[this35.length - 1] = m16;
		}
		this35.length;
		var this37 = starling.filters.ColorMatrixFilter.sTmpMatrix2;
		if(!this37.fixed) {
			this37.length++;
			if(this37.data.length < this37.length) {
				var data18;
				var this38;
				this38 = new Array(this37.data.length + 10);
				data18 = this38;
				haxe.ds._Vector.Vector_Impl_.blit(this37.data,0,data18,0,this37.data.length);
				this37.data = data18;
			}
			this37.data[this37.length - 1] = m17;
		}
		this37.length;
		var this39 = starling.filters.ColorMatrixFilter.sTmpMatrix2;
		if(!this39.fixed) {
			this39.length++;
			if(this39.data.length < this39.length) {
				var data19;
				var this40;
				this40 = new Array(this39.data.length + 10);
				data19 = this40;
				haxe.ds._Vector.Vector_Impl_.blit(this39.data,0,data19,0,this39.data.length);
				this39.data = data19;
			}
			this39.data[this39.length - 1] = m18;
		}
		this39.length;
		var this41 = starling.filters.ColorMatrixFilter.sTmpMatrix2;
		if(!this41.fixed) {
			this41.length++;
			if(this41.data.length < this41.length) {
				var data20;
				var this42;
				this42 = new Array(this41.data.length + 10);
				data20 = this42;
				haxe.ds._Vector.Vector_Impl_.blit(this41.data,0,data20,0,this41.data.length);
				this41.data = data20;
			}
			this41.data[this41.length - 1] = m19;
		}
		this41.length;
		this.concat((function($this) {
			var $r;
			var this43 = starling.filters.ColorMatrixFilter.sTmpMatrix2;
			var value = new Array();
			{
				var _g1 = 0;
				var _g = this43.data.length;
				while(_g1 < _g) {
					var i = _g1++;
					value.push(this43.data[i]);
				}
			}
			$r = value;
			return $r;
		}(this)));
		return this;
	}
	,copyMatrix: function(from,to) {
		var _g = 0;
		while(_g < 20) {
			var i = _g++;
			to[i] = from[i];
		}
	}
	,updateShaderMatrix: function() {
		var this1 = this.mShaderMatrix;
		if(!this1.fixed) {
			if(0 > this1.length) {
				var data;
				var this2;
				this2 = new Array(0);
				data = this2;
				haxe.ds._Vector.Vector_Impl_.blit(this1.data,0,data,0,Std["int"](Math.min(this1.data.length,0)));
				this1.data = data;
			}
			this1.length = 0;
		}
		0;
		var this3 = this.mShaderMatrix;
		if(!this3.fixed) {
			this3.length++;
			if(this3.data.length < this3.length) {
				var data1;
				var this4;
				this4 = new Array(this3.data.length + 10);
				data1 = this4;
				haxe.ds._Vector.Vector_Impl_.blit(this3.data,0,data1,0,this3.data.length);
				this3.data = data1;
			}
			this3.data[this3.length - 1] = this.mUserMatrix.data[0];
		}
		this3.length;
		var this5 = this.mShaderMatrix;
		if(!this5.fixed) {
			this5.length++;
			if(this5.data.length < this5.length) {
				var data2;
				var this6;
				this6 = new Array(this5.data.length + 10);
				data2 = this6;
				haxe.ds._Vector.Vector_Impl_.blit(this5.data,0,data2,0,this5.data.length);
				this5.data = data2;
			}
			this5.data[this5.length - 1] = this.mUserMatrix.data[1];
		}
		this5.length;
		var this7 = this.mShaderMatrix;
		if(!this7.fixed) {
			this7.length++;
			if(this7.data.length < this7.length) {
				var data3;
				var this8;
				this8 = new Array(this7.data.length + 10);
				data3 = this8;
				haxe.ds._Vector.Vector_Impl_.blit(this7.data,0,data3,0,this7.data.length);
				this7.data = data3;
			}
			this7.data[this7.length - 1] = this.mUserMatrix.data[2];
		}
		this7.length;
		var this9 = this.mShaderMatrix;
		if(!this9.fixed) {
			this9.length++;
			if(this9.data.length < this9.length) {
				var data4;
				var this10;
				this10 = new Array(this9.data.length + 10);
				data4 = this10;
				haxe.ds._Vector.Vector_Impl_.blit(this9.data,0,data4,0,this9.data.length);
				this9.data = data4;
			}
			this9.data[this9.length - 1] = this.mUserMatrix.data[3];
		}
		this9.length;
		var this11 = this.mShaderMatrix;
		if(!this11.fixed) {
			this11.length++;
			if(this11.data.length < this11.length) {
				var data5;
				var this12;
				this12 = new Array(this11.data.length + 10);
				data5 = this12;
				haxe.ds._Vector.Vector_Impl_.blit(this11.data,0,data5,0,this11.data.length);
				this11.data = data5;
			}
			this11.data[this11.length - 1] = this.mUserMatrix.data[4] / 255.0;
		}
		this11.length;
		var this13 = this.mShaderMatrix;
		if(!this13.fixed) {
			this13.length++;
			if(this13.data.length < this13.length) {
				var data6;
				var this14;
				this14 = new Array(this13.data.length + 10);
				data6 = this14;
				haxe.ds._Vector.Vector_Impl_.blit(this13.data,0,data6,0,this13.data.length);
				this13.data = data6;
			}
			this13.data[this13.length - 1] = this.mUserMatrix.data[5];
		}
		this13.length;
		var this15 = this.mShaderMatrix;
		if(!this15.fixed) {
			this15.length++;
			if(this15.data.length < this15.length) {
				var data7;
				var this16;
				this16 = new Array(this15.data.length + 10);
				data7 = this16;
				haxe.ds._Vector.Vector_Impl_.blit(this15.data,0,data7,0,this15.data.length);
				this15.data = data7;
			}
			this15.data[this15.length - 1] = this.mUserMatrix.data[6];
		}
		this15.length;
		var this17 = this.mShaderMatrix;
		if(!this17.fixed) {
			this17.length++;
			if(this17.data.length < this17.length) {
				var data8;
				var this18;
				this18 = new Array(this17.data.length + 10);
				data8 = this18;
				haxe.ds._Vector.Vector_Impl_.blit(this17.data,0,data8,0,this17.data.length);
				this17.data = data8;
			}
			this17.data[this17.length - 1] = this.mUserMatrix.data[7];
		}
		this17.length;
		var this19 = this.mShaderMatrix;
		if(!this19.fixed) {
			this19.length++;
			if(this19.data.length < this19.length) {
				var data9;
				var this20;
				this20 = new Array(this19.data.length + 10);
				data9 = this20;
				haxe.ds._Vector.Vector_Impl_.blit(this19.data,0,data9,0,this19.data.length);
				this19.data = data9;
			}
			this19.data[this19.length - 1] = this.mUserMatrix.data[8];
		}
		this19.length;
		var this21 = this.mShaderMatrix;
		if(!this21.fixed) {
			this21.length++;
			if(this21.data.length < this21.length) {
				var data10;
				var this22;
				this22 = new Array(this21.data.length + 10);
				data10 = this22;
				haxe.ds._Vector.Vector_Impl_.blit(this21.data,0,data10,0,this21.data.length);
				this21.data = data10;
			}
			this21.data[this21.length - 1] = this.mUserMatrix.data[9] / 255.0;
		}
		this21.length;
		var this23 = this.mShaderMatrix;
		if(!this23.fixed) {
			this23.length++;
			if(this23.data.length < this23.length) {
				var data11;
				var this24;
				this24 = new Array(this23.data.length + 10);
				data11 = this24;
				haxe.ds._Vector.Vector_Impl_.blit(this23.data,0,data11,0,this23.data.length);
				this23.data = data11;
			}
			this23.data[this23.length - 1] = this.mUserMatrix.data[10];
		}
		this23.length;
		var this25 = this.mShaderMatrix;
		if(!this25.fixed) {
			this25.length++;
			if(this25.data.length < this25.length) {
				var data12;
				var this26;
				this26 = new Array(this25.data.length + 10);
				data12 = this26;
				haxe.ds._Vector.Vector_Impl_.blit(this25.data,0,data12,0,this25.data.length);
				this25.data = data12;
			}
			this25.data[this25.length - 1] = this.mUserMatrix.data[11];
		}
		this25.length;
		var this27 = this.mShaderMatrix;
		if(!this27.fixed) {
			this27.length++;
			if(this27.data.length < this27.length) {
				var data13;
				var this28;
				this28 = new Array(this27.data.length + 10);
				data13 = this28;
				haxe.ds._Vector.Vector_Impl_.blit(this27.data,0,data13,0,this27.data.length);
				this27.data = data13;
			}
			this27.data[this27.length - 1] = this.mUserMatrix.data[12];
		}
		this27.length;
		var this29 = this.mShaderMatrix;
		if(!this29.fixed) {
			this29.length++;
			if(this29.data.length < this29.length) {
				var data14;
				var this30;
				this30 = new Array(this29.data.length + 10);
				data14 = this30;
				haxe.ds._Vector.Vector_Impl_.blit(this29.data,0,data14,0,this29.data.length);
				this29.data = data14;
			}
			this29.data[this29.length - 1] = this.mUserMatrix.data[13];
		}
		this29.length;
		var this31 = this.mShaderMatrix;
		if(!this31.fixed) {
			this31.length++;
			if(this31.data.length < this31.length) {
				var data15;
				var this32;
				this32 = new Array(this31.data.length + 10);
				data15 = this32;
				haxe.ds._Vector.Vector_Impl_.blit(this31.data,0,data15,0,this31.data.length);
				this31.data = data15;
			}
			this31.data[this31.length - 1] = this.mUserMatrix.data[14] / 255.0;
		}
		this31.length;
		var this33 = this.mShaderMatrix;
		if(!this33.fixed) {
			this33.length++;
			if(this33.data.length < this33.length) {
				var data16;
				var this34;
				this34 = new Array(this33.data.length + 10);
				data16 = this34;
				haxe.ds._Vector.Vector_Impl_.blit(this33.data,0,data16,0,this33.data.length);
				this33.data = data16;
			}
			this33.data[this33.length - 1] = this.mUserMatrix.data[15];
		}
		this33.length;
		var this35 = this.mShaderMatrix;
		if(!this35.fixed) {
			this35.length++;
			if(this35.data.length < this35.length) {
				var data17;
				var this36;
				this36 = new Array(this35.data.length + 10);
				data17 = this36;
				haxe.ds._Vector.Vector_Impl_.blit(this35.data,0,data17,0,this35.data.length);
				this35.data = data17;
			}
			this35.data[this35.length - 1] = this.mUserMatrix.data[16];
		}
		this35.length;
		var this37 = this.mShaderMatrix;
		if(!this37.fixed) {
			this37.length++;
			if(this37.data.length < this37.length) {
				var data18;
				var this38;
				this38 = new Array(this37.data.length + 10);
				data18 = this38;
				haxe.ds._Vector.Vector_Impl_.blit(this37.data,0,data18,0,this37.data.length);
				this37.data = data18;
			}
			this37.data[this37.length - 1] = this.mUserMatrix.data[17];
		}
		this37.length;
		var this39 = this.mShaderMatrix;
		if(!this39.fixed) {
			this39.length++;
			if(this39.data.length < this39.length) {
				var data19;
				var this40;
				this40 = new Array(this39.data.length + 10);
				data19 = this40;
				haxe.ds._Vector.Vector_Impl_.blit(this39.data,0,data19,0,this39.data.length);
				this39.data = data19;
			}
			this39.data[this39.length - 1] = this.mUserMatrix.data[18];
		}
		this39.length;
		var this41 = this.mShaderMatrix;
		if(!this41.fixed) {
			this41.length++;
			if(this41.data.length < this41.length) {
				var data20;
				var this42;
				this42 = new Array(this41.data.length + 10);
				data20 = this42;
				haxe.ds._Vector.Vector_Impl_.blit(this41.data,0,data20,0,this41.data.length);
				this41.data = data20;
			}
			this41.data[this41.length - 1] = this.mUserMatrix.data[19] / 255.0;
		}
		this41.length;
	}
	,get_matrix: function() {
		var this1 = this.mUserMatrix;
		var value = new Array();
		var _g1 = 0;
		var _g = this1.data.length;
		while(_g1 < _g) {
			var i = _g1++;
			value.push(this1.data[i]);
		}
		return value;
	}
	,set_matrix: function(value) {
		if(value != null && value.length != 20) throw new openfl.errors.ArgumentError("Invalid matrix length: must be 20");
		if(value == null) {
			var this1 = this.mUserMatrix;
			if(!this1.fixed) {
				if(0 > this1.length) {
					var data;
					var this2;
					this2 = new Array(0);
					data = this2;
					haxe.ds._Vector.Vector_Impl_.blit(this1.data,0,data,0,Std["int"](Math.min(this1.data.length,0)));
					this1.data = data;
				}
				this1.length = 0;
			}
			0;
			var _g1 = 0;
			var _g = starling.filters.ColorMatrixFilter.get_IDENTITY().length;
			while(_g1 < _g) {
				var i = _g1++;
				var this3 = this.mUserMatrix;
				var x = starling.filters.ColorMatrixFilter.get_IDENTITY()[i];
				if(!this3.fixed) {
					this3.length++;
					if(this3.data.length < this3.length) {
						var data1;
						var this4;
						this4 = new Array(this3.data.length + 10);
						data1 = this4;
						haxe.ds._Vector.Vector_Impl_.blit(this3.data,0,data1,0,this3.data.length);
						this3.data = data1;
					}
					this3.data[this3.length - 1] = x;
				}
				this3.length;
			}
		} else this.copyMatrix(value,(function($this) {
			var $r;
			var this5 = $this.mUserMatrix;
			var value1 = new Array();
			{
				var _g11 = 0;
				var _g2 = this5.data.length;
				while(_g11 < _g2) {
					var i1 = _g11++;
					value1.push(this5.data[i1]);
				}
			}
			$r = value1;
			return $r;
		}(this)));
		this.updateShaderMatrix();
		return value;
	}
	,__class__: starling.filters.ColorMatrixFilter
	,__properties__: $extend(starling.filters.FragmentFilter.prototype.__properties__,{set_matrix:"set_matrix",get_matrix:"get_matrix"})
});
starling.filters.DisplacementMapFilter = function(_mapTexture,mapPoint,componentX,componentY,scaleX,scaleY,repeat) {
	if(repeat == null) repeat = false;
	if(scaleY == null) scaleY = 0.0;
	if(scaleX == null) scaleX = 0.0;
	if(componentY == null) componentY = 0;
	if(componentX == null) componentX = 0;
	this.mMapTexture = _mapTexture;
	haxe.Log.trace("1 mMapTexture = " + Std.string(this.mMapTexture),{ fileName : "DisplacementMapFilter.hx", lineNumber : 149, className : "starling.filters.DisplacementMapFilter", methodName : "new"});
	this.mMapPoint = new openfl.geom.Point();
	this.mComponentX = componentX;
	this.mComponentY = componentY;
	this.mScaleX = scaleX;
	this.mScaleY = scaleY;
	this.mRepeat = repeat;
	this.set_mapPoint(mapPoint);
	starling.filters.FragmentFilter.call(this);
};
$hxClasses["starling.filters.DisplacementMapFilter"] = starling.filters.DisplacementMapFilter;
starling.filters.DisplacementMapFilter.__name__ = ["starling","filters","DisplacementMapFilter"];
starling.filters.DisplacementMapFilter.__properties__ = {set_sMatrixData:"set_sMatrixData",get_sMatrixData:"get_sMatrixData",set_sMapTexCoords:"set_sMapTexCoords",get_sMapTexCoords:"get_sMapTexCoords",set_sOneHalf:"set_sOneHalf",get_sOneHalf:"get_sOneHalf"}
starling.filters.DisplacementMapFilter._sOneHalf = null;
starling.filters.DisplacementMapFilter._sMapTexCoords = null;
starling.filters.DisplacementMapFilter._sMatrixData = null;
starling.filters.DisplacementMapFilter.get_sMatrixData = function() {
	if(starling.filters.DisplacementMapFilter._sMatrixData == null) {
		starling.filters.DisplacementMapFilter._sMatrixData = new Array();
		starling.filters.DisplacementMapFilter._sMatrixData.push(0);
		starling.filters.DisplacementMapFilter._sMatrixData.push(0);
		starling.filters.DisplacementMapFilter._sMatrixData.push(0);
		starling.filters.DisplacementMapFilter._sMatrixData.push(0);
		starling.filters.DisplacementMapFilter._sMatrixData.push(0);
		starling.filters.DisplacementMapFilter._sMatrixData.push(0);
		starling.filters.DisplacementMapFilter._sMatrixData.push(0);
		starling.filters.DisplacementMapFilter._sMatrixData.push(0);
		starling.filters.DisplacementMapFilter._sMatrixData.push(0);
		starling.filters.DisplacementMapFilter._sMatrixData.push(0);
		starling.filters.DisplacementMapFilter._sMatrixData.push(0);
		starling.filters.DisplacementMapFilter._sMatrixData.push(0);
		starling.filters.DisplacementMapFilter._sMatrixData.push(0);
		starling.filters.DisplacementMapFilter._sMatrixData.push(0);
		starling.filters.DisplacementMapFilter._sMatrixData.push(0);
		starling.filters.DisplacementMapFilter._sMatrixData.push(0);
	}
	return starling.filters.DisplacementMapFilter._sMatrixData;
};
starling.filters.DisplacementMapFilter.set_sMatrixData = function(value) {
	return starling.filters.DisplacementMapFilter._sMatrixData = value;
};
starling.filters.DisplacementMapFilter.get_sOneHalf = function() {
	if(starling.filters.DisplacementMapFilter._sOneHalf == null) {
		var this1;
		this1 = new openfl.VectorData();
		var this2;
		this2 = new Array(0);
		this1.data = this2;
		this1.length = 0;
		this1.fixed = false;
		starling.filters.DisplacementMapFilter._sOneHalf = this1;
		var this3 = starling.filters.DisplacementMapFilter._sOneHalf;
		if(!this3.fixed) {
			this3.length++;
			if(this3.data.length < this3.length) {
				var data;
				var this4;
				this4 = new Array(this3.data.length + 10);
				data = this4;
				haxe.ds._Vector.Vector_Impl_.blit(this3.data,0,data,0,this3.data.length);
				this3.data = data;
			}
			this3.data[this3.length - 1] = 0.5;
		}
		this3.length;
		var this5 = starling.filters.DisplacementMapFilter._sOneHalf;
		if(!this5.fixed) {
			this5.length++;
			if(this5.data.length < this5.length) {
				var data1;
				var this6;
				this6 = new Array(this5.data.length + 10);
				data1 = this6;
				haxe.ds._Vector.Vector_Impl_.blit(this5.data,0,data1,0,this5.data.length);
				this5.data = data1;
			}
			this5.data[this5.length - 1] = 0.5;
		}
		this5.length;
		var this7 = starling.filters.DisplacementMapFilter._sOneHalf;
		if(!this7.fixed) {
			this7.length++;
			if(this7.data.length < this7.length) {
				var data2;
				var this8;
				this8 = new Array(this7.data.length + 10);
				data2 = this8;
				haxe.ds._Vector.Vector_Impl_.blit(this7.data,0,data2,0,this7.data.length);
				this7.data = data2;
			}
			this7.data[this7.length - 1] = 0.5;
		}
		this7.length;
		var this9 = starling.filters.DisplacementMapFilter._sOneHalf;
		if(!this9.fixed) {
			this9.length++;
			if(this9.data.length < this9.length) {
				var data3;
				var this10;
				this10 = new Array(this9.data.length + 10);
				data3 = this10;
				haxe.ds._Vector.Vector_Impl_.blit(this9.data,0,data3,0,this9.data.length);
				this9.data = data3;
			}
			this9.data[this9.length - 1] = 0.5;
		}
		this9.length;
	}
	return starling.filters.DisplacementMapFilter._sOneHalf;
};
starling.filters.DisplacementMapFilter.set_sOneHalf = function(value) {
	return starling.filters.DisplacementMapFilter._sOneHalf = value;
};
starling.filters.DisplacementMapFilter.get_sMapTexCoords = function() {
	if(starling.filters.DisplacementMapFilter._sMapTexCoords == null) {
		var this1;
		this1 = new openfl.VectorData();
		var this2;
		this2 = new Array(0);
		this1.data = this2;
		this1.length = 0;
		this1.fixed = false;
		starling.filters.DisplacementMapFilter._sMapTexCoords = this1;
		var this3 = starling.filters.DisplacementMapFilter._sMapTexCoords;
		if(!this3.fixed) {
			this3.length++;
			if(this3.data.length < this3.length) {
				var data;
				var this4;
				this4 = new Array(this3.data.length + 10);
				data = this4;
				haxe.ds._Vector.Vector_Impl_.blit(this3.data,0,data,0,this3.data.length);
				this3.data = data;
			}
			this3.data[this3.length - 1] = 0;
		}
		this3.length;
		var this5 = starling.filters.DisplacementMapFilter._sMapTexCoords;
		if(!this5.fixed) {
			this5.length++;
			if(this5.data.length < this5.length) {
				var data1;
				var this6;
				this6 = new Array(this5.data.length + 10);
				data1 = this6;
				haxe.ds._Vector.Vector_Impl_.blit(this5.data,0,data1,0,this5.data.length);
				this5.data = data1;
			}
			this5.data[this5.length - 1] = 0;
		}
		this5.length;
		var this7 = starling.filters.DisplacementMapFilter._sMapTexCoords;
		if(!this7.fixed) {
			this7.length++;
			if(this7.data.length < this7.length) {
				var data2;
				var this8;
				this8 = new Array(this7.data.length + 10);
				data2 = this8;
				haxe.ds._Vector.Vector_Impl_.blit(this7.data,0,data2,0,this7.data.length);
				this7.data = data2;
			}
			this7.data[this7.length - 1] = 1;
		}
		this7.length;
		var this9 = starling.filters.DisplacementMapFilter._sMapTexCoords;
		if(!this9.fixed) {
			this9.length++;
			if(this9.data.length < this9.length) {
				var data3;
				var this10;
				this10 = new Array(this9.data.length + 10);
				data3 = this10;
				haxe.ds._Vector.Vector_Impl_.blit(this9.data,0,data3,0,this9.data.length);
				this9.data = data3;
			}
			this9.data[this9.length - 1] = 0;
		}
		this9.length;
		var this11 = starling.filters.DisplacementMapFilter._sMapTexCoords;
		if(!this11.fixed) {
			this11.length++;
			if(this11.data.length < this11.length) {
				var data4;
				var this12;
				this12 = new Array(this11.data.length + 10);
				data4 = this12;
				haxe.ds._Vector.Vector_Impl_.blit(this11.data,0,data4,0,this11.data.length);
				this11.data = data4;
			}
			this11.data[this11.length - 1] = 0;
		}
		this11.length;
		var this13 = starling.filters.DisplacementMapFilter._sMapTexCoords;
		if(!this13.fixed) {
			this13.length++;
			if(this13.data.length < this13.length) {
				var data5;
				var this14;
				this14 = new Array(this13.data.length + 10);
				data5 = this14;
				haxe.ds._Vector.Vector_Impl_.blit(this13.data,0,data5,0,this13.data.length);
				this13.data = data5;
			}
			this13.data[this13.length - 1] = 1;
		}
		this13.length;
		var this15 = starling.filters.DisplacementMapFilter._sMapTexCoords;
		if(!this15.fixed) {
			this15.length++;
			if(this15.data.length < this15.length) {
				var data6;
				var this16;
				this16 = new Array(this15.data.length + 10);
				data6 = this16;
				haxe.ds._Vector.Vector_Impl_.blit(this15.data,0,data6,0,this15.data.length);
				this15.data = data6;
			}
			this15.data[this15.length - 1] = 1;
		}
		this15.length;
		var this17 = starling.filters.DisplacementMapFilter._sMapTexCoords;
		if(!this17.fixed) {
			this17.length++;
			if(this17.data.length < this17.length) {
				var data7;
				var this18;
				this18 = new Array(this17.data.length + 10);
				data7 = this18;
				haxe.ds._Vector.Vector_Impl_.blit(this17.data,0,data7,0,this17.data.length);
				this17.data = data7;
			}
			this17.data[this17.length - 1] = 1;
		}
		this17.length;
	}
	return starling.filters.DisplacementMapFilter._sMapTexCoords;
};
starling.filters.DisplacementMapFilter.set_sMapTexCoords = function(value) {
	return starling.filters.DisplacementMapFilter._sMapTexCoords = value;
};
starling.filters.DisplacementMapFilter.__super__ = starling.filters.FragmentFilter;
starling.filters.DisplacementMapFilter.prototype = $extend(starling.filters.FragmentFilter.prototype,{
	mMapTexture: null
	,mMapPoint: null
	,mComponentX: null
	,mComponentY: null
	,mScaleX: null
	,mScaleY: null
	,mRepeat: null
	,mShaderProgram: null
	,mMapTexCoordBuffer: null
	,dispose: function() {
		if(this.mMapTexCoordBuffer != null) this.mMapTexCoordBuffer.dispose();
		starling.filters.FragmentFilter.prototype.dispose.call(this);
	}
	,createPrograms: function() {
		if(this.mMapTexCoordBuffer != null) this.mMapTexCoordBuffer.dispose();
		this.mMapTexCoordBuffer = starling.core.Starling.get_Context().createVertexBuffer(4,2);
		var target = starling.core.Starling.get_current();
		haxe.Log.trace("2 mMapTexture = " + Std.string(this.mMapTexture),{ fileName : "DisplacementMapFilter.hx", lineNumber : 177, className : "starling.filters.DisplacementMapFilter", methodName : "createPrograms"});
		var mapFlags = starling.core.RenderSupport.getTextureLookupFlags(this.get_mapTexture().get_format(),this.get_mapTexture().get_mipMapping(),this.get_mapTexture().get_repeat());
		var inputFlags = starling.core.RenderSupport.getTextureLookupFlags(openfl.display3D.Context3DTextureFormat.BGRA,false,this.mRepeat);
		var programName = starling.utils.StarlingUtils.formatString("DMF_m{0}_i{1}",[mapFlags,inputFlags]);
		if(target.hasProgram(programName)) this.mShaderProgram = target.getProgram(programName); else {
			var vertexShader = ["m44  op, va0, vc0","mov  v0, va1","mov  v1, va2"].join("\n");
			var fragmentShader = ["tex ft0,  v1, fs1 " + mapFlags,"sub ft1, ft0, fc0","m44 ft2, ft1, fc1","add ft3,  v0, ft2","tex  oc, ft3, fs0 " + inputFlags].join("\n");
			this.mShaderProgram = target.registerProgramFromSource(programName,vertexShader,fragmentShader);
		}
	}
	,activate: function(pass,context,texture) {
		this.updateParameters(texture.get_nativeWidth(),texture.get_nativeHeight());
		context.setVertexBufferAt(2,this.mMapTexCoordBuffer,0,openfl.display3D.Context3DVertexBufferFormat.FLOAT_2);
		context.setProgramConstantsFromVector(openfl.display3D.Context3DProgramType.FRAGMENT,0,(function($this) {
			var $r;
			var this1 = starling.filters.DisplacementMapFilter.get_sOneHalf();
			var value = new Array();
			{
				var _g1 = 0;
				var _g = this1.data.length;
				while(_g1 < _g) {
					var i = _g1++;
					value.push(this1.data[i]);
				}
			}
			$r = value;
			return $r;
		}(this)));
		context.setProgramConstantsFromMatrix(openfl.display3D.Context3DProgramType.FRAGMENT,1,starling.filters.DisplacementMapFilter.sMatrix,true);
		context.setTextureAt(1,this.mMapTexture.get_base());
		context.setProgram(this.mShaderProgram);
	}
	,deactivate: function(pass,context,texture) {
		context.setVertexBufferAt(2,null);
		context.setTextureAt(1,null);
	}
	,updateParameters: function(textureWidth,textureHeight) {
		var scale = starling.core.Starling.get_ContentScaleFactor();
		var columnX;
		var columnY;
		var _g = 0;
		while(_g < 16) {
			var i = _g++;
			starling.filters.DisplacementMapFilter.get_sMatrixData()[i] = 0;
		}
		if((function($this) {
			var $r;
			var $int = $this.mComponentX;
			$r = $int < 0?4294967296.0 + $int:$int + 0.0;
			return $r;
		}(this)) == 1) columnX = 0; else if((function($this) {
			var $r;
			var int1 = $this.mComponentX;
			$r = int1 < 0?4294967296.0 + int1:int1 + 0.0;
			return $r;
		}(this)) == 2) columnX = 1; else if((function($this) {
			var $r;
			var int2 = $this.mComponentX;
			$r = int2 < 0?4294967296.0 + int2:int2 + 0.0;
			return $r;
		}(this)) == 4) columnX = 2; else columnX = 3;
		if((function($this) {
			var $r;
			var int3 = $this.mComponentY;
			$r = int3 < 0?4294967296.0 + int3:int3 + 0.0;
			return $r;
		}(this)) == 1) columnY = 0; else if((function($this) {
			var $r;
			var int4 = $this.mComponentY;
			$r = int4 < 0?4294967296.0 + int4:int4 + 0.0;
			return $r;
		}(this)) == 2) columnY = 1; else if((function($this) {
			var $r;
			var int5 = $this.mComponentY;
			$r = int5 < 0?4294967296.0 + int5:int5 + 0.0;
			return $r;
		}(this)) == 4) columnY = 2; else columnY = 3;
		starling.filters.DisplacementMapFilter.get_sMatrixData()[columnX * 4] = this.mScaleX * scale / textureWidth;
		starling.filters.DisplacementMapFilter.get_sMatrixData()[columnY * 4 + 1] = this.mScaleY * scale / textureHeight;
		starling.filters.DisplacementMapFilter.sMatrix.copyRawDataFrom((function($this) {
			var $r;
			var value = starling.filters.DisplacementMapFilter.get_sMatrixData();
			var vectorData = new openfl.VectorData();
			vectorData.length = value.length;
			vectorData.fixed = true;
			{
				var vec;
				var this1;
				this1 = new Array(value.length);
				vec = this1;
				var _g1 = 0;
				var _g2 = value.length;
				while(_g1 < _g2) {
					var i1 = _g1++;
					vec[i1] = value[i1];
				}
				vectorData.data = vec;
			}
			$r = vectorData;
			return $r;
		}(this)));
		var mapX = this.mMapPoint.x / this.get_mapTexture().get_width();
		var mapY = this.mMapPoint.y / this.get_mapTexture().get_height();
		var maxU = textureWidth / (this.get_mapTexture().get_width() * scale);
		var maxV = textureHeight / (this.get_mapTexture().get_height() * scale);
		var this2 = starling.filters.DisplacementMapFilter.get_sMapTexCoords();
		if(!this2.fixed) {
			if(0 >= this2.length) this2.length = 1;
			if(this2.data.length < this2.length) {
				var data;
				var this3;
				this3 = new Array(this2.data.length + 10);
				data = this3;
				haxe.ds._Vector.Vector_Impl_.blit(this2.data,0,data,0,this2.data.length);
				this2.data = data;
			}
		}
		this2.data[0] = -mapX;
		var this4 = starling.filters.DisplacementMapFilter.get_sMapTexCoords();
		if(!this4.fixed) {
			if(1 >= this4.length) this4.length = 2;
			if(this4.data.length < this4.length) {
				var data1;
				var this5;
				this5 = new Array(this4.data.length + 10);
				data1 = this5;
				haxe.ds._Vector.Vector_Impl_.blit(this4.data,0,data1,0,this4.data.length);
				this4.data = data1;
			}
		}
		this4.data[1] = -mapY;
		var this6 = starling.filters.DisplacementMapFilter.get_sMapTexCoords();
		if(!this6.fixed) {
			if(2 >= this6.length) this6.length = 3;
			if(this6.data.length < this6.length) {
				var data2;
				var this7;
				this7 = new Array(this6.data.length + 10);
				data2 = this7;
				haxe.ds._Vector.Vector_Impl_.blit(this6.data,0,data2,0,this6.data.length);
				this6.data = data2;
			}
		}
		this6.data[2] = -mapX + maxU;
		var this8 = starling.filters.DisplacementMapFilter.get_sMapTexCoords();
		if(!this8.fixed) {
			if(3 >= this8.length) this8.length = 4;
			if(this8.data.length < this8.length) {
				var data3;
				var this9;
				this9 = new Array(this8.data.length + 10);
				data3 = this9;
				haxe.ds._Vector.Vector_Impl_.blit(this8.data,0,data3,0,this8.data.length);
				this8.data = data3;
			}
		}
		this8.data[3] = -mapY;
		var this10 = starling.filters.DisplacementMapFilter.get_sMapTexCoords();
		if(!this10.fixed) {
			if(4 >= this10.length) this10.length = 5;
			if(this10.data.length < this10.length) {
				var data4;
				var this11;
				this11 = new Array(this10.data.length + 10);
				data4 = this11;
				haxe.ds._Vector.Vector_Impl_.blit(this10.data,0,data4,0,this10.data.length);
				this10.data = data4;
			}
		}
		this10.data[4] = -mapX;
		var this12 = starling.filters.DisplacementMapFilter.get_sMapTexCoords();
		if(!this12.fixed) {
			if(5 >= this12.length) this12.length = 6;
			if(this12.data.length < this12.length) {
				var data5;
				var this13;
				this13 = new Array(this12.data.length + 10);
				data5 = this13;
				haxe.ds._Vector.Vector_Impl_.blit(this12.data,0,data5,0,this12.data.length);
				this12.data = data5;
			}
		}
		this12.data[5] = -mapY + maxV;
		var this14 = starling.filters.DisplacementMapFilter.get_sMapTexCoords();
		if(!this14.fixed) {
			if(6 >= this14.length) this14.length = 7;
			if(this14.data.length < this14.length) {
				var data6;
				var this15;
				this15 = new Array(this14.data.length + 10);
				data6 = this15;
				haxe.ds._Vector.Vector_Impl_.blit(this14.data,0,data6,0,this14.data.length);
				this14.data = data6;
			}
		}
		this14.data[6] = -mapX + maxU;
		var this16 = starling.filters.DisplacementMapFilter.get_sMapTexCoords();
		if(!this16.fixed) {
			if(7 >= this16.length) this16.length = 8;
			if(this16.data.length < this16.length) {
				var data7;
				var this17;
				this17 = new Array(this16.data.length + 10);
				data7 = this17;
				haxe.ds._Vector.Vector_Impl_.blit(this16.data,0,data7,0,this16.data.length);
				this16.data = data7;
			}
		}
		this16.data[7] = -mapY + maxV;
		this.mMapTexture.adjustTexCoords((function($this) {
			var $r;
			var this18 = starling.filters.DisplacementMapFilter.get_sMapTexCoords();
			var value1 = new Array();
			{
				var _g11 = 0;
				var _g3 = this18.data.length;
				while(_g11 < _g3) {
					var i2 = _g11++;
					value1.push(this18.data[i2]);
				}
			}
			$r = value1;
			return $r;
		}(this)));
		this.mMapTexCoordBuffer.uploadFromVector(starling.filters.DisplacementMapFilter.get_sMapTexCoords(),0,4);
	}
	,get_componentX: function() {
		return this.mComponentX;
	}
	,set_componentX: function(value) {
		this.mComponentX = value;
		return value;
	}
	,get_componentY: function() {
		return this.mComponentY;
	}
	,set_componentY: function(value) {
		this.mComponentY = value;
		return value;
	}
	,get_scaleX: function() {
		return this.mScaleX;
	}
	,set_scaleX: function(value) {
		this.mScaleX = value;
		return value;
	}
	,get_scaleY: function() {
		return this.mScaleY;
	}
	,set_scaleY: function(value) {
		this.mScaleY = value;
		return value;
	}
	,get_mapTexture: function() {
		return this.mMapTexture;
	}
	,set_mapTexture: function(value) {
		if(this.mMapTexture != value) {
			this.mMapTexture = value;
			this.createPrograms();
		}
		return value;
	}
	,get_mapPoint: function() {
		return this.mMapPoint;
	}
	,set_mapPoint: function(value) {
		if(value != null) this.mMapPoint.setTo(value.x,value.y); else this.mMapPoint.setTo(0,0);
		return value;
	}
	,get_repeat: function() {
		return this.mRepeat;
	}
	,set_repeat: function(value) {
		if(this.mRepeat != value) {
			this.mRepeat = value;
			this.createPrograms();
		}
		return value;
	}
	,__class__: starling.filters.DisplacementMapFilter
	,__properties__: $extend(starling.filters.FragmentFilter.prototype.__properties__,{set_repeat:"set_repeat",get_repeat:"get_repeat",set_mapPoint:"set_mapPoint",get_mapPoint:"get_mapPoint",set_mapTexture:"set_mapTexture",get_mapTexture:"get_mapTexture",set_scaleY:"set_scaleY",get_scaleY:"get_scaleY",set_scaleX:"set_scaleX",get_scaleX:"get_scaleX",set_componentY:"set_componentY",get_componentY:"get_componentY",set_componentX:"set_componentX",get_componentX:"get_componentX"})
});
starling.filters.FragmentFilterMode = function() {
	throw new starling.errors.AbstractClassError();
};
$hxClasses["starling.filters.FragmentFilterMode"] = starling.filters.FragmentFilterMode;
starling.filters.FragmentFilterMode.__name__ = ["starling","filters","FragmentFilterMode"];
starling.filters.FragmentFilterMode.prototype = {
	__class__: starling.filters.FragmentFilterMode
};
starling.geom = {};
starling.geom.Polygon = function(vertices) {
	var this1;
	this1 = new openfl.VectorData();
	var this2;
	this2 = new Array(0);
	this1.data = this2;
	this1.length = 0;
	this1.fixed = false;
	this.mCoords = this1;
	this.addVertices(vertices);
};
$hxClasses["starling.geom.Polygon"] = starling.geom.Polygon;
starling.geom.Polygon.__name__ = ["starling","geom","Polygon"];
starling.geom.Polygon.createEllipse = function(x,y,radiusX,radiusY) {
	return new starling.geom.Ellipse(x,y,radiusX,radiusY);
};
starling.geom.Polygon.createCircle = function(x,y,radius) {
	return new starling.geom.Ellipse(x,y,radius,radius);
};
starling.geom.Polygon.createRectangle = function(x,y,width,height) {
	return new starling.geom.Rectangle(x,y,width,height);
};
starling.geom.Polygon.isConvexTriangle = function(ax,ay,bx,by,cx,cy) {
	return (ay - by) * (cx - bx) + (bx - ax) * (cy - by) >= 0;
};
starling.geom.Polygon.isPointInTriangle = function(px,py,ax,ay,bx,by,cx,cy) {
	var v0x = cx - ax;
	var v0y = cy - ay;
	var v1x = bx - ax;
	var v1y = by - ay;
	var v2x = px - ax;
	var v2y = py - ay;
	var dot00 = v0x * v0x + v0y * v0y;
	var dot01 = v0x * v1x + v0y * v1y;
	var dot02 = v0x * v2x + v0y * v2y;
	var dot11 = v1x * v1x + v1y * v1y;
	var dot12 = v1x * v2x + v1y * v2y;
	var invDen = 1.0 / (dot00 * dot11 - dot01 * dot01);
	var u = (dot11 * dot02 - dot01 * dot12) * invDen;
	var v = (dot00 * dot12 - dot01 * dot02) * invDen;
	return u >= 0 && v >= 0 && u + v < 1;
};
starling.geom.Polygon.areVectorsIntersecting = function(ax,ay,bx,by,cx,cy,dx,dy) {
	if(ax == bx && ay == by || cx == dx && cy == dy) return false;
	var abx = bx - ax;
	var aby = by - ay;
	var cdx = dx - cx;
	var cdy = dy - cy;
	var tDen = cdy * abx - cdx * aby;
	if(tDen == 0.0) return false;
	var t = (aby * (cx - ax) - abx * (cy - ay)) / tDen;
	if(t < 0 || t > 1) return false;
	var s;
	if(aby > 0) s = (cy - ay + t * cdy) / aby; else s = (cx - ax + t * cdx) / abx;
	return s >= 0.0 && s <= 1.0;
};
starling.geom.Polygon.prototype = {
	mCoords: null
	,isSimple: null
	,isConvex: null
	,area: null
	,clone: function() {
		var clone = new starling.geom.Polygon();
		var numCoords = this.mCoords.length;
		var _g = 0;
		while(_g < numCoords) {
			var i = _g++;
			var this1 = clone.mCoords;
			if(!this1.fixed) {
				if(i >= this1.length) this1.length = i + 1;
				if(this1.data.length < this1.length) {
					var data;
					var this2;
					this2 = new Array(this1.data.length + 10);
					data = this2;
					haxe.ds._Vector.Vector_Impl_.blit(this1.data,0,data,0,this1.data.length);
					this1.data = data;
				}
			}
			this1.data[i] = this.mCoords.data[i];
		}
		return clone;
	}
	,reverse: function() {
		var numCoords = this.mCoords.length;
		var numVertices = numCoords / 2;
		var tmp;
		var i = 0;
		while(i < numVertices) {
			tmp = this.mCoords.data[i];
			var this1 = this.mCoords;
			if(!this1.fixed) {
				if(i >= this1.length) this1.length = i + 1;
				if(this1.data.length < this1.length) {
					var data;
					var this2;
					this2 = new Array(this1.data.length + 10);
					data = this2;
					haxe.ds._Vector.Vector_Impl_.blit(this1.data,0,data,0,this1.data.length);
					this1.data = data;
				}
			}
			this1.data[i] = this.mCoords.data[numCoords - i - 2];
			var this3 = this.mCoords;
			var key = numCoords - i - 2;
			if(!this3.fixed) {
				if(key >= this3.length) this3.length = key + 1;
				if(this3.data.length < this3.length) {
					var data1;
					var this4;
					this4 = new Array(this3.data.length + 10);
					data1 = this4;
					haxe.ds._Vector.Vector_Impl_.blit(this3.data,0,data1,0,this3.data.length);
					this3.data = data1;
				}
			}
			this3.data[key] = tmp;
			tmp = this.mCoords.data[i + 1];
			var this5 = this.mCoords;
			var key1 = i + 1;
			if(!this5.fixed) {
				if(key1 >= this5.length) this5.length = key1 + 1;
				if(this5.data.length < this5.length) {
					var data2;
					var this6;
					this6 = new Array(this5.data.length + 10);
					data2 = this6;
					haxe.ds._Vector.Vector_Impl_.blit(this5.data,0,data2,0,this5.data.length);
					this5.data = data2;
				}
			}
			this5.data[key1] = this.mCoords.data[numCoords - i - 1];
			var this7 = this.mCoords;
			var key2 = numCoords - i - 1;
			if(!this7.fixed) {
				if(key2 >= this7.length) this7.length = key2 + 1;
				if(this7.data.length < this7.length) {
					var data3;
					var this8;
					this8 = new Array(this7.data.length + 10);
					data3 = this8;
					haxe.ds._Vector.Vector_Impl_.blit(this7.data,0,data3,0,this7.data.length);
					this7.data = data3;
				}
			}
			this7.data[key2] = tmp;
			i += 2;
		}
	}
	,addVertices: function(args) {
		var i;
		var numArgs = args.length;
		var numCoords = this.mCoords.length;
		if(numArgs > 0) {
			if(js.Boot.__instanceof(args[0],openfl.geom.Point)) {
				var _g = 0;
				while(_g < numArgs) {
					var i1 = _g++;
					var this1 = this.mCoords;
					var key = numCoords + i1 * 2;
					if(!this1.fixed) {
						if(key >= this1.length) this1.length = key + 1;
						if(this1.data.length < this1.length) {
							var data;
							var this2;
							this2 = new Array(this1.data.length + 10);
							data = this2;
							haxe.ds._Vector.Vector_Impl_.blit(this1.data,0,data,0,this1.data.length);
							this1.data = data;
						}
					}
					this1.data[key] = (js.Boot.__cast(args[i1] , openfl.geom.Point)).x;
					var this3 = this.mCoords;
					var key1 = numCoords + i1 * 2 + 1;
					if(!this3.fixed) {
						if(key1 >= this3.length) this3.length = key1 + 1;
						if(this3.data.length < this3.length) {
							var data1;
							var this4;
							this4 = new Array(this3.data.length + 10);
							data1 = this4;
							haxe.ds._Vector.Vector_Impl_.blit(this3.data,0,data1,0,this3.data.length);
							this3.data = data1;
						}
					}
					this3.data[key1] = (js.Boot.__cast(args[i1] , openfl.geom.Point)).y;
				}
			} else if(typeof(args[0]) == "number") {
				var _g1 = 0;
				while(_g1 < numArgs) {
					var i2 = _g1++;
					var this5 = this.mCoords;
					var key2 = numCoords + i2;
					if(!this5.fixed) {
						if(key2 >= this5.length) this5.length = key2 + 1;
						if(this5.data.length < this5.length) {
							var data2;
							var this6;
							this6 = new Array(this5.data.length + 10);
							data2 = this6;
							haxe.ds._Vector.Vector_Impl_.blit(this5.data,0,data2,0,this5.data.length);
							this5.data = data2;
						}
					}
					this5.data[key2] = args[i2];
				}
			} else throw new openfl.errors.ArgumentError("Invalid type: " + Type.getClassName(args[0]));
		}
	}
	,setVertex: function(index,x,y) {
		if(index >= 0 && index <= this.get_numVertices()) {
			var this1 = this.mCoords;
			var key = index * 2;
			if(!this1.fixed) {
				if(key >= this1.length) this1.length = key + 1;
				if(this1.data.length < this1.length) {
					var data;
					var this2;
					this2 = new Array(this1.data.length + 10);
					data = this2;
					haxe.ds._Vector.Vector_Impl_.blit(this1.data,0,data,0,this1.data.length);
					this1.data = data;
				}
			}
			this1.data[key] = x;
			var this3 = this.mCoords;
			var key1 = index * 2 + 1;
			if(!this3.fixed) {
				if(key1 >= this3.length) this3.length = key1 + 1;
				if(this3.data.length < this3.length) {
					var data1;
					var this4;
					this4 = new Array(this3.data.length + 10);
					data1 = this4;
					haxe.ds._Vector.Vector_Impl_.blit(this3.data,0,data1,0,this3.data.length);
					this3.data = data1;
				}
			}
			this3.data[key1] = y;
		} else throw new openfl.errors.RangeError("Invalid index: " + index);
	}
	,getVertex: function(index,result) {
		if(index >= 0 && index < this.get_numVertices()) {
			if(result == null) result = new openfl.geom.Point();
			result.x = this.mCoords.data[index * 2];
			result.y = this.mCoords.data[index * 2 + 1];
			return result;
		} else throw new openfl.errors.RangeError("Invalid index: " + index);
	}
	,contains: function(x,y) {
		var i;
		var j = this.get_numVertices() - 1;
		var oddNodes = 0;
		var _g1 = 0;
		var _g = this.get_numVertices();
		while(_g1 < _g) {
			var i1 = _g1++;
			var ix = this.mCoords.data[i1 * 2];
			var iy = this.mCoords.data[i1 * 2 + 1];
			var jx = this.mCoords.data[j * 2];
			var jy = this.mCoords.data[j * 2 + 1];
			if((iy < y && jy >= y || jy < y && iy >= y) && (ix <= x || jx <= x)) oddNodes = oddNodes ^ ix + (y - iy) / (jy - iy) * (jx - ix) < x;
			j = i1;
		}
		return (function($this) {
			var $r;
			var $int = oddNodes;
			$r = $int < 0?4294967296.0 + $int:$int + 0.0;
			return $r;
		}(this)) != 0;
	}
	,containsPoint: function(point) {
		return this.contains(point.x,point.y);
	}
	,triangulate: function(result) {
		if(result == null) result = new Array();
		var numVertices = this.get_numVertices();
		var i;
		var restIndexPos;
		var numRestIndices;
		if(numVertices < 3) return result;
		var restIndices;
		var this1;
		this1 = new openfl.VectorData();
		var this2;
		this2 = new Array(numVertices);
		this1.data = this2;
		this1.length = numVertices;
		this1.fixed = false;
		restIndices = this1;
		var _g = 0;
		while(_g < numVertices) {
			var i1 = _g++;
			if(!restIndices.fixed) {
				if(i1 >= restIndices.length) restIndices.length = i1 + 1;
				if(restIndices.data.length < restIndices.length) {
					var data;
					var this3;
					this3 = new Array(restIndices.data.length + 10);
					data = this3;
					haxe.ds._Vector.Vector_Impl_.blit(restIndices.data,0,data,0,restIndices.data.length);
					restIndices.data = data;
				}
			}
			restIndices.data[i1] = i1;
		}
		restIndexPos = 0;
		numRestIndices = numVertices;
		while(numRestIndices > 3) {
			var i0 = restIndices.data[restIndexPos % numRestIndices];
			var i11 = restIndices.data[(restIndexPos + 1) % numRestIndices];
			var i2 = restIndices.data[(restIndexPos + 2) % numRestIndices];
			var ax = this.mCoords.data[2 * i0];
			var ay = this.mCoords.data[2 * i0 + 1];
			var bx = this.mCoords.data[2 * i11];
			var by = this.mCoords.data[2 * i11 + 1];
			var cx = this.mCoords.data[2 * i2];
			var cy = this.mCoords.data[2 * i2 + 1];
			var earFound = false;
			if(starling.geom.Polygon.isConvexTriangle(ax,ay,bx,by,cx,cy)) {
				earFound = true;
				var _g1 = 3;
				while(_g1 < numRestIndices) {
					var i3 = _g1++;
					var otherIndex = restIndices.data[(restIndexPos + i3) % numRestIndices];
					if(starling.geom.Polygon.isPointInTriangle(this.mCoords.data[2 * otherIndex],this.mCoords.data[2 * otherIndex + 1],ax,ay,bx,by,cx,cy)) {
						earFound = false;
						break;
					}
				}
			}
			if(earFound) {
				result.push(i0);
				result.push(i11);
				result.push(i2);
				var pos = (restIndexPos + 1) % numRestIndices;
				var len = 1;
				if(pos < 0) pos += restIndices.length;
				if(pos + len > restIndices.length) len = restIndices.length - pos;
				if(len < 0) len = 0;
				var vectorData = new openfl.VectorData();
				vectorData.length = len;
				vectorData.fixed = false;
				var this4;
				this4 = new Array(len);
				vectorData.data = this4;
				haxe.ds._Vector.Vector_Impl_.blit(restIndices.data,pos,vectorData.data,0,len);
				if(len > 0) {
					restIndices.length -= len;
					haxe.ds._Vector.Vector_Impl_.blit(restIndices.data,pos + len,restIndices.data,pos,restIndices.length - pos);
				}
				vectorData;
				numRestIndices--;
				restIndexPos = 0;
			} else {
				restIndexPos++;
				if(restIndexPos == numRestIndices) break;
			}
		}
		result.push(restIndices.data[0]);
		result.push(restIndices.data[1]);
		result.push(restIndices.data[2]);
		return result;
	}
	,copyToVertexData: function(target,targetIndex) {
		if(targetIndex == null) targetIndex = 0;
		var requiredTargetLength = targetIndex + this.get_numVertices();
		if(target.get_numVertices() < requiredTargetLength) target.set_numVertices(requiredTargetLength);
		this.copyToVector((function($this) {
			var $r;
			var this1 = target.get_rawData();
			var value = new Array();
			{
				var _g1 = 0;
				var _g = this1.data.length;
				while(_g1 < _g) {
					var i = _g1++;
					value.push(this1.data[i]);
				}
			}
			$r = value;
			return $r;
		}(this)),targetIndex * starling.utils.VertexData.ELEMENTS_PER_VERTEX,starling.utils.VertexData.ELEMENTS_PER_VERTEX - 2);
	}
	,copyToVector: function(target,targetIndex,stride) {
		if(stride == null) stride = 0;
		if(targetIndex == null) targetIndex = 0;
		var numVertices = this.get_numVertices();
		var _g = 0;
		while(_g < numVertices) {
			var i = _g++;
			target[targetIndex++] = this.mCoords.data[i * 2];
			target[targetIndex++] = this.mCoords.data[i * 2 + 1];
			targetIndex += stride;
		}
	}
	,toString: function() {
		var result = "[Polygon \n";
		var numPoints = this.get_numVertices();
		var _g = 0;
		while(_g < numPoints) {
			var i = _g++;
			result += "  [Vertex " + i + ": " + "x=" + js.Boot.__cast(Math.floor(this.mCoords.data[i * 2] * 10) / 10 , Int) + ", " + "y=" + js.Boot.__cast(Math.floor(this.mCoords.data[i * 2 + 1] * 10) / 10 , Int) + "]" + (i == numPoints - 1?"\n":",\n");
		}
		return result + "]";
	}
	,get_isSimple: function() {
		var numCoords = this.mCoords.length / 2;
		if(numCoords <= 6) return true;
		var _g = 0;
		while(_g < numCoords) {
			var x = _g++;
			var i = x * 2;
			var ax = this.mCoords.data[i];
			var ay = this.mCoords.data[i + 1];
			var bx = this.mCoords.data[(i + 2) % numCoords];
			var by = this.mCoords.data[(i + 3) % numCoords];
			var endJ = (i + numCoords - 2) / 2;
			var _g1 = i + 4;
			while(_g1 < endJ) {
				var c = _g1++;
				var j = c * 2;
				var cx = this.mCoords.data[j % numCoords];
				var cy = this.mCoords.data[(j + 1) % numCoords];
				var dx = this.mCoords.data[(j + 2) % numCoords];
				var dy = this.mCoords.data[(j + 3) % numCoords];
				if(starling.geom.Polygon.areVectorsIntersecting(ax,ay,bx,by,cx,cy,dx,dy)) return false;
			}
		}
		return true;
	}
	,get_isConvex: function() {
		var numCoords = this.mCoords.length / 2;
		if(numCoords < 6) return true; else {
			var _g = 0;
			while(_g < numCoords) {
				var x = _g++;
				var i = x * 2;
				if(!starling.geom.Polygon.isConvexTriangle(this.mCoords.data[i],this.mCoords.data[i + 1],this.mCoords.data[(i + 2) % numCoords],this.mCoords.data[(i + 3) % numCoords],this.mCoords.data[(i + 4) % numCoords],this.mCoords.data[(i + 5) % numCoords])) return false;
			}
		}
		return true;
	}
	,get_area: function() {
		var area = 0;
		var numCoords = this.mCoords.length / 2;
		if(numCoords >= 6) {
			var _g = 0;
			while(_g < numCoords) {
				var x = _g++;
				var i = x * 2;
				area += this.mCoords.data[i] * this.mCoords.data[(i + 3) % numCoords];
				area -= this.mCoords.data[i + 1] * this.mCoords.data[(i + 2) % numCoords];
			}
		}
		return area / 2.0;
	}
	,get_numVertices: function() {
		return this.mCoords.length / 2;
	}
	,set_numVertices: function(value) {
		var oldLength = this.get_numVertices();
		var this1 = this.mCoords;
		var value1 = value * 2;
		if(!this1.fixed) {
			if(value1 > this1.length) {
				var data;
				var this2;
				this2 = new Array(value1);
				data = this2;
				haxe.ds._Vector.Vector_Impl_.blit(this1.data,0,data,0,Std["int"](Math.min(this1.data.length,value1)));
				this1.data = data;
			}
			this1.length = value1;
		}
		value1;
		if(oldLength < value) {
			var _g = oldLength;
			while(_g < value) {
				var i = _g++;
				var this3 = this.mCoords;
				var key = i * 2;
				var value2;
				var this4 = this.mCoords;
				var key1 = i * 2 + 1;
				if(!this4.fixed) {
					if(key1 >= this4.length) this4.length = key1 + 1;
					if(this4.data.length < this4.length) {
						var data1;
						var this5;
						this5 = new Array(this4.data.length + 10);
						data1 = this5;
						haxe.ds._Vector.Vector_Impl_.blit(this4.data,0,data1,0,this4.data.length);
						this4.data = data1;
					}
				}
				value2 = this4.data[key1] = 0.0;
				if(!this3.fixed) {
					if(key >= this3.length) this3.length = key + 1;
					if(this3.data.length < this3.length) {
						var data2;
						var this6;
						this6 = new Array(this3.data.length + 10);
						data2 = this6;
						haxe.ds._Vector.Vector_Impl_.blit(this3.data,0,data2,0,this3.data.length);
						this3.data = data2;
					}
				}
				this3.data[key] = value2;
			}
		}
		return value;
	}
	,__class__: starling.geom.Polygon
	,__properties__: {set_numVertices:"set_numVertices",get_numVertices:"get_numVertices",get_area:"get_area",get_isConvex:"get_isConvex",get_isSimple:"get_isSimple"}
};
starling.geom.ImmutablePolygon = function(vertices) {
	starling.geom.Polygon.call(this,vertices);
	this.mFrozen = true;
};
$hxClasses["starling.geom.ImmutablePolygon"] = starling.geom.ImmutablePolygon;
starling.geom.ImmutablePolygon.__name__ = ["starling","geom","ImmutablePolygon"];
starling.geom.ImmutablePolygon.__super__ = starling.geom.Polygon;
starling.geom.ImmutablePolygon.prototype = $extend(starling.geom.Polygon.prototype,{
	mFrozen: null
	,addVertices: function(args) {
		if(this.mFrozen) throw this.getImmutableError(); else starling.geom.Polygon.prototype.addVertices.call(this,args);
	}
	,setVertex: function(index,x,y) {
		if(this.mFrozen) throw this.getImmutableError(); else starling.geom.Polygon.prototype.setVertex.call(this,index,x,y);
	}
	,reverse: function() {
		if(this.mFrozen) throw this.getImmutableError(); else starling.geom.Polygon.prototype.reverse.call(this);
	}
	,set_numVertices: function(value) {
		if(this.mFrozen) throw this.getImmutableError(); else starling.geom.Polygon.prototype.reverse.call(this);
		return value;
	}
	,getImmutableError: function() {
		var className = Type.getClassName(Type.getClass(this));
		var msg = className + " cannot be modified. Call 'clone' to create a mutable copy.";
		return new openfl.errors.IllegalOperationError(msg);
	}
	,__class__: starling.geom.ImmutablePolygon
});
starling.geom.Ellipse = function(x,y,radiusX,radiusY,numSides) {
	if(numSides == null) numSides = -1;
	this.mX = x;
	this.mY = y;
	this.mRadiusX = radiusX;
	this.mRadiusY = radiusY;
	starling.geom.ImmutablePolygon.call(this,this.getVertices(numSides));
};
$hxClasses["starling.geom.Ellipse"] = starling.geom.Ellipse;
starling.geom.Ellipse.__name__ = ["starling","geom","Ellipse"];
starling.geom.Ellipse.__super__ = starling.geom.ImmutablePolygon;
starling.geom.Ellipse.prototype = $extend(starling.geom.ImmutablePolygon.prototype,{
	mX: null
	,mY: null
	,mRadiusX: null
	,mRadiusY: null
	,getVertices: function(numSides) {
		if(numSides < 0) numSides = Math.PI * (this.mRadiusX + this.mRadiusY) / 4.0;
		if(numSides < 6) numSides = 6;
		var vertices = new Array();
		var angleDelta = 2 * Math.PI / numSides;
		var angle = 0;
		var _g = 0;
		while(_g < numSides) {
			var i = _g++;
			vertices[i * 2] = Math.cos(angle) * this.mRadiusX + this.mX;
			vertices[i * 2 + 1] = Math.sin(angle) * this.mRadiusY + this.mY;
			angle += angleDelta;
		}
		return vertices;
	}
	,triangulate: function(result) {
		if(result == null) result = new Array();
		var from = 1;
		var to = this.get_numVertices() - 1;
		var _g = from;
		while(_g < to) {
			var i = _g++;
			result.push(0);
			result.push(i);
			result.push(i + 1);
		}
		return result;
	}
	,contains: function(x,y) {
		var vx = x - this.mX;
		var vy = y - this.mY;
		var a = vx / this.mRadiusX;
		var b = vy / this.mRadiusY;
		return a * a + b * b <= 1;
	}
	,get_area: function() {
		return Math.PI * this.mRadiusX * this.mRadiusY;
	}
	,get_isSimple: function() {
		return true;
	}
	,get_isConvex: function() {
		return true;
	}
	,__class__: starling.geom.Ellipse
});
starling.geom.Rectangle = function(x,y,width,height) {
	this.mX = x;
	this.mY = y;
	this.mWidth = width;
	this.mHeight = height;
	starling.geom.ImmutablePolygon.call(this,[x,y,x + width,y,x + width,y + height,x,y + height]);
};
$hxClasses["starling.geom.Rectangle"] = starling.geom.Rectangle;
starling.geom.Rectangle.__name__ = ["starling","geom","Rectangle"];
starling.geom.Rectangle.__super__ = starling.geom.ImmutablePolygon;
starling.geom.Rectangle.prototype = $extend(starling.geom.ImmutablePolygon.prototype,{
	mX: null
	,mY: null
	,mWidth: null
	,mHeight: null
	,triangulate: function(result) {
		if(result == null) result = new Array();
		result.push(0);
		result.push(1);
		result.push(3);
		result.push(1);
		result.push(2);
		result.push(3);
		return result;
	}
	,contains: function(x,y) {
		return x >= this.mX && x <= this.mX + this.mWidth && y >= this.mY && y <= this.mY + this.mHeight;
	}
	,get_area: function() {
		return this.mWidth * this.mHeight;
	}
	,get_isSimple: function() {
		return true;
	}
	,get_isConvex: function() {
		return true;
	}
	,__class__: starling.geom.Rectangle
});
starling.text = {};
starling.text.BitmapChar = function(id,texture,xOffset,yOffset,xAdvance) {
	this.mCharID = id;
	this.mTexture = texture;
	this.mXOffset = xOffset;
	this.mYOffset = yOffset;
	this.mXAdvance = xAdvance;
	this.mKernings = null;
};
$hxClasses["starling.text.BitmapChar"] = starling.text.BitmapChar;
starling.text.BitmapChar.__name__ = ["starling","text","BitmapChar"];
starling.text.BitmapChar.prototype = {
	mTexture: null
	,mCharID: null
	,mXOffset: null
	,mYOffset: null
	,mXAdvance: null
	,mKernings: null
	,charID: null
	,xOffset: null
	,yOffset: null
	,xAdvance: null
	,texture: null
	,width: null
	,height: null
	,addKerning: function(charID,amount) {
		if(this.mKernings == null) this.mKernings = new haxe.ds.IntMap();
		this.mKernings.set(charID,amount);
		amount;
	}
	,getKerning: function(charID) {
		if(this.mKernings == null || this.mKernings.get(charID) == null) return 0.0; else return this.mKernings.get(charID);
	}
	,createImage: function() {
		return new starling.display.Image(this.mTexture);
	}
	,get_charID: function() {
		return this.mCharID;
	}
	,get_xOffset: function() {
		return this.mXOffset;
	}
	,get_yOffset: function() {
		return this.mYOffset;
	}
	,get_xAdvance: function() {
		return this.mXAdvance;
	}
	,get_texture: function() {
		return this.mTexture;
	}
	,get_width: function() {
		return this.mTexture.get_width();
	}
	,get_height: function() {
		return this.mTexture.get_height();
	}
	,__class__: starling.text.BitmapChar
	,__properties__: {get_height:"get_height",get_width:"get_width",get_texture:"get_texture",get_xAdvance:"get_xAdvance",get_yOffset:"get_yOffset",get_xOffset:"get_xOffset",get_charID:"get_charID"}
};
starling.text.BitmapFont = function(texture,fontXml) {
	if(texture == null && fontXml == null) {
		texture = starling.text.MiniBitmapFont.get_texture();
		fontXml = starling.text.MiniBitmapFont.get_xml();
	} else if(texture != null && fontXml == null) throw new openfl.errors.ArgumentError("fontXml cannot be null!");
	this.mName = "unknown";
	this.mLineHeight = this.mSize = this.mBaseline = 14;
	this.mOffsetX = this.mOffsetY = 0.0;
	this.mTexture = texture;
	this.mChars = new haxe.ds.IntMap();
	this.mHelperImage = new starling.display.Image(texture);
	this.parseFontXml(fontXml);
};
$hxClasses["starling.text.BitmapFont"] = starling.text.BitmapFont;
starling.text.BitmapFont.__name__ = ["starling","text","BitmapFont"];
starling.text.BitmapFont.prototype = {
	mTexture: null
	,mChars: null
	,mName: null
	,mSize: null
	,mLineHeight: null
	,mBaseline: null
	,mOffsetX: null
	,mOffsetY: null
	,mHelperImage: null
	,name: null
	,size: null
	,texture: null
	,dispose: function() {
		if(this.mTexture != null) this.mTexture.dispose();
	}
	,parseFontXml: function(fontXml) {
		var scale = this.mTexture.get_scale();
		var frame = this.mTexture.get_frame();
		var frameX;
		if(frame != null) frameX = frame.x; else frameX = 0;
		var frameY;
		if(frame != null) frameY = frame.y; else frameY = 0;
		var $it0 = fontXml.elementsNamed("font");
		while( $it0.hasNext() ) {
			var font = $it0.next();
			if(font.nodeType == Xml.Element) {
				var $it1 = font.elementsNamed("info");
				while( $it1.hasNext() ) {
					var info = $it1.next();
					if(info.nodeType == Xml.Element) {
						this.mName = info.get("face");
						this.mSize = Std.parseFloat(info.get("size")) / scale;
						if(info.get("smooth") == "0") this.set_smoothing(starling.textures.TextureSmoothing.NONE);
						if(this.mSize <= 0) {
							haxe.Log.trace("[Starling] Warning: invalid font size in '" + this.mName + "' font.",{ fileName : "BitmapFont.hx", lineNumber : 142, className : "starling.text.BitmapFont", methodName : "parseFontXml"});
							if(this.mSize == 0.0) this.mSize = 16.0; else this.mSize = this.mSize * -1.0;
						}
					}
				}
				var $it2 = font.elementsNamed("common");
				while( $it2.hasNext() ) {
					var common = $it2.next();
					if(common.nodeType == Xml.Element) {
						this.mLineHeight = Std.parseFloat(common.get("mLineHeight")) / scale;
						this.mBaseline = Std.parseFloat(common.get("mBaseline")) / scale;
					}
				}
				var $it3 = font.elementsNamed("chars");
				while( $it3.hasNext() ) {
					var chars = $it3.next();
					if(chars.nodeType == Xml.Element) {
						var $it4 = chars.elementsNamed("char");
						while( $it4.hasNext() ) {
							var $char = $it4.next();
							if($char.nodeType == Xml.Element) {
								var id = Std.parseInt($char.get("id"));
								var xOffset = Std.parseFloat($char.get("xoffset")) / scale;
								var yOffset = Std.parseFloat($char.get("yoffset")) / scale;
								var xAdvance = Std.parseFloat($char.get("xadvance")) / scale;
								var region = new openfl.geom.Rectangle();
								region.x = Std.parseFloat($char.get("x")) / scale + frameX;
								region.y = Std.parseFloat($char.get("y")) / scale + frameY;
								region.width = Std.parseFloat($char.get("width")) / scale;
								region.height = Std.parseFloat($char.get("height")) / scale;
								var texture = starling.textures.Texture.fromTexture(this.mTexture,region);
								var bitmapChar = new starling.text.BitmapChar(id,texture,xOffset,yOffset,xAdvance);
								this.addChar(id,bitmapChar);
							}
						}
					}
				}
				var $it5 = font.elementsNamed("kernings");
				while( $it5.hasNext() ) {
					var kernings = $it5.next();
					if(kernings.nodeType == Xml.Element) {
						var $it6 = kernings.elementsNamed("kerning");
						while( $it6.hasNext() ) {
							var kerning = $it6.next();
							if(kerning.nodeType == Xml.Element) {
								var first = Std.parseInt(kerning.get("first"));
								var second = Std.parseInt(kerning.get("second"));
								var amount = Std.parseFloat(kerning.get("amount")) / scale;
								if(this.mChars.exists(second)) this.getChar(second).addKerning(first,amount);
							}
						}
					}
				}
			}
		}
	}
	,getChar: function(charID) {
		return this.mChars.get(charID);
	}
	,addChar: function(charID,bitmapChar) {
		this.mChars.set(charID,bitmapChar);
		bitmapChar;
	}
	,getCharIDs: function(result) {
		if(result == null) result = new Array();
		var $it0 = this.mChars.iterator();
		while( $it0.hasNext() ) {
			var key = $it0.next();
			result[result.length] = key;
		}
		return result;
	}
	,hasChars: function(text) {
		if(text == null) return true;
		var charID;
		var numChars = text.length;
		var _g = 0;
		while(_g < numChars) {
			var i = _g++;
			charID = HxOverrides.cca(text,i);
			if(charID != starling.text.BitmapFont.CHAR_SPACE && charID != starling.text.BitmapFont.CHAR_TAB && charID != starling.text.BitmapFont.CHAR_NEWLINE && charID != starling.text.BitmapFont.CHAR_CARRIAGE_RETURN && this.getChar(charID) == null) return false;
		}
		return true;
	}
	,createSprite: function(width,height,text,fontSize,color,hAlign,vAlign,autoScale,kerning) {
		if(kerning == null) kerning = true;
		if(autoScale == null) autoScale = true;
		if(color == null) color = 16777215;
		if(fontSize == null) fontSize = -1;
		if(hAlign == null) hAlign = starling.utils.HAlign.CENTER;
		if(vAlign == null) vAlign = starling.utils.VAlign.CENTER;
		var charLocations = this.arrangeChars(width,height,text,fontSize,hAlign,vAlign,autoScale,kerning);
		var numChars = charLocations.length;
		var sprite = new starling.display.Sprite();
		var _g = 0;
		while(_g < numChars) {
			var i = _g++;
			var charLocation = charLocations[i];
			var $char = charLocation["char"].createImage();
			$char.set_x(charLocation.x);
			$char.set_y(charLocation.y);
			$char.set_scaleX($char.set_scaleY(charLocation.scale));
			$char.set_color(color);
			sprite.addChild($char);
		}
		starling.text.CharLocation.rechargePool();
		return sprite;
	}
	,fillQuadBatch: function(quadBatch,width,height,text,fontSize,color,hAlign,vAlign,autoScale,kerning) {
		if(kerning == null) kerning = true;
		if(autoScale == null) autoScale = true;
		if(color == null) color = 16777215;
		if(fontSize == null) fontSize = -1;
		if(hAlign == null) hAlign = starling.utils.HAlign.CENTER;
		if(vAlign == null) vAlign = starling.utils.VAlign.CENTER;
		var charLocations = this.arrangeChars(width,height,text,fontSize,hAlign,vAlign,autoScale,kerning);
		var numChars = charLocations.length;
		this.mHelperImage.set_color(color);
		var _g = 0;
		while(_g < numChars) {
			var i = _g++;
			var charLocation = charLocations[i];
			this.mHelperImage.set_texture(charLocation["char"].get_texture());
			this.mHelperImage.readjustSize();
			this.mHelperImage.set_x(charLocation.x);
			this.mHelperImage.set_y(charLocation.y);
			this.mHelperImage.set_scaleX(this.mHelperImage.set_scaleY(charLocation.scale));
			quadBatch.addImage(this.mHelperImage);
		}
		starling.text.CharLocation.rechargePool();
	}
	,arrangeChars: function(width,height,text,fontSize,hAlign,vAlign,autoScale,kerning) {
		if(kerning == null) kerning = true;
		if(autoScale == null) autoScale = true;
		if(fontSize == null) fontSize = -1;
		if(hAlign == null) hAlign = starling.utils.HAlign.CENTER;
		if(vAlign == null) vAlign = starling.utils.VAlign.CENTER;
		if(text == null || text.length == 0) {
			var this1 = starling.text.CharLocation.vectorFromPool();
			var value = new Array();
			var _g1 = 0;
			var _g = this1.data.length;
			while(_g1 < _g) {
				var i = _g1++;
				value.push(this1.data[i]);
			}
			return value;
		}
		if(fontSize < 0) fontSize *= -this.mSize;
		var finished = false;
		var charLocation;
		var numChars;
		var containerWidth = 0;
		var containerHeight = 0;
		var scale = 1;
		var currentX = 0;
		var currentY = 0;
		while(!finished) {
			var this2 = starling.text.BitmapFont.sLines;
			if(!this2.fixed) {
				if(0 > this2.length) {
					var data;
					var this3;
					this3 = new Array(0);
					data = this3;
					haxe.ds._Vector.Vector_Impl_.blit(this2.data,0,data,0,Std["int"](Math.min(this2.data.length,0)));
					this2.data = data;
				}
				this2.length = 0;
			}
			0;
			scale = fontSize / this.mSize;
			containerWidth = width / scale;
			containerHeight = height / scale;
			if(this.mLineHeight <= containerHeight) {
				var lastWhiteSpace = -1;
				var lastCharID = -1;
				currentX = 0;
				currentY = 0;
				var currentLine;
				var this4 = starling.text.CharLocation.vectorFromPool();
				var value1 = new Array();
				var _g11 = 0;
				var _g2 = this4.data.length;
				while(_g11 < _g2) {
					var i1 = _g11++;
					value1.push(this4.data[i1]);
				}
				currentLine = value1;
				numChars = text.length;
				var _g3 = 0;
				while(_g3 < numChars) {
					var k = _g3++;
					var i2 = numChars - 1 - k;
					var lineFull = false;
					var charID = HxOverrides.cca(text,i2);
					var $char = this.getChar(charID);
					if(charID == starling.text.BitmapFont.CHAR_NEWLINE || charID == starling.text.BitmapFont.CHAR_CARRIAGE_RETURN) lineFull = true; else if($char == null) haxe.Log.trace("[Starling] Missing character: " + charID,{ fileName : "BitmapFont.hx", lineNumber : 354, className : "starling.text.BitmapFont", methodName : "arrangeChars"}); else {
						if(charID == starling.text.BitmapFont.CHAR_SPACE || charID == starling.text.BitmapFont.CHAR_TAB) lastWhiteSpace = i2;
						if(kerning) currentX += $char.getKerning(lastCharID);
						charLocation = starling.text.CharLocation.instanceFromPool($char);
						charLocation.x = currentX + $char.get_xOffset();
						charLocation.y = currentY + $char.get_yOffset();
						currentLine[currentLine.length] = charLocation;
						currentX += $char.get_xAdvance();
						lastCharID = charID;
						if(charLocation.x + $char.get_width() > containerWidth) {
							if(autoScale && lastWhiteSpace == -1) break;
							var numCharsToRemove;
							if(lastWhiteSpace == -1) numCharsToRemove = 1; else numCharsToRemove = i2 - lastWhiteSpace;
							var removeIndex = currentLine.length - numCharsToRemove;
							currentLine.splice(removeIndex,numCharsToRemove);
							if(currentLine.length == 0) break;
							lineFull = true;
						}
					}
					if(i2 == numChars - 1) {
						var this5 = starling.text.BitmapFont.sLines;
						var key = starling.text.BitmapFont.sLines.length;
						if(!this5.fixed) {
							if(key >= this5.length) this5.length = key + 1;
							if(this5.data.length < this5.length) {
								var data1;
								var this6;
								this6 = new Array(this5.data.length + 10);
								data1 = this6;
								haxe.ds._Vector.Vector_Impl_.blit(this5.data,0,data1,0,this5.data.length);
								this5.data = data1;
							}
						}
						this5.data[key] = currentLine;
						finished = true;
					} else if(lineFull) {
						var this7 = starling.text.BitmapFont.sLines;
						var key1 = starling.text.BitmapFont.sLines.length;
						if(!this7.fixed) {
							if(key1 >= this7.length) this7.length = key1 + 1;
							if(this7.data.length < this7.length) {
								var data2;
								var this8;
								this8 = new Array(this7.data.length + 10);
								data2 = this8;
								haxe.ds._Vector.Vector_Impl_.blit(this7.data,0,data2,0,this7.data.length);
								this7.data = data2;
							}
						}
						this7.data[key1] = currentLine;
						if(lastWhiteSpace == i2) currentLine.pop();
						if(currentY + 2 * this.mLineHeight <= containerHeight) {
							var this9 = starling.text.CharLocation.vectorFromPool();
							var value2 = new Array();
							var _g12 = 0;
							var _g4 = this9.data.length;
							while(_g12 < _g4) {
								var i3 = _g12++;
								value2.push(this9.data[i3]);
							}
							currentLine = value2;
							currentX = 0;
							currentY += this.mLineHeight;
							lastWhiteSpace = -1;
							lastCharID = -1;
						} else break;
					}
				}
			}
			if(autoScale && !finished && fontSize > 3) fontSize -= 1; else finished = true;
		}
		var finalLocations;
		var this10 = starling.text.CharLocation.vectorFromPool();
		var value3 = new Array();
		var _g13 = 0;
		var _g5 = this10.data.length;
		while(_g13 < _g5) {
			var i4 = _g13++;
			value3.push(this10.data[i4]);
		}
		finalLocations = value3;
		var numLines = starling.text.BitmapFont.sLines.length;
		var bottom = currentY + this.mLineHeight;
		var yOffset = 0;
		if(vAlign == starling.utils.VAlign.BOTTOM) yOffset = containerHeight - bottom; else if(vAlign == starling.utils.VAlign.CENTER) yOffset = (containerHeight - bottom) / 2;
		var _g6 = 0;
		while(_g6 < numLines) {
			var lineID = _g6++;
			var line = starling.text.BitmapFont.sLines.data[lineID];
			numChars = line.length;
			if(numChars == 0) continue;
			var xOffset = 0;
			var lastLocation = line[line.length - 1];
			var right = lastLocation.x - lastLocation["char"].get_xOffset() + lastLocation["char"].get_xAdvance();
			if(hAlign == starling.utils.HAlign.RIGHT) xOffset = containerWidth - right; else if(hAlign == starling.utils.HAlign.CENTER) xOffset = (containerWidth - right) / 2;
			var _g14 = 0;
			while(_g14 < numChars) {
				var c = _g14++;
				charLocation = line[c];
				charLocation.x = scale * (charLocation.x + xOffset + this.mOffsetX);
				charLocation.y = scale * (charLocation.y + yOffset + this.mOffsetY);
				charLocation.scale = scale;
				if(charLocation["char"].get_width() > 0 && charLocation["char"].get_height() > 0) finalLocations[finalLocations.length] = charLocation;
			}
		}
		return finalLocations;
	}
	,get_name: function() {
		return this.mName;
	}
	,get_size: function() {
		return this.mSize;
	}
	,get_lineHeight: function() {
		return this.mLineHeight;
	}
	,set_lineHeight: function(value) {
		this.mLineHeight = value;
		return value;
	}
	,get_smoothing: function() {
		return this.mHelperImage.get_smoothing();
	}
	,set_smoothing: function(value) {
		this.mHelperImage.set_smoothing(value);
		return value;
	}
	,get_baseline: function() {
		return this.mBaseline;
	}
	,set_baseline: function(value) {
		this.mBaseline = value;
		return value;
	}
	,get_offsetX: function() {
		return this.mOffsetX;
	}
	,set_offsetX: function(value) {
		this.mOffsetX = value;
		return value;
	}
	,get_offsetY: function() {
		return this.mOffsetY;
	}
	,set_offsetY: function(value) {
		this.mOffsetY = value;
		return value;
	}
	,get_texture: function() {
		return this.mTexture;
	}
	,__class__: starling.text.BitmapFont
	,__properties__: {get_texture:"get_texture",set_offsetY:"set_offsetY",get_offsetY:"get_offsetY",set_offsetX:"set_offsetX",get_offsetX:"get_offsetX",set_baseline:"set_baseline",get_baseline:"get_baseline",set_smoothing:"set_smoothing",get_smoothing:"get_smoothing",set_lineHeight:"set_lineHeight",get_lineHeight:"get_lineHeight",get_size:"get_size",get_name:"get_name"}
};
starling.text.CharLocation = function($char) {
	this.reset($char);
};
$hxClasses["starling.text.CharLocation"] = starling.text.CharLocation;
starling.text.CharLocation.__name__ = ["starling","text","CharLocation"];
starling.text.CharLocation.instanceFromPool = function($char) {
	var instance;
	if(starling.text.CharLocation.sInstancePool.length > 0) instance = starling.text.CharLocation.sInstancePool.pop(); else instance = new starling.text.CharLocation($char);
	instance.reset($char);
	starling.text.CharLocation.sInstanceLoan[starling.text.CharLocation.sInstanceLoan.length] = instance;
	return instance;
};
starling.text.CharLocation.vectorFromPool = function() {
	var vector;
	if(starling.text.CharLocation.sVectorPool.length > 0) vector = starling.text.CharLocation.sVectorPool.pop(); else {
		var value = [];
		var vectorData = new openfl.VectorData();
		vectorData.length = value.length;
		vectorData.fixed = true;
		var vec;
		var this1;
		this1 = new Array(value.length);
		vec = this1;
		var _g1 = 0;
		var _g = value.length;
		while(_g1 < _g) {
			var i = _g1++;
			vec[i] = value[i];
		}
		vectorData.data = vec;
		vector = vectorData;
	}
	if(!vector.fixed) {
		if(0 > vector.length) {
			var data;
			var this2;
			this2 = new Array(0);
			data = this2;
			haxe.ds._Vector.Vector_Impl_.blit(vector.data,0,data,0,Std["int"](Math.min(vector.data.length,0)));
			vector.data = data;
		}
		vector.length = 0;
	}
	0;
	starling.text.CharLocation.sVectorLoan[starling.text.CharLocation.sVectorLoan.length] = vector;
	return vector;
};
starling.text.CharLocation.rechargePool = function() {
	var instance;
	var vector;
	while(starling.text.CharLocation.sInstanceLoan.length > 0) {
		instance = starling.text.CharLocation.sInstanceLoan.pop();
		instance["char"] = null;
		starling.text.CharLocation.sInstancePool[starling.text.CharLocation.sInstancePool.length] = instance;
	}
	while(starling.text.CharLocation.sVectorLoan.length > 0) {
		vector = starling.text.CharLocation.sVectorLoan.pop();
		if(!vector.fixed) {
			if(0 > vector.length) {
				var data;
				var this1;
				this1 = new Array(0);
				data = this1;
				haxe.ds._Vector.Vector_Impl_.blit(vector.data,0,data,0,Std["int"](Math.min(vector.data.length,0)));
				vector.data = data;
			}
			vector.length = 0;
		}
		0;
		starling.text.CharLocation.sVectorPool[starling.text.CharLocation.sVectorPool.length] = vector;
	}
};
starling.text.CharLocation.prototype = {
	'char': null
	,scale: null
	,x: null
	,y: null
	,reset: function($char) {
		this["char"] = $char;
		return this;
	}
	,__class__: starling.text.CharLocation
};
starling.text.MiniBitmapFont = function() { };
$hxClasses["starling.text.MiniBitmapFont"] = starling.text.MiniBitmapFont;
starling.text.MiniBitmapFont.__name__ = ["starling","text","MiniBitmapFont"];
starling.text.MiniBitmapFont.__properties__ = {get_xml:"get_xml",get_texture:"get_texture"}
starling.text.MiniBitmapFont.texture = null;
starling.text.MiniBitmapFont.xml = null;
starling.text.MiniBitmapFont.get_texture = function() {
	var bitmapData = starling.text.MiniBitmapFont.getBitmapData();
	var texture = starling.textures.Texture.fromBitmapData(bitmapData,false);
	bitmapData.dispose();
	bitmapData = null;
	texture.get_root().set_onRestore(function() {
		bitmapData = starling.text.MiniBitmapFont.getBitmapData();
		texture.get_root().uploadBitmapData(bitmapData);
		bitmapData.dispose();
		bitmapData = null;
	});
	return texture;
};
starling.text.MiniBitmapFont.getBitmapData = function() {
	var bmpData = new openfl.display.BitmapData(starling.text.MiniBitmapFont.BITMAP_WIDTH,starling.text.MiniBitmapFont.BITMAP_HEIGHT);
	var bmpBytes = new lime.utils.ByteArray();
	var numBytes = starling.text.MiniBitmapFont.BITMAP_DATA.length;
	var _g = 0;
	while(_g < numBytes) {
		var i = _g++;
		bmpBytes.writeUnsignedInt(starling.text.MiniBitmapFont.BITMAP_DATA[i]);
	}
	bmpBytes.uncompress();
	bmpData.setPixels(new openfl.geom.Rectangle(0,0,starling.text.MiniBitmapFont.BITMAP_WIDTH,starling.text.MiniBitmapFont.BITMAP_HEIGHT),bmpBytes);
	bmpBytes.clear();
	return bmpData;
};
starling.text.MiniBitmapFont.get_xml = function() {
	return starling.text.MiniBitmapFont.XML_DATA;
};
starling.text.TextField = function(width,height,text,fontName,fontSize,color,bold) {
	if(bold == null) bold = false;
	if(color == null) color = 0;
	if(fontSize == null) fontSize = 12;
	if(fontName == null) fontName = "Verdana";
	starling.display.DisplayObjectContainer.call(this);
	if(text != null) this.mText = text; else this.mText = "";
	this.mFontSize = fontSize;
	this.mColor = color;
	this.mHAlign = starling.utils.HAlign.CENTER;
	this.mVAlign = starling.utils.VAlign.CENTER;
	this.mBorder = null;
	this.mKerning = true;
	this.mBold = bold;
	this.mAutoSize = starling.text.TextFieldAutoSize.NONE;
	this.mHitArea = new openfl.geom.Rectangle(0,0,width,height);
	this.set_fontName(fontName.toLowerCase());
	this.addEventListener(starling.events.Event.FLATTEN,$bind(this,this.onFlatten));
};
$hxClasses["starling.text.TextField"] = starling.text.TextField;
starling.text.TextField.__name__ = ["starling","text","TextField"];
starling.text.TextField.__properties__ = {get_bitmapFonts:"get_bitmapFonts",set_defaultTextureFormat:"set_defaultTextureFormat",get_defaultTextureFormat:"get_defaultTextureFormat"}
starling.text.TextField.sDefaultTextureFormat = null;
starling.text.TextField.bitmapFonts = null;
starling.text.TextField.get_defaultTextureFormat = function() {
	if(starling.text.TextField.sDefaultTextureFormat == null) starling.text.TextField.sDefaultTextureFormat = openfl.display3D.Context3DTextureFormat.BGRA;
	return starling.text.TextField.sDefaultTextureFormat;
};
starling.text.TextField.set_defaultTextureFormat = function(value) {
	starling.text.TextField.sDefaultTextureFormat = value;
	return value;
};
starling.text.TextField.registerBitmapFont = function(bitmapFont,name) {
	if(name == null) name = bitmapFont.get_name();
	var this1 = starling.text.TextField.get_bitmapFonts();
	var k = name.toLowerCase();
	this1.set(k,bitmapFont);
	bitmapFont;
	return name;
};
starling.text.TextField.unregisterBitmapFont = function(name,dispose) {
	if(dispose == null) dispose = true;
	name = name.toLowerCase();
	if(dispose && (function($this) {
		var $r;
		var this1 = starling.text.TextField.get_bitmapFonts();
		$r = this1.get(name);
		return $r;
	}(this)) != null) ((function($this) {
		var $r;
		var this2 = starling.text.TextField.get_bitmapFonts();
		$r = this2.get(name);
		return $r;
	}(this))).dispose();
	var this3 = starling.text.TextField.get_bitmapFonts();
	this3.remove(name);
};
starling.text.TextField.getBitmapFont = function(name) {
	var this1 = starling.text.TextField.get_bitmapFonts();
	var key = name.toLowerCase();
	return this1.get(key);
};
starling.text.TextField.get_bitmapFonts = function() {
	var fonts;
	var this1 = starling.core.Starling.get_current().get_contextData();
	fonts = this1.get(starling.text.TextField.BITMAP_FONT_DATA_NAME);
	if(fonts == null) {
		fonts = new haxe.ds.StringMap();
		var this2 = starling.core.Starling.get_current().get_contextData();
		this2.set(starling.text.TextField.BITMAP_FONT_DATA_NAME,fonts);
		fonts;
	}
	return fonts;
};
starling.text.TextField.__super__ = starling.display.DisplayObjectContainer;
starling.text.TextField.prototype = $extend(starling.display.DisplayObjectContainer.prototype,{
	mFontSize: null
	,mColor: null
	,mText: null
	,mFontName: null
	,mHAlign: null
	,mVAlign: null
	,mBold: null
	,mItalic: null
	,mUnderline: null
	,mAutoScale: null
	,mAutoSize: null
	,mKerning: null
	,mNativeFilters: null
	,mRequiresRedraw: null
	,mIsRenderedText: null
	,mIsHtmlText: null
	,mTextBounds: null
	,mBatchable: null
	,mHitArea: null
	,mBorder: null
	,mImage: null
	,mQuadBatch: null
	,isHorizontalAutoSize: null
	,isVerticalAutoSize: null
	,textBounds: null
	,dispose: function() {
		this.removeEventListener(starling.events.Event.FLATTEN,$bind(this,this.onFlatten));
		if(this.mImage != null) this.mImage.get_texture().dispose();
		if(this.mQuadBatch != null) this.mQuadBatch.dispose();
		starling.display.DisplayObjectContainer.prototype.dispose.call(this);
	}
	,onFlatten: function() {
		if(this.mRequiresRedraw) this.redraw();
	}
	,render: function(support,parentAlpha) {
		if(this.mRequiresRedraw) this.redraw();
		starling.display.DisplayObjectContainer.prototype.render.call(this,support,parentAlpha);
	}
	,redraw: function() {
		if(this.mRequiresRedraw) {
			if(this.mIsRenderedText) this.createRenderedContents(); else this.createComposedContents();
			this.updateBorder();
			this.mRequiresRedraw = false;
		}
	}
	,createRenderedContents: function() {
		var _g = this;
		if(this.mQuadBatch != null) {
			this.mQuadBatch.removeFromParent(true);
			this.mQuadBatch = null;
		}
		if(this.mTextBounds == null) this.mTextBounds = new openfl.geom.Rectangle();
		var texture;
		var scale = starling.core.Starling.get_ContentScaleFactor();
		var bitmapData = this.renderText(scale,this.mTextBounds);
		var format = starling.text.TextField.sDefaultTextureFormat;
		var maxTextureSize = starling.textures.Texture.get_maxSize();
		var shrinkHelper = 0;
		while(bitmapData.width > maxTextureSize || bitmapData.height > maxTextureSize) {
			scale *= Math.min((maxTextureSize - shrinkHelper) / bitmapData.width,(maxTextureSize - shrinkHelper) / bitmapData.height);
			bitmapData.dispose();
			bitmapData = this.renderText(scale,this.mTextBounds);
			shrinkHelper += 1;
		}
		this.mHitArea.width = bitmapData.width / scale;
		this.mHitArea.height = bitmapData.height / scale;
		texture = starling.textures.Texture.fromBitmapData(bitmapData,false,false,scale,format);
		texture.get_root().set_onRestore(function() {
			if(_g.mTextBounds == null) _g.mTextBounds = new openfl.geom.Rectangle();
			bitmapData = _g.renderText(scale,_g.mTextBounds);
			texture.get_root().uploadBitmapData(_g.renderText(scale,_g.mTextBounds));
			bitmapData.dispose();
			bitmapData = null;
		});
		bitmapData.dispose();
		bitmapData = null;
		if(this.mImage == null) {
			this.mImage = new starling.display.Image(texture);
			this.mImage.set_touchable(false);
			this.addChild(this.mImage);
		} else {
			this.mImage.get_texture().dispose();
			this.mImage.set_texture(texture);
			this.mImage.readjustSize();
		}
	}
	,formatText: function(textField,textFormat) {
	}
	,renderText: function(scale,resultTextBounds) {
		var width = this.mHitArea.width * scale;
		var height = this.mHitArea.height * scale;
		var hAlign = this.mHAlign;
		var vAlign = this.mVAlign;
		if(this.get_isHorizontalAutoSize()) {
			width = Math.POSITIVE_INFINITY;
			hAlign = starling.utils.HAlign.LEFT;
		}
		if(this.get_isVerticalAutoSize()) {
			height = Math.POSITIVE_INFINITY;
			vAlign = starling.utils.VAlign.TOP;
		}
		var align = openfl.text.TextFormatAlign.CENTER;
		if(hAlign == starling.utils.HAlign.LEFT) align = openfl.text.TextFormatAlign.LEFT; else if(hAlign == starling.utils.HAlign.RIGHT) align = openfl.text.TextFormatAlign.RIGHT;
		var textFormat = new openfl.text.TextFormat(this.mFontName,this.mFontSize * scale,this.mColor,this.mBold,this.mItalic,this.mUnderline,null,null,align);
		textFormat.kerning = this.mKerning;
		starling.text.TextField.sNativeTextField.set_defaultTextFormat(textFormat);
		starling.text.TextField.sNativeTextField.set_width(width);
		starling.text.TextField.sNativeTextField.set_height(height);
		starling.text.TextField.sNativeTextField.antiAliasType = openfl.text.AntiAliasType.ADVANCED;
		starling.text.TextField.sNativeTextField.selectable = false;
		starling.text.TextField.sNativeTextField.multiline = true;
		starling.text.TextField.sNativeTextField.set_wordWrap(true);
		if(this.mIsHtmlText) starling.text.TextField.sNativeTextField.set_htmlText(this.mText); else starling.text.TextField.sNativeTextField.set_text(this.mText);
		starling.text.TextField.sNativeTextField.embedFonts = true;
		starling.text.TextField.sNativeTextField.set_filters(this.mNativeFilters);
		if(starling.text.TextField.sNativeTextField.get_textWidth() == 0.0 || starling.text.TextField.sNativeTextField.get_textHeight() == 0.0) starling.text.TextField.sNativeTextField.embedFonts = false;
		this.formatText(starling.text.TextField.sNativeTextField,textFormat);
		if(this.mAutoScale) this.autoScaleNativeTextField(starling.text.TextField.sNativeTextField);
		var textWidth = starling.text.TextField.sNativeTextField.get_textWidth();
		var textHeight = starling.text.TextField.sNativeTextField.get_textHeight();
		textHeight *= starling.text.TextField.sNativeTextField.get_numLines();
		if(this.get_isHorizontalAutoSize()) starling.text.TextField.sNativeTextField.set_width(width = Math.ceil(textWidth + 5));
		if(this.get_isVerticalAutoSize()) starling.text.TextField.sNativeTextField.set_height(height = Math.ceil(textHeight + 4));
		if(width < 1) width = 1.0;
		if(height < 1) height = 1.0;
		var textOffsetX = 0.0;
		if(hAlign == starling.utils.HAlign.LEFT) textOffsetX = 2; else if(hAlign == starling.utils.HAlign.CENTER) textOffsetX = (width - textWidth) / 2.0; else if(hAlign == starling.utils.HAlign.RIGHT) textOffsetX = width - textWidth - 2;
		var textOffsetY = 0.0;
		if(vAlign == starling.utils.VAlign.TOP) textOffsetY = 2; else if(vAlign == starling.utils.VAlign.CENTER) textOffsetY = (height - textHeight) / 2.0; else if(vAlign == starling.utils.VAlign.BOTTOM) textOffsetY = height - textHeight - 2;
		haxe.Log.trace("height = " + height,{ fileName : "TextField.hx", lineNumber : 358, className : "starling.text.TextField", methodName : "renderText"});
		haxe.Log.trace("textHeight = " + textHeight,{ fileName : "TextField.hx", lineNumber : 359, className : "starling.text.TextField", methodName : "renderText"});
		var filterOffset = this.calculateFilterOffset(starling.text.TextField.sNativeTextField,hAlign,vAlign);
		var bitmapData = new openfl.display.BitmapData(width,height,true,0);
		var drawMatrix = new openfl.geom.Matrix(1,0,0,1,filterOffset.x,filterOffset.y + textOffsetY - 2);
		var drawWithQualityFunc;
		if(Object.prototype.hasOwnProperty.call(bitmapData,"drawWithQuality")) drawWithQualityFunc = Reflect.getProperty(bitmapData,"drawWithQuality"); else drawWithQualityFunc = null;
		if(Reflect.isFunction(drawWithQualityFunc)) {
			var func = drawWithQualityFunc;
			func.apply(bitmapData,[starling.text.TextField.sNativeTextField,drawMatrix,null,null,null,false,openfl.display.StageQuality.MEDIUM]);
		} else bitmapData.draw(starling.text.TextField.sNativeTextField,drawMatrix);
		starling.text.TextField.sNativeTextField.set_text("");
		resultTextBounds.setTo((textOffsetX + filterOffset.x) / scale,(textOffsetY + filterOffset.y) / scale,textWidth / scale,textHeight / scale);
		return bitmapData;
	}
	,autoScaleNativeTextField: function(textField) {
		var size = textField.get_defaultTextFormat().size;
		var maxHeight = textField.get_height() - 4;
		var maxWidth = textField.get_width() - 4;
		while(textField.get_textWidth() > maxWidth || textField.get_textHeight() > maxHeight) {
			if(size <= 4) break;
			var format = textField.get_defaultTextFormat();
			format.size = size--;
			textField.set_defaultTextFormat(format);
			if(this.mIsHtmlText) textField.set_htmlText(this.mText); else textField.set_text(this.mText);
		}
	}
	,calculateFilterOffset: function(textField,hAlign,vAlign) {
		var resultOffset = new openfl.geom.Point();
		var filters = textField.get_filters();
		if(filters != null && filters.length > 0) {
			var textWidth = textField.get_textWidth();
			var textHeight = textField.get_textHeight();
			var bounds = new openfl.geom.Rectangle();
			var _g = 0;
			while(_g < filters.length) {
				var filter = filters[_g];
				++_g;
				var blurX;
				if(Object.prototype.hasOwnProperty.call(filter,"blurX")) blurX = Reflect.getProperty(filter,"blurX"); else blurX = 0;
				var blurY;
				if(Object.prototype.hasOwnProperty.call(filter,"blurY")) blurY = Reflect.getProperty(filter,"blurY"); else blurY = 0;
				var angleDeg;
				if(Object.prototype.hasOwnProperty.call(filter,"angle")) angleDeg = Reflect.getProperty(filter,"angle"); else angleDeg = 0;
				var distance;
				if(Object.prototype.hasOwnProperty.call(filter,"distance")) distance = Reflect.getProperty(filter,"distance"); else distance = 0;
				var angle = starling.utils.StarlingUtils.deg2rad(angleDeg);
				var marginX = blurX * 1.33;
				var marginY = blurY * 1.33;
				var offsetX = Math.cos(angle) * distance - marginX / 2.0;
				var offsetY = Math.sin(angle) * distance - marginY / 2.0;
				var filterBounds = new openfl.geom.Rectangle(offsetX,offsetY,textWidth + marginX,textHeight + marginY);
				bounds = bounds.union(filterBounds);
			}
			if(hAlign == starling.utils.HAlign.LEFT && bounds.x < 0) resultOffset.x = -bounds.x; else if(hAlign == starling.utils.HAlign.RIGHT && bounds.y > 0) resultOffset.x = -(bounds.get_right() - textWidth);
			if(vAlign == starling.utils.VAlign.TOP && bounds.y < 0) resultOffset.y = -bounds.y; else if(vAlign == starling.utils.VAlign.BOTTOM && bounds.y > 0) resultOffset.y = -(bounds.get_bottom() - textHeight);
		}
		return resultOffset;
	}
	,createComposedContents: function() {
		haxe.Log.trace("createComposedContents",{ fileName : "TextField.hx", lineNumber : 457, className : "starling.text.TextField", methodName : "createComposedContents"});
		if(this.mImage != null) {
			this.mImage.removeFromParent(true);
			this.mImage.get_texture().dispose();
			this.mImage = null;
		}
		if(this.mQuadBatch == null) {
			this.mQuadBatch = new starling.display.QuadBatch();
			this.mQuadBatch.set_touchable(false);
			this.addChild(this.mQuadBatch);
		} else this.mQuadBatch.reset();
		var bitmapFont = starling.text.TextField.getBitmapFont(this.mFontName);
		if(bitmapFont == null) throw new openfl.errors.Error("Bitmap font not registered: " + this.mFontName);
		var width = this.mHitArea.width;
		var height = this.mHitArea.height;
		var hAlign = this.mHAlign;
		var vAlign = this.mVAlign;
		if(this.get_isHorizontalAutoSize()) {
			width = Math.POSITIVE_INFINITY;
			hAlign = starling.utils.HAlign.LEFT;
		}
		if(this.get_isVerticalAutoSize()) {
			height = Math.POSITIVE_INFINITY;
			vAlign = starling.utils.VAlign.TOP;
		}
		bitmapFont.fillQuadBatch(this.mQuadBatch,width,height,this.mText,this.mFontSize,this.mColor,hAlign,vAlign,this.mAutoScale,this.mKerning);
		this.mQuadBatch.set_batchable(this.mBatchable);
		if(this.mAutoSize != starling.text.TextFieldAutoSize.NONE) {
			this.mTextBounds = this.mQuadBatch.getBounds(this.mQuadBatch,this.mTextBounds);
			if(this.get_isHorizontalAutoSize()) this.mHitArea.width = this.mTextBounds.x + this.mTextBounds.width;
			if(this.get_isVerticalAutoSize()) this.mHitArea.height = this.mTextBounds.y + this.mTextBounds.height;
		} else this.mTextBounds = null;
	}
	,updateBorder: function() {
		if(this.mBorder == null) return;
		var width = this.mHitArea.width;
		var height = this.mHitArea.height;
		var topLine = this.mBorder.getChildAt(0);
		var rightLine = this.mBorder.getChildAt(1);
		var bottomLine = this.mBorder.getChildAt(2);
		var leftLine = this.mBorder.getChildAt(3);
		topLine.set_width(width);
		topLine.set_height(1);
		bottomLine.set_width(width);
		bottomLine.set_height(1);
		leftLine.set_width(1);
		leftLine.set_height(height);
		rightLine.set_width(1);
		rightLine.set_height(height);
		rightLine.set_x(width - 1);
		bottomLine.set_y(height - 1);
		topLine.set_color(rightLine.set_color(bottomLine.set_color(leftLine.set_color(this.mColor))));
	}
	,get_isHorizontalAutoSize: function() {
		return this.mAutoSize == starling.text.TextFieldAutoSize.HORIZONTAL || this.mAutoSize == starling.text.TextFieldAutoSize.BOTH_DIRECTIONS;
	}
	,get_isVerticalAutoSize: function() {
		return this.mAutoSize == starling.text.TextFieldAutoSize.VERTICAL || this.mAutoSize == starling.text.TextFieldAutoSize.BOTH_DIRECTIONS;
	}
	,get_textBounds: function() {
		if(this.mRequiresRedraw) this.redraw();
		if(this.mTextBounds == null) this.mTextBounds = this.mQuadBatch.getBounds(this.mQuadBatch);
		return this.mTextBounds.clone();
	}
	,getBounds: function(targetSpace,resultRect) {
		if(this.mRequiresRedraw) this.redraw();
		this.getTransformationMatrix(targetSpace,starling.text.TextField.sHelperMatrix);
		return starling.utils.RectangleUtil.getBounds(this.mHitArea,starling.text.TextField.sHelperMatrix,resultRect);
	}
	,hitTest: function(localPoint,forTouch) {
		if(forTouch == null) forTouch = false;
		if(forTouch && (!this.get_visible() || !this.get_touchable())) return null; else if(this.mHitArea.containsPoint(localPoint) && this.hitTestMask(localPoint)) return this; else return null;
	}
	,set_width: function(value) {
		this.mHitArea.width = value;
		this.mRequiresRedraw = true;
		return value;
	}
	,set_height: function(value) {
		this.mHitArea.height = value;
		this.mRequiresRedraw = true;
		return value;
	}
	,get_text: function() {
		return this.mText;
	}
	,set_text: function(value) {
		if(value == null) value = "";
		if(this.mText != value) {
			this.mText = value;
			this.mRequiresRedraw = true;
		}
		return value;
	}
	,get_fontName: function() {
		return this.mFontName;
	}
	,set_fontName: function(value) {
		if(this.mFontName != value) {
			if(value == starling.text.BitmapFont.MINI && (function($this) {
				var $r;
				var this1 = starling.text.TextField.get_bitmapFonts();
				$r = this1.get(value);
				return $r;
			}(this)) == null) starling.text.TextField.registerBitmapFont(new starling.text.BitmapFont());
			this.mFontName = value;
			this.mRequiresRedraw = true;
			this.mIsRenderedText = starling.text.TextField.getBitmapFont(value) == null;
		}
		return value;
	}
	,get_fontSize: function() {
		return this.mFontSize;
	}
	,set_fontSize: function(value) {
		if(this.mFontSize != value) {
			this.mFontSize = value;
			this.mRequiresRedraw = true;
		}
		return value;
	}
	,get_color: function() {
		return this.mColor;
	}
	,set_color: function(value) {
		if((function($this) {
			var $r;
			var $int = $this.mColor;
			$r = $int < 0?4294967296.0 + $int:$int + 0.0;
			return $r;
		}(this)) != (function($this) {
			var $r;
			var int1 = value;
			$r = int1 < 0?4294967296.0 + int1:int1 + 0.0;
			return $r;
		}(this))) {
			this.mColor = value;
			this.mRequiresRedraw = true;
		}
		return value;
	}
	,get_hAlign: function() {
		return this.mHAlign;
	}
	,set_hAlign: function(value) {
		if(!js.Boot.__instanceof(value,starling.utils.HAlign)) throw new openfl.errors.ArgumentError("Invalid horizontal align: " + Std.string(value));
		if(this.mHAlign != value) {
			this.mHAlign = value;
			this.mRequiresRedraw = true;
		}
		return value;
	}
	,get_vAlign: function() {
		return this.mVAlign;
	}
	,set_vAlign: function(value) {
		if(!js.Boot.__instanceof(value,starling.utils.VAlign)) throw new openfl.errors.ArgumentError("Invalid vertical align: " + Std.string(value));
		if(this.mVAlign != value) {
			this.mVAlign = value;
			this.mRequiresRedraw = true;
		}
		return value;
	}
	,get_border: function() {
		return this.mBorder != null;
	}
	,set_border: function(value) {
		if(value && this.mBorder == null) {
			this.mBorder = new starling.display.Sprite();
			this.addChild(this.mBorder);
			var _g = 0;
			while(_g < 4) {
				var i = _g++;
				this.mBorder.addChild(new starling.display.Quad(1.0,1.0));
			}
			this.updateBorder();
		} else if(!value && this.mBorder != null) {
			this.mBorder.removeFromParent(true);
			this.mBorder = null;
		}
		return value;
	}
	,get_bold: function() {
		return this.mBold;
	}
	,set_bold: function(value) {
		if(this.mBold != value) {
			this.mBold = value;
			this.mRequiresRedraw = true;
		}
		return value;
	}
	,get_italic: function() {
		return this.mItalic;
	}
	,set_italic: function(value) {
		if(this.mItalic != value) {
			this.mItalic = value;
			this.mRequiresRedraw = true;
		}
		return value;
	}
	,get_underline: function() {
		return this.mUnderline;
	}
	,set_underline: function(value) {
		if(this.mUnderline != value) {
			this.mUnderline = value;
			this.mRequiresRedraw = true;
		}
		return value;
	}
	,get_kerning: function() {
		return this.mKerning;
	}
	,set_kerning: function(value) {
		if(this.mKerning != value) {
			this.mKerning = value;
			this.mRequiresRedraw = true;
		}
		return value;
	}
	,get_autoScale: function() {
		return this.mAutoScale;
	}
	,set_autoScale: function(value) {
		if(this.mAutoScale != value) {
			this.mAutoScale = value;
			this.mRequiresRedraw = true;
		}
		return value;
	}
	,get_autoSize: function() {
		return this.mAutoSize;
	}
	,set_autoSize: function(value) {
		if(this.mAutoSize != value) {
			this.mAutoSize = value;
			this.mRequiresRedraw = true;
		}
		return value;
	}
	,get_batchable: function() {
		return this.mBatchable;
	}
	,set_batchable: function(value) {
		this.mBatchable = value;
		if(this.mQuadBatch != null) this.mQuadBatch.set_batchable(value);
		return value;
	}
	,get_nativeFilters: function() {
		return this.mNativeFilters;
	}
	,set_nativeFilters: function(value) {
		this.mNativeFilters = value.concat([]);
		this.mRequiresRedraw = true;
		return value;
	}
	,get_isHtmlText: function() {
		return this.mIsHtmlText;
	}
	,set_isHtmlText: function(value) {
		if(this.mIsHtmlText != value) {
			this.mIsHtmlText = value;
			this.mRequiresRedraw = true;
		}
		return value;
	}
	,__class__: starling.text.TextField
	,__properties__: $extend(starling.display.DisplayObjectContainer.prototype.__properties__,{set_isHtmlText:"set_isHtmlText",get_isHtmlText:"get_isHtmlText",set_nativeFilters:"set_nativeFilters",get_nativeFilters:"get_nativeFilters",set_batchable:"set_batchable",get_batchable:"get_batchable",set_autoSize:"set_autoSize",get_autoSize:"get_autoSize",set_autoScale:"set_autoScale",get_autoScale:"get_autoScale",set_kerning:"set_kerning",get_kerning:"get_kerning",set_underline:"set_underline",get_underline:"get_underline",set_italic:"set_italic",get_italic:"get_italic",set_bold:"set_bold",get_bold:"get_bold",set_border:"set_border",get_border:"get_border",set_vAlign:"set_vAlign",get_vAlign:"get_vAlign",set_hAlign:"set_hAlign",get_hAlign:"get_hAlign",set_color:"set_color",get_color:"get_color",set_fontSize:"set_fontSize",get_fontSize:"get_fontSize",set_fontName:"set_fontName",get_fontName:"get_fontName",set_text:"set_text",get_text:"get_text",get_textBounds:"get_textBounds",get_isVerticalAutoSize:"get_isVerticalAutoSize",get_isHorizontalAutoSize:"get_isHorizontalAutoSize"})
});
starling.text.TextFieldAutoSize = function() {
	throw new starling.errors.AbstractClassError();
};
$hxClasses["starling.text.TextFieldAutoSize"] = starling.text.TextFieldAutoSize;
starling.text.TextFieldAutoSize.__name__ = ["starling","text","TextFieldAutoSize"];
starling.text.TextFieldAutoSize.prototype = {
	__class__: starling.text.TextFieldAutoSize
};
starling.textures = {};
starling.textures.AtfData = function(data) {
	if(!starling.textures.AtfData.isAtfData(data)) throw new openfl.errors.ArgumentError("Invalid ATF data");
	haxe.Log.trace("CHECK",{ fileName : "AtfData.hx", lineNumber : 40, className : "starling.textures.AtfData", methodName : "new"});
	data.position = 6;
	if(data.readByte() == 255) data.position = 12; else data.position = 6;
	var format = data.readUnsignedByte();
	var _g = format & 127;
	switch(_g) {
	case 0:
		break;
	case 1:
		this.mFormat = openfl.display3D.Context3DTextureFormat.BGRA;
		break;
	case 2:
		break;
	case 3:
		this.mFormat = openfl.display3D.Context3DTextureFormat.COMPRESSED;
		break;
	case 4:
		break;
	case 5:
		this.mFormat = "compressedAlpha";
		break;
	default:
		throw new openfl.errors.Error("Invalid ATF format");
	}
	this.mWidth = Math.pow(2,data.readUnsignedByte());
	this.mHeight = Math.pow(2,data.readUnsignedByte());
	this.mNumTextures = data.readUnsignedByte();
	this.mIsCubeMap = (function($this) {
		var $r;
		var $int = format & 128;
		$r = $int < 0?4294967296.0 + $int:$int + 0.0;
		return $r;
	}(this)) != 0;
	this.mData = data;
	data.position = 5;
	var d5 = data.readByte();
	var d6 = data.readByte();
	if(d5 != 0 && d6 == 255) {
		data.position = 5;
		var d51 = data.readByte();
		var emptyMipmaps = (d51 & 1) == 1;
		var numTextures = d51 >> 1 & 127;
		if(emptyMipmaps) this.mNumTextures = 1; else this.mNumTextures = numTextures;
	}
};
$hxClasses["starling.textures.AtfData"] = starling.textures.AtfData;
starling.textures.AtfData.__name__ = ["starling","textures","AtfData"];
starling.textures.AtfData.isAtfData = function(data) {
	if(data.length < 3) return false; else {
		var charCodeStr = data.readByte();
		charCodeStr += data.readByte();
		charCodeStr += data.readByte();
		var signature = String.fromCharCode(charCodeStr);
		return signature == "ATF";
	}
};
starling.textures.AtfData.prototype = {
	mFormat: null
	,mWidth: null
	,mHeight: null
	,mNumTextures: null
	,mIsCubeMap: null
	,mData: null
	,format: null
	,width: null
	,height: null
	,numTextures: null
	,isCubeMap: null
	,data: null
	,get_format: function() {
		return this.mFormat;
	}
	,get_width: function() {
		return this.mWidth;
	}
	,get_height: function() {
		return this.mHeight;
	}
	,get_numTextures: function() {
		return this.mNumTextures;
	}
	,get_isCubeMap: function() {
		return this.mIsCubeMap;
	}
	,get_data: function() {
		return this.mData;
	}
	,__class__: starling.textures.AtfData
	,__properties__: {get_data:"get_data",get_isCubeMap:"get_isCubeMap",get_numTextures:"get_numTextures",get_height:"get_height",get_width:"get_width",get_format:"get_format"}
};
starling.textures.Texture = function() {
	var name = Type.getClassName(Type.getClass(this));
	if(openfl.system.Capabilities.isDebugger && name == "starling.textures.Texture") throw new starling.errors.AbstractClassError();
};
$hxClasses["starling.textures.Texture"] = starling.textures.Texture;
starling.textures.Texture.__name__ = ["starling","textures","Texture"];
starling.textures.Texture.__properties__ = {get_maxSize:"get_maxSize"}
starling.textures.Texture.maxSize = null;
starling.textures.Texture.fromData = function(data,options) {
	var texture = null;
	if(js.Boot.__instanceof(data,openfl.display.Bitmap)) data = (js.Boot.__cast(data , openfl.display.Bitmap)).bitmapData;
	if(options == null) options = new starling.textures.TextureOptions();
	if(js.Boot.__instanceof(data,Class)) texture = starling.textures.Texture.fromEmbeddedAsset(data,options.get_mipMapping(),options.get_optimizeForRenderToTexture(),options.get_scale(),options.get_format(),options.get_repeat()); else if(js.Boot.__instanceof(data,openfl.display.BitmapData)) texture = starling.textures.Texture.fromBitmapData(data,options.get_mipMapping(),options.get_optimizeForRenderToTexture(),options.get_scale(),options.get_format(),options.get_repeat()); else if(js.Boot.__instanceof(data,lime.utils.ByteArray)) texture = starling.textures.Texture.fromAtfData(data,options.get_scale(),options.get_mipMapping(),options.get_onReady(),options.get_repeat()); else throw new openfl.errors.ArgumentError("Unsupported 'data' type: " + Type.getClassName(Type.getClass(data)));
	return texture;
};
starling.textures.Texture.fromEmbeddedAsset = function(assetClass,mipMapping,optimizeForRenderToTexture,scale,format,repeat) {
	if(repeat == null) repeat = false;
	if(scale == null) scale = 1;
	if(optimizeForRenderToTexture == null) optimizeForRenderToTexture = false;
	if(mipMapping == null) mipMapping = true;
	if(format == null) format = openfl.display3D.Context3DTextureFormat.BGRA;
	var texture;
	var asset = Type.createInstance(assetClass,[]);
	if(js.Boot.__instanceof(asset,openfl.display.Bitmap)) {
		texture = starling.textures.Texture.fromBitmap(asset,mipMapping,optimizeForRenderToTexture,scale,format,repeat);
		texture.get_root().set_onRestore(function() {
			texture.get_root().uploadBitmap(Type.createInstance(assetClass,[]));
		});
	} else if(js.Boot.__instanceof(asset,lime.utils.ByteArray)) {
		texture = starling.textures.Texture.fromAtfData(asset,scale,mipMapping,null,repeat);
		texture.get_root().set_onRestore(function() {
			texture.get_root().uploadAtfData(Type.createInstance(assetClass,[]));
		});
	} else throw new openfl.errors.ArgumentError("Invalid asset type: " + Type.getClassName(Type.getClass(asset)));
	asset = null;
	return texture;
};
starling.textures.Texture.fromBitmap = function(bitmap,generateMipMaps,optimizeForRenderToTexture,scale,format,repeat) {
	if(repeat == null) repeat = false;
	if(scale == null) scale = 1;
	if(optimizeForRenderToTexture == null) optimizeForRenderToTexture = false;
	if(generateMipMaps == null) generateMipMaps = true;
	if(format == null) format = openfl.display3D.Context3DTextureFormat.BGRA;
	return starling.textures.Texture.fromBitmapData(bitmap.bitmapData,generateMipMaps,optimizeForRenderToTexture,scale,format,repeat);
};
starling.textures.Texture.fromBitmapData = function(data,generateMipMaps,optimizeForRenderToTexture,scale,format,repeat) {
	if(repeat == null) repeat = false;
	if(scale == null) scale = 1;
	if(optimizeForRenderToTexture == null) optimizeForRenderToTexture = false;
	if(generateMipMaps == null) generateMipMaps = true;
	if(format == null) format = openfl.display3D.Context3DTextureFormat.BGRA;
	var texture = starling.textures.Texture.empty(data.width / scale,data.height / scale,true,generateMipMaps,optimizeForRenderToTexture,scale,format,repeat);
	texture.get_root().uploadBitmapData(data);
	texture.get_root().set_onRestore(function() {
		texture.get_root().uploadBitmapData(data);
	});
	return texture;
};
starling.textures.Texture.fromAtfData = function(data,scale,useMipMaps,async,repeat) {
	if(repeat == null) repeat = false;
	if(useMipMaps == null) useMipMaps = true;
	if(scale == null) scale = 1;
	var context = starling.core.Starling.get_Context();
	if(context == null) throw new starling.errors.MissingContextError();
	var atfData = new starling.textures.AtfData(data);
	var nativeTexture = context.createTexture(atfData.get_width(),atfData.get_height(),atfData.get_format(),false);
	var concreteTexture = new starling.textures.ConcreteTexture(nativeTexture,atfData.get_format(),atfData.get_width(),atfData.get_height(),useMipMaps && atfData.get_numTextures() > 1,false,false,scale,repeat);
	concreteTexture.uploadAtfData(data,0,async);
	concreteTexture.set_onRestore(function() {
		concreteTexture.uploadAtfData(data,0);
	});
	return concreteTexture;
};
starling.textures.Texture.fromNetStream = function(stream,scale,onComplete) {
	if(scale == null) scale = 1;
	var metaData = Reflect.getProperty(stream,"onMetaData");
	if(stream.client == stream && !metaData) stream.client = { onMetaData : function(md) {
	}};
	return starling.textures.Texture.fromVideoAttachment("NetStream",stream,scale,onComplete);
};
starling.textures.Texture.fromVideoAttachment = function(type,attachment,scale,onComplete) {
	var TEXTURE_READY = "textureReady";
	if(!starling.utils.SystemUtil.get_supportsVideoTexture()) throw new starling.errors.NotSupportedError("Video Textures are not supported on this platform");
	var context = starling.core.Starling.get_Context();
	if(context == null) throw new starling.errors.MissingContextError();
	var func = Reflect.getProperty(context,"createVideoTexture");
	var base = func.apply(context,[]);
	var baseFunc = Reflect.getProperty(base,"attach" + type);
	baseFunc.apply(base,[attachment]);
	var texture = new starling.textures.ConcreteVideoTexture(base,scale);
	texture.set_onRestore(function() {
		texture.get_root().attachVideo(type,attachment);
	});
	base.addEventListener(TEXTURE_READY,function(event) {
		starling.utils.StarlingUtils.execute(onComplete,[texture]);
	});
	return texture;
};
starling.textures.Texture.fromColor = function(width,height,color,optimizeForRenderToTexture,scale,format) {
	if(scale == null) scale = -1;
	if(optimizeForRenderToTexture == null) optimizeForRenderToTexture = false;
	if(color == null) color = -1;
	if(format == null) format = openfl.display3D.Context3DTextureFormat.BGRA;
	var texture = starling.textures.Texture.empty(width,height,true,false,optimizeForRenderToTexture,scale,format);
	texture.get_root().clear(color,starling.utils.Color.getAlpha(color) / 255.0);
	texture.get_root().set_onRestore(function() {
		texture.get_root().clear(color,starling.utils.Color.getAlpha(color) / 255.0);
	});
	return texture;
};
starling.textures.Texture.empty = function(width,height,premultipliedAlpha,mipMapping,optimizeForRenderToTexture,scale,format,repeat) {
	if(repeat == null) repeat = false;
	if(scale == null) scale = -1;
	if(optimizeForRenderToTexture == null) optimizeForRenderToTexture = false;
	if(mipMapping == null) mipMapping = true;
	if(premultipliedAlpha == null) premultipliedAlpha = true;
	if(scale <= 0) scale = starling.core.Starling.get_ContentScaleFactor();
	if(format == null) format = openfl.display3D.Context3DTextureFormat.BGRA;
	var actualWidth;
	var actualHeight;
	var nativeTexture;
	var context = starling.core.Starling.get_Context();
	if(context == null) throw new starling.errors.MissingContextError();
	var origWidth = width * scale | 0;
	var origHeight = height * scale | 0;
	var useRectTexture = !mipMapping && !repeat && starling.core.Starling.get_current().get_profile() != "baselineConstrained" && Object.prototype.hasOwnProperty.call(context,"createRectangleTexture") && format != openfl.display3D.Context3DTextureFormat.COMPRESSED && format != openfl.display3D.Context3DTextureFormat.COMPRESSED_ALPHA;
	if(useRectTexture) {
		actualWidth = Math.ceil(origWidth - 0.000000001);
		actualHeight = Math.ceil(origHeight - 0.000000001);
		nativeTexture = context.createRectangleTexture(actualWidth,actualHeight,format,optimizeForRenderToTexture);
	} else {
		actualWidth = starling.utils.StarlingUtils.getNextPowerOfTwo(origWidth);
		actualHeight = starling.utils.StarlingUtils.getNextPowerOfTwo(origHeight);
		nativeTexture = context.createTexture(actualWidth,actualHeight,format,optimizeForRenderToTexture);
	}
	var concreteTexture = new starling.textures.ConcreteTexture(nativeTexture,format,actualWidth,actualHeight,mipMapping,premultipliedAlpha,optimizeForRenderToTexture,scale,repeat);
	concreteTexture.set_onRestore($bind(concreteTexture,concreteTexture.clear));
	if(actualWidth - origWidth < 0.001 && actualHeight - origHeight < 0.001) return concreteTexture; else return new starling.textures.SubTexture(concreteTexture,new openfl.geom.Rectangle(0,0,width,height),true);
};
starling.textures.Texture.fromTexture = function(texture,region,frame,rotated) {
	if(rotated == null) rotated = false;
	return new starling.textures.SubTexture(texture,region,false,frame,rotated);
};
starling.textures.Texture.get_maxSize = function() {
	var target = starling.core.Starling.get_current();
	var profile;
	if(target != null) profile = target.get_profile(); else profile = "baseline";
	if(profile == "baseline" || profile == "baselineConstrained") return 2048; else return 4096;
};
starling.textures.Texture.prototype = {
	frame: null
	,repeat: null
	,width: null
	,height: null
	,nativeWidth: null
	,nativeHeight: null
	,scale: null
	,base: null
	,root: null
	,format: null
	,mipMapping: null
	,premultipliedAlpha: null
	,dispose: function() {
	}
	,adjustVertexData: function(vertexData,vertexID,count) {
	}
	,adjustTexCoords: function(texCoords,startIndex,stride,count) {
		if(count == null) count = -1;
		if(stride == null) stride = 0;
		if(startIndex == null) startIndex = 0;
		return texCoords;
	}
	,get_frame: function() {
		return null;
	}
	,get_repeat: function() {
		return false;
	}
	,get_width: function() {
		return 0;
	}
	,get_height: function() {
		return 0;
	}
	,get_nativeWidth: function() {
		return 0;
	}
	,get_nativeHeight: function() {
		return 0;
	}
	,get_scale: function() {
		return 1.0;
	}
	,get_base: function() {
		return null;
	}
	,get_root: function() {
		return null;
	}
	,get_format: function() {
		return openfl.display3D.Context3DTextureFormat.BGRA;
	}
	,get_mipMapping: function() {
		return false;
	}
	,get_premultipliedAlpha: function() {
		return false;
	}
	,__class__: starling.textures.Texture
	,__properties__: {get_premultipliedAlpha:"get_premultipliedAlpha",get_mipMapping:"get_mipMapping",get_format:"get_format",get_root:"get_root",get_base:"get_base",get_scale:"get_scale",get_nativeHeight:"get_nativeHeight",get_nativeWidth:"get_nativeWidth",get_height:"get_height",get_width:"get_width",get_repeat:"get_repeat",get_frame:"get_frame"}
};
starling.textures.ConcreteTexture = function(base,format,width,height,mipMapping,premultipliedAlpha,optimizedForRenderTexture,scale,repeat) {
	if(repeat == null) repeat = false;
	if(scale == null) scale = 1;
	if(optimizedForRenderTexture == null) optimizedForRenderTexture = false;
	starling.textures.Texture.call(this);
	if(scale <= 0) this.mScale = 1.0; else this.mScale = scale;
	this.mBase = base;
	this.mFormat = format;
	this.mWidth = width;
	this.mHeight = height;
	this.mMipMapping = mipMapping;
	premultipliedAlpha = false;
	this.mPremultipliedAlpha = premultipliedAlpha;
	this.mOptimizedForRenderTexture = optimizedForRenderTexture;
	this.mRepeat = repeat;
	this.mOnRestore = null;
	this.mDataUploaded = false;
	this.mTextureReadyCallback = null;
};
$hxClasses["starling.textures.ConcreteTexture"] = starling.textures.ConcreteTexture;
starling.textures.ConcreteTexture.__name__ = ["starling","textures","ConcreteTexture"];
starling.textures.ConcreteTexture.__super__ = starling.textures.Texture;
starling.textures.ConcreteTexture.prototype = $extend(starling.textures.Texture.prototype,{
	mBase: null
	,mFormat: null
	,mWidth: null
	,mHeight: null
	,mMipMapping: null
	,mPremultipliedAlpha: null
	,mOptimizedForRenderTexture: null
	,mScale: null
	,mRepeat: null
	,mOnRestore: null
	,mDataUploaded: null
	,mTextureReadyCallback: null
	,optimizedForRenderTexture: null
	,dispose: function() {
		if(this.mBase != null) {
			this.mBase.removeEventListener(starling.textures.ConcreteTexture.TEXTURE_READY,$bind(this,this.onTextureReady));
			this.mBase.dispose();
		}
		this.set_onRestore(null);
		starling.textures.Texture.prototype.dispose.call(this);
	}
	,uploadBitmap: function(bitmap) {
		this.uploadBitmapData(bitmap.bitmapData);
	}
	,uploadBitmapData: function(data) {
		var potData = null;
		if(data.width != this.mWidth || data.height != this.mHeight) {
			potData = new openfl.display.BitmapData(this.mWidth,this.mHeight,true,0);
			potData.copyPixels(data,data.rect,starling.textures.ConcreteTexture.sOrigin);
			data = potData;
		}
		if(js.Boot.__instanceof(this.mBase,openfl.display3D.textures.Texture)) {
			var potTexture = this.mBase;
			potTexture.uploadFromBitmapData(data);
			if(this.mMipMapping && data.width > 1 && data.height > 1) {
				var currentWidth = data.width >> 1;
				var currentHeight = data.height >> 1;
				var level = 1;
				var canvas = new openfl.display.BitmapData(currentWidth,currentHeight,true,0);
				var transform = new openfl.geom.Matrix(.5,0,0,.5);
				var bounds = new openfl.geom.Rectangle();
				while(currentWidth >= 1 || currentHeight >= 1) {
					bounds.width = currentWidth;
					bounds.height = currentHeight;
					canvas.fillRect(bounds,0);
					canvas.draw(data,transform,null,null,null,true);
					potTexture.uploadFromBitmapData(canvas,level++);
					transform.scale(0.5,0.5);
					currentWidth = currentWidth >> 1;
					currentHeight = currentHeight >> 1;
				}
				canvas.dispose();
			}
		} else if(js.Boot.__instanceof(this.mBase,openfl.display3D.textures.RectangleTexture)) {
			haxe.Log.trace("CHECK",{ fileName : "ConcreteTexture.hx", lineNumber : 150, className : "starling.textures.ConcreteTexture", methodName : "uploadBitmapData"});
			var rectangleTexture = this.mBase;
			if(rectangleTexture != null) rectangleTexture.uploadFromBitmapData(data);
		} else haxe.Log.trace("FIX",{ fileName : "ConcreteTexture.hx", lineNumber : 164, className : "starling.textures.ConcreteTexture", methodName : "uploadBitmapData"});
		if(potData != null) potData.dispose();
		this.mDataUploaded = true;
	}
	,uploadAtfData: function(data,offset,async) {
		if(offset == null) offset = 0;
		var isAsync = Reflect.isFunction(async) || async == true;
		var potTexture = this.mBase;
		if(potTexture == null) throw new openfl.errors.Error("This texture type does not support ATF data");
		if(Reflect.isFunction(async)) {
			this.mTextureReadyCallback = async;
			this.mBase.addEventListener(starling.textures.ConcreteTexture.TEXTURE_READY,$bind(this,this.onTextureReady));
		}
		potTexture.uploadCompressedTextureFromByteArray(data,offset,isAsync);
		this.mDataUploaded = true;
	}
	,attachNetStream: function(netStream,onComplete) {
		this.attachVideo("NetStream",netStream,onComplete);
	}
	,attachVideo: function(type,attachment,onComplete) {
		var name = Type.getClassName(Type.getClass(this.mBase));
		if(name == "flash.display3D.textures.VideoTexture") {
			this.mDataUploaded = true;
			this.mTextureReadyCallback = onComplete;
			haxe.Log.trace("CHECK",{ fileName : "ConcreteTexture.hx", lineNumber : 219, className : "starling.textures.ConcreteTexture", methodName : "attachVideo"});
			if(Object.prototype.hasOwnProperty.call(this.mBase,"attach" + type)) ("attach" + type).apply(this.mBase,[attachment]);
			this.mBase.addEventListener(starling.textures.ConcreteTexture.TEXTURE_READY,$bind(this,this.onTextureReady));
		} else throw new openfl.errors.Error("This texture type does not support " + type + " data");
	}
	,onTextureReady: function(event) {
		this.mBase.removeEventListener(starling.textures.ConcreteTexture.TEXTURE_READY,$bind(this,this.onTextureReady));
		starling.utils.StarlingUtils.execute(this.mTextureReadyCallback,[this]);
		this.mTextureReadyCallback = null;
	}
	,onContextCreated: function() {
		this.createBase();
		if(this.mOnRestore != null) this.mOnRestore();
		if(!this.mDataUploaded) this.clear();
	}
	,createBase: function() {
		var context = starling.core.Starling.get_Context();
		var name = Type.getClassName(Type.getClass(this.mBase));
		haxe.Log.trace("CHECK name = " + name,{ fileName : "ConcreteTexture.hx", lineNumber : 258, className : "starling.textures.ConcreteTexture", methodName : "createBase"});
		if(name == "flash.display3D.textures.Texture") this.mBase = context.createTexture(this.mWidth,this.mHeight,this.mFormat,this.mOptimizedForRenderTexture); else if(name == "flash.display3D.textures.RectangleTexture") this.mBase = context.createRectangleTexture(this.mWidth,this.mHeight,this.mFormat,this.mOptimizedForRenderTexture); else throw new starling.errors.NotSupportedError("Texture type not supported: " + name);
		this.mDataUploaded = false;
	}
	,clear: function(color,alpha) {
		if(alpha == null) alpha = 0.0;
		if(color == null) color = 0;
		var context = starling.core.Starling.get_Context();
		if(context == null) throw new starling.errors.MissingContextError();
		if(this.mPremultipliedAlpha && alpha < 1.0) color = starling.utils.Color.rgb(starling.utils.Color.getRed(color) * alpha,starling.utils.Color.getGreen(color) * alpha,starling.utils.Color.getBlue(color) * alpha);
		context.setRenderToTexture(this.mBase);
		try {
			starling.core.RenderSupport.Clear(color,alpha);
		} catch( e ) {
			if( js.Boot.__instanceof(e,openfl.errors.Error) ) {
			} else throw(e);
		}
		context.setRenderToBackBuffer();
		this.mDataUploaded = true;
	}
	,get_optimizedForRenderTexture: function() {
		return this.mOptimizedForRenderTexture;
	}
	,get_onRestore: function() {
		return this.mOnRestore;
	}
	,set_onRestore: function(value) {
		starling.core.Starling.get_current().removeEventListener(starling.events.Event.CONTEXT3D_CREATE,$bind(this,this.onContextCreated));
		if(starling.core.Starling.get_handleLostContext() && value != null) {
			this.mOnRestore = value;
			starling.core.Starling.get_current().addEventListener(starling.events.Event.CONTEXT3D_CREATE,$bind(this,this.onContextCreated));
		} else this.mOnRestore = null;
		return value;
	}
	,get_base: function() {
		return this.mBase;
	}
	,get_root: function() {
		return this;
	}
	,get_format: function() {
		return this.mFormat;
	}
	,get_width: function() {
		return this.mWidth / this.mScale;
	}
	,get_height: function() {
		return this.mHeight / this.mScale;
	}
	,get_nativeWidth: function() {
		return this.mWidth;
	}
	,get_nativeHeight: function() {
		return this.mHeight;
	}
	,get_scale: function() {
		return this.mScale;
	}
	,get_mipMapping: function() {
		return this.mMipMapping;
	}
	,get_premultipliedAlpha: function() {
		return this.mPremultipliedAlpha;
	}
	,get_repeat: function() {
		return this.mRepeat;
	}
	,__class__: starling.textures.ConcreteTexture
	,__properties__: $extend(starling.textures.Texture.prototype.__properties__,{set_onRestore:"set_onRestore",get_onRestore:"get_onRestore",get_optimizedForRenderTexture:"get_optimizedForRenderTexture"})
});
starling.textures.ConcreteVideoTexture = function(base,scale) {
	if(scale == null) scale = 1;
	var format = openfl.display3D.Context3DTextureFormat.BGRA;
	haxe.Log.trace("CHECK",{ fileName : "ConcreteVideoTexture.hx", lineNumber : 30, className : "starling.textures.ConcreteVideoTexture", methodName : "new"});
	var width = 0;
	var height = 0;
	if(Object.prototype.hasOwnProperty.call(base,"videoWidth")) width = Reflect.getProperty(base,"videoWidth");
	if(Object.prototype.hasOwnProperty.call(base,"videoHeight")) height = Reflect.getProperty(base,"videoHeight");
	starling.textures.ConcreteTexture.call(this,base,format,width,height,false,false,false,scale,false);
	var name = Type.getClassName(Type.getClass(base));
	haxe.Log.trace("CHECK name = " + name,{ fileName : "ConcreteVideoTexture.hx", lineNumber : 39, className : "starling.textures.ConcreteVideoTexture", methodName : "new"});
	if(name != "flash.display3D.textures.VideoTexture") throw new openfl.errors.ArgumentError("'base' must be VideoTexture");
};
$hxClasses["starling.textures.ConcreteVideoTexture"] = starling.textures.ConcreteVideoTexture;
starling.textures.ConcreteVideoTexture.__name__ = ["starling","textures","ConcreteVideoTexture"];
starling.textures.ConcreteVideoTexture.__super__ = starling.textures.ConcreteTexture;
starling.textures.ConcreteVideoTexture.prototype = $extend(starling.textures.ConcreteTexture.prototype,{
	get_nativeWidth: function() {
		return Reflect.getProperty(this.get_base(),"videoWidth");
	}
	,get_nativeHeight: function() {
		return Reflect.getProperty(this.get_base(),"videoHeight");
	}
	,get_width: function() {
		return this.get_nativeWidth() / this.get_scale();
	}
	,get_height: function() {
		return this.get_nativeHeight() / this.get_scale();
	}
	,__class__: starling.textures.ConcreteVideoTexture
});
starling.textures.SubTexture = function(_parent,region,ownsParent,frame,rotated) {
	if(rotated == null) rotated = false;
	if(ownsParent == null) ownsParent = false;
	this.mTransformationMatrix = new openfl.geom.Matrix();
	starling.textures.Texture.call(this);
	this.mParent = _parent;
	if(region != null) this.mRegion = region.clone(); else this.mRegion = new openfl.geom.Rectangle(0,0,_parent.get_width(),_parent.get_height());
	if(frame != null) this.mFrame = frame.clone(); else this.mFrame = null;
	this.mOwnsParent = ownsParent;
	this.mRotated = rotated;
	if(rotated) this.mWidth = this.mRegion.height; else this.mWidth = this.mRegion.width;
	if(rotated) this.mHeight = this.mRegion.width; else this.mHeight = this.mRegion.height;
	this.mTransformationMatrix = new openfl.geom.Matrix();
	if(rotated) {
		this.mTransformationMatrix.translate(0,-1);
		this.mTransformationMatrix.rotate(Math.PI / 2.0);
	}
	if(this.mFrame != null && (this.mFrame.x > 0 || this.mFrame.y > 0 || this.mFrame.get_right() < this.mRegion.width || this.mFrame.get_bottom() < this.mRegion.height)) haxe.Log.trace("[Starling] Warning: frames inside the texture's region are unsupported.",{ fileName : "SubTexture.hx", lineNumber : 102, className : "starling.textures.SubTexture", methodName : "new"});
	this.mTransformationMatrix.scale(this.mRegion.width / this.mParent.get_width(),this.mRegion.height / this.mParent.get_height());
	this.mTransformationMatrix.translate(this.mRegion.x / this.mParent.get_width(),this.mRegion.y / this.mParent.get_height());
};
$hxClasses["starling.textures.SubTexture"] = starling.textures.SubTexture;
starling.textures.SubTexture.__name__ = ["starling","textures","SubTexture"];
starling.textures.SubTexture.__properties__ = {set_sMatrix:"set_sMatrix",get_sMatrix:"get_sMatrix"}
starling.textures.SubTexture._sMatrix = null;
starling.textures.SubTexture.get_sMatrix = function() {
	if(starling.textures.SubTexture._sMatrix == null) starling.textures.SubTexture._sMatrix = new openfl.geom.Matrix(1,0,0,1,0,0);
	return starling.textures.SubTexture._sMatrix;
};
starling.textures.SubTexture.set_sMatrix = function(value) {
	return starling.textures.SubTexture._sMatrix = value;
};
starling.textures.SubTexture.__super__ = starling.textures.Texture;
starling.textures.SubTexture.prototype = $extend(starling.textures.Texture.prototype,{
	mParent: null
	,mOwnsParent: null
	,mRegion: null
	,mFrame: null
	,mRotated: null
	,mWidth: null
	,mHeight: null
	,mTransformationMatrix: null
	,parent: null
	,ownsParent: null
	,rotated: null
	,region: null
	,clipping: null
	,transformationMatrix: null
	,dispose: function() {
		if(this.mOwnsParent) this.mParent.dispose();
		starling.textures.Texture.prototype.dispose.call(this);
	}
	,adjustVertexData: function(vertexData,vertexID,count) {
		var startIndex = vertexID * starling.utils.VertexData.ELEMENTS_PER_VERTEX + starling.utils.VertexData.TEXCOORD_OFFSET;
		var stride = starling.utils.VertexData.ELEMENTS_PER_VERTEX - 2;
		vertexData.set_rawData((function($this) {
			var $r;
			var value = $this.adjustTexCoords((function($this) {
				var $r;
				var this1 = vertexData.get_rawData();
				var value1 = new Array();
				{
					var _g1 = 0;
					var _g = this1.data.length;
					while(_g1 < _g) {
						var i = _g1++;
						value1.push(this1.data[i]);
					}
				}
				$r = value1;
				return $r;
			}($this)),startIndex,stride,count);
			var vectorData = new openfl.VectorData();
			vectorData.length = value.length;
			vectorData.fixed = true;
			{
				var vec;
				var this2;
				this2 = new Array(value.length);
				vec = this2;
				var _g11 = 0;
				var _g2 = value.length;
				while(_g11 < _g2) {
					var i1 = _g11++;
					vec[i1] = value[i1];
				}
				vectorData.data = vec;
			}
			$r = vectorData;
			return $r;
		}(this)));
		if(this.mFrame != null) {
			if(count != 4) throw new openfl.errors.ArgumentError("Textures with a frame can only be used on quads");
			var deltaRight = this.mFrame.width + this.mFrame.x - this.mWidth;
			var deltaBottom = this.mFrame.height + this.mFrame.y - this.mHeight;
			vertexData.translateVertex(vertexID,-this.mFrame.x,-this.mFrame.y);
			vertexData.translateVertex(vertexID + 1,-deltaRight,-this.mFrame.y);
			vertexData.translateVertex(vertexID + 2,-this.mFrame.x,-deltaBottom);
			vertexData.translateVertex(vertexID + 3,-deltaRight,-deltaBottom);
		}
	}
	,adjustTexCoords: function(texCoords,startIndex,stride,count) {
		if(count == null) count = -1;
		if(stride == null) stride = 0;
		if(startIndex == null) startIndex = 0;
		if(count < 0) count = (texCoords.length - startIndex - 2) / (stride + 2) + 1;
		var endIndex = startIndex + count * (2 + stride);
		var texture = this;
		var u;
		var v;
		starling.textures.SubTexture.get_sMatrix().identity();
		while(texture != null) {
			if(texture.mTransformationMatrix != null) starling.textures.SubTexture.get_sMatrix().concat(texture.mTransformationMatrix);
			try {
				texture = texture.mParent;
			} catch( e ) {
				if( js.Boot.__instanceof(e,openfl.errors.Error) ) {
					texture = null;
				} else throw(e);
			}
		}
		var i = startIndex;
		while(i < endIndex) {
			u = texCoords[i];
			v = texCoords[js.Boot.__cast(i + 1 , Int)];
			starling.utils.MatrixUtil.transformCoords(starling.textures.SubTexture.get_sMatrix(),u,v,starling.textures.SubTexture.sTexCoords);
			texCoords[i] = starling.textures.SubTexture.sTexCoords.x;
			texCoords[js.Boot.__cast(i + 1 , Int)] = starling.textures.SubTexture.sTexCoords.y;
			i += 2 + stride;
		}
		return texCoords;
	}
	,get_parent: function() {
		return this.mParent;
	}
	,get_ownsParent: function() {
		return this.mOwnsParent;
	}
	,get_rotated: function() {
		return this.mRotated;
	}
	,get_region: function() {
		return this.mRegion;
	}
	,get_clipping: function() {
		var topLeft = new openfl.geom.Point();
		var bottomRight = new openfl.geom.Point();
		starling.utils.MatrixUtil.transformCoords(this.mTransformationMatrix,0.0,0.0,topLeft);
		starling.utils.MatrixUtil.transformCoords(this.mTransformationMatrix,1.0,1.0,bottomRight);
		var clipping = new openfl.geom.Rectangle(topLeft.x,topLeft.y,bottomRight.x - topLeft.x,bottomRight.y - topLeft.y);
		starling.utils.RectangleUtil.normalize(clipping);
		return clipping;
	}
	,get_transformationMatrix: function() {
		return this.mTransformationMatrix;
	}
	,get_base: function() {
		return this.mParent.get_base();
	}
	,get_root: function() {
		return this.mParent.get_root();
	}
	,get_format: function() {
		return this.mParent.get_format();
	}
	,get_width: function() {
		return this.mWidth;
	}
	,get_height: function() {
		return this.mHeight;
	}
	,get_nativeWidth: function() {
		return this.mWidth * this.get_scale();
	}
	,get_nativeHeight: function() {
		return this.mHeight * this.get_scale();
	}
	,get_mipMapping: function() {
		return this.mParent.get_mipMapping();
	}
	,get_premultipliedAlpha: function() {
		return this.mParent.get_premultipliedAlpha();
	}
	,get_scale: function() {
		return this.mParent.get_scale();
	}
	,get_repeat: function() {
		return this.mParent.get_repeat();
	}
	,get_frame: function() {
		return this.mFrame;
	}
	,__class__: starling.textures.SubTexture
	,__properties__: $extend(starling.textures.Texture.prototype.__properties__,{get_transformationMatrix:"get_transformationMatrix",get_clipping:"get_clipping",get_region:"get_region",get_rotated:"get_rotated",get_ownsParent:"get_ownsParent",get_parent:"get_parent"})
});
starling.textures.RenderTexture = function(width,height,persistent,scale,format,repeat) {
	if(repeat == null) repeat = false;
	if(scale == null) scale = -1;
	if(persistent == null) persistent = true;
	this.PMA = true;
	this.CONTEXT_POT_SUPPORT_KEY = "RenderTexture.supportsNonPotDimensions";
	if(format == null) format = openfl.display3D.Context3DTextureFormat.BGRA;
	if(scale <= 0) scale = starling.core.Starling.get_ContentScaleFactor();
	var legalWidth = width;
	var legalHeight = height;
	if(!this.get_supportsNonPotDimensions()) {
		legalWidth = starling.utils.StarlingUtils.getNextPowerOfTwo(width * scale) / scale;
		legalHeight = starling.utils.StarlingUtils.getNextPowerOfTwo(height * scale) / scale;
	}
	this.mActiveTexture = starling.textures.Texture.empty(legalWidth,legalHeight,this.PMA,false,true,scale,format,repeat);
	this.mActiveTexture.get_root().set_onRestore(($_=this.mActiveTexture.get_root(),$bind($_,$_.clear)));
	starling.textures.SubTexture.call(this,this.mActiveTexture,new openfl.geom.Rectangle(0,0,width,height),true,null,false);
	var rootWidth = this.mActiveTexture.get_root().get_width();
	var rootHeight = this.mActiveTexture.get_root().get_height();
	this.mIsPersistent = persistent;
	this.mSupport = new starling.core.RenderSupport();
	this.mSupport.setProjectionMatrix(0,0,rootWidth,rootHeight,width,height);
	if(persistent && (!starling.textures.RenderTexture.optimizePersistentBuffers || !starling.utils.SystemUtil.get_supportsRelaxedTargetClearRequirement())) {
		this.mBufferTexture = starling.textures.Texture.empty(legalWidth,legalHeight,this.PMA,false,true,scale,format,repeat);
		this.mBufferTexture.get_root().set_onRestore(($_=this.mBufferTexture.get_root(),$bind($_,$_.clear)));
		this.mHelperImage = new starling.display.Image(this.mBufferTexture);
		this.mHelperImage.set_smoothing(starling.textures.TextureSmoothing.NONE);
	}
};
$hxClasses["starling.textures.RenderTexture"] = starling.textures.RenderTexture;
starling.textures.RenderTexture.__name__ = ["starling","textures","RenderTexture"];
starling.textures.RenderTexture.__super__ = starling.textures.SubTexture;
starling.textures.RenderTexture.prototype = $extend(starling.textures.SubTexture.prototype,{
	CONTEXT_POT_SUPPORT_KEY: null
	,PMA: null
	,mActiveTexture: null
	,mBufferTexture: null
	,mHelperImage: null
	,mDrawing: null
	,mBufferReady: null
	,mIsPersistent: null
	,mSupport: null
	,supportsNonPotDimensions: null
	,isDoubleBuffered: null
	,isPersistent: null
	,dispose: function() {
		this.mSupport.dispose();
		this.mActiveTexture.dispose();
		if(this.get_isDoubleBuffered()) {
			this.mBufferTexture.dispose();
			this.mHelperImage.dispose();
		}
		starling.textures.SubTexture.prototype.dispose.call(this);
	}
	,draw: function(object,matrix,alpha,antiAliasing) {
		if(antiAliasing == null) antiAliasing = 0;
		if(alpha == null) alpha = 1.0;
		if(object == null) return;
		if(this.mDrawing) this.render(object,matrix,alpha); else this.renderBundled($bind(this,this.render),object,matrix,alpha,antiAliasing);
	}
	,drawBundled: function(drawingBlock,antiAliasing) {
		if(antiAliasing == null) antiAliasing = 0;
		this.renderBundled(drawingBlock,null,null,1.0,antiAliasing);
	}
	,render: function(object,matrix,alpha) {
		if(alpha == null) alpha = 1.0;
		var filter = object.get_filter();
		var mask = object.get_mask();
		this.mSupport.loadIdentity();
		this.mSupport.set_blendMode(object.get_blendMode() == starling.display.BlendMode.AUTO?starling.display.BlendMode.NORMAL:object.get_blendMode());
		if(matrix != null) this.mSupport.prependMatrix(matrix); else this.mSupport.transformMatrix(object);
		if(mask != null) this.mSupport.pushMask(mask);
		if(filter != null) filter.render(object,this.mSupport,alpha); else object.render(this.mSupport,alpha);
		if(mask != null) this.mSupport.popMask();
	}
	,renderBundled: function(renderBlock,object,matrix,alpha,antiAliasing) {
		if(antiAliasing == null) antiAliasing = 0;
		if(alpha == null) alpha = 1.0;
		var context = starling.core.Starling.get_Context();
		if(context == null) throw new starling.errors.MissingContextError();
		if(!starling.core.Starling.get_current().get_contextValid()) return;
		if(this.get_isDoubleBuffered()) {
			var tmpTexture = this.mActiveTexture;
			this.mActiveTexture = this.mBufferTexture;
			this.mBufferTexture = tmpTexture;
			this.mHelperImage.set_texture(this.mBufferTexture);
		}
		starling.textures.RenderTexture.sClipRect.setTo(0,0,this.mActiveTexture.get_width(),this.mActiveTexture.get_height());
		this.mSupport.pushClipRect(starling.textures.RenderTexture.sClipRect);
		this.mSupport.setRenderTarget(this.mActiveTexture,antiAliasing);
		if(this.get_isDoubleBuffered() || !this.get_isPersistent() || !this.mBufferReady) this.mSupport.clear();
		if(this.get_isDoubleBuffered() && this.mBufferReady) this.mHelperImage.render(this.mSupport,1.0); else this.mBufferReady = true;
		try {
			this.mDrawing = true;
			starling.utils.StarlingUtils.execute(renderBlock,[object,matrix,alpha]);
		} catch( e ) {
			if( js.Boot.__instanceof(e,openfl.errors.Error) ) {
				this.mDrawing = false;
				this.mSupport.finishQuadBatch();
				this.mSupport.nextFrame();
				this.mSupport.set_renderTarget(null);
				this.mSupport.popClipRect();
			} else throw(e);
		}
	}
	,clear: function(rgb,alpha) {
		if(alpha == null) alpha = 0.0;
		if(rgb == null) rgb = 0;
		if(!starling.core.Starling.get_current().get_contextValid()) return;
		var previousRenderTarget = this.mSupport.get_renderTarget();
		this.mSupport.set_renderTarget(this.mActiveTexture);
		this.mSupport.clear(rgb,alpha);
		this.mSupport.set_renderTarget(previousRenderTarget);
		this.mBufferReady = true;
	}
	,get_supportsNonPotDimensions: function() {
		var target = starling.core.Starling.get_current();
		var context = starling.core.Starling.get_Context();
		var support;
		var this1 = target.get_contextData();
		support = this1.get(this.CONTEXT_POT_SUPPORT_KEY);
		if(support == null) {
			if(target.get_profile() != "baselineConstrained" && Object.prototype.hasOwnProperty.call(context,"createRectangleTexture")) {
				var texture = null;
				var buffer = null;
				try {
					var createRectangleTextureFunc = Reflect.getProperty(context,"createRectangleTexture");
					texture = createRectangleTextureFunc.apply(context,[2,3,openfl.display3D.Context3DTextureFormat.BGRA,true]);
					context.setRenderToTexture(texture);
					context.clear();
					context.setRenderToBackBuffer();
					context.createVertexBuffer(1,1);
					support = true;
				} catch( e ) {
					if( js.Boot.__instanceof(e,openfl.errors.Error) ) {
						support = false;
						if(texture != null) texture.dispose();
						if(buffer != null) buffer.dispose();
					} else throw(e);
				}
			} else support = false;
			haxe.Log.trace("CONTEXT_POT_SUPPORT_KEY = " + this.CONTEXT_POT_SUPPORT_KEY,{ fileName : "RenderTexture.hx", lineNumber : 325, className : "starling.textures.RenderTexture", methodName : "get_supportsNonPotDimensions"});
			var this2 = target.get_contextData();
			var v = support;
			this2.set(this.CONTEXT_POT_SUPPORT_KEY,v);
			v;
		}
		return support;
	}
	,get_isDoubleBuffered: function() {
		return this.mBufferTexture != null;
	}
	,get_isPersistent: function() {
		return this.mIsPersistent;
	}
	,get_base: function() {
		return this.mActiveTexture.get_base();
	}
	,get_root: function() {
		return this.mActiveTexture.get_root();
	}
	,__class__: starling.textures.RenderTexture
	,__properties__: $extend(starling.textures.SubTexture.prototype.__properties__,{get_isPersistent:"get_isPersistent",get_isDoubleBuffered:"get_isDoubleBuffered",get_supportsNonPotDimensions:"get_supportsNonPotDimensions"})
});
starling.textures.TextureAtlas = function(texture,atlasXml) {
	this.mSubTextures = new haxe.ds.StringMap();
	this.mAtlasTexture = texture;
	if(atlasXml != null) this.parseAtlasXml(atlasXml);
};
$hxClasses["starling.textures.TextureAtlas"] = starling.textures.TextureAtlas;
starling.textures.TextureAtlas.__name__ = ["starling","textures","TextureAtlas"];
starling.textures.TextureAtlas.parseBool = function(value) {
	return value.toLowerCase() == "true";
};
starling.textures.TextureAtlas.prototype = {
	mAtlasTexture: null
	,mSubTextures: null
	,mSubTextureNames: null
	,texture: null
	,dispose: function() {
		this.mAtlasTexture.dispose();
	}
	,parseAtlasXml: function(atlasXml) {
		haxe.Log.trace("FIX",{ fileName : "TextureAtlas.hx", lineNumber : 105, className : "starling.textures.TextureAtlas", methodName : "parseAtlasXml"});
		var scale = this.mAtlasTexture.get_scale();
		var region = new openfl.geom.Rectangle();
		var frame = new openfl.geom.Rectangle();
		var $it0 = atlasXml.firstElement().iterator();
		while( $it0.hasNext() ) {
			var element = $it0.next();
			if(element.nodeType == Xml.Element) {
				var subTexture = element;
				var name = starling.utils.StarlingUtils.cleanMasterString(subTexture.get("name"));
				var x = Std.parseFloat(subTexture.get("x")) / scale;
				var y = Std.parseFloat(subTexture.get("y")) / scale;
				var width = Std.parseFloat(subTexture.get("width")) / scale;
				var height = Std.parseFloat(subTexture.get("height")) / scale;
				var frameX = Std.parseFloat(subTexture.get("frameX")) / scale;
				var frameY = Std.parseFloat(subTexture.get("frameY")) / scale;
				var frameWidth = Std.parseFloat(subTexture.get("frameWidth")) / scale;
				var frameHeight = Std.parseFloat(subTexture.get("frameHeight")) / scale;
				var rotatedStr = subTexture.get("rotated");
				var rotated = false;
				if(rotatedStr != null && rotatedStr.toLowerCase() == "true") rotated = true;
				region.setTo(x,y,width,height);
				frame.setTo(frameX,frameY,frameWidth,frameHeight);
				if(frameWidth > 0 && frameHeight > 0) this.addRegion(name,region,frame,rotated); else this.addRegion(name,region,null,rotated);
			}
		}
	}
	,getTexture: function(name) {
		return this.mSubTextures.get(name);
	}
	,getTextures: function(prefix,result) {
		if(prefix == null) prefix = "";
		if(result == null) result = new Array();
		var _g = 0;
		var _g1 = this.getNames(prefix,(function($this) {
			var $r;
			var this1 = starling.textures.TextureAtlas.sNames;
			var value = new Array();
			{
				var _g11 = 0;
				var _g2 = this1.data.length;
				while(_g11 < _g2) {
					var i = _g11++;
					value.push(this1.data[i]);
				}
			}
			$r = value;
			return $r;
		}(this)));
		while(_g < _g1.length) {
			var name = _g1[_g];
			++_g;
			result[result.length] = this.getTexture(name);
		}
		var this2 = starling.textures.TextureAtlas.sNames;
		if(!this2.fixed) {
			if(0 > this2.length) {
				var data;
				var this3;
				this3 = new Array(0);
				data = this3;
				haxe.ds._Vector.Vector_Impl_.blit(this2.data,0,data,0,Std["int"](Math.min(this2.data.length,0)));
				this2.data = data;
			}
			this2.length = 0;
		}
		0;
		return result;
	}
	,getNames: function(prefix,result) {
		if(prefix == null) prefix = "";
		var name;
		if(result == null) result = new Array();
		haxe.Log.trace("FIX SORT",{ fileName : "TextureAtlas.hx", lineNumber : 165, className : "starling.textures.TextureAtlas", methodName : "getNames"});
		if(this.mSubTextureNames == null) this.mSubTextureNames = this.mSubTextures.keys();
		var $it0 = this.mSubTextureNames;
		while( $it0.hasNext() ) {
			var key = $it0.next();
			if(key.indexOf(prefix) == 0) result.push(key);
		}
		return result;
	}
	,getRegion: function(name) {
		var subTexture = this.mSubTextures.get(name);
		if(subTexture != null) return subTexture.get_region(); else return null;
	}
	,getFrame: function(name) {
		var subTexture = this.mSubTextures.get(name);
		if(subTexture != null) return subTexture.get_frame(); else return null;
	}
	,getRotation: function(name) {
		var subTexture = this.mSubTextures.get(name);
		if(subTexture != null) return subTexture.get_rotated(); else return false;
	}
	,addRegion: function(name,region,frame,rotated) {
		if(rotated == null) rotated = false;
		var v = new starling.textures.SubTexture(this.mAtlasTexture,region,false,frame,rotated);
		this.mSubTextures.set(name,v);
		v;
		this.mSubTextureNames = null;
	}
	,removeRegion: function(name) {
		var subTexture = this.mSubTextures.get(name);
		if(subTexture != null) subTexture.dispose();
		this.mSubTextures.remove(name);
		this.mSubTextureNames = null;
	}
	,get_texture: function() {
		return this.mAtlasTexture;
	}
	,__class__: starling.textures.TextureAtlas
	,__properties__: {get_texture:"get_texture"}
};
starling.textures.TextureOptions = function(scale,mipMapping,format,repeat) {
	if(repeat == null) repeat = false;
	if(mipMapping == null) mipMapping = false;
	if(scale == null) scale = 1.0;
	this.mRepeat = false;
	this.mOnReady = null;
	this.mOptimizeForRenderToTexture = false;
	if(format == null) format = openfl.display3D.Context3DTextureFormat.BGRA;
	this.mScale = scale;
	this.mFormat = format;
	this.mMipMapping = mipMapping;
	this.mRepeat = repeat;
};
$hxClasses["starling.textures.TextureOptions"] = starling.textures.TextureOptions;
starling.textures.TextureOptions.__name__ = ["starling","textures","TextureOptions"];
starling.textures.TextureOptions.prototype = {
	mScale: null
	,mFormat: null
	,mMipMapping: null
	,mOptimizeForRenderToTexture: null
	,mOnReady: null
	,mRepeat: null
	,clone: function() {
		var clone = new starling.textures.TextureOptions(this.mScale,this.mMipMapping,this.mFormat,this.mRepeat);
		clone.mOptimizeForRenderToTexture = this.mOptimizeForRenderToTexture;
		clone.mOnReady = this.mOnReady;
		return clone;
	}
	,get_scale: function() {
		return this.mScale;
	}
	,set_scale: function(value) {
		if(value > 0) this.mScale = value; else this.mScale = starling.core.Starling.get_ContentScaleFactor();
		return value;
	}
	,get_format: function() {
		return this.mFormat;
	}
	,set_format: function(value) {
		this.mFormat = value;
		return value;
	}
	,get_mipMapping: function() {
		return this.mMipMapping;
	}
	,set_mipMapping: function(value) {
		this.mMipMapping = value;
		return value;
	}
	,get_optimizeForRenderToTexture: function() {
		return this.mOptimizeForRenderToTexture;
	}
	,set_optimizeForRenderToTexture: function(value) {
		this.mOptimizeForRenderToTexture = value;
		return value;
	}
	,get_repeat: function() {
		return this.mRepeat;
	}
	,set_repeat: function(value) {
		this.mRepeat = value;
		return value;
	}
	,get_onReady: function() {
		return this.mOnReady;
	}
	,set_onReady: function(value) {
		this.mOnReady = value;
		return value;
	}
	,__class__: starling.textures.TextureOptions
	,__properties__: {set_onReady:"set_onReady",get_onReady:"get_onReady",set_repeat:"set_repeat",get_repeat:"get_repeat",set_optimizeForRenderToTexture:"set_optimizeForRenderToTexture",get_optimizeForRenderToTexture:"get_optimizeForRenderToTexture",set_mipMapping:"set_mipMapping",get_mipMapping:"get_mipMapping",set_format:"set_format",get_format:"get_format",set_scale:"set_scale",get_scale:"get_scale"}
};
starling.textures.TextureSmoothing = function() {
	throw new starling.errors.AbstractClassError();
};
$hxClasses["starling.textures.TextureSmoothing"] = starling.textures.TextureSmoothing;
starling.textures.TextureSmoothing.__name__ = ["starling","textures","TextureSmoothing"];
starling.textures.TextureSmoothing.isValid = function(smoothing) {
	return smoothing == starling.textures.TextureSmoothing.NONE || smoothing == starling.textures.TextureSmoothing.BILINEAR || smoothing == starling.textures.TextureSmoothing.TRILINEAR;
};
starling.textures.TextureSmoothing.prototype = {
	__class__: starling.textures.TextureSmoothing
};
starling.utils = {};
starling.utils.AssetManager = function(scaleFactor,useMipmaps) {
	if(useMipmaps == null) useMipmaps = false;
	if(scaleFactor == null) scaleFactor = 1;
	var this1;
	this1 = new openfl.VectorData();
	var this2;
	this2 = new Array(0);
	this1.data = this2;
	this1.length = 0;
	this1.fixed = false;
	this.mQueue = this1;
	this.mDefaultTextureOptions = new starling.textures.TextureOptions(scaleFactor,useMipmaps);
	this.mTextures = new haxe.ds.StringMap();
	this.mAtlases = new haxe.ds.StringMap();
	this.mSounds = new haxe.ds.StringMap();
	this.mXmls = new haxe.ds.StringMap();
	this.mObjects = new haxe.ds.StringMap();
	this.mByteArrays = new haxe.ds.StringMap();
	this.mNumConnections = 1;
	this.mVerbose = true;
	starling.events.EventDispatcher.call(this);
};
$hxClasses["starling.utils.AssetManager"] = starling.utils.AssetManager;
starling.utils.AssetManager.__name__ = ["starling","utils","AssetManager"];
starling.utils.AssetManager.__super__ = starling.events.EventDispatcher;
starling.utils.AssetManager.prototype = $extend(starling.events.EventDispatcher.prototype,{
	mStarling: null
	,mNumLostTextures: null
	,mNumRestoredTextures: null
	,mNumLoadingQueues: null
	,mDefaultTextureOptions: null
	,mCheckPolicyFile: null
	,mKeepAtlasXmls: null
	,mKeepFontXmls: null
	,mNumConnections: null
	,mVerbose: null
	,mQueue: null
	,mTextures: null
	,mAtlases: null
	,mSounds: null
	,mXmls: null
	,mObjects: null
	,mByteArrays: null
	,queue: null
	,numQueuedAssets: null
	,isLoading: null
	,dispose: function() {
		var $it0 = this.mTextures.iterator();
		while( $it0.hasNext() ) {
			var texture = $it0.next();
			texture.dispose();
		}
		var $it1 = this.mAtlases.iterator();
		while( $it1.hasNext() ) {
			var atlas = $it1.next();
			atlas.dispose();
		}
		var $it2 = this.mByteArrays.iterator();
		while( $it2.hasNext() ) {
			var byteArray = $it2.next();
			byteArray.clear();
		}
	}
	,getTexture: function(name) {
		if(this.mTextures.exists(name)) return this.mTextures.get(name); else {
			var $it0 = this.mAtlases.iterator();
			while( $it0.hasNext() ) {
				var atlas = $it0.next();
				var texture = atlas.getTexture(name);
				if(texture != null) return texture;
			}
			return null;
		}
	}
	,getTextures: function(prefix,result) {
		if(prefix == null) prefix = "";
		if(result == null) result = new Array();
		var names = this.getTextureNames(prefix,(function($this) {
			var $r;
			var this1 = starling.utils.AssetManager.sNames;
			var value = new Array();
			{
				var _g1 = 0;
				var _g = this1.data.length;
				while(_g1 < _g) {
					var i = _g1++;
					value.push(this1.data[i]);
				}
			}
			$r = value;
			return $r;
		}(this)));
		var _g2 = 0;
		while(_g2 < names.length) {
			var name = names[_g2];
			++_g2;
			result[result.length] = this.getTexture(name);
		}
		var this2 = starling.utils.AssetManager.sNames;
		if(!this2.fixed) {
			if(0 > this2.length) {
				var data;
				var this3;
				this3 = new Array(0);
				data = this3;
				haxe.ds._Vector.Vector_Impl_.blit(this2.data,0,data,0,Std["int"](Math.min(this2.data.length,0)));
				this2.data = data;
			}
			this2.length = 0;
		}
		0;
		return result;
	}
	,getTextureNames: function(prefix,result) {
		if(prefix == null) prefix = "";
		result = this.getDictionaryKeys(this.mTextures,prefix,result);
		var $it0 = this.mAtlases.iterator();
		while( $it0.hasNext() ) {
			var atlas = $it0.next();
			result = atlas.getNames(prefix,result);
		}
		result.sort(function(a,b) {
			a = a.toLowerCase();
			b = b.toLowerCase();
			if(a < b) return -1;
			if(a > b) return 1;
			return 0;
		});
		return result;
	}
	,getTextureAtlas: function(name) {
		return this.mAtlases.get(name);
	}
	,getSound: function(name) {
		return this.mSounds.get(name);
	}
	,getSoundNames: function(prefix,result) {
		if(prefix == null) prefix = "";
		return this.getDictionaryKeys(this.mSounds,prefix,result);
	}
	,playSound: function(name,startTime,loops,transform) {
		if(loops == null) loops = 0;
		if(startTime == null) startTime = 0;
		if(this.mSounds.exists(name)) return this.getSound(name).play(startTime,loops,transform); else return null;
	}
	,getXml: function(name) {
		return this.mXmls.get(name);
	}
	,getXmlNames: function(prefix,result) {
		if(prefix == null) prefix = "";
		return this.getDictionaryKeys(this.mXmls,prefix,result);
	}
	,getObject: function(name) {
		return this.mObjects.get(name);
	}
	,getObjectNames: function(prefix,result) {
		if(prefix == null) prefix = "";
		return this.getDictionaryKeys(this.mObjects,prefix,result);
	}
	,getByteArray: function(name) {
		return this.mByteArrays.get(name);
	}
	,getByteArrayNames: function(prefix,result) {
		if(prefix == null) prefix = "";
		return this.getDictionaryKeys(this.mByteArrays,prefix,result);
	}
	,addTexture: function(name,texture) {
		this.log("Adding texture '" + name + "'");
		if(this.mTextures.exists(name)) {
			this.log("Warning: name was already in use; the previous texture will be replaced.");
			this.mTextures.get(name).dispose();
		}
		this.mTextures.set(name,texture);
		texture;
	}
	,addTextureAtlas: function(name,atlas) {
		this.log("Adding texture atlas '" + name + "'");
		if(this.mAtlases.exists(name)) {
			this.log("Warning: name was already in use; the previous atlas will be replaced.");
			this.mAtlases.get(name).dispose();
		}
		this.mAtlases.set(name,atlas);
		atlas;
	}
	,addSound: function(name,sound) {
		this.log("Adding sound '" + name + "'");
		if(this.mSounds.exists(name)) this.log("Warning: name was already in use; the previous sound will be replaced.");
		this.mSounds.set(name,sound);
		sound;
	}
	,addXml: function(name,xml) {
		this.log("Adding Xml '" + name + "'");
		if(this.mXmls.exists(name)) this.log("Warning: name was already in use; the previous Xml will be replaced.");
		this.mXmls.set(name,xml);
		xml;
	}
	,addObject: function(name,object) {
		this.log("Adding object '" + name + "'");
		if(this.mObjects.exists(name)) this.log("Warning: name was already in use; the previous object will be replaced.");
		var v = object;
		this.mObjects.set(name,v);
		v;
	}
	,addByteArray: function(name,byteArray) {
		this.log("Adding byte array '" + name + "'");
		if(this.mByteArrays.exists(name)) {
			this.log("Warning: name was already in use; the previous byte array will be replaced.");
			this.mByteArrays.get(name).clear();
		}
		this.mByteArrays.set(name,byteArray);
		byteArray;
	}
	,removeTexture: function(name,dispose) {
		if(dispose == null) dispose = true;
		this.log("Removing texture '" + name + "'");
		if(dispose && this.mTextures.exists(name)) this.mTextures.get(name).dispose();
		this.mTextures.remove(name);
	}
	,removeTextureAtlas: function(name,dispose) {
		if(dispose == null) dispose = true;
		this.log("Removing texture atlas '" + name + "'");
		if(dispose && this.mAtlases.exists(name)) this.mAtlases.get(name).dispose();
		this.mAtlases.remove(name);
	}
	,removeSound: function(name) {
		this.log("Removing sound '" + name + "'");
		this.mSounds.remove(name);
	}
	,removeXml: function(name,dispose) {
		if(dispose == null) dispose = true;
		this.log("Removing xml '" + name + "'");
		if(dispose && this.mXmls.exists(name)) this.mXmls.remove(name);
	}
	,removeObject: function(name) {
		this.log("Removing object '" + name + "'");
		this.mObjects.remove(name);
	}
	,removeByteArray: function(name,dispose) {
		if(dispose == null) dispose = true;
		this.log("Removing byte array '" + name + "'");
		if(dispose && this.mByteArrays.exists(name)) this.mByteArrays.get(name).clear();
		this.mByteArrays.remove(name);
	}
	,purgeQueue: function() {
		var this1 = this.mQueue;
		if(!this1.fixed) {
			if(0 > this1.length) {
				var data;
				var this2;
				this2 = new Array(0);
				data = this2;
				haxe.ds._Vector.Vector_Impl_.blit(this1.data,0,data,0,Std["int"](Math.min(this1.data.length,0)));
				this1.data = data;
			}
			this1.length = 0;
		}
		0;
		this.dispatchEventWith(starling.events.Event.CANCEL);
	}
	,purge: function() {
		this.log("Purging all assets, emptying queue");
		this.purgeQueue();
		this.dispose();
		this.mTextures = new haxe.ds.StringMap();
		this.mAtlases = new haxe.ds.StringMap();
		this.mSounds = new haxe.ds.StringMap();
		this.mXmls = new haxe.ds.StringMap();
		this.mObjects = new haxe.ds.StringMap();
		this.mByteArrays = new haxe.ds.StringMap();
	}
	,enqueue: function(rawAssets) {
		haxe.Log.trace("FIX",{ fileName : "AssetManager.hx", lineNumber : 517, className : "starling.utils.AssetManager", methodName : "enqueue"});
		if((rawAssets instanceof Array) && rawAssets.__enum__ == null) {
			var rawAssetsArray = rawAssets;
			var _g1 = 0;
			var _g = rawAssetsArray.length;
			while(_g1 < _g) {
				var i = _g1++;
				this.enqueueItem(rawAssetsArray[i]);
			}
		} else this.enqueueItem(rawAssets);
	}
	,enqueueItem: function(rawAssets) {
		var fields = Reflect.fields(rawAssets);
		var _g = 0;
		while(_g < fields.length) {
			var field = fields[_g];
			++_g;
			var child = Reflect.getProperty(rawAssets,field);
			if((child instanceof Array) && child.__enum__ == null) this.enqueue(child); else if(typeof(child) == "string" || js.Boot.__instanceof(child,openfl.net.URLRequest)) this.enqueueWithName(child); else this.log("Ignoring unsupported asset type: " + Type.getClassName(Type.getClass(child)));
		}
	}
	,enqueueWithName: function(asset,name,options) {
		haxe.Log.trace("CHECK",{ fileName : "AssetManager.hx", lineNumber : 597, className : "starling.utils.AssetManager", methodName : "enqueueWithName"});
		if(Type.getClassName(Type.getClass(asset)) == "flash.filesystem.File") asset = StringTools.urlDecode(Reflect.getProperty(asset,"url"));
		if(name == null) name = this.getName(asset);
		if(options == null) options = this.mDefaultTextureOptions.clone(); else options = options.clone();
		this.log("Enqueuing '" + name + "'");
		var this1 = this.mQueue;
		if(!this1.fixed) {
			this1.length++;
			if(this1.data.length < this1.length) {
				var data;
				var this2;
				this2 = new Array(this1.data.length + 10);
				data = this2;
				haxe.ds._Vector.Vector_Impl_.blit(this1.data,0,data,0,this1.data.length);
				this1.data = data;
			}
			this1.data[this1.length - 1] = { name : name, asset : asset, options : options};
		}
		this1.length;
		return name;
	}
	,loadQueue: function(onProgress) {
		var _g = this;
		if(onProgress == null) throw new openfl.errors.ArgumentError("Argument 'onProgress' must not be null");
		if(this.mQueue.length == 0) {
			onProgress(1.0);
			return;
		}
		this.mStarling = starling.core.Starling.get_current();
		if(this.mStarling == null || this.mStarling.get_context() == null) throw new openfl.errors.Error("The Starling instance needs to be ready before assets can be loaded.");
		var PROGRESS_PART_ASSETS = 0.9;
		var PROGRESS_PART_XMLS = 1.0 - PROGRESS_PART_ASSETS;
		var i;
		var canceled = false;
		var xmls = new Array();
		var assetInfos;
		var this1 = this.mQueue;
		var a;
		var this2;
		var this3;
		this3 = new openfl.VectorData();
		var this4;
		this4 = new Array(0);
		this3.data = this4;
		this3.length = 0;
		this3.fixed = false;
		this2 = this3;
		a = this2;
		var vectorData = new openfl.VectorData();
		if(a != null) vectorData.length = this1.length + a.length; else vectorData.length = this1.length;
		vectorData.fixed = false;
		var this5;
		this5 = new Array(vectorData.length);
		vectorData.data = this5;
		haxe.ds._Vector.Vector_Impl_.blit(this1.data,0,vectorData.data,0,this1.length);
		if(a != null) haxe.ds._Vector.Vector_Impl_.blit(a.data,0,vectorData.data,this1.length,a.length);
		assetInfos = vectorData;
		var assetCount = this.mQueue.length;
		var assetProgress = new Array();
		var assetIndex = 0;
		var updateAssetProgress = null;
		var loadQueueElement = null;
		var loadNextQueueElement = null;
		var processXmls = null;
		var processXml = null;
		var cancel = null;
		var finish = null;
		updateAssetProgress = function(index,progress) {
			assetProgress[index] = progress;
			var sum = 0.0;
			var len = assetProgress.length;
			var _g1 = 0;
			while(_g1 < len) {
				var i1 = _g1++;
				sum += assetProgress[i1];
			}
			onProgress(sum / len * PROGRESS_PART_ASSETS);
		};
		loadQueueElement = function(index1,assetInfo) {
			if(canceled) return;
			var onElementProgress = function(progress1) {
				updateAssetProgress(index1,progress1 * 0.8);
			};
			var onElementLoaded = function() {
				updateAssetProgress(index1,1.0);
				assetCount--;
				if(assetCount > 0) loadNextQueueElement(); else processXmls();
			};
			_g.processRawAsset(assetInfo.name,assetInfo.asset,assetInfo.options,xmls,onElementProgress,onElementLoaded);
		};
		loadNextQueueElement = function() {
			if(assetIndex < assetInfos.length) {
				var index2 = assetIndex++;
				loadQueueElement(index2,assetInfos.data[index2]);
			}
		};
		processXmls = function() {
			haxe.Log.trace("FIX",{ fileName : "AssetManager.hx", lineNumber : 717, className : "starling.utils.AssetManager", methodName : "loadQueue"});
			haxe.Timer.delay(function() {
				processXml(0);
			},1);
		};
		processXml = function(index3) {
			if(canceled) return; else if(index3 == xmls.length) {
				finish();
				return;
			}
			haxe.Log.trace("FIX",{ fileName : "AssetManager.hx", lineNumber : 737, className : "starling.utils.AssetManager", methodName : "loadQueue"});
			var name;
			var texture;
			var xml = xmls[index3];
			var rootNode = "";
			var xmlProgress = (index3 + 1) / (xmls.length + 1);
			var firstElement = xml.firstElement();
			if(firstElement.nodeType == Xml.Element) rootNode = firstElement.get_nodeName();
			if(rootNode == "TextureAtlas") {
				name = firstElement.get("imagePath").split(".")[0];
				texture = _g.getTexture(name);
				if(texture != null) {
					_g.addTextureAtlas(name,new starling.textures.TextureAtlas(texture,xml));
					_g.removeTexture(name,false);
					if(_g.mKeepAtlasXmls) _g.addXml(name,xml);
				} else _g.log("Cannot create atlas: texture '" + name + "' is missing.");
			} else if(rootNode == "font") {
				name = "";
				var $it0 = xml.elementsNamed("font");
				while( $it0.hasNext() ) {
					var font = $it0.next();
					if(font.nodeType == Xml.Element) {
						var $it1 = font.elementsNamed("pages");
						while( $it1.hasNext() ) {
							var pages = $it1.next();
							if(pages.nodeType == Xml.Element) {
								var $it2 = pages.elementsNamed("page");
								while( $it2.hasNext() ) {
									var page = $it2.next();
									if(page.nodeType == Xml.Element) name = page.get("file").split(".")[0];
								}
							}
						}
					}
				}
				texture = _g.getTexture(name);
				if(texture != null) {
					_g.log("Adding bitmap font '" + name + "'");
					starling.text.TextField.registerBitmapFont(new starling.text.BitmapFont(texture,xml),name);
					_g.removeTexture(name,false);
					if(_g.mKeepFontXmls) _g.addXml(name,xml);
				} else _g.log("Cannot create bitmap font: texture '" + name + "' is missing.");
			} else throw new openfl.errors.Error("Xml contents not recognized: " + rootNode);
			onProgress(PROGRESS_PART_ASSETS + PROGRESS_PART_XMLS * xmlProgress);
			haxe.Timer.delay(function() {
				processXml(index3 + 1);
			},1);
		};
		cancel = function() {
			_g.removeEventListener(starling.events.Event.CANCEL,cancel);
			_g.mNumLoadingQueues--;
			canceled = true;
		};
		finish = function() {
			openfl.system.System.gc();
			haxe.Timer.delay(function() {
				if(!canceled) {
					cancel();
					onProgress(1.0);
				}
			},1);
		};
		var _g2 = 0;
		while(_g2 < assetCount) {
			var i2 = _g2++;
			assetProgress[i2] = 0.0;
		}
		var _g11 = 0;
		var _g3 = this.mNumConnections;
		while(_g11 < _g3) {
			var i3 = _g11++;
			loadNextQueueElement();
		}
		var this6 = this.mQueue;
		if(!this6.fixed) {
			if(0 > this6.length) {
				var data;
				var this7;
				this7 = new Array(0);
				data = this7;
				haxe.ds._Vector.Vector_Impl_.blit(this6.data,0,data,0,Std["int"](Math.min(this6.data.length,0)));
				this6.data = data;
			}
			this6.length = 0;
		}
		0;
		this.mNumLoadingQueues++;
		this.addEventListener(starling.events.Event.CANCEL,cancel);
	}
	,processRawAsset: function(name,rawAsset,options,xmls,onProgress,onComplete) {
		var _g = this;
		var canceled = false;
		var process = null;
		var progress = null;
		var cancel = null;
		process = function(asset) {
			var texture;
			var bytes;
			var object = null;
			var xml = null;
			_g.mStarling.makeCurrent();
			if(canceled) {
			} else if(asset == null) onComplete(); else if(js.Boot.__instanceof(asset,openfl.media.Sound)) {
				_g.addSound(name,asset);
				onComplete();
			} else if(js.Boot.__instanceof(asset,Xml)) {
				haxe.Log.trace("CHECK",{ fileName : "AssetManager.hx", lineNumber : 878, className : "starling.utils.AssetManager", methodName : "processRawAsset"});
				xml = asset;
				var firstNodeName = "";
				if(xml.firstElement().nodeType == Xml.Element) firstNodeName = xml.firstElement().get_nodeName();
				if(firstNodeName == "TextureAtlas" || firstNodeName == "font") xmls.push(xml); else _g.addXml(name,xml);
				onComplete();
			} else if(starling.core.Starling.get_handleLostContext() && _g.mStarling.get_context().driverInfo == "Disposed") {
				_g.log("Context lost while processing assets, retrying ...");
				haxe.Timer.delay(function() {
					process(asset);
				},1);
				return;
			} else if(js.Boot.__instanceof(asset,openfl.display.Bitmap)) {
				texture = starling.textures.Texture.fromData(asset,options);
				texture.get_root().set_onRestore(function() {
					_g.mNumLostTextures++;
					_g.loadRawAsset(rawAsset,null,function(asset1) {
						try {
							texture.get_root().uploadBitmap(asset1);
						} catch( e ) {
							if( js.Boot.__instanceof(e,openfl.errors.Error) ) {
								_g.log("Texture restoration failed: " + e.message);
							} else throw(e);
						}
						asset1.bitmapData.dispose();
						_g.mNumRestoredTextures++;
						if(_g.mNumLostTextures == _g.mNumRestoredTextures) _g.dispatchEventWith(starling.events.Event.TEXTURES_RESTORED);
					});
				});
				asset.bitmapData.dispose();
				_g.addTexture(name,texture);
				onComplete();
			} else if(js.Boot.__instanceof(asset,openfl.display.BitmapData)) {
				texture = starling.textures.Texture.fromData(asset,options);
				texture.get_root().set_onRestore(function() {
					_g.mNumLostTextures++;
					_g.loadRawAsset(rawAsset,null,function(asset2) {
						try {
							texture.get_root().uploadBitmapData(asset2);
						} catch( e1 ) {
							if( js.Boot.__instanceof(e1,openfl.errors.Error) ) {
								_g.log("Texture restoration failed: " + e1.message);
							} else throw(e1);
						}
						asset2.dispose();
						_g.mNumRestoredTextures++;
						if(_g.mNumLostTextures == _g.mNumRestoredTextures) _g.dispatchEventWith(starling.events.Event.TEXTURES_RESTORED);
					});
				});
				asset.dispose();
				_g.addTexture(name,texture);
				onComplete();
			} else if(js.Boot.__instanceof(asset,lime.utils.ByteArray)) {
				bytes = asset;
				if(starling.textures.AtfData.isAtfData(bytes)) {
					options.set_onReady(_g.prependCallback(options.get_onReady(),onComplete));
					texture = starling.textures.Texture.fromData(bytes,options);
					texture.get_root().set_onRestore(function() {
						_g.mNumLostTextures++;
						_g.loadRawAsset(rawAsset,null,function(asset3) {
							try {
								texture.get_root().uploadAtfData(asset3,0,true);
							} catch( e2 ) {
								if( js.Boot.__instanceof(e2,openfl.errors.Error) ) {
									_g.log("Texture restoration failed: " + e2.message);
								} else throw(e2);
							}
							asset3.clear();
							_g.mNumRestoredTextures++;
							if(_g.mNumLostTextures == _g.mNumRestoredTextures) _g.dispatchEventWith(starling.events.Event.TEXTURES_RESTORED);
						});
					});
					bytes.clear();
					_g.addTexture(name,texture);
				} else if(_g.byteArrayStartsWith(bytes,"{") || _g.byteArrayStartsWith(bytes,"[")) haxe.Log.trace("FIX",{ fileName : "AssetManager.hx", lineNumber : 976, className : "starling.utils.AssetManager", methodName : "processRawAsset"}); else if(_g.byteArrayStartsWith(bytes,"<")) haxe.Log.trace("FIX",{ fileName : "AssetManager.hx", lineNumber : 991, className : "starling.utils.AssetManager", methodName : "processRawAsset"}); else {
					_g.addByteArray(name,bytes);
					onComplete();
				}
			} else {
				_g.addObject(name,asset);
				onComplete();
			}
			asset = null;
			bytes = null;
			_g.removeEventListener(starling.events.Event.CANCEL,cancel);
		};
		progress = function(ratio) {
			if(!canceled) onProgress(ratio);
		};
		cancel = function() {
			canceled = true;
		};
		this.addEventListener(starling.events.Event.CANCEL,cancel);
		this.loadRawAsset(rawAsset,progress,process);
	}
	,loadRawAsset: function(rawAsset,onProgress,onComplete) {
		var _g = this;
		var onIoError = null;
		var onSecurityError = null;
		var onHttpResponseStatus = null;
		var onLoadProgress = null;
		var onUrlLoaderComplete = null;
		var onLoaderComplete = null;
		var complete = null;
		var extension = null;
		var loaderInfo = null;
		var urlLoader = null;
		var urlRequest = null;
		var url = null;
		onIoError = function(event) {
			_g.log("IO error: " + event.text);
			_g.dispatchEventWith(starling.events.Event.IO_ERROR,false,url);
			complete(null);
		};
		onSecurityError = function(event1) {
			_g.log("security error: " + event1.text);
			_g.dispatchEventWith(starling.events.Event.SECURITY_ERROR,false,url);
			complete(null);
		};
		onHttpResponseStatus = function(event2) {
			haxe.Log.trace("FIX",{ fileName : "AssetManager.hx", lineNumber : 1082, className : "starling.utils.AssetManager", methodName : "loadRawAsset"});
		};
		onLoadProgress = function(event3) {
			if(onProgress != null && event3.bytesTotal > 0) onProgress(event3.bytesLoaded / event3.bytesTotal);
		};
		onUrlLoaderComplete = function(event4) {
			var bytes = _g.transformData(urlLoader.data,url);
			var sound;
			if(bytes == null) {
				complete(null);
				return;
			}
			if(extension != null) extension = extension.toLowerCase();
			switch(extension) {
			case "mpeg":
				break;
			case "mp3":
				sound = new openfl.media.Sound();
				sound.loadCompressedDataFromByteArray(bytes,bytes.length);
				bytes.clear();
				complete(sound);
				break;
			case "jpg":
				break;
			case "jpeg":
				break;
			case "png":
				break;
			case "gif":
				var loaderContext = new openfl.system.LoaderContext(_g.mCheckPolicyFile);
				var loader = new openfl.display.Loader();
				loaderInfo = loader.contentLoaderInfo;
				loaderInfo.addEventListener(openfl.events.IOErrorEvent.IO_ERROR,onIoError);
				loaderInfo.addEventListener(starling.events.Event.COMPLETE,onLoaderComplete);
				loader.loadBytes(bytes);
				break;
			default:
				complete(bytes);
			}
		};
		onLoaderComplete = function(event5) {
			urlLoader.data.clear();
			complete(event5.target.content);
		};
		complete = function(asset) {
			if(urlLoader != null) {
				urlLoader.removeEventListener(openfl.events.IOErrorEvent.IO_ERROR,onIoError);
				urlLoader.removeEventListener(openfl.events.SecurityErrorEvent.SECURITY_ERROR,onSecurityError);
				urlLoader.removeEventListener(starling.utils.AssetManager.HTTP_RESPONSE_STATUS,onHttpResponseStatus);
				urlLoader.removeEventListener(openfl.events.ProgressEvent.PROGRESS,onLoadProgress);
				urlLoader.removeEventListener(starling.events.Event.COMPLETE,onUrlLoaderComplete);
			}
			if(loaderInfo != null) {
				loaderInfo.removeEventListener(openfl.events.IOErrorEvent.IO_ERROR,onIoError);
				loaderInfo.removeEventListener(starling.events.Event.COMPLETE,onLoaderComplete);
			}
			haxe.Log.trace("SystemUtil.isDesktop = " + Std.string(starling.utils.SystemUtil.get_isDesktop()),{ fileName : "AssetManager.hx", lineNumber : 1165, className : "starling.utils.AssetManager", methodName : "loadRawAsset"});
			haxe.Log.trace("CHECK THIS IS NEEDED",{ fileName : "AssetManager.hx", lineNumber : 1167, className : "starling.utils.AssetManager", methodName : "loadRawAsset"});
			onComplete(asset);
		};
		if(js.Boot.__instanceof(rawAsset,Class)) haxe.Timer.delay(function() {
			complete(Type.createInstance(rawAsset,[]));
		},1); else if(typeof(rawAsset) == "string" || js.Boot.__instanceof(rawAsset,openfl.net.URLRequest)) {
			if(typeof(rawAsset) == "string") urlRequest = new openfl.net.URLRequest(rawAsset); else urlRequest = rawAsset;
			url = urlRequest.url;
			extension = this.getExtensionFromUrl(url);
			urlLoader = new openfl.net.URLLoader();
			urlLoader.set_dataFormat(openfl.net.URLLoaderDataFormat.BINARY);
			urlLoader.addEventListener(openfl.events.IOErrorEvent.IO_ERROR,onIoError);
			urlLoader.addEventListener(openfl.events.SecurityErrorEvent.SECURITY_ERROR,onSecurityError);
			urlLoader.addEventListener(starling.utils.AssetManager.HTTP_RESPONSE_STATUS,onHttpResponseStatus);
			urlLoader.addEventListener(openfl.events.ProgressEvent.PROGRESS,onLoadProgress);
			urlLoader.addEventListener(starling.events.Event.COMPLETE,onUrlLoaderComplete);
			urlLoader.load(urlRequest);
		} else if(js.Boot.__instanceof(rawAsset,Dynamic)) haxe.Timer.delay(function() {
			complete(rawAsset);
		},1);
	}
	,getName: function(rawAsset) {
		var name = null;
		if(typeof(rawAsset) == "string") name = js.Boot.__cast(rawAsset , String); else if(js.Boot.__instanceof(rawAsset,openfl.net.URLRequest)) name = (js.Boot.__cast(rawAsset , openfl.net.URLRequest)).url;
		if(name != null) {
			name = StringTools.replace(name,"%20"," ");
			name = this.getBasenameFromUrl(name);
			if(name != null) return name; else throw new openfl.errors.ArgumentError("Could not extract name from String '" + Std.string(rawAsset) + "'");
		} else {
			name = Type.getClassName(Type.getClass(rawAsset));
			throw new openfl.errors.ArgumentError("Cannot extract names for objects of type '" + name + "'");
		}
	}
	,transformData: function(data,url) {
		return data;
	}
	,log: function(message) {
		if(this.mVerbose) haxe.Log.trace("[AssetManager]",{ fileName : "AssetManager.hx", lineNumber : 1257, className : "starling.utils.AssetManager", methodName : "log", customParams : [message]});
	}
	,byteArrayStartsWith: function(bytes,$char) {
		var start = 0;
		var length = bytes.length;
		var wanted = HxOverrides.cca($char,0);
		var b0 = 0;
		var b1 = 0;
		var b2 = 0;
		var b3 = 0;
		var pass = false;
		if(pass == false && length >= 4) {
			bytes.position = 0;
			b0 = bytes.readByte();
			b1 = bytes.readByte();
			b2 = bytes.readByte();
			b3 = bytes.readByte();
			if(b0 == 0 && b1 == 0 && b2 == 254 && b3 == 255 || b0 == 255 && b1 == 254 && b2 == 0 && b3 == 0) {
				start = 4;
				pass = true;
			}
		}
		if(pass == false && length >= 3) {
			bytes.position = 0;
			b0 = bytes.readByte();
			b1 = bytes.readByte();
			b2 = bytes.readByte();
			if(b0 == 239 && b1 == 187 && b2 == 191) {
				start = 3;
				pass = true;
			}
		}
		if(pass == false && length >= 2) {
			bytes.position = 0;
			b0 = bytes.readByte();
			b1 = bytes.readByte();
			if(b0 == 254 && b1 == 255 || b0 == 255 && b1 == 254) {
				start = 2;
				pass = true;
			}
		}
		bytes.position = start;
		var _g = start;
		while(_g < length) {
			var i = _g++;
			var $byte = bytes.readByte();
			if($byte == 0 || $byte == 10 || $byte == 13 || $byte == 32) continue; else return $byte == wanted;
		}
		return false;
	}
	,getDictionaryKeys: function(map,prefix,result) {
		if(prefix == null) prefix = "";
		if(result == null) result = new Array();
		haxe.Log.trace("CHECK!",{ fileName : "AssetManager.hx", lineNumber : 1326, className : "starling.utils.AssetManager", methodName : "getDictionaryKeys"});
		var $it0 = map.keys();
		while( $it0.hasNext() ) {
			var key = $it0.next();
			if(key.indexOf(prefix) == 0) result.push(key);
		}
		haxe.Log.trace("CHECK Array.CASEINSENSITIVE is needed",{ fileName : "AssetManager.hx", lineNumber : 1341, className : "starling.utils.AssetManager", methodName : "getDictionaryKeys"});
		return result;
	}
	,getHttpHeader: function(headers,headerName) {
		if(headers != null) {
			var _g1 = 0;
			var _g = headers.length;
			while(_g1 < _g) {
				var i = _g1++;
				var header = headers[i];
				if(Reflect.getProperty(header,"name") == headerName) return Reflect.getProperty(header,"value");
			}
		}
		return null;
	}
	,getBasenameFromUrl: function(url) {
		haxe.Log.trace("RESTORE REGEX",{ fileName : "AssetManager.hx", lineNumber : 1364, className : "starling.utils.AssetManager", methodName : "getBasenameFromUrl"});
		var split = url.split("/");
		var returnVal = split[split.length - 1];
		var split1 = url.split(".");
		return split1[0];
	}
	,getExtensionFromUrl: function(url) {
		haxe.Log.trace("RESTORE REGEX",{ fileName : "AssetManager.hx", lineNumber : 1377, className : "starling.utils.AssetManager", methodName : "getExtensionFromUrl"});
		var split = url.split("/");
		var returnVal = split[split.length - 1];
		var split1 = url.split(".");
		return split1[split1.length - 1];
	}
	,prependCallback: function(oldCallback,newCallback) {
		if(oldCallback == null) return newCallback; else if(newCallback == null) return oldCallback; else return function() {
			newCallback();
			oldCallback();
		};
	}
	,get_queue: function() {
		var this1 = this.mQueue;
		var value = new Array();
		var _g1 = 0;
		var _g = this1.data.length;
		while(_g1 < _g) {
			var i = _g1++;
			value.push(this1.data[i]);
		}
		return value;
	}
	,get_numQueuedAssets: function() {
		return this.mQueue.length;
	}
	,get_verbose: function() {
		return this.mVerbose;
	}
	,set_verbose: function(value) {
		this.mVerbose = value;
		return value;
	}
	,get_isLoading: function() {
		return this.mNumLoadingQueues > 0;
	}
	,get_useMipMaps: function() {
		return this.mDefaultTextureOptions.get_mipMapping();
	}
	,set_useMipMaps: function(value) {
		this.mDefaultTextureOptions.set_mipMapping(value);
		return value;
	}
	,get_textureRepeat: function() {
		return this.mDefaultTextureOptions.get_repeat();
	}
	,set_textureRepeat: function(value) {
		this.mDefaultTextureOptions.set_repeat(value);
		return value;
	}
	,get_scaleFactor: function() {
		return this.mDefaultTextureOptions.get_scale();
	}
	,set_scaleFactor: function(value) {
		this.mDefaultTextureOptions.set_scale(value);
		return value;
	}
	,get_textureFormat: function() {
		return this.mDefaultTextureOptions.get_format();
	}
	,set_textureFormat: function(value) {
		this.mDefaultTextureOptions.set_format(value);
		return value;
	}
	,get_checkPolicyFile: function() {
		return this.mCheckPolicyFile;
	}
	,set_checkPolicyFile: function(value) {
		this.mCheckPolicyFile = value;
		return value;
	}
	,get_keepAtlasXmls: function() {
		return this.mKeepAtlasXmls;
	}
	,set_keepAtlasXmls: function(value) {
		this.mKeepAtlasXmls = value;
		return value;
	}
	,get_keepFontXmls: function() {
		return this.mKeepFontXmls;
	}
	,set_keepFontXmls: function(value) {
		this.mKeepFontXmls = value;
		return value;
	}
	,get_numConnections: function() {
		return this.mNumConnections;
	}
	,set_numConnections: function(value) {
		this.mNumConnections = value;
		return value;
	}
	,__class__: starling.utils.AssetManager
	,__properties__: {set_numConnections:"set_numConnections",get_numConnections:"get_numConnections",set_keepFontXmls:"set_keepFontXmls",get_keepFontXmls:"get_keepFontXmls",set_keepAtlasXmls:"set_keepAtlasXmls",get_keepAtlasXmls:"get_keepAtlasXmls",set_checkPolicyFile:"set_checkPolicyFile",get_checkPolicyFile:"get_checkPolicyFile",set_textureFormat:"set_textureFormat",get_textureFormat:"get_textureFormat",set_scaleFactor:"set_scaleFactor",get_scaleFactor:"get_scaleFactor",set_textureRepeat:"set_textureRepeat",get_textureRepeat:"get_textureRepeat",set_useMipMaps:"set_useMipMaps",get_useMipMaps:"get_useMipMaps",get_isLoading:"get_isLoading",set_verbose:"set_verbose",get_verbose:"get_verbose",get_numQueuedAssets:"get_numQueuedAssets",get_queue:"get_queue"}
});
starling.utils.Color = function() {
	throw new starling.errors.AbstractClassError();
};
$hxClasses["starling.utils.Color"] = starling.utils.Color;
starling.utils.Color.__name__ = ["starling","utils","Color"];
starling.utils.Color.getAlpha = function(color) {
	return color >> 24 & 255;
};
starling.utils.Color.getRed = function(color) {
	return color >> 16 & 255;
};
starling.utils.Color.getGreen = function(color) {
	return color >> 8 & 255;
};
starling.utils.Color.getBlue = function(color) {
	return color & 255;
};
starling.utils.Color.rgb = function(red,green,blue) {
	return red << 16 | green << 8 | blue;
};
starling.utils.Color.argb = function(alpha,red,green,blue) {
	return alpha << 24 | red << 16 | green << 8 | blue;
};
starling.utils.Color.prototype = {
	__class__: starling.utils.Color
};
starling.utils.HAlign = $hxClasses["starling.utils.HAlign"] = { __ename__ : ["starling","utils","HAlign"], __constructs__ : ["LEFT","RIGHT","CENTER"] };
starling.utils.HAlign.LEFT = ["LEFT",0];
starling.utils.HAlign.LEFT.toString = $estr;
starling.utils.HAlign.LEFT.__enum__ = starling.utils.HAlign;
starling.utils.HAlign.RIGHT = ["RIGHT",1];
starling.utils.HAlign.RIGHT.toString = $estr;
starling.utils.HAlign.RIGHT.__enum__ = starling.utils.HAlign;
starling.utils.HAlign.CENTER = ["CENTER",2];
starling.utils.HAlign.CENTER.toString = $estr;
starling.utils.HAlign.CENTER.__enum__ = starling.utils.HAlign;
starling.utils.HAlign.__empty_constructs__ = [starling.utils.HAlign.LEFT,starling.utils.HAlign.RIGHT,starling.utils.HAlign.CENTER];
starling.utils.MathUtil = function() {
	throw new starling.errors.AbstractClassError();
};
$hxClasses["starling.utils.MathUtil"] = starling.utils.MathUtil;
starling.utils.MathUtil.__name__ = ["starling","utils","MathUtil"];
starling.utils.MathUtil.intersectLineWithXYPlane = function(pointA,pointB,resultPoint) {
	if(resultPoint == null) resultPoint = new openfl.geom.Point();
	var vectorX = pointB.x - pointA.x;
	var vectorY = pointB.y - pointA.y;
	var vectorZ = pointB.z - pointA.z;
	var lambda = -pointA.z / vectorZ;
	resultPoint.x = pointA.x + lambda * vectorX;
	resultPoint.y = pointA.y + lambda * vectorY;
	return resultPoint;
};
starling.utils.MathUtil.normalizeAngle = function(angle) {
	angle = angle % starling.utils.MathUtil.TWO_PI;
	if(angle < -Math.PI) angle += starling.utils.MathUtil.TWO_PI;
	if(angle > Math.PI) angle -= starling.utils.MathUtil.TWO_PI;
	return angle;
};
starling.utils.MathUtil.clamp = function(value,min,max) {
	if(value < min) return min; else if(value > max) return max; else return value;
};
starling.utils.MathUtil.prototype = {
	__class__: starling.utils.MathUtil
};
starling.utils.MatrixUtil = function() {
	throw new starling.errors.AbstractClassError();
};
$hxClasses["starling.utils.MatrixUtil"] = starling.utils.MatrixUtil;
starling.utils.MatrixUtil.__name__ = ["starling","utils","MatrixUtil"];
starling.utils.MatrixUtil.__properties__ = {get_sRawData:"get_sRawData"}
starling.utils.MatrixUtil._sRawData = null;
starling.utils.MatrixUtil.sRawData = null;
starling.utils.MatrixUtil.convertTo3D = function(matrix,resultMatrix) {
	if(resultMatrix == null) resultMatrix = new openfl.geom.Matrix3D();
	var this1 = starling.utils.MatrixUtil.get_sRawData();
	if(!this1.fixed) {
		if(0 >= this1.length) this1.length = 1;
		if(this1.data.length < this1.length) {
			var data;
			var this2;
			this2 = new Array(this1.data.length + 10);
			data = this2;
			haxe.ds._Vector.Vector_Impl_.blit(this1.data,0,data,0,this1.data.length);
			this1.data = data;
		}
	}
	this1.data[0] = matrix.a;
	var this3 = starling.utils.MatrixUtil.get_sRawData();
	if(!this3.fixed) {
		if(1 >= this3.length) this3.length = 2;
		if(this3.data.length < this3.length) {
			var data1;
			var this4;
			this4 = new Array(this3.data.length + 10);
			data1 = this4;
			haxe.ds._Vector.Vector_Impl_.blit(this3.data,0,data1,0,this3.data.length);
			this3.data = data1;
		}
	}
	this3.data[1] = matrix.b;
	var this5 = starling.utils.MatrixUtil.get_sRawData();
	if(!this5.fixed) {
		if(4 >= this5.length) this5.length = 5;
		if(this5.data.length < this5.length) {
			var data2;
			var this6;
			this6 = new Array(this5.data.length + 10);
			data2 = this6;
			haxe.ds._Vector.Vector_Impl_.blit(this5.data,0,data2,0,this5.data.length);
			this5.data = data2;
		}
	}
	this5.data[4] = matrix.c;
	var this7 = starling.utils.MatrixUtil.get_sRawData();
	if(!this7.fixed) {
		if(5 >= this7.length) this7.length = 6;
		if(this7.data.length < this7.length) {
			var data3;
			var this8;
			this8 = new Array(this7.data.length + 10);
			data3 = this8;
			haxe.ds._Vector.Vector_Impl_.blit(this7.data,0,data3,0,this7.data.length);
			this7.data = data3;
		}
	}
	this7.data[5] = matrix.d;
	var this9 = starling.utils.MatrixUtil.get_sRawData();
	if(!this9.fixed) {
		if(12 >= this9.length) this9.length = 13;
		if(this9.data.length < this9.length) {
			var data4;
			var this10;
			this10 = new Array(this9.data.length + 10);
			data4 = this10;
			haxe.ds._Vector.Vector_Impl_.blit(this9.data,0,data4,0,this9.data.length);
			this9.data = data4;
		}
	}
	this9.data[12] = matrix.tx;
	var this11 = starling.utils.MatrixUtil.get_sRawData();
	if(!this11.fixed) {
		if(13 >= this11.length) this11.length = 14;
		if(this11.data.length < this11.length) {
			var data5;
			var this12;
			this12 = new Array(this11.data.length + 10);
			data5 = this12;
			haxe.ds._Vector.Vector_Impl_.blit(this11.data,0,data5,0,this11.data.length);
			this11.data = data5;
		}
	}
	this11.data[13] = matrix.ty;
	resultMatrix.copyRawDataFrom(starling.utils.MatrixUtil.get_sRawData());
	return resultMatrix;
};
starling.utils.MatrixUtil.convertTo2D = function(matrix3D,resultMatrix) {
	if(resultMatrix == null) resultMatrix = new openfl.geom.Matrix();
	matrix3D.copyRawDataTo(starling.utils.MatrixUtil.sRawData2);
	resultMatrix.a = starling.utils.MatrixUtil.sRawData2.data[0];
	resultMatrix.b = starling.utils.MatrixUtil.sRawData2.data[1];
	resultMatrix.c = starling.utils.MatrixUtil.sRawData2.data[4];
	resultMatrix.d = starling.utils.MatrixUtil.sRawData2.data[5];
	resultMatrix.tx = starling.utils.MatrixUtil.sRawData2.data[12];
	resultMatrix.ty = starling.utils.MatrixUtil.sRawData2.data[13];
	return resultMatrix;
};
starling.utils.MatrixUtil.transformPoint = function(matrix,point,resultPoint) {
	return starling.utils.MatrixUtil.transformCoords(matrix,point.x,point.y,resultPoint);
};
starling.utils.MatrixUtil.transformPoint3D = function(matrix,point,resultPoint) {
	return starling.utils.MatrixUtil.transformCoords3D(matrix,point.x,point.y,point.z,resultPoint);
};
starling.utils.MatrixUtil.transformCoords = function(matrix,x,y,resultPoint) {
	if(resultPoint == null) resultPoint = new openfl.geom.Point();
	resultPoint.x = matrix.a * x + matrix.c * y + matrix.tx;
	resultPoint.y = matrix.d * y + matrix.b * x + matrix.ty;
	return resultPoint;
};
starling.utils.MatrixUtil.transformCoords3D = function(matrix,x,y,z,resultPoint) {
	if(resultPoint == null) resultPoint = new openfl.geom.Vector3D();
	matrix.copyRawDataTo(starling.utils.MatrixUtil.sRawData2);
	resultPoint.x = x * starling.utils.MatrixUtil.sRawData2.data[0] + y * starling.utils.MatrixUtil.sRawData2.data[4] + z * starling.utils.MatrixUtil.sRawData2.data[8] + starling.utils.MatrixUtil.sRawData2.data[12];
	resultPoint.y = x * starling.utils.MatrixUtil.sRawData2.data[1] + y * starling.utils.MatrixUtil.sRawData2.data[5] + z * starling.utils.MatrixUtil.sRawData2.data[9] + starling.utils.MatrixUtil.sRawData2.data[13];
	resultPoint.z = x * starling.utils.MatrixUtil.sRawData2.data[2] + y * starling.utils.MatrixUtil.sRawData2.data[6] + z * starling.utils.MatrixUtil.sRawData2.data[10] + starling.utils.MatrixUtil.sRawData2.data[14];
	resultPoint.w = x * starling.utils.MatrixUtil.sRawData2.data[3] + y * starling.utils.MatrixUtil.sRawData2.data[7] + z * starling.utils.MatrixUtil.sRawData2.data[11] + starling.utils.MatrixUtil.sRawData2.data[15];
	return resultPoint;
};
starling.utils.MatrixUtil.skew = function(matrix,skewX,skewY) {
	var sinX = Math.sin(skewX);
	var cosX = Math.cos(skewX);
	var sinY = Math.sin(skewY);
	var cosY = Math.cos(skewY);
	matrix.setTo(matrix.a * cosY - matrix.b * sinX,matrix.a * sinY + matrix.b * cosX,matrix.c * cosY - matrix.d * sinX,matrix.c * sinY + matrix.d * cosX,matrix.tx * cosY - matrix.ty * sinX,matrix.tx * sinY + matrix.ty * cosX);
};
starling.utils.MatrixUtil.prependMatrix = function(base,prep) {
	base.setTo(base.a * prep.a + base.c * prep.b,base.b * prep.a + base.d * prep.b,base.a * prep.c + base.c * prep.d,base.b * prep.c + base.d * prep.d,base.tx + base.a * prep.tx + base.c * prep.ty,base.ty + base.b * prep.tx + base.d * prep.ty);
};
starling.utils.MatrixUtil.prependTranslation = function(matrix,tx,ty) {
	matrix.tx += matrix.a * tx + matrix.c * ty;
	matrix.ty += matrix.b * tx + matrix.d * ty;
};
starling.utils.MatrixUtil.prependScale = function(matrix,sx,sy) {
	matrix.setTo(matrix.a * sx,matrix.b * sx,matrix.c * sy,matrix.d * sy,matrix.tx,matrix.ty);
};
starling.utils.MatrixUtil.prependRotation = function(matrix,angle) {
	var sin = Math.sin(angle);
	var cos = Math.cos(angle);
	matrix.setTo(matrix.a * cos + matrix.c * sin,matrix.b * cos + matrix.d * sin,matrix.c * cos - matrix.a * sin,matrix.d * cos - matrix.b * sin,matrix.tx,matrix.ty);
};
starling.utils.MatrixUtil.prependSkew = function(matrix,skewX,skewY) {
	var sinX = Math.sin(skewX);
	var cosX = Math.cos(skewX);
	var sinY = Math.sin(skewY);
	var cosY = Math.cos(skewY);
	matrix.setTo(matrix.a * cosY + matrix.c * sinY,matrix.b * cosY + matrix.d * sinY,matrix.c * cosX - matrix.a * sinX,matrix.d * cosX - matrix.b * sinX,matrix.tx,matrix.ty);
};
starling.utils.MatrixUtil.get_sRawData = function() {
	if(starling.utils.MatrixUtil._sRawData == null) {
		var this1;
		this1 = new openfl.VectorData();
		var this2;
		this2 = new Array(0);
		this1.data = this2;
		this1.length = 0;
		this1.fixed = false;
		starling.utils.MatrixUtil._sRawData = this1;
		var this3 = starling.utils.MatrixUtil._sRawData;
		if(!this3.fixed) {
			this3.length++;
			if(this3.data.length < this3.length) {
				var data;
				var this4;
				this4 = new Array(this3.data.length + 10);
				data = this4;
				haxe.ds._Vector.Vector_Impl_.blit(this3.data,0,data,0,this3.data.length);
				this3.data = data;
			}
			this3.data[this3.length - 1] = 1.0;
		}
		this3.length;
		var this5 = starling.utils.MatrixUtil._sRawData;
		if(!this5.fixed) {
			this5.length++;
			if(this5.data.length < this5.length) {
				var data1;
				var this6;
				this6 = new Array(this5.data.length + 10);
				data1 = this6;
				haxe.ds._Vector.Vector_Impl_.blit(this5.data,0,data1,0,this5.data.length);
				this5.data = data1;
			}
			this5.data[this5.length - 1] = 0.0;
		}
		this5.length;
		var this7 = starling.utils.MatrixUtil._sRawData;
		if(!this7.fixed) {
			this7.length++;
			if(this7.data.length < this7.length) {
				var data2;
				var this8;
				this8 = new Array(this7.data.length + 10);
				data2 = this8;
				haxe.ds._Vector.Vector_Impl_.blit(this7.data,0,data2,0,this7.data.length);
				this7.data = data2;
			}
			this7.data[this7.length - 1] = 0.0;
		}
		this7.length;
		var this9 = starling.utils.MatrixUtil._sRawData;
		if(!this9.fixed) {
			this9.length++;
			if(this9.data.length < this9.length) {
				var data3;
				var this10;
				this10 = new Array(this9.data.length + 10);
				data3 = this10;
				haxe.ds._Vector.Vector_Impl_.blit(this9.data,0,data3,0,this9.data.length);
				this9.data = data3;
			}
			this9.data[this9.length - 1] = 0.0;
		}
		this9.length;
		var this11 = starling.utils.MatrixUtil._sRawData;
		if(!this11.fixed) {
			this11.length++;
			if(this11.data.length < this11.length) {
				var data4;
				var this12;
				this12 = new Array(this11.data.length + 10);
				data4 = this12;
				haxe.ds._Vector.Vector_Impl_.blit(this11.data,0,data4,0,this11.data.length);
				this11.data = data4;
			}
			this11.data[this11.length - 1] = 0.0;
		}
		this11.length;
		var this13 = starling.utils.MatrixUtil._sRawData;
		if(!this13.fixed) {
			this13.length++;
			if(this13.data.length < this13.length) {
				var data5;
				var this14;
				this14 = new Array(this13.data.length + 10);
				data5 = this14;
				haxe.ds._Vector.Vector_Impl_.blit(this13.data,0,data5,0,this13.data.length);
				this13.data = data5;
			}
			this13.data[this13.length - 1] = 1.0;
		}
		this13.length;
		var this15 = starling.utils.MatrixUtil._sRawData;
		if(!this15.fixed) {
			this15.length++;
			if(this15.data.length < this15.length) {
				var data6;
				var this16;
				this16 = new Array(this15.data.length + 10);
				data6 = this16;
				haxe.ds._Vector.Vector_Impl_.blit(this15.data,0,data6,0,this15.data.length);
				this15.data = data6;
			}
			this15.data[this15.length - 1] = 0.0;
		}
		this15.length;
		var this17 = starling.utils.MatrixUtil._sRawData;
		if(!this17.fixed) {
			this17.length++;
			if(this17.data.length < this17.length) {
				var data7;
				var this18;
				this18 = new Array(this17.data.length + 10);
				data7 = this18;
				haxe.ds._Vector.Vector_Impl_.blit(this17.data,0,data7,0,this17.data.length);
				this17.data = data7;
			}
			this17.data[this17.length - 1] = 0.0;
		}
		this17.length;
		var this19 = starling.utils.MatrixUtil._sRawData;
		if(!this19.fixed) {
			this19.length++;
			if(this19.data.length < this19.length) {
				var data8;
				var this20;
				this20 = new Array(this19.data.length + 10);
				data8 = this20;
				haxe.ds._Vector.Vector_Impl_.blit(this19.data,0,data8,0,this19.data.length);
				this19.data = data8;
			}
			this19.data[this19.length - 1] = 0.0;
		}
		this19.length;
		var this21 = starling.utils.MatrixUtil._sRawData;
		if(!this21.fixed) {
			this21.length++;
			if(this21.data.length < this21.length) {
				var data9;
				var this22;
				this22 = new Array(this21.data.length + 10);
				data9 = this22;
				haxe.ds._Vector.Vector_Impl_.blit(this21.data,0,data9,0,this21.data.length);
				this21.data = data9;
			}
			this21.data[this21.length - 1] = 0.0;
		}
		this21.length;
		var this23 = starling.utils.MatrixUtil._sRawData;
		if(!this23.fixed) {
			this23.length++;
			if(this23.data.length < this23.length) {
				var data10;
				var this24;
				this24 = new Array(this23.data.length + 10);
				data10 = this24;
				haxe.ds._Vector.Vector_Impl_.blit(this23.data,0,data10,0,this23.data.length);
				this23.data = data10;
			}
			this23.data[this23.length - 1] = 1.0;
		}
		this23.length;
		var this25 = starling.utils.MatrixUtil._sRawData;
		if(!this25.fixed) {
			this25.length++;
			if(this25.data.length < this25.length) {
				var data11;
				var this26;
				this26 = new Array(this25.data.length + 10);
				data11 = this26;
				haxe.ds._Vector.Vector_Impl_.blit(this25.data,0,data11,0,this25.data.length);
				this25.data = data11;
			}
			this25.data[this25.length - 1] = 0.0;
		}
		this25.length;
		var this27 = starling.utils.MatrixUtil._sRawData;
		if(!this27.fixed) {
			this27.length++;
			if(this27.data.length < this27.length) {
				var data12;
				var this28;
				this28 = new Array(this27.data.length + 10);
				data12 = this28;
				haxe.ds._Vector.Vector_Impl_.blit(this27.data,0,data12,0,this27.data.length);
				this27.data = data12;
			}
			this27.data[this27.length - 1] = 0.0;
		}
		this27.length;
		var this29 = starling.utils.MatrixUtil._sRawData;
		if(!this29.fixed) {
			this29.length++;
			if(this29.data.length < this29.length) {
				var data13;
				var this30;
				this30 = new Array(this29.data.length + 10);
				data13 = this30;
				haxe.ds._Vector.Vector_Impl_.blit(this29.data,0,data13,0,this29.data.length);
				this29.data = data13;
			}
			this29.data[this29.length - 1] = 0.0;
		}
		this29.length;
		var this31 = starling.utils.MatrixUtil._sRawData;
		if(!this31.fixed) {
			this31.length++;
			if(this31.data.length < this31.length) {
				var data14;
				var this32;
				this32 = new Array(this31.data.length + 10);
				data14 = this32;
				haxe.ds._Vector.Vector_Impl_.blit(this31.data,0,data14,0,this31.data.length);
				this31.data = data14;
			}
			this31.data[this31.length - 1] = 0.0;
		}
		this31.length;
		var this33 = starling.utils.MatrixUtil._sRawData;
		if(!this33.fixed) {
			this33.length++;
			if(this33.data.length < this33.length) {
				var data15;
				var this34;
				this34 = new Array(this33.data.length + 10);
				data15 = this34;
				haxe.ds._Vector.Vector_Impl_.blit(this33.data,0,data15,0,this33.data.length);
				this33.data = data15;
			}
			this33.data[this33.length - 1] = 1.0;
		}
		this33.length;
	}
	return starling.utils.MatrixUtil._sRawData;
};
starling.utils.MatrixUtil.prototype = {
	__class__: starling.utils.MatrixUtil
};
starling.utils.RectangleUtil = function() {
	throw new starling.errors.AbstractClassError();
};
$hxClasses["starling.utils.RectangleUtil"] = starling.utils.RectangleUtil;
starling.utils.RectangleUtil.__name__ = ["starling","utils","RectangleUtil"];
starling.utils.RectangleUtil.__properties__ = {get_sPositions:"get_sPositions"}
starling.utils.RectangleUtil._sPositions = null;
starling.utils.RectangleUtil.sPositions = null;
starling.utils.RectangleUtil.intersect = function(rect1,rect2,resultRect) {
	if(resultRect == null) resultRect = new openfl.geom.Rectangle();
	var left;
	if(rect1.x > rect2.x) left = rect1.x; else left = rect2.x;
	var right;
	if(rect1.get_right() < rect2.get_right()) right = rect1.get_right(); else right = rect2.get_right();
	var top;
	if(rect1.y > rect2.y) top = rect1.y; else top = rect2.y;
	var bottom;
	if(rect1.get_bottom() < rect2.get_bottom()) bottom = rect1.get_bottom(); else bottom = rect2.get_bottom();
	if(left > right || top > bottom) resultRect.setEmpty(); else resultRect.setTo(left,top,right - left,bottom - top);
	return resultRect;
};
starling.utils.RectangleUtil.fit = function(rectangle,into,scaleMode,pixelPerfect,resultRect) {
	if(pixelPerfect == null) pixelPerfect = false;
	if(scaleMode == null) scaleMode = "showAll";
	if(!starling.utils.ScaleMode.isValid(scaleMode)) throw new openfl.errors.ArgumentError("Invalid scaleMode: " + scaleMode);
	if(resultRect == null) resultRect = new openfl.geom.Rectangle();
	var width = rectangle.width;
	var height = rectangle.height;
	var factorX = into.width / width;
	var factorY = into.height / height;
	var factor = 1.0;
	if(scaleMode == starling.utils.ScaleMode.SHOW_ALL) {
		if(factorX < factorY) factor = factorX; else factor = factorY;
		if(pixelPerfect) factor = starling.utils.RectangleUtil.nextSuitableScaleFactor(factor,false);
	} else if(scaleMode == starling.utils.ScaleMode.NO_BORDER) {
		if(factorX > factorY) factor = factorX; else factor = factorY;
		if(pixelPerfect) factor = starling.utils.RectangleUtil.nextSuitableScaleFactor(factor,true);
	}
	width *= factor;
	height *= factor;
	resultRect.setTo(into.x + (into.width - width) / 2,into.y + (into.height - height) / 2,width,height);
	return resultRect;
};
starling.utils.RectangleUtil.nextSuitableScaleFactor = function(factor,up) {
	var divisor = 1.0;
	if(up) {
		if(factor >= 0.5) return Math.ceil(factor); else while(1.0 / (divisor + 1) > factor) ++divisor;
	} else if(factor >= 1.0) return Math.floor(factor); else while(1.0 / divisor > factor) ++divisor;
	return 1.0 / divisor;
};
starling.utils.RectangleUtil.normalize = function(rect) {
	if(rect.width < 0) {
		rect.width = -rect.width;
		rect.x -= rect.width;
	}
	if(rect.height < 0) {
		rect.height = -rect.height;
		rect.y -= rect.height;
	}
};
starling.utils.RectangleUtil.getBounds = function(rectangle,transformationMatrix,resultRect) {
	if(resultRect == null) resultRect = new openfl.geom.Rectangle();
	var minX = Math.POSITIVE_INFINITY;
	var maxX = Math.NEGATIVE_INFINITY;
	var minY = Math.POSITIVE_INFINITY;
	var maxY = Math.NEGATIVE_INFINITY;
	var _g = 0;
	while(_g < 4) {
		var i = _g++;
		starling.utils.MatrixUtil.transformCoords(transformationMatrix,starling.utils.RectangleUtil.get_sPositions()[i].x * rectangle.width,starling.utils.RectangleUtil.get_sPositions()[i].y * rectangle.height,starling.utils.RectangleUtil.sHelperPoint);
		if(minX > starling.utils.RectangleUtil.sHelperPoint.x) minX = starling.utils.RectangleUtil.sHelperPoint.x;
		if(maxX < starling.utils.RectangleUtil.sHelperPoint.x) maxX = starling.utils.RectangleUtil.sHelperPoint.x;
		if(minY > starling.utils.RectangleUtil.sHelperPoint.y) minY = starling.utils.RectangleUtil.sHelperPoint.y;
		if(maxY < starling.utils.RectangleUtil.sHelperPoint.y) maxY = starling.utils.RectangleUtil.sHelperPoint.y;
	}
	resultRect.setTo(minX,minY,maxX - minX,maxY - minY);
	return resultRect;
};
starling.utils.RectangleUtil.get_sPositions = function() {
	if(starling.utils.RectangleUtil._sPositions == null) {
		starling.utils.RectangleUtil._sPositions = new Array();
		starling.utils.RectangleUtil._sPositions.push(new openfl.geom.Point(0,0));
		starling.utils.RectangleUtil._sPositions.push(new openfl.geom.Point(1,0));
		starling.utils.RectangleUtil._sPositions.push(new openfl.geom.Point(0,1));
		starling.utils.RectangleUtil._sPositions.push(new openfl.geom.Point(1,1));
	}
	return starling.utils.RectangleUtil._sPositions;
};
starling.utils.RectangleUtil.prototype = {
	__class__: starling.utils.RectangleUtil
};
starling.utils.ScaleMode = function() {
	throw new starling.errors.AbstractClassError();
};
$hxClasses["starling.utils.ScaleMode"] = starling.utils.ScaleMode;
starling.utils.ScaleMode.__name__ = ["starling","utils","ScaleMode"];
starling.utils.ScaleMode.isValid = function(scaleMode) {
	return scaleMode == starling.utils.ScaleMode.NONE || scaleMode == starling.utils.ScaleMode.NO_BORDER || scaleMode == starling.utils.ScaleMode.SHOW_ALL;
};
starling.utils.ScaleMode.prototype = {
	__class__: starling.utils.ScaleMode
};
starling.utils.StarlingUtils = function() {
};
$hxClasses["starling.utils.StarlingUtils"] = starling.utils.StarlingUtils;
starling.utils.StarlingUtils.__name__ = ["starling","utils","StarlingUtils"];
starling.utils.StarlingUtils.cleanMasterString = function(str) {
	return HxOverrides.substr("_" + str,1,null);
};
starling.utils.StarlingUtils.deg2rad = function(deg) {
	return deg / 180.0 * Math.PI;
};
starling.utils.StarlingUtils.execute = function(func,args) {
	if(func != null) {
		var i;
		var length = Reflect.getProperty(func,"length");
		var maxNumArgs = args.length;
		var _g = args.length;
		while(_g < maxNumArgs) {
			var i1 = _g++;
			args[i1] = null;
		}
		switch(maxNumArgs) {
		case 0:
			func();
			break;
		case 1:
			func(args[0]);
			break;
		case 2:
			func(args[0],args[1]);
			break;
		case 3:
			func(args[0],args[1],args[2]);
			break;
		case 4:
			func(args[0],args[1],args[2],args[3]);
			break;
		case 5:
			func(args[0],args[1],args[2],args[3],args[4]);
			break;
		case 6:
			func(args[0],args[1],args[2],args[3],args[4],args[5]);
			break;
		case 7:
			func(args[0],args[1],args[2],args[3],args[4],args[5],args[6]);
			break;
		}
	}
};
starling.utils.StarlingUtils.formatString = function(format,args) {
	haxe.Log.trace("CHECK",{ fileName : "StarlingUtils.hx", lineNumber : 80, className : "starling.utils.StarlingUtils", methodName : "formatString"});
	var _g1 = 0;
	var _g = args.length;
	while(_g1 < _g) {
		var i = _g1++;
		var r = new EReg("\\{" + i + "\\}","g");
		format = r.replace(format,args[i]);
	}
	return format;
};
starling.utils.StarlingUtils.getNextPowerOfTwo = function(number) {
	var c1 = ((number | 0) === number);
	var c2 = number > 0;
	var c3 = (number & number - 1) == 0;
	if(c1 && c2 && c3) return number; else {
		var result = 1;
		number -= 0.000000001;
		while(result < number) result <<= 1;
		return result;
	}
};
starling.utils.StarlingUtils.rad2deg = function(rad) {
	return rad / Math.PI * 180.0;
};
starling.utils.StarlingUtils.transformCoords = function(matrix,x,y,resultPoint) {
	if(!starling.utils.StarlingUtils.deprecationNotified) {
		starling.utils.StarlingUtils.deprecationNotified = true;
		haxe.Log.trace("[Starling] The method 'transformCoords' is deprecated. " + "Please use 'MatrixUtil.transformCoords' instead.",{ fileName : "StarlingUtils.hx", lineNumber : 127, className : "starling.utils.StarlingUtils", methodName : "transformCoords"});
	}
	if(resultPoint == null) resultPoint = new openfl.geom.Point();
	resultPoint.x = matrix.a * x + matrix.c * y + matrix.tx;
	resultPoint.y = matrix.d * y + matrix.b * x + matrix.ty;
	return resultPoint;
};
starling.utils.StarlingUtils.prototype = {
	__class__: starling.utils.StarlingUtils
};
starling.utils.SystemUtil = function() {
	throw new starling.errors.AbstractClassError();
};
$hxClasses["starling.utils.SystemUtil"] = starling.utils.SystemUtil;
starling.utils.SystemUtil.__name__ = ["starling","utils","SystemUtil"];
starling.utils.SystemUtil.__properties__ = {get_supportsVideoTexture:"get_supportsVideoTexture",get_supportsDepthAndStencil:"get_supportsDepthAndStencil",get_supportsRelaxedTargetClearRequirement:"get_supportsRelaxedTargetClearRequirement",get_version:"get_version",get_platform:"get_platform",get_isDesktop:"get_isDesktop",get_isAIR:"get_isAIR",get_isApplicationActive:"get_isApplicationActive"}
starling.utils.SystemUtil.sPlatform = null;
starling.utils.SystemUtil.sVersion = null;
starling.utils.SystemUtil.sAIR = null;
starling.utils.SystemUtil.isApplicationActive = null;
starling.utils.SystemUtil.isAIR = null;
starling.utils.SystemUtil.isDesktop = null;
starling.utils.SystemUtil.platform = null;
starling.utils.SystemUtil.version = null;
starling.utils.SystemUtil.supportsRelaxedTargetClearRequirement = null;
starling.utils.SystemUtil.supportsDepthAndStencil = null;
starling.utils.SystemUtil.supportsVideoTexture = null;
starling.utils.SystemUtil.initialize = function() {
	if(starling.utils.SystemUtil.sInitialized) return;
	starling.utils.SystemUtil.sInitialized = true;
	var _this = openfl.system.Capabilities.get_version();
	starling.utils.SystemUtil.sPlatform = HxOverrides.substr(_this,0,3);
	var _this1 = openfl.system.Capabilities.get_version();
	starling.utils.SystemUtil.sVersion = HxOverrides.substr(_this1,4,null);
	haxe.Log.trace("FIX",{ fileName : "SystemUtil.hx", lineNumber : 54, className : "starling.utils.SystemUtil", methodName : "initialize"});
	starling.utils.SystemUtil.sAIR = false;
};
starling.utils.SystemUtil.onActivate = function(event) {
	starling.utils.SystemUtil.sApplicationActive = true;
	var _g = 0;
	var _g1 = starling.utils.SystemUtil.sWaitingCalls;
	while(_g < _g1.length) {
		var call = _g1[_g];
		++_g;
		call[0].apply(null,call[1]);
	}
	starling.utils.SystemUtil.sWaitingCalls = new Array();
};
starling.utils.SystemUtil.onDeactivate = function(event) {
	starling.utils.SystemUtil.sApplicationActive = false;
};
starling.utils.SystemUtil.executeWhenApplicationIsActive = function(call,args) {
	starling.utils.SystemUtil.initialize();
	if(starling.utils.SystemUtil.sApplicationActive) call.apply(null,args); else starling.utils.SystemUtil.sWaitingCalls.push([call,args]);
};
starling.utils.SystemUtil.get_isApplicationActive = function() {
	starling.utils.SystemUtil.initialize();
	return starling.utils.SystemUtil.sApplicationActive;
};
starling.utils.SystemUtil.get_isAIR = function() {
	starling.utils.SystemUtil.initialize();
	return starling.utils.SystemUtil.sAIR;
};
starling.utils.SystemUtil.get_isDesktop = function() {
	starling.utils.SystemUtil.initialize();
	return new EReg("(WIN|MAC|LNX)","").match(starling.utils.SystemUtil.sPlatform);
};
starling.utils.SystemUtil.get_platform = function() {
	starling.utils.SystemUtil.initialize();
	return starling.utils.SystemUtil.sPlatform;
};
starling.utils.SystemUtil.get_version = function() {
	starling.utils.SystemUtil.initialize();
	return starling.utils.SystemUtil.sVersion;
};
starling.utils.SystemUtil.get_supportsRelaxedTargetClearRequirement = function() {
	haxe.Log.trace("FIX",{ fileName : "SystemUtil.hx", lineNumber : 149, className : "starling.utils.SystemUtil", methodName : "get_supportsRelaxedTargetClearRequirement"});
	return true;
};
starling.utils.SystemUtil.get_supportsDepthAndStencil = function() {
	return starling.utils.SystemUtil.sSupportsDepthAndStencil;
};
starling.utils.SystemUtil.get_supportsVideoTexture = function() {
	return Object.prototype.hasOwnProperty.call(openfl.display3D.Context3D,"supportsVideoTexture");
};
starling.utils.SystemUtil.prototype = {
	__class__: starling.utils.SystemUtil
};
starling.utils.VAlign = $hxClasses["starling.utils.VAlign"] = { __ename__ : ["starling","utils","VAlign"], __constructs__ : ["TOP","CENTER","BOTTOM"] };
starling.utils.VAlign.TOP = ["TOP",0];
starling.utils.VAlign.TOP.toString = $estr;
starling.utils.VAlign.TOP.__enum__ = starling.utils.VAlign;
starling.utils.VAlign.CENTER = ["CENTER",1];
starling.utils.VAlign.CENTER.toString = $estr;
starling.utils.VAlign.CENTER.__enum__ = starling.utils.VAlign;
starling.utils.VAlign.BOTTOM = ["BOTTOM",2];
starling.utils.VAlign.BOTTOM.toString = $estr;
starling.utils.VAlign.BOTTOM.__enum__ = starling.utils.VAlign;
starling.utils.VAlign.__empty_constructs__ = [starling.utils.VAlign.TOP,starling.utils.VAlign.CENTER,starling.utils.VAlign.BOTTOM];
starling.utils.VertexData = function(numVertices,premultipliedAlpha) {
	if(premultipliedAlpha == null) premultipliedAlpha = false;
	var this1;
	this1 = new openfl.VectorData();
	var this2;
	this2 = new Array(0);
	this1.data = this2;
	this1.length = 0;
	this1.fixed = false;
	this.mRawData = this1;
	this.mPremultipliedAlpha = premultipliedAlpha;
	this.set_numVertices(numVertices);
};
$hxClasses["starling.utils.VertexData"] = starling.utils.VertexData;
starling.utils.VertexData.__name__ = ["starling","utils","VertexData"];
starling.utils.VertexData.prototype = {
	mRawData: null
	,mPremultipliedAlpha: null
	,mNumVertices: null
	,tinted: null
	,clone: function(vertexID,numVertices) {
		if(numVertices == null) numVertices = -1;
		if(vertexID == null) vertexID = 0;
		if(numVertices < 0 || vertexID + numVertices > this.mNumVertices) numVertices = this.mNumVertices - vertexID;
		var clone = new starling.utils.VertexData(0,this.mPremultipliedAlpha);
		clone.mNumVertices = numVertices;
		var this1 = this.mRawData;
		var pos = vertexID * starling.utils.VertexData.ELEMENTS_PER_VERTEX;
		var end = numVertices * starling.utils.VertexData.ELEMENTS_PER_VERTEX;
		if(pos < 0) pos += this1.length;
		if(end <= 0) end += this1.length;
		if(end > this1.length) end = this1.length;
		var length = end - pos;
		if(length <= 0 || length > this1.length) length = this1.length;
		var vectorData = new openfl.VectorData();
		vectorData.length = end - pos;
		vectorData.fixed = true;
		var this2;
		this2 = new Array(length);
		vectorData.data = this2;
		haxe.ds._Vector.Vector_Impl_.blit(this1.data,pos,vectorData.data,0,length);
		clone.mRawData = vectorData;
		clone.mRawData.fixed = true;
		return clone;
	}
	,copyTo: function(targetData,targetVertexID,vertexID,numVertices) {
		if(numVertices == null) numVertices = -1;
		if(vertexID == null) vertexID = 0;
		if(targetVertexID == null) targetVertexID = 0;
		this.copyTransformedTo(targetData,targetVertexID,null,vertexID,numVertices);
	}
	,copyTransformedTo: function(targetData,targetVertexID,matrix,vertexID,numVertices) {
		if(numVertices == null) numVertices = -1;
		if(vertexID == null) vertexID = 0;
		if(targetVertexID == null) targetVertexID = 0;
		if(numVertices < 0 || vertexID + numVertices > this.mNumVertices) numVertices = this.mNumVertices - vertexID;
		var x;
		var y;
		var targetRawData = targetData.mRawData;
		var targetIndex = targetVertexID * starling.utils.VertexData.ELEMENTS_PER_VERTEX;
		var sourceIndex = vertexID * starling.utils.VertexData.ELEMENTS_PER_VERTEX;
		var sourceEnd = (vertexID + numVertices) * starling.utils.VertexData.ELEMENTS_PER_VERTEX;
		if(matrix != null) while(sourceIndex < sourceEnd) {
			var index = sourceIndex++;
			x = this.mRawData.data[index];
			var index1 = sourceIndex++;
			y = this.mRawData.data[index1];
			var key = targetIndex++;
			if(!targetRawData.fixed) {
				if(key >= targetRawData.length) targetRawData.length = key + 1;
				if(targetRawData.data.length < targetRawData.length) {
					var data;
					var this1;
					this1 = new Array(targetRawData.data.length + 10);
					data = this1;
					haxe.ds._Vector.Vector_Impl_.blit(targetRawData.data,0,data,0,targetRawData.data.length);
					targetRawData.data = data;
				}
			}
			targetRawData.data[key] = matrix.a * x + matrix.c * y + matrix.tx;
			var key1 = targetIndex++;
			if(!targetRawData.fixed) {
				if(key1 >= targetRawData.length) targetRawData.length = key1 + 1;
				if(targetRawData.data.length < targetRawData.length) {
					var data1;
					var this2;
					this2 = new Array(targetRawData.data.length + 10);
					data1 = this2;
					haxe.ds._Vector.Vector_Impl_.blit(targetRawData.data,0,data1,0,targetRawData.data.length);
					targetRawData.data = data1;
				}
			}
			targetRawData.data[key1] = matrix.d * y + matrix.b * x + matrix.ty;
			var key2 = targetIndex++;
			var value;
			var index2 = sourceIndex++;
			value = this.mRawData.data[index2];
			if(!targetRawData.fixed) {
				if(key2 >= targetRawData.length) targetRawData.length = key2 + 1;
				if(targetRawData.data.length < targetRawData.length) {
					var data2;
					var this3;
					this3 = new Array(targetRawData.data.length + 10);
					data2 = this3;
					haxe.ds._Vector.Vector_Impl_.blit(targetRawData.data,0,data2,0,targetRawData.data.length);
					targetRawData.data = data2;
				}
			}
			targetRawData.data[key2] = value;
			var key3 = targetIndex++;
			var value1;
			var index3 = sourceIndex++;
			value1 = this.mRawData.data[index3];
			if(!targetRawData.fixed) {
				if(key3 >= targetRawData.length) targetRawData.length = key3 + 1;
				if(targetRawData.data.length < targetRawData.length) {
					var data3;
					var this4;
					this4 = new Array(targetRawData.data.length + 10);
					data3 = this4;
					haxe.ds._Vector.Vector_Impl_.blit(targetRawData.data,0,data3,0,targetRawData.data.length);
					targetRawData.data = data3;
				}
			}
			targetRawData.data[key3] = value1;
			var key4 = targetIndex++;
			var value2;
			var index4 = sourceIndex++;
			value2 = this.mRawData.data[index4];
			if(!targetRawData.fixed) {
				if(key4 >= targetRawData.length) targetRawData.length = key4 + 1;
				if(targetRawData.data.length < targetRawData.length) {
					var data4;
					var this5;
					this5 = new Array(targetRawData.data.length + 10);
					data4 = this5;
					haxe.ds._Vector.Vector_Impl_.blit(targetRawData.data,0,data4,0,targetRawData.data.length);
					targetRawData.data = data4;
				}
			}
			targetRawData.data[key4] = value2;
			var key5 = targetIndex++;
			var value3;
			var index5 = sourceIndex++;
			value3 = this.mRawData.data[index5];
			if(!targetRawData.fixed) {
				if(key5 >= targetRawData.length) targetRawData.length = key5 + 1;
				if(targetRawData.data.length < targetRawData.length) {
					var data5;
					var this6;
					this6 = new Array(targetRawData.data.length + 10);
					data5 = this6;
					haxe.ds._Vector.Vector_Impl_.blit(targetRawData.data,0,data5,0,targetRawData.data.length);
					targetRawData.data = data5;
				}
			}
			targetRawData.data[key5] = value3;
			var key6 = targetIndex++;
			var value4;
			var index6 = sourceIndex++;
			value4 = this.mRawData.data[index6];
			if(!targetRawData.fixed) {
				if(key6 >= targetRawData.length) targetRawData.length = key6 + 1;
				if(targetRawData.data.length < targetRawData.length) {
					var data6;
					var this7;
					this7 = new Array(targetRawData.data.length + 10);
					data6 = this7;
					haxe.ds._Vector.Vector_Impl_.blit(targetRawData.data,0,data6,0,targetRawData.data.length);
					targetRawData.data = data6;
				}
			}
			targetRawData.data[key6] = value4;
			var key7 = targetIndex++;
			var value5;
			var index7 = sourceIndex++;
			value5 = this.mRawData.data[index7];
			if(!targetRawData.fixed) {
				if(key7 >= targetRawData.length) targetRawData.length = key7 + 1;
				if(targetRawData.data.length < targetRawData.length) {
					var data7;
					var this8;
					this8 = new Array(targetRawData.data.length + 10);
					data7 = this8;
					haxe.ds._Vector.Vector_Impl_.blit(targetRawData.data,0,data7,0,targetRawData.data.length);
					targetRawData.data = data7;
				}
			}
			targetRawData.data[key7] = value5;
		} else while(sourceIndex < sourceEnd) {
			var key8 = targetIndex++;
			var value6;
			var index8 = sourceIndex++;
			value6 = this.mRawData.data[index8];
			if(!targetRawData.fixed) {
				if(key8 >= targetRawData.length) targetRawData.length = key8 + 1;
				if(targetRawData.data.length < targetRawData.length) {
					var data8;
					var this9;
					this9 = new Array(targetRawData.data.length + 10);
					data8 = this9;
					haxe.ds._Vector.Vector_Impl_.blit(targetRawData.data,0,data8,0,targetRawData.data.length);
					targetRawData.data = data8;
				}
			}
			targetRawData.data[key8] = value6;
		}
	}
	,append: function(data) {
		this.mRawData.fixed = false;
		var targetIndex = this.mRawData.length;
		var rawData = data.mRawData;
		var rawDataLength = rawData.length;
		var _g = 0;
		while(_g < rawDataLength) {
			var i = _g++;
			var this1 = this.mRawData;
			var key = targetIndex++;
			if(!this1.fixed) {
				if(key >= this1.length) this1.length = key + 1;
				if(this1.data.length < this1.length) {
					var data1;
					var this2;
					this2 = new Array(this1.data.length + 10);
					data1 = this2;
					haxe.ds._Vector.Vector_Impl_.blit(this1.data,0,data1,0,this1.data.length);
					this1.data = data1;
				}
			}
			this1.data[key] = rawData.data[i];
		}
		this.mNumVertices += data.get_numVertices();
		this.mRawData.fixed = true;
	}
	,setPosition: function(vertexID,x,y) {
		var offset = vertexID * starling.utils.VertexData.ELEMENTS_PER_VERTEX + starling.utils.VertexData.POSITION_OFFSET;
		var this1 = this.mRawData;
		if(!this1.fixed) {
			if(offset >= this1.length) this1.length = offset + 1;
			if(this1.data.length < this1.length) {
				var data;
				var this2;
				this2 = new Array(this1.data.length + 10);
				data = this2;
				haxe.ds._Vector.Vector_Impl_.blit(this1.data,0,data,0,this1.data.length);
				this1.data = data;
			}
		}
		this1.data[offset] = x;
		var this3 = this.mRawData;
		var key = offset + 1;
		if(!this3.fixed) {
			if(key >= this3.length) this3.length = key + 1;
			if(this3.data.length < this3.length) {
				var data1;
				var this4;
				this4 = new Array(this3.data.length + 10);
				data1 = this4;
				haxe.ds._Vector.Vector_Impl_.blit(this3.data,0,data1,0,this3.data.length);
				this3.data = data1;
			}
		}
		this3.data[key] = y;
	}
	,getPosition: function(vertexID,position) {
		var offset = vertexID * starling.utils.VertexData.ELEMENTS_PER_VERTEX + starling.utils.VertexData.POSITION_OFFSET;
		position.x = this.mRawData.data[offset];
		position.y = this.mRawData.data[offset + 1];
	}
	,setColorAndAlpha: function(vertexID,color,alpha) {
		if(alpha < 0.001) alpha = 0.001; else if(alpha > 1.0) alpha = 1.0;
		var offset = vertexID * starling.utils.VertexData.ELEMENTS_PER_VERTEX + starling.utils.VertexData.COLOR_OFFSET;
		var multiplier;
		if(this.mPremultipliedAlpha) multiplier = alpha; else multiplier = 1.0;
		var this1 = this.mRawData;
		if(!this1.fixed) {
			if(offset >= this1.length) this1.length = offset + 1;
			if(this1.data.length < this1.length) {
				var data;
				var this2;
				this2 = new Array(this1.data.length + 10);
				data = this2;
				haxe.ds._Vector.Vector_Impl_.blit(this1.data,0,data,0,this1.data.length);
				this1.data = data;
			}
		}
		this1.data[offset] = (function($this) {
			var $r;
			var $int = color >> 16 & 255;
			$r = $int < 0?4294967296.0 + $int:$int + 0.0;
			return $r;
		}(this)) / 255.0 * multiplier;
		var this3 = this.mRawData;
		var key = offset + 1;
		if(!this3.fixed) {
			if(key >= this3.length) this3.length = key + 1;
			if(this3.data.length < this3.length) {
				var data1;
				var this4;
				this4 = new Array(this3.data.length + 10);
				data1 = this4;
				haxe.ds._Vector.Vector_Impl_.blit(this3.data,0,data1,0,this3.data.length);
				this3.data = data1;
			}
		}
		this3.data[key] = (function($this) {
			var $r;
			var int1 = color >> 8 & 255;
			$r = int1 < 0?4294967296.0 + int1:int1 + 0.0;
			return $r;
		}(this)) / 255.0 * multiplier;
		var this5 = this.mRawData;
		var key1 = offset + 2;
		if(!this5.fixed) {
			if(key1 >= this5.length) this5.length = key1 + 1;
			if(this5.data.length < this5.length) {
				var data2;
				var this6;
				this6 = new Array(this5.data.length + 10);
				data2 = this6;
				haxe.ds._Vector.Vector_Impl_.blit(this5.data,0,data2,0,this5.data.length);
				this5.data = data2;
			}
		}
		this5.data[key1] = (function($this) {
			var $r;
			var int2 = color & 255;
			$r = int2 < 0?4294967296.0 + int2:int2 + 0.0;
			return $r;
		}(this)) / 255.0 * multiplier;
		var this7 = this.mRawData;
		var key2 = offset + 3;
		if(!this7.fixed) {
			if(key2 >= this7.length) this7.length = key2 + 1;
			if(this7.data.length < this7.length) {
				var data3;
				var this8;
				this8 = new Array(this7.data.length + 10);
				data3 = this8;
				haxe.ds._Vector.Vector_Impl_.blit(this7.data,0,data3,0,this7.data.length);
				this7.data = data3;
			}
		}
		this7.data[key2] = alpha;
	}
	,setColor: function(vertexID,color) {
		var offset = vertexID * starling.utils.VertexData.ELEMENTS_PER_VERTEX + starling.utils.VertexData.COLOR_OFFSET;
		var multiplier;
		if(this.mPremultipliedAlpha) multiplier = this.mRawData.data[offset + 3]; else multiplier = 1.0;
		var this1 = this.mRawData;
		if(!this1.fixed) {
			if(offset >= this1.length) this1.length = offset + 1;
			if(this1.data.length < this1.length) {
				var data;
				var this2;
				this2 = new Array(this1.data.length + 10);
				data = this2;
				haxe.ds._Vector.Vector_Impl_.blit(this1.data,0,data,0,this1.data.length);
				this1.data = data;
			}
		}
		this1.data[offset] = (function($this) {
			var $r;
			var $int = color >> 16 & 255;
			$r = $int < 0?4294967296.0 + $int:$int + 0.0;
			return $r;
		}(this)) / 255.0 * multiplier;
		var this3 = this.mRawData;
		var key = offset + 1;
		if(!this3.fixed) {
			if(key >= this3.length) this3.length = key + 1;
			if(this3.data.length < this3.length) {
				var data1;
				var this4;
				this4 = new Array(this3.data.length + 10);
				data1 = this4;
				haxe.ds._Vector.Vector_Impl_.blit(this3.data,0,data1,0,this3.data.length);
				this3.data = data1;
			}
		}
		this3.data[key] = (function($this) {
			var $r;
			var int1 = color >> 8 & 255;
			$r = int1 < 0?4294967296.0 + int1:int1 + 0.0;
			return $r;
		}(this)) / 255.0 * multiplier;
		var this5 = this.mRawData;
		var key1 = offset + 2;
		if(!this5.fixed) {
			if(key1 >= this5.length) this5.length = key1 + 1;
			if(this5.data.length < this5.length) {
				var data2;
				var this6;
				this6 = new Array(this5.data.length + 10);
				data2 = this6;
				haxe.ds._Vector.Vector_Impl_.blit(this5.data,0,data2,0,this5.data.length);
				this5.data = data2;
			}
		}
		this5.data[key1] = (function($this) {
			var $r;
			var int2 = color & 255;
			$r = int2 < 0?4294967296.0 + int2:int2 + 0.0;
			return $r;
		}(this)) / 255.0 * multiplier;
	}
	,getColor: function(vertexID) {
		var offset = vertexID * starling.utils.VertexData.ELEMENTS_PER_VERTEX + starling.utils.VertexData.COLOR_OFFSET;
		var divisor;
		if(this.mPremultipliedAlpha) divisor = this.mRawData.data[offset + 3]; else divisor = 1.0;
		if(divisor == 0) return 0; else {
			var red = this.mRawData.data[offset] / divisor;
			var green = this.mRawData.data[offset + 1] / divisor;
			var blue = this.mRawData.data[offset + 2] / divisor;
			return red * 255 << 16 | green * 255 << 8 | blue * 255;
		}
	}
	,setAlpha: function(vertexID,alpha) {
		if(this.mPremultipliedAlpha) this.setColorAndAlpha(vertexID,this.getColor(vertexID),alpha); else {
			var this1 = this.mRawData;
			var key = vertexID * starling.utils.VertexData.ELEMENTS_PER_VERTEX + starling.utils.VertexData.COLOR_OFFSET + 3;
			if(!this1.fixed) {
				if(key >= this1.length) this1.length = key + 1;
				if(this1.data.length < this1.length) {
					var data;
					var this2;
					this2 = new Array(this1.data.length + 10);
					data = this2;
					haxe.ds._Vector.Vector_Impl_.blit(this1.data,0,data,0,this1.data.length);
					this1.data = data;
				}
			}
			this1.data[key] = alpha;
		}
	}
	,getAlpha: function(vertexID) {
		var offset = vertexID * starling.utils.VertexData.ELEMENTS_PER_VERTEX + starling.utils.VertexData.COLOR_OFFSET + 3;
		return this.mRawData.data[offset];
	}
	,setTexCoords: function(vertexID,u,v) {
		var offset = vertexID * starling.utils.VertexData.ELEMENTS_PER_VERTEX + starling.utils.VertexData.TEXCOORD_OFFSET;
		var this1 = this.mRawData;
		if(!this1.fixed) {
			if(offset >= this1.length) this1.length = offset + 1;
			if(this1.data.length < this1.length) {
				var data;
				var this2;
				this2 = new Array(this1.data.length + 10);
				data = this2;
				haxe.ds._Vector.Vector_Impl_.blit(this1.data,0,data,0,this1.data.length);
				this1.data = data;
			}
		}
		this1.data[offset] = u;
		var this3 = this.mRawData;
		var key = offset + 1;
		if(!this3.fixed) {
			if(key >= this3.length) this3.length = key + 1;
			if(this3.data.length < this3.length) {
				var data1;
				var this4;
				this4 = new Array(this3.data.length + 10);
				data1 = this4;
				haxe.ds._Vector.Vector_Impl_.blit(this3.data,0,data1,0,this3.data.length);
				this3.data = data1;
			}
		}
		this3.data[key] = v;
	}
	,getTexCoords: function(vertexID,texCoords) {
		var offset = vertexID * starling.utils.VertexData.ELEMENTS_PER_VERTEX + starling.utils.VertexData.TEXCOORD_OFFSET;
		texCoords.x = this.mRawData.data[offset];
		texCoords.y = this.mRawData.data[offset + 1];
		if ("undefined" === typeof texCoords.x) texCoords.x = 0;;
		if ("undefined" === typeof texCoords.y) texCoords.y = 0;;
	}
	,translateVertex: function(vertexID,deltaX,deltaY) {
		var offset = vertexID * starling.utils.VertexData.ELEMENTS_PER_VERTEX + starling.utils.VertexData.POSITION_OFFSET;
		var _g = offset;
		var this1 = this.mRawData;
		if(!this1.fixed) {
			if(_g >= this1.length) this1.length = _g + 1;
			if(this1.data.length < this1.length) {
				var data;
				var this2;
				this2 = new Array(this1.data.length + 10);
				data = this2;
				haxe.ds._Vector.Vector_Impl_.blit(this1.data,0,data,0,this1.data.length);
				this1.data = data;
			}
		}
		this1.data[_g] = this.mRawData.data[_g] + deltaX;
		var _g1 = offset + 1;
		var this3 = this.mRawData;
		if(!this3.fixed) {
			if(_g1 >= this3.length) this3.length = _g1 + 1;
			if(this3.data.length < this3.length) {
				var data1;
				var this4;
				this4 = new Array(this3.data.length + 10);
				data1 = this4;
				haxe.ds._Vector.Vector_Impl_.blit(this3.data,0,data1,0,this3.data.length);
				this3.data = data1;
			}
		}
		this3.data[_g1] = this.mRawData.data[_g1] + deltaY;
	}
	,transformVertex: function(vertexID,matrix,numVertices) {
		if(numVertices == null) numVertices = 1;
		var x;
		var y;
		var offset = vertexID * starling.utils.VertexData.ELEMENTS_PER_VERTEX + starling.utils.VertexData.POSITION_OFFSET;
		var _g = 0;
		while(_g < numVertices) {
			var i = _g++;
			x = this.mRawData.data[offset];
			y = this.mRawData.data[offset + 1];
			var this1 = this.mRawData;
			if(!this1.fixed) {
				if(offset >= this1.length) this1.length = offset + 1;
				if(this1.data.length < this1.length) {
					var data;
					var this2;
					this2 = new Array(this1.data.length + 10);
					data = this2;
					haxe.ds._Vector.Vector_Impl_.blit(this1.data,0,data,0,this1.data.length);
					this1.data = data;
				}
			}
			this1.data[offset] = matrix.a * x + matrix.c * y + matrix.tx;
			var this3 = this.mRawData;
			var key = offset + 1;
			if(!this3.fixed) {
				if(key >= this3.length) this3.length = key + 1;
				if(this3.data.length < this3.length) {
					var data1;
					var this4;
					this4 = new Array(this3.data.length + 10);
					data1 = this4;
					haxe.ds._Vector.Vector_Impl_.blit(this3.data,0,data1,0,this3.data.length);
					this3.data = data1;
				}
			}
			this3.data[key] = matrix.d * y + matrix.b * x + matrix.ty;
			offset += starling.utils.VertexData.ELEMENTS_PER_VERTEX;
		}
	}
	,setUniformColor: function(color) {
		var _g1 = 0;
		var _g = this.mNumVertices;
		while(_g1 < _g) {
			var i = _g1++;
			this.setColor(i,color);
		}
	}
	,setUniformAlpha: function(alpha) {
		var _g1 = 0;
		var _g = this.mNumVertices;
		while(_g1 < _g) {
			var i = _g1++;
			this.setAlpha(i,alpha);
		}
	}
	,scaleAlpha: function(vertexID,factor,numVertices) {
		if(numVertices == null) numVertices = 1;
		if(factor == 1.0) return;
		if(numVertices < 0 || vertexID + numVertices > this.mNumVertices) numVertices = this.mNumVertices - vertexID;
		var i;
		if(this.mPremultipliedAlpha) {
			var _g = 0;
			while(_g < numVertices) {
				var i1 = _g++;
				this.setAlpha(vertexID + i1,this.getAlpha(vertexID + i1) * factor);
			}
		} else {
			var offset = vertexID * starling.utils.VertexData.ELEMENTS_PER_VERTEX + starling.utils.VertexData.COLOR_OFFSET + 3;
			var _g1 = 0;
			while(_g1 < numVertices) {
				var i2 = _g1++;
				var _g11 = offset + i2 * starling.utils.VertexData.ELEMENTS_PER_VERTEX;
				var this1 = this.mRawData;
				if(!this1.fixed) {
					if(_g11 >= this1.length) this1.length = _g11 + 1;
					if(this1.data.length < this1.length) {
						var data;
						var this2;
						this2 = new Array(this1.data.length + 10);
						data = this2;
						haxe.ds._Vector.Vector_Impl_.blit(this1.data,0,data,0,this1.data.length);
						this1.data = data;
					}
				}
				this1.data[_g11] = this.mRawData.data[_g11] * factor;
			}
		}
	}
	,getBounds: function(transformationMatrix,vertexID,numVertices,resultRect) {
		if(numVertices == null) numVertices = -1;
		if(vertexID == null) vertexID = 0;
		if(resultRect == null) resultRect = new openfl.geom.Rectangle();
		if(numVertices < 0 || vertexID + numVertices > this.mNumVertices) numVertices = this.mNumVertices - vertexID;
		if(numVertices == 0) {
			if(transformationMatrix == null) resultRect.setEmpty(); else {
				starling.utils.MatrixUtil.transformCoords(transformationMatrix,0,0,starling.utils.VertexData.sHelperPoint);
				resultRect.setTo(starling.utils.VertexData.sHelperPoint.x,starling.utils.VertexData.sHelperPoint.y,0,0);
			}
		} else {
			var minX = Math.POSITIVE_INFINITY;
			var maxX = Math.NEGATIVE_INFINITY;
			var minY = Math.POSITIVE_INFINITY;
			var maxY = Math.NEGATIVE_INFINITY;
			var offset = vertexID * starling.utils.VertexData.ELEMENTS_PER_VERTEX + starling.utils.VertexData.POSITION_OFFSET;
			var x;
			var y;
			var i;
			if(transformationMatrix == null) {
				var _g = 0;
				while(_g < numVertices) {
					var i1 = _g++;
					x = this.mRawData.data[offset];
					y = this.mRawData.data[offset + 1];
					offset += starling.utils.VertexData.ELEMENTS_PER_VERTEX;
					if(minX > x) minX = x;
					if(maxX < x) maxX = x;
					if(minY > y) minY = y;
					if(maxY < y) maxY = y;
				}
			} else {
				var _g1 = 0;
				while(_g1 < numVertices) {
					var i2 = _g1++;
					x = this.mRawData.data[offset];
					y = this.mRawData.data[offset + 1];
					offset += starling.utils.VertexData.ELEMENTS_PER_VERTEX;
					starling.utils.MatrixUtil.transformCoords(transformationMatrix,x,y,starling.utils.VertexData.sHelperPoint);
					if(minX > starling.utils.VertexData.sHelperPoint.x) minX = starling.utils.VertexData.sHelperPoint.x;
					if(maxX < starling.utils.VertexData.sHelperPoint.x) maxX = starling.utils.VertexData.sHelperPoint.x;
					if(minY > starling.utils.VertexData.sHelperPoint.y) minY = starling.utils.VertexData.sHelperPoint.y;
					if(maxY < starling.utils.VertexData.sHelperPoint.y) maxY = starling.utils.VertexData.sHelperPoint.y;
				}
			}
			resultRect.setTo(minX,minY,maxX - minX,maxY - minY);
		}
		return resultRect;
	}
	,getBoundsProjected: function(transformationMatrix,camPos,vertexID,numVertices,resultRect) {
		if(numVertices == null) numVertices = -1;
		if(vertexID == null) vertexID = 0;
		if(camPos == null) throw new openfl.errors.ArgumentError("camPos must not be null");
		if(resultRect == null) resultRect = new openfl.geom.Rectangle();
		if(numVertices < 0 || vertexID + numVertices > this.mNumVertices) numVertices = this.mNumVertices - vertexID;
		if(numVertices == 0) {
			if(transformationMatrix != null) starling.utils.MatrixUtil.transformCoords3D(transformationMatrix,0,0,0,starling.utils.VertexData.sHelperPoint3D); else starling.utils.VertexData.sHelperPoint3D.setTo(0,0,0);
			starling.utils.MathUtil.intersectLineWithXYPlane(camPos,starling.utils.VertexData.sHelperPoint3D,starling.utils.VertexData.sHelperPoint);
			resultRect.setTo(starling.utils.VertexData.sHelperPoint.x,starling.utils.VertexData.sHelperPoint.y,0,0);
		} else {
			var minX = Math.POSITIVE_INFINITY;
			var maxX = Math.NEGATIVE_INFINITY;
			var minY = Math.POSITIVE_INFINITY;
			var maxY = Math.NEGATIVE_INFINITY;
			var offset = vertexID * starling.utils.VertexData.ELEMENTS_PER_VERTEX + starling.utils.VertexData.POSITION_OFFSET;
			var x;
			var y;
			var i;
			var _g = 0;
			while(_g < numVertices) {
				var i1 = _g++;
				x = this.mRawData.data[offset];
				y = this.mRawData.data[offset + 1];
				offset += starling.utils.VertexData.ELEMENTS_PER_VERTEX;
				if(transformationMatrix != null) starling.utils.MatrixUtil.transformCoords3D(transformationMatrix,x,y,0,starling.utils.VertexData.sHelperPoint3D); else starling.utils.VertexData.sHelperPoint3D.setTo(x,y,0);
				starling.utils.MathUtil.intersectLineWithXYPlane(camPos,starling.utils.VertexData.sHelperPoint3D,starling.utils.VertexData.sHelperPoint);
				if(minX > starling.utils.VertexData.sHelperPoint.x) minX = starling.utils.VertexData.sHelperPoint.x;
				if(maxX < starling.utils.VertexData.sHelperPoint.x) maxX = starling.utils.VertexData.sHelperPoint.x;
				if(minY > starling.utils.VertexData.sHelperPoint.y) minY = starling.utils.VertexData.sHelperPoint.y;
				if(maxY < starling.utils.VertexData.sHelperPoint.y) maxY = starling.utils.VertexData.sHelperPoint.y;
			}
			resultRect.setTo(minX,minY,maxX - minX,maxY - minY);
		}
		return resultRect;
	}
	,toString: function() {
		var result = "[VertexData \n";
		var position = new openfl.geom.Point();
		var texCoords = new openfl.geom.Point();
		var _g1 = 0;
		var _g = this.get_numVertices();
		while(_g1 < _g) {
			var i = _g1++;
			this.getPosition(i,position);
			this.getTexCoords(i,texCoords);
			result += "  [Vertex " + i + ": " + "x=" + Math.floor(position.x) + ", " + "y=" + Math.floor(position.y) + ", " + "a=" + js.Boot.__cast(Math.floor(this.getAlpha(i) * 10) / 10 , Float) + ", " + "u=" + js.Boot.__cast(Math.floor(texCoords.x * 1000) / 1000 , Float) + ", " + "v=" + js.Boot.__cast(Math.floor(texCoords.y * 1000) / 1000 , Float) + "]" + (i == this.get_numVertices() - 1?"\n":",\n");
		}
		result += "]";
		return result;
	}
	,get_tinted: function() {
		var offset = starling.utils.VertexData.COLOR_OFFSET;
		var _g1 = 0;
		var _g = this.mNumVertices;
		while(_g1 < _g) {
			var i = _g1++;
			var _g2 = 0;
			while(_g2 < 4) {
				var j = _g2++;
				if(this.mRawData.data[offset + j] != 1.0) return true;
			}
			offset += starling.utils.VertexData.ELEMENTS_PER_VERTEX;
		}
		return false;
	}
	,setPremultipliedAlpha: function(value,updateData) {
		if(updateData == null) updateData = true;
		if(value == this.mPremultipliedAlpha) return;
		if(updateData) {
			var dataLength = this.mNumVertices * starling.utils.VertexData.ELEMENTS_PER_VERTEX;
			var _g = starling.utils.VertexData.COLOR_OFFSET;
			while(_g < dataLength) {
				var j = _g++;
				var i = j * starling.utils.VertexData.ELEMENTS_PER_VERTEX;
				var alpha = this.mRawData.data[i + 3];
				var divisor;
				if(this.mPremultipliedAlpha) divisor = alpha; else divisor = 1.0;
				var multiplier;
				if(value) multiplier = alpha; else multiplier = 1.0;
				if(divisor != 0) {
					var this1 = this.mRawData;
					if(!this1.fixed) {
						if(i >= this1.length) this1.length = i + 1;
						if(this1.data.length < this1.length) {
							var data;
							var this2;
							this2 = new Array(this1.data.length + 10);
							data = this2;
							haxe.ds._Vector.Vector_Impl_.blit(this1.data,0,data,0,this1.data.length);
							this1.data = data;
						}
					}
					this1.data[i] = this.mRawData.data[i] / divisor * multiplier;
					var this3 = this.mRawData;
					var key = i + 1;
					if(!this3.fixed) {
						if(key >= this3.length) this3.length = key + 1;
						if(this3.data.length < this3.length) {
							var data1;
							var this4;
							this4 = new Array(this3.data.length + 10);
							data1 = this4;
							haxe.ds._Vector.Vector_Impl_.blit(this3.data,0,data1,0,this3.data.length);
							this3.data = data1;
						}
					}
					this3.data[key] = this.mRawData.data[i + 1] / divisor * multiplier;
					var this5 = this.mRawData;
					var key1 = i + 2;
					if(!this5.fixed) {
						if(key1 >= this5.length) this5.length = key1 + 1;
						if(this5.data.length < this5.length) {
							var data2;
							var this6;
							this6 = new Array(this5.data.length + 10);
							data2 = this6;
							haxe.ds._Vector.Vector_Impl_.blit(this5.data,0,data2,0,this5.data.length);
							this5.data = data2;
						}
					}
					this5.data[key1] = this.mRawData.data[i + 2] / divisor * multiplier;
				}
			}
		}
		this.mPremultipliedAlpha = value;
	}
	,get_premultipliedAlpha: function() {
		return this.mPremultipliedAlpha;
	}
	,set_premultipliedAlpha: function(value) {
		this.setPremultipliedAlpha(value);
		return value;
	}
	,get_numVertices: function() {
		return this.mNumVertices;
	}
	,set_numVertices: function(value) {
		this.mRawData.fixed = false;
		var currentLength = 0;
		var this1 = this.mRawData;
		var value1 = value * starling.utils.VertexData.ELEMENTS_PER_VERTEX;
		if(!this1.fixed) {
			if(value1 > this1.length) {
				var data;
				var this2;
				this2 = new Array(value1);
				data = this2;
				haxe.ds._Vector.Vector_Impl_.blit(this1.data,0,data,0,Std["int"](Math.min(this1.data.length,value1)));
				this1.data = data;
			}
			this1.length = value1;
		}
		value1;
		if(this.mRawData.length > currentLength) {
			var _g1 = 0;
			var _g = this.mRawData.length;
			while(_g1 < _g) {
				var j = _g1++;
				if ("undefined" === typeof this.mRawData.data[j]) this.mRawData.data[j] = 0;;
			}
		}
		var startIndex = this.mNumVertices * starling.utils.VertexData.ELEMENTS_PER_VERTEX + starling.utils.VertexData.COLOR_OFFSET + 3;
		var endIndex = this.mRawData.length;
		var i = startIndex;
		while(i < endIndex) {
			var this3 = this.mRawData;
			if(!this3.fixed) {
				if(i >= this3.length) this3.length = i + 1;
				if(this3.data.length < this3.length) {
					var data1;
					var this4;
					this4 = new Array(this3.data.length + 10);
					data1 = this4;
					haxe.ds._Vector.Vector_Impl_.blit(this3.data,0,data1,0,this3.data.length);
					this3.data = data1;
				}
			}
			this3.data[i] = 1.0;
			i += starling.utils.VertexData.ELEMENTS_PER_VERTEX;
		}
		this.mNumVertices = value;
		this.mRawData.fixed = true;
		return value;
	}
	,get_rawData: function() {
		return this.mRawData;
	}
	,set_rawData: function(value) {
		this.mRawData = value;
		return value;
	}
	,__class__: starling.utils.VertexData
	,__properties__: {set_rawData:"set_rawData",get_rawData:"get_rawData",set_numVertices:"set_numVertices",get_numVertices:"get_numVertices",set_premultipliedAlpha:"set_premultipliedAlpha",get_premultipliedAlpha:"get_premultipliedAlpha",get_tinted:"get_tinted"}
};
var utils = {};
utils.ProgressBar = function(width,height) {
	openfl.display.Sprite.call(this);
	this.init(width,height);
};
$hxClasses["utils.ProgressBar"] = utils.ProgressBar;
utils.ProgressBar.__name__ = ["utils","ProgressBar"];
utils.ProgressBar.__super__ = openfl.display.Sprite;
utils.ProgressBar.prototype = $extend(openfl.display.Sprite.prototype,{
	mBackground: null
	,mBar: null
	,init: function(width,height) {
		var padding = height * 0.2;
		var cornerRadius = padding * 2;
		this.mBackground = new openfl.display.Shape();
		this.mBackground.get_graphics().beginFill(0,0.5);
		this.mBackground.get_graphics().drawRoundRect(0,0,width,height,cornerRadius,cornerRadius);
		this.mBackground.get_graphics().endFill();
		this.addChild(this.mBackground);
		var barWidth = width - 2 * padding;
		var barHeight = height - 2 * padding;
		var barMatrix = new openfl.geom.Matrix();
		barMatrix.createGradientBox(barWidth,barHeight,Math.PI / 2);
		this.mBar = new openfl.display.Shape();
		this.mBar.get_graphics().beginGradientFill(openfl.display.GradientType.LINEAR,[15658734,11184810],[1,1],[0,255],barMatrix);
		this.mBar.get_graphics().drawRect(0,0,barWidth,barHeight);
		this.mBar.set_x(padding);
		this.mBar.set_y(padding);
		this.mBar.set_scaleX(0.0);
		this.addChild(this.mBar);
	}
	,get_ratio: function() {
		return this.mBar.get_scaleX();
	}
	,set_ratio: function(value) {
		this.mBar.set_scaleX(Math.max(0.0,Math.min(1.0,value)));
		return value;
	}
	,__class__: utils.ProgressBar
	,__properties__: $extend(openfl.display.Sprite.prototype.__properties__,{set_ratio:"set_ratio",get_ratio:"get_ratio"})
});
utils.RoundButton = function(upState,text,downState) {
	if(text == null) text = "";
	starling.display.Button.call(this,upState,text,downState);
};
$hxClasses["utils.RoundButton"] = utils.RoundButton;
utils.RoundButton.__name__ = ["utils","RoundButton"];
utils.RoundButton.__super__ = starling.display.Button;
utils.RoundButton.prototype = $extend(starling.display.Button.prototype,{
	hitTest: function(localPoint,forTouch) {
		if(forTouch == null) forTouch = false;
		if(forTouch && (!this.get_visible() || !this.get_touchable())) return null;
		var bounds = this.get_bounds();
		var centerX = bounds.width / 2;
		var centerY = bounds.height / 2;
		var sqDist = Math.pow(localPoint.x - centerX,2) + Math.pow(localPoint.y - centerY,2);
		var radius = bounds.width / 2 - 8;
		if(sqDist < Math.pow(radius,2)) return this; else return null;
	}
	,__class__: utils.RoundButton
});
utils.TouchSheet = function(contents) {
	starling.display.Sprite.call(this);
	this.addEventListener(starling.events.TouchEvent.TOUCH,$bind(this,this.onTouchSheetTouch));
	this.set_useHandCursor(true);
	if(contents != null) {
		contents.set_x(contents.get_width() / -2);
		contents.set_y(contents.get_height() / -2);
		this.addChild(contents);
	}
};
$hxClasses["utils.TouchSheet"] = utils.TouchSheet;
utils.TouchSheet.__name__ = ["utils","TouchSheet"];
utils.TouchSheet.__super__ = starling.display.Sprite;
utils.TouchSheet.prototype = $extend(starling.display.Sprite.prototype,{
	onTouchSheetTouch: function(event) {
		var _g = this;
		_g.set_rotation(_g.get_rotation() + 0.0055555555555555558 * Math.PI);
		var touches = event.getTouches(this,starling.events.TouchPhase.MOVED);
		if(touches.length == 1) {
			var delta = touches.data[0].getMovement(this.get_parent());
			var _g1 = this;
			_g1.set_x(_g1.get_x() + delta.x);
			var _g2 = this;
			_g2.set_y(_g2.get_y() + delta.y);
		} else if(touches.length == 2) {
			var touchA = touches.data[0];
			var touchB = touches.data[1];
			var currentPosA = touchA.getLocation(this.get_parent());
			var previousPosA = touchA.getPreviousLocation(this.get_parent());
			var currentPosB = touchB.getLocation(this.get_parent());
			var previousPosB = touchB.getPreviousLocation(this.get_parent());
			var currentVector = currentPosA.subtract(currentPosB);
			var previousVector = previousPosA.subtract(previousPosB);
			var currentAngle = Math.atan2(currentVector.y,currentVector.x);
			var previousAngle = Math.atan2(previousVector.y,previousVector.x);
			var deltaAngle = currentAngle - previousAngle;
			var previousLocalA = touchA.getPreviousLocation(this);
			var previousLocalB = touchB.getPreviousLocation(this);
			this.set_pivotX((previousLocalA.x + previousLocalB.x) * 0.5);
			this.set_pivotY((previousLocalA.y + previousLocalB.y) * 0.5);
			this.set_x((currentPosA.x + currentPosB.x) * 0.5);
			this.set_y((currentPosA.y + currentPosB.y) * 0.5);
			var _g3 = this;
			_g3.set_rotation(_g3.get_rotation() + deltaAngle);
			var sizeDiff = currentVector.get_length() / previousVector.get_length();
			var _g4 = this;
			_g4.set_scaleX(_g4.get_scaleX() * sizeDiff);
			var _g5 = this;
			_g5.set_scaleY(_g5.get_scaleY() * sizeDiff);
		}
		var touch = event.getTouch(this,starling.events.TouchPhase.ENDED);
		if(touch != null && touch.get_tapCount() == 2) this.get_parent().addChild(this);
	}
	,dispose: function() {
		this.removeEventListener(starling.events.TouchEvent.TOUCH,$bind(this,this.onTouchSheetTouch));
		starling.display.Sprite.prototype.dispose.call(this);
	}
	,__class__: utils.TouchSheet
});
function $iterator(o) { if( o instanceof Array ) return function() { return HxOverrides.iter(o); }; return typeof(o.iterator) == 'function' ? $bind(o,o.iterator) : o.iterator; }
var $_, $fid = 0;
function $bind(o,m) { if( m == null ) return null; if( m.__id__ == null ) m.__id__ = $fid++; var f; if( o.hx__closures__ == null ) o.hx__closures__ = {}; else f = o.hx__closures__[m.__id__]; if( f == null ) { f = function(){ return f.method.apply(f.scope, arguments); }; f.scope = o; f.method = m; o.hx__closures__[m.__id__] = f; } return f; }
if(Array.prototype.indexOf) HxOverrides.indexOf = function(a,o,i) {
	return Array.prototype.indexOf.call(a,o,i);
};
if(Array.prototype.lastIndexOf) HxOverrides.lastIndexOf = function(a1,o1,i1) {
	return Array.prototype.lastIndexOf.call(a1,o1,i1);
};
Math.NaN = Number.NaN;
Math.NEGATIVE_INFINITY = Number.NEGATIVE_INFINITY;
Math.POSITIVE_INFINITY = Number.POSITIVE_INFINITY;
$hxClasses.Math = Math;
Math.isFinite = function(i) {
	return isFinite(i);
};
Math.isNaN = function(i1) {
	return isNaN(i1);
};
String.prototype.__class__ = $hxClasses.String = String;
String.__name__ = ["String"];
$hxClasses.Array = Array;
Array.__name__ = ["Array"];
Date.prototype.__class__ = $hxClasses.Date = Date;
Date.__name__ = ["Date"];
var Int = $hxClasses.Int = { __name__ : ["Int"]};
var Dynamic = $hxClasses.Dynamic = { __name__ : ["Dynamic"]};
var Float = $hxClasses.Float = Number;
Float.__name__ = ["Float"];
var Bool = $hxClasses.Bool = Boolean;
Bool.__ename__ = ["Bool"];
var Class = $hxClasses.Class = { __name__ : ["Class"]};
var Enum = { };
var Void = $hxClasses.Void = { __ename__ : ["Void"]};
if(Array.prototype.map == null) Array.prototype.map = function(f) {
	var a = [];
	var _g1 = 0;
	var _g = this.length;
	while(_g1 < _g) {
		var i = _g1++;
		a[i] = f(this[i]);
	}
	return a;
};
if(Array.prototype.filter == null) Array.prototype.filter = function(f1) {
	var a1 = [];
	var _g11 = 0;
	var _g2 = this.length;
	while(_g11 < _g2) {
		var i1 = _g11++;
		var e = this[i1];
		if(f1(e)) a1.push(e);
	}
	return a1;
};
Xml.Element = "element";
Xml.PCData = "pcdata";
Xml.CData = "cdata";
Xml.Comment = "comment";
Xml.DocType = "doctype";
Xml.ProcessingInstruction = "processingInstruction";
Xml.Document = "document";
var this1;
this1 = new Array(256);
lime.graphics.utils.ImageDataUtil.__alpha16 = this1;
var _g = 0;
while(_g < 256) {
	var i = _g++;
	lime.graphics.utils.ImageDataUtil.__alpha16[i] = i * 65536 / 255 | 0;
}
var this2;
this2 = new Array(510);
lime.graphics.utils.ImageDataUtil.__clamp = this2;
var _g1 = 0;
while(_g1 < 255) {
	var i1 = _g1++;
	lime.graphics.utils.ImageDataUtil.__clamp[i1] = i1;
}
var _g11 = 255;
var _g2 = 511;
while(_g11 < _g2) {
	var i2 = _g11++;
	lime.graphics.utils.ImageDataUtil.__clamp[i2] = 255;
}
if(window.createjs != null) createjs.Sound.alternateExtensions = ["ogg","mp3","wav"];
openfl.ui.Multitouch.maxTouchPoints = 2;
openfl.ui.Multitouch.supportedGestures = null;
openfl.ui.Multitouch.supportsGestureEvents = false;
openfl.display.DisplayObject.__instanceCount = 0;
openfl.display.DisplayObject.__worldRenderDirty = 0;
openfl.display.DisplayObject.__worldTransformDirty = 0;
Constants.GameWidth = 320;
Constants.GameHeight = 480;
Constants.CenterX = Constants.GameWidth / 2;
Constants.CenterY = Constants.GameHeight / 2;
starling.events.EventDispatcher.sBubbleChains = new Array();
openfl.geom.Matrix.__identity = new openfl.geom.Matrix();
starling.display.DisplayObject.sAncestors = (function($this) {
	var $r;
	var this1;
	this1 = new openfl.VectorData();
	{
		var this2;
		this2 = new Array(0);
		this1.data = this2;
	}
	this1.length = 0;
	this1.fixed = false;
	$r = this1;
	return $r;
}(this));
starling.display.DisplayObject.sHelperPoint = new openfl.geom.Point();
starling.display.DisplayObject.sHelperPoint3D = new openfl.geom.Vector3D();
starling.display.DisplayObject.sHelperRect = new openfl.geom.Rectangle();
starling.display.DisplayObject.sHelperMatrix = new openfl.geom.Matrix();
starling.display.DisplayObject.sHelperMatrixAlt = new openfl.geom.Matrix();
starling.display.DisplayObject.sHelperMatrix3D = new openfl.geom.Matrix3D();
starling.display.DisplayObject.sHelperMatrixAlt3D = new openfl.geom.Matrix3D();
starling.display.DisplayObjectContainer.sHelperMatrix = new openfl.geom.Matrix();
starling.display.DisplayObjectContainer.sHelperPoint = new openfl.geom.Point();
starling.display.DisplayObjectContainer.sBroadcastListeners = (function($this) {
	var $r;
	var this1;
	this1 = new openfl.VectorData();
	{
		var this2;
		this2 = new Array(0);
		this1.data = this2;
	}
	this1.length = 0;
	this1.fixed = false;
	$r = this1;
	return $r;
}(this));
starling.display.DisplayObjectContainer.sSortBuffer = (function($this) {
	var $r;
	var this1;
	this1 = new openfl.VectorData();
	{
		var this2;
		this2 = new Array(0);
		this1.data = this2;
	}
	this1.length = 0;
	this1.fixed = false;
	$r = this1;
	return $r;
}(this));
starling.display.Sprite.sHelperMatrix = new openfl.geom.Matrix();
starling.display.Sprite.sHelperPoint = new openfl.geom.Point();
starling.display.Sprite.sHelperRect = new openfl.geom.Rectangle();
haxe.Unserializer.DEFAULT_RESOLVER = Type;
haxe.Unserializer.BASE64 = "ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789%:";
haxe.Unserializer.CODES = null;
haxe.ds.ObjectMap.count = 0;
haxe.io.Output.LN2 = Math.log(2);
haxe.xml.Parser.escapes = (function($this) {
	var $r;
	var h = new haxe.ds.StringMap();
	h.set("lt","<");
	h.set("gt",">");
	h.set("amp","&");
	h.set("quot","\"");
	h.set("apos","'");
	h.set("nbsp",String.fromCharCode(160));
	$r = h;
	return $r;
}(this));
haxe.zip._InflateImpl.Window.SIZE = 32768;
haxe.zip._InflateImpl.Window.BUFSIZE = 65536;
haxe.zip.InflateImpl.LEN_EXTRA_BITS_TBL = [0,0,0,0,0,0,0,0,1,1,1,1,2,2,2,2,3,3,3,3,4,4,4,4,5,5,5,5,0,-1,-1];
haxe.zip.InflateImpl.LEN_BASE_VAL_TBL = [3,4,5,6,7,8,9,10,11,13,15,17,19,23,27,31,35,43,51,59,67,83,99,115,131,163,195,227,258];
haxe.zip.InflateImpl.DIST_EXTRA_BITS_TBL = [0,0,0,0,1,1,2,2,3,3,4,4,5,5,6,6,7,7,8,8,9,9,10,10,11,11,12,12,13,13,-1,-1];
haxe.zip.InflateImpl.DIST_BASE_VAL_TBL = [1,2,3,4,5,7,9,13,17,25,33,49,65,97,129,193,257,385,513,769,1025,1537,2049,3073,4097,6145,8193,12289,16385,24577];
haxe.zip.InflateImpl.CODE_LENGTHS_POS = [16,17,18,0,8,7,9,6,10,5,11,4,12,3,13,2,14,1,15];
haxe.zip.InflateImpl.FIXED_HUFFMAN = null;
js.Boot.__toStr = {}.toString;
lime.Assets.cache = new lime.AssetCache();
lime.Assets.libraries = new haxe.ds.StringMap();
lime.Assets.initialized = false;
lime._Assets.AssetType_Impl_.BINARY = "BINARY";
lime._Assets.AssetType_Impl_.FONT = "FONT";
lime._Assets.AssetType_Impl_.IMAGE = "IMAGE";
lime._Assets.AssetType_Impl_.MUSIC = "MUSIC";
lime._Assets.AssetType_Impl_.SOUND = "SOUND";
lime._Assets.AssetType_Impl_.TEMPLATE = "TEMPLATE";
lime._Assets.AssetType_Impl_.TEXT = "TEXT";
lime.app.Preloader.images = new haxe.ds.StringMap();
lime.app.Preloader.loaders = new haxe.ds.StringMap();
lime.audio.openal.AL.NONE = 0;
lime.audio.openal.AL.FALSE = 0;
lime.audio.openal.AL.TRUE = 1;
lime.audio.openal.AL.SOURCE_RELATIVE = 514;
lime.audio.openal.AL.CONE_INNER_ANGLE = 4097;
lime.audio.openal.AL.CONE_OUTER_ANGLE = 4098;
lime.audio.openal.AL.PITCH = 4099;
lime.audio.openal.AL.POSITION = 4100;
lime.audio.openal.AL.DIRECTION = 4101;
lime.audio.openal.AL.VELOCITY = 4102;
lime.audio.openal.AL.LOOPING = 4103;
lime.audio.openal.AL.BUFFER = 4105;
lime.audio.openal.AL.GAIN = 4106;
lime.audio.openal.AL.MIN_GAIN = 4109;
lime.audio.openal.AL.MAX_GAIN = 4110;
lime.audio.openal.AL.ORIENTATION = 4111;
lime.audio.openal.AL.SOURCE_STATE = 4112;
lime.audio.openal.AL.INITIAL = 4113;
lime.audio.openal.AL.PLAYING = 4114;
lime.audio.openal.AL.PAUSED = 4115;
lime.audio.openal.AL.STOPPED = 4116;
lime.audio.openal.AL.BUFFERS_QUEUED = 4117;
lime.audio.openal.AL.BUFFERS_PROCESSED = 4118;
lime.audio.openal.AL.REFERENCE_DISTANCE = 4128;
lime.audio.openal.AL.ROLLOFF_FACTOR = 4129;
lime.audio.openal.AL.CONE_OUTER_GAIN = 4130;
lime.audio.openal.AL.MAX_DISTANCE = 4131;
lime.audio.openal.AL.SEC_OFFSET = 4132;
lime.audio.openal.AL.SAMPLE_OFFSET = 4133;
lime.audio.openal.AL.BYTE_OFFSET = 4134;
lime.audio.openal.AL.SOURCE_TYPE = 4135;
lime.audio.openal.AL.STATIC = 4136;
lime.audio.openal.AL.STREAMING = 4137;
lime.audio.openal.AL.UNDETERMINED = 4144;
lime.audio.openal.AL.FORMAT_MONO8 = 4352;
lime.audio.openal.AL.FORMAT_MONO16 = 4353;
lime.audio.openal.AL.FORMAT_STEREO8 = 4354;
lime.audio.openal.AL.FORMAT_STEREO16 = 4355;
lime.audio.openal.AL.FREQUENCY = 8193;
lime.audio.openal.AL.BITS = 8194;
lime.audio.openal.AL.CHANNELS = 8195;
lime.audio.openal.AL.SIZE = 8196;
lime.audio.openal.AL.NO_ERROR = 0;
lime.audio.openal.AL.INVALID_NAME = 40961;
lime.audio.openal.AL.INVALID_ENUM = 40962;
lime.audio.openal.AL.INVALID_VALUE = 40963;
lime.audio.openal.AL.INVALID_OPERATION = 40964;
lime.audio.openal.AL.OUT_OF_MEMORY = 40965;
lime.audio.openal.AL.VENDOR = 45057;
lime.audio.openal.AL.VERSION = 45058;
lime.audio.openal.AL.RENDERER = 45059;
lime.audio.openal.AL.EXTENSIONS = 45060;
lime.audio.openal.AL.DOPPLER_FACTOR = 49152;
lime.audio.openal.AL.SPEED_OF_SOUND = 49155;
lime.audio.openal.AL.DOPPLER_VELOCITY = 49153;
lime.audio.openal.AL.DISTANCE_MODEL = 53248;
lime.audio.openal.AL.INVERSE_DISTANCE = 53249;
lime.audio.openal.AL.INVERSE_DISTANCE_CLAMPED = 53250;
lime.audio.openal.AL.LINEAR_DISTANCE = 53251;
lime.audio.openal.AL.LINEAR_DISTANCE_CLAMPED = 53252;
lime.audio.openal.AL.EXPONENT_DISTANCE = 53253;
lime.audio.openal.AL.EXPONENT_DISTANCE_CLAMPED = 53254;
lime.audio.openal.ALC.FALSE = 0;
lime.audio.openal.ALC.TRUE = 1;
lime.audio.openal.ALC.FREQUENCY = 4103;
lime.audio.openal.ALC.REFRESH = 4104;
lime.audio.openal.ALC.SYNC = 4105;
lime.audio.openal.ALC.MONO_SOURCES = 4112;
lime.audio.openal.ALC.STEREO_SOURCES = 4113;
lime.audio.openal.ALC.NO_ERROR = 0;
lime.audio.openal.ALC.INVALID_DEVICE = 40961;
lime.audio.openal.ALC.INVALID_CONTEXT = 40962;
lime.audio.openal.ALC.INVALID_ENUM = 40963;
lime.audio.openal.ALC.INVALID_VALUE = 40964;
lime.audio.openal.ALC.OUT_OF_MEMORY = 40965;
lime.audio.openal.ALC.ATTRIBUTES_SIZE = 4098;
lime.audio.openal.ALC.ALL_ATTRIBUTES = 4099;
lime.audio.openal.ALC.DEFAULT_DEVICE_SPECIFIER = 4100;
lime.audio.openal.ALC.DEVICE_SPECIFIER = 4101;
lime.audio.openal.ALC.EXTENSIONS = 4102;
lime.audio.openal.ALC.ENUMERATE_ALL_EXT = 1;
lime.audio.openal.ALC.DEFAULT_ALL_DEVICES_SPECIFIER = 4114;
lime.audio.openal.ALC.ALL_DEVICES_SPECIFIER = 4115;
lime.graphics.Image.__base64Chars = "ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/";
lime.graphics.opengl.GL.DEPTH_BUFFER_BIT = 256;
lime.graphics.opengl.GL.STENCIL_BUFFER_BIT = 1024;
lime.graphics.opengl.GL.COLOR_BUFFER_BIT = 16384;
lime.graphics.opengl.GL.POINTS = 0;
lime.graphics.opengl.GL.LINES = 1;
lime.graphics.opengl.GL.LINE_LOOP = 2;
lime.graphics.opengl.GL.LINE_STRIP = 3;
lime.graphics.opengl.GL.TRIANGLES = 4;
lime.graphics.opengl.GL.TRIANGLE_STRIP = 5;
lime.graphics.opengl.GL.TRIANGLE_FAN = 6;
lime.graphics.opengl.GL.ZERO = 0;
lime.graphics.opengl.GL.ONE = 1;
lime.graphics.opengl.GL.SRC_COLOR = 768;
lime.graphics.opengl.GL.ONE_MINUS_SRC_COLOR = 769;
lime.graphics.opengl.GL.SRC_ALPHA = 770;
lime.graphics.opengl.GL.ONE_MINUS_SRC_ALPHA = 771;
lime.graphics.opengl.GL.DST_ALPHA = 772;
lime.graphics.opengl.GL.ONE_MINUS_DST_ALPHA = 773;
lime.graphics.opengl.GL.DST_COLOR = 774;
lime.graphics.opengl.GL.ONE_MINUS_DST_COLOR = 775;
lime.graphics.opengl.GL.SRC_ALPHA_SATURATE = 776;
lime.graphics.opengl.GL.FUNC_ADD = 32774;
lime.graphics.opengl.GL.BLEND_EQUATION = 32777;
lime.graphics.opengl.GL.BLEND_EQUATION_RGB = 32777;
lime.graphics.opengl.GL.BLEND_EQUATION_ALPHA = 34877;
lime.graphics.opengl.GL.FUNC_SUBTRACT = 32778;
lime.graphics.opengl.GL.FUNC_REVERSE_SUBTRACT = 32779;
lime.graphics.opengl.GL.BLEND_DST_RGB = 32968;
lime.graphics.opengl.GL.BLEND_SRC_RGB = 32969;
lime.graphics.opengl.GL.BLEND_DST_ALPHA = 32970;
lime.graphics.opengl.GL.BLEND_SRC_ALPHA = 32971;
lime.graphics.opengl.GL.CONSTANT_COLOR = 32769;
lime.graphics.opengl.GL.ONE_MINUS_CONSTANT_COLOR = 32770;
lime.graphics.opengl.GL.CONSTANT_ALPHA = 32771;
lime.graphics.opengl.GL.ONE_MINUS_CONSTANT_ALPHA = 32772;
lime.graphics.opengl.GL.BLEND_COLOR = 32773;
lime.graphics.opengl.GL.ARRAY_BUFFER = 34962;
lime.graphics.opengl.GL.ELEMENT_ARRAY_BUFFER = 34963;
lime.graphics.opengl.GL.ARRAY_BUFFER_BINDING = 34964;
lime.graphics.opengl.GL.ELEMENT_ARRAY_BUFFER_BINDING = 34965;
lime.graphics.opengl.GL.STREAM_DRAW = 35040;
lime.graphics.opengl.GL.STATIC_DRAW = 35044;
lime.graphics.opengl.GL.DYNAMIC_DRAW = 35048;
lime.graphics.opengl.GL.BUFFER_SIZE = 34660;
lime.graphics.opengl.GL.BUFFER_USAGE = 34661;
lime.graphics.opengl.GL.CURRENT_VERTEX_ATTRIB = 34342;
lime.graphics.opengl.GL.FRONT = 1028;
lime.graphics.opengl.GL.BACK = 1029;
lime.graphics.opengl.GL.FRONT_AND_BACK = 1032;
lime.graphics.opengl.GL.CULL_FACE = 2884;
lime.graphics.opengl.GL.BLEND = 3042;
lime.graphics.opengl.GL.DITHER = 3024;
lime.graphics.opengl.GL.STENCIL_TEST = 2960;
lime.graphics.opengl.GL.DEPTH_TEST = 2929;
lime.graphics.opengl.GL.SCISSOR_TEST = 3089;
lime.graphics.opengl.GL.POLYGON_OFFSET_FILL = 32823;
lime.graphics.opengl.GL.SAMPLE_ALPHA_TO_COVERAGE = 32926;
lime.graphics.opengl.GL.SAMPLE_COVERAGE = 32928;
lime.graphics.opengl.GL.NO_ERROR = 0;
lime.graphics.opengl.GL.INVALID_ENUM = 1280;
lime.graphics.opengl.GL.INVALID_VALUE = 1281;
lime.graphics.opengl.GL.INVALID_OPERATION = 1282;
lime.graphics.opengl.GL.OUT_OF_MEMORY = 1285;
lime.graphics.opengl.GL.CW = 2304;
lime.graphics.opengl.GL.CCW = 2305;
lime.graphics.opengl.GL.LINE_WIDTH = 2849;
lime.graphics.opengl.GL.ALIASED_POINT_SIZE_RANGE = 33901;
lime.graphics.opengl.GL.ALIASED_LINE_WIDTH_RANGE = 33902;
lime.graphics.opengl.GL.CULL_FACE_MODE = 2885;
lime.graphics.opengl.GL.FRONT_FACE = 2886;
lime.graphics.opengl.GL.DEPTH_RANGE = 2928;
lime.graphics.opengl.GL.DEPTH_WRITEMASK = 2930;
lime.graphics.opengl.GL.DEPTH_CLEAR_VALUE = 2931;
lime.graphics.opengl.GL.DEPTH_FUNC = 2932;
lime.graphics.opengl.GL.STENCIL_CLEAR_VALUE = 2961;
lime.graphics.opengl.GL.STENCIL_FUNC = 2962;
lime.graphics.opengl.GL.STENCIL_FAIL = 2964;
lime.graphics.opengl.GL.STENCIL_PASS_DEPTH_FAIL = 2965;
lime.graphics.opengl.GL.STENCIL_PASS_DEPTH_PASS = 2966;
lime.graphics.opengl.GL.STENCIL_REF = 2967;
lime.graphics.opengl.GL.STENCIL_VALUE_MASK = 2963;
lime.graphics.opengl.GL.STENCIL_WRITEMASK = 2968;
lime.graphics.opengl.GL.STENCIL_BACK_FUNC = 34816;
lime.graphics.opengl.GL.STENCIL_BACK_FAIL = 34817;
lime.graphics.opengl.GL.STENCIL_BACK_PASS_DEPTH_FAIL = 34818;
lime.graphics.opengl.GL.STENCIL_BACK_PASS_DEPTH_PASS = 34819;
lime.graphics.opengl.GL.STENCIL_BACK_REF = 36003;
lime.graphics.opengl.GL.STENCIL_BACK_VALUE_MASK = 36004;
lime.graphics.opengl.GL.STENCIL_BACK_WRITEMASK = 36005;
lime.graphics.opengl.GL.VIEWPORT = 2978;
lime.graphics.opengl.GL.SCISSOR_BOX = 3088;
lime.graphics.opengl.GL.COLOR_CLEAR_VALUE = 3106;
lime.graphics.opengl.GL.COLOR_WRITEMASK = 3107;
lime.graphics.opengl.GL.UNPACK_ALIGNMENT = 3317;
lime.graphics.opengl.GL.PACK_ALIGNMENT = 3333;
lime.graphics.opengl.GL.MAX_TEXTURE_SIZE = 3379;
lime.graphics.opengl.GL.MAX_VIEWPORT_DIMS = 3386;
lime.graphics.opengl.GL.SUBPIXEL_BITS = 3408;
lime.graphics.opengl.GL.RED_BITS = 3410;
lime.graphics.opengl.GL.GREEN_BITS = 3411;
lime.graphics.opengl.GL.BLUE_BITS = 3412;
lime.graphics.opengl.GL.ALPHA_BITS = 3413;
lime.graphics.opengl.GL.DEPTH_BITS = 3414;
lime.graphics.opengl.GL.STENCIL_BITS = 3415;
lime.graphics.opengl.GL.POLYGON_OFFSET_UNITS = 10752;
lime.graphics.opengl.GL.POLYGON_OFFSET_FACTOR = 32824;
lime.graphics.opengl.GL.TEXTURE_BINDING_2D = 32873;
lime.graphics.opengl.GL.SAMPLE_BUFFERS = 32936;
lime.graphics.opengl.GL.SAMPLES = 32937;
lime.graphics.opengl.GL.SAMPLE_COVERAGE_VALUE = 32938;
lime.graphics.opengl.GL.SAMPLE_COVERAGE_INVERT = 32939;
lime.graphics.opengl.GL.COMPRESSED_TEXTURE_FORMATS = 34467;
lime.graphics.opengl.GL.DONT_CARE = 4352;
lime.graphics.opengl.GL.FASTEST = 4353;
lime.graphics.opengl.GL.NICEST = 4354;
lime.graphics.opengl.GL.GENERATE_MIPMAP_HINT = 33170;
lime.graphics.opengl.GL.BYTE = 5120;
lime.graphics.opengl.GL.UNSIGNED_BYTE = 5121;
lime.graphics.opengl.GL.SHORT = 5122;
lime.graphics.opengl.GL.UNSIGNED_SHORT = 5123;
lime.graphics.opengl.GL.INT = 5124;
lime.graphics.opengl.GL.UNSIGNED_INT = 5125;
lime.graphics.opengl.GL.FLOAT = 5126;
lime.graphics.opengl.GL.DEPTH_COMPONENT = 6402;
lime.graphics.opengl.GL.ALPHA = 6406;
lime.graphics.opengl.GL.RGB = 6407;
lime.graphics.opengl.GL.RGBA = 6408;
lime.graphics.opengl.GL.LUMINANCE = 6409;
lime.graphics.opengl.GL.LUMINANCE_ALPHA = 6410;
lime.graphics.opengl.GL.UNSIGNED_SHORT_4_4_4_4 = 32819;
lime.graphics.opengl.GL.UNSIGNED_SHORT_5_5_5_1 = 32820;
lime.graphics.opengl.GL.UNSIGNED_SHORT_5_6_5 = 33635;
lime.graphics.opengl.GL.FRAGMENT_SHADER = 35632;
lime.graphics.opengl.GL.VERTEX_SHADER = 35633;
lime.graphics.opengl.GL.MAX_VERTEX_ATTRIBS = 34921;
lime.graphics.opengl.GL.MAX_VERTEX_UNIFORM_VECTORS = 36347;
lime.graphics.opengl.GL.MAX_VARYING_VECTORS = 36348;
lime.graphics.opengl.GL.MAX_COMBINED_TEXTURE_IMAGE_UNITS = 35661;
lime.graphics.opengl.GL.MAX_VERTEX_TEXTURE_IMAGE_UNITS = 35660;
lime.graphics.opengl.GL.MAX_TEXTURE_IMAGE_UNITS = 34930;
lime.graphics.opengl.GL.MAX_FRAGMENT_UNIFORM_VECTORS = 36349;
lime.graphics.opengl.GL.SHADER_TYPE = 35663;
lime.graphics.opengl.GL.DELETE_STATUS = 35712;
lime.graphics.opengl.GL.LINK_STATUS = 35714;
lime.graphics.opengl.GL.VALIDATE_STATUS = 35715;
lime.graphics.opengl.GL.ATTACHED_SHADERS = 35717;
lime.graphics.opengl.GL.ACTIVE_UNIFORMS = 35718;
lime.graphics.opengl.GL.ACTIVE_ATTRIBUTES = 35721;
lime.graphics.opengl.GL.SHADING_LANGUAGE_VERSION = 35724;
lime.graphics.opengl.GL.CURRENT_PROGRAM = 35725;
lime.graphics.opengl.GL.NEVER = 512;
lime.graphics.opengl.GL.LESS = 513;
lime.graphics.opengl.GL.EQUAL = 514;
lime.graphics.opengl.GL.LEQUAL = 515;
lime.graphics.opengl.GL.GREATER = 516;
lime.graphics.opengl.GL.NOTEQUAL = 517;
lime.graphics.opengl.GL.GEQUAL = 518;
lime.graphics.opengl.GL.ALWAYS = 519;
lime.graphics.opengl.GL.KEEP = 7680;
lime.graphics.opengl.GL.REPLACE = 7681;
lime.graphics.opengl.GL.INCR = 7682;
lime.graphics.opengl.GL.DECR = 7683;
lime.graphics.opengl.GL.INVERT = 5386;
lime.graphics.opengl.GL.INCR_WRAP = 34055;
lime.graphics.opengl.GL.DECR_WRAP = 34056;
lime.graphics.opengl.GL.VENDOR = 7936;
lime.graphics.opengl.GL.RENDERER = 7937;
lime.graphics.opengl.GL.VERSION = 7938;
lime.graphics.opengl.GL.NEAREST = 9728;
lime.graphics.opengl.GL.LINEAR = 9729;
lime.graphics.opengl.GL.NEAREST_MIPMAP_NEAREST = 9984;
lime.graphics.opengl.GL.LINEAR_MIPMAP_NEAREST = 9985;
lime.graphics.opengl.GL.NEAREST_MIPMAP_LINEAR = 9986;
lime.graphics.opengl.GL.LINEAR_MIPMAP_LINEAR = 9987;
lime.graphics.opengl.GL.TEXTURE_MAG_FILTER = 10240;
lime.graphics.opengl.GL.TEXTURE_MIN_FILTER = 10241;
lime.graphics.opengl.GL.TEXTURE_WRAP_S = 10242;
lime.graphics.opengl.GL.TEXTURE_WRAP_T = 10243;
lime.graphics.opengl.GL.TEXTURE_2D = 3553;
lime.graphics.opengl.GL.TEXTURE = 5890;
lime.graphics.opengl.GL.TEXTURE_CUBE_MAP = 34067;
lime.graphics.opengl.GL.TEXTURE_BINDING_CUBE_MAP = 34068;
lime.graphics.opengl.GL.TEXTURE_CUBE_MAP_POSITIVE_X = 34069;
lime.graphics.opengl.GL.TEXTURE_CUBE_MAP_NEGATIVE_X = 34070;
lime.graphics.opengl.GL.TEXTURE_CUBE_MAP_POSITIVE_Y = 34071;
lime.graphics.opengl.GL.TEXTURE_CUBE_MAP_NEGATIVE_Y = 34072;
lime.graphics.opengl.GL.TEXTURE_CUBE_MAP_POSITIVE_Z = 34073;
lime.graphics.opengl.GL.TEXTURE_CUBE_MAP_NEGATIVE_Z = 34074;
lime.graphics.opengl.GL.MAX_CUBE_MAP_TEXTURE_SIZE = 34076;
lime.graphics.opengl.GL.TEXTURE0 = 33984;
lime.graphics.opengl.GL.TEXTURE1 = 33985;
lime.graphics.opengl.GL.TEXTURE2 = 33986;
lime.graphics.opengl.GL.TEXTURE3 = 33987;
lime.graphics.opengl.GL.TEXTURE4 = 33988;
lime.graphics.opengl.GL.TEXTURE5 = 33989;
lime.graphics.opengl.GL.TEXTURE6 = 33990;
lime.graphics.opengl.GL.TEXTURE7 = 33991;
lime.graphics.opengl.GL.TEXTURE8 = 33992;
lime.graphics.opengl.GL.TEXTURE9 = 33993;
lime.graphics.opengl.GL.TEXTURE10 = 33994;
lime.graphics.opengl.GL.TEXTURE11 = 33995;
lime.graphics.opengl.GL.TEXTURE12 = 33996;
lime.graphics.opengl.GL.TEXTURE13 = 33997;
lime.graphics.opengl.GL.TEXTURE14 = 33998;
lime.graphics.opengl.GL.TEXTURE15 = 33999;
lime.graphics.opengl.GL.TEXTURE16 = 34000;
lime.graphics.opengl.GL.TEXTURE17 = 34001;
lime.graphics.opengl.GL.TEXTURE18 = 34002;
lime.graphics.opengl.GL.TEXTURE19 = 34003;
lime.graphics.opengl.GL.TEXTURE20 = 34004;
lime.graphics.opengl.GL.TEXTURE21 = 34005;
lime.graphics.opengl.GL.TEXTURE22 = 34006;
lime.graphics.opengl.GL.TEXTURE23 = 34007;
lime.graphics.opengl.GL.TEXTURE24 = 34008;
lime.graphics.opengl.GL.TEXTURE25 = 34009;
lime.graphics.opengl.GL.TEXTURE26 = 34010;
lime.graphics.opengl.GL.TEXTURE27 = 34011;
lime.graphics.opengl.GL.TEXTURE28 = 34012;
lime.graphics.opengl.GL.TEXTURE29 = 34013;
lime.graphics.opengl.GL.TEXTURE30 = 34014;
lime.graphics.opengl.GL.TEXTURE31 = 34015;
lime.graphics.opengl.GL.ACTIVE_TEXTURE = 34016;
lime.graphics.opengl.GL.REPEAT = 10497;
lime.graphics.opengl.GL.CLAMP_TO_EDGE = 33071;
lime.graphics.opengl.GL.MIRRORED_REPEAT = 33648;
lime.graphics.opengl.GL.FLOAT_VEC2 = 35664;
lime.graphics.opengl.GL.FLOAT_VEC3 = 35665;
lime.graphics.opengl.GL.FLOAT_VEC4 = 35666;
lime.graphics.opengl.GL.INT_VEC2 = 35667;
lime.graphics.opengl.GL.INT_VEC3 = 35668;
lime.graphics.opengl.GL.INT_VEC4 = 35669;
lime.graphics.opengl.GL.BOOL = 35670;
lime.graphics.opengl.GL.BOOL_VEC2 = 35671;
lime.graphics.opengl.GL.BOOL_VEC3 = 35672;
lime.graphics.opengl.GL.BOOL_VEC4 = 35673;
lime.graphics.opengl.GL.FLOAT_MAT2 = 35674;
lime.graphics.opengl.GL.FLOAT_MAT3 = 35675;
lime.graphics.opengl.GL.FLOAT_MAT4 = 35676;
lime.graphics.opengl.GL.SAMPLER_2D = 35678;
lime.graphics.opengl.GL.SAMPLER_CUBE = 35680;
lime.graphics.opengl.GL.VERTEX_ATTRIB_ARRAY_ENABLED = 34338;
lime.graphics.opengl.GL.VERTEX_ATTRIB_ARRAY_SIZE = 34339;
lime.graphics.opengl.GL.VERTEX_ATTRIB_ARRAY_STRIDE = 34340;
lime.graphics.opengl.GL.VERTEX_ATTRIB_ARRAY_TYPE = 34341;
lime.graphics.opengl.GL.VERTEX_ATTRIB_ARRAY_NORMALIZED = 34922;
lime.graphics.opengl.GL.VERTEX_ATTRIB_ARRAY_POINTER = 34373;
lime.graphics.opengl.GL.VERTEX_ATTRIB_ARRAY_BUFFER_BINDING = 34975;
lime.graphics.opengl.GL.VERTEX_PROGRAM_POINT_SIZE = 34370;
lime.graphics.opengl.GL.POINT_SPRITE = 34913;
lime.graphics.opengl.GL.COMPILE_STATUS = 35713;
lime.graphics.opengl.GL.LOW_FLOAT = 36336;
lime.graphics.opengl.GL.MEDIUM_FLOAT = 36337;
lime.graphics.opengl.GL.HIGH_FLOAT = 36338;
lime.graphics.opengl.GL.LOW_INT = 36339;
lime.graphics.opengl.GL.MEDIUM_INT = 36340;
lime.graphics.opengl.GL.HIGH_INT = 36341;
lime.graphics.opengl.GL.FRAMEBUFFER = 36160;
lime.graphics.opengl.GL.RENDERBUFFER = 36161;
lime.graphics.opengl.GL.RGBA4 = 32854;
lime.graphics.opengl.GL.RGB5_A1 = 32855;
lime.graphics.opengl.GL.RGB565 = 36194;
lime.graphics.opengl.GL.DEPTH_COMPONENT16 = 33189;
lime.graphics.opengl.GL.STENCIL_INDEX = 6401;
lime.graphics.opengl.GL.STENCIL_INDEX8 = 36168;
lime.graphics.opengl.GL.DEPTH_STENCIL = 34041;
lime.graphics.opengl.GL.RENDERBUFFER_WIDTH = 36162;
lime.graphics.opengl.GL.RENDERBUFFER_HEIGHT = 36163;
lime.graphics.opengl.GL.RENDERBUFFER_INTERNAL_FORMAT = 36164;
lime.graphics.opengl.GL.RENDERBUFFER_RED_SIZE = 36176;
lime.graphics.opengl.GL.RENDERBUFFER_GREEN_SIZE = 36177;
lime.graphics.opengl.GL.RENDERBUFFER_BLUE_SIZE = 36178;
lime.graphics.opengl.GL.RENDERBUFFER_ALPHA_SIZE = 36179;
lime.graphics.opengl.GL.RENDERBUFFER_DEPTH_SIZE = 36180;
lime.graphics.opengl.GL.RENDERBUFFER_STENCIL_SIZE = 36181;
lime.graphics.opengl.GL.FRAMEBUFFER_ATTACHMENT_OBJECT_TYPE = 36048;
lime.graphics.opengl.GL.FRAMEBUFFER_ATTACHMENT_OBJECT_NAME = 36049;
lime.graphics.opengl.GL.FRAMEBUFFER_ATTACHMENT_TEXTURE_LEVEL = 36050;
lime.graphics.opengl.GL.FRAMEBUFFER_ATTACHMENT_TEXTURE_CUBE_MAP_FACE = 36051;
lime.graphics.opengl.GL.COLOR_ATTACHMENT0 = 36064;
lime.graphics.opengl.GL.DEPTH_ATTACHMENT = 36096;
lime.graphics.opengl.GL.STENCIL_ATTACHMENT = 36128;
lime.graphics.opengl.GL.DEPTH_STENCIL_ATTACHMENT = 33306;
lime.graphics.opengl.GL.NONE = 0;
lime.graphics.opengl.GL.FRAMEBUFFER_COMPLETE = 36053;
lime.graphics.opengl.GL.FRAMEBUFFER_INCOMPLETE_ATTACHMENT = 36054;
lime.graphics.opengl.GL.FRAMEBUFFER_INCOMPLETE_MISSING_ATTACHMENT = 36055;
lime.graphics.opengl.GL.FRAMEBUFFER_INCOMPLETE_DIMENSIONS = 36057;
lime.graphics.opengl.GL.FRAMEBUFFER_UNSUPPORTED = 36061;
lime.graphics.opengl.GL.FRAMEBUFFER_BINDING = 36006;
lime.graphics.opengl.GL.RENDERBUFFER_BINDING = 36007;
lime.graphics.opengl.GL.MAX_RENDERBUFFER_SIZE = 34024;
lime.graphics.opengl.GL.INVALID_FRAMEBUFFER_OPERATION = 1286;
lime.graphics.opengl.GL.UNPACK_FLIP_Y_WEBGL = 37440;
lime.graphics.opengl.GL.UNPACK_PREMULTIPLY_ALPHA_WEBGL = 37441;
lime.graphics.opengl.GL.CONTEXT_LOST_WEBGL = 37442;
lime.graphics.opengl.GL.UNPACK_COLORSPACE_CONVERSION_WEBGL = 37443;
lime.graphics.opengl.GL.BROWSER_DEFAULT_WEBGL = 37444;
lime.math._ColorMatrix.ColorMatrix_Impl_.__identity = [1.0,0.0,0.0,0.0,0.0,0.0,1.0,0.0,0.0,0.0,0.0,0.0,1.0,0.0,0.0,0.0,0.0,0.0,1.0,0.0];
lime.math.Matrix3.__identity = new lime.math.Matrix3();
lime.math._Matrix4.Matrix4_Impl_.__identity = [1.0,0.0,0.0,0.0,0.0,1.0,0.0,0.0,0.0,0.0,1.0,0.0,0.0,0.0,0.0,1.0];
lime.net._URLRequestMethod.URLRequestMethod_Impl_.DELETE = "DELETE";
lime.net._URLRequestMethod.URLRequestMethod_Impl_.GET = "GET";
lime.net._URLRequestMethod.URLRequestMethod_Impl_.HEAD = "HEAD";
lime.net._URLRequestMethod.URLRequestMethod_Impl_.OPTIONS = "OPTIONS";
lime.net._URLRequestMethod.URLRequestMethod_Impl_.POST = "POST";
lime.net._URLRequestMethod.URLRequestMethod_Impl_.PUT = "PUT";
lime.system.System.__moduleNames = null;
lime.system._System.SystemDirectory_Impl_.APPLICATION = 0;
lime.system._System.SystemDirectory_Impl_.APPLICATION_STORAGE = 1;
lime.system._System.SystemDirectory_Impl_.DESKTOP = 2;
lime.system._System.SystemDirectory_Impl_.DOCUMENTS = 3;
lime.system._System.SystemDirectory_Impl_.FONTS = 4;
lime.system._System.SystemDirectory_Impl_.USER = 5;
lime.text._TextDirection.TextDirection_Impl_.INVALID = 0;
lime.text._TextDirection.TextDirection_Impl_.LEFT_TO_RIGHT = 4;
lime.text._TextDirection.TextDirection_Impl_.RIGHT_TO_LEFT = 5;
lime.text._TextDirection.TextDirection_Impl_.TOP_TO_BOTTOM = 6;
lime.text._TextDirection.TextDirection_Impl_.BOTTOM_TO_TOP = 7;
lime.text._TextScript.TextScript_Impl_.COMMON = "Zyyy";
lime.text._TextScript.TextScript_Impl_.INHERITED = "Zinh";
lime.text._TextScript.TextScript_Impl_.UNKNOWN = "Zzzz";
lime.text._TextScript.TextScript_Impl_.ARABIC = "Arab";
lime.text._TextScript.TextScript_Impl_.ARMENIAN = "Armn";
lime.text._TextScript.TextScript_Impl_.BENGALI = "Beng";
lime.text._TextScript.TextScript_Impl_.CYRILLIC = "Cyrl";
lime.text._TextScript.TextScript_Impl_.DEVANAGARI = "Deva";
lime.text._TextScript.TextScript_Impl_.GEORGIAN = "Geor";
lime.text._TextScript.TextScript_Impl_.GREEK = "Grek";
lime.text._TextScript.TextScript_Impl_.GUJARATI = "Gujr";
lime.text._TextScript.TextScript_Impl_.GURMUKHI = "Guru";
lime.text._TextScript.TextScript_Impl_.HANGUL = "Hang";
lime.text._TextScript.TextScript_Impl_.HAN = "Hani";
lime.text._TextScript.TextScript_Impl_.HEBREW = "Hebr";
lime.text._TextScript.TextScript_Impl_.HIRAGANA = "Hira";
lime.text._TextScript.TextScript_Impl_.KANNADA = "Knda";
lime.text._TextScript.TextScript_Impl_.KATAKANA = "Kana";
lime.text._TextScript.TextScript_Impl_.LAO = "Laoo";
lime.text._TextScript.TextScript_Impl_.LATIN = "Latn";
lime.text._TextScript.TextScript_Impl_.MALAYALAM = "Mlym";
lime.text._TextScript.TextScript_Impl_.ORIYA = "Orya";
lime.text._TextScript.TextScript_Impl_.TAMIL = "Taml";
lime.text._TextScript.TextScript_Impl_.TELUGA = "Telu";
lime.text._TextScript.TextScript_Impl_.THAI = "Thai";
lime.text._TextScript.TextScript_Impl_.TIBETAN = "Tibt";
lime.text._TextScript.TextScript_Impl_.BOPOMOFO = "Bopo";
lime.text._TextScript.TextScript_Impl_.BRAILLE = "Brai";
lime.text._TextScript.TextScript_Impl_.CANADIAN_SYLLABICS = "Cans";
lime.text._TextScript.TextScript_Impl_.CHEROKEE = "Cher";
lime.text._TextScript.TextScript_Impl_.ETHIOPIC = "Ethi";
lime.text._TextScript.TextScript_Impl_.KHMER = "Khmr";
lime.text._TextScript.TextScript_Impl_.MONGOLIAN = "Mong";
lime.text._TextScript.TextScript_Impl_.MYANMAR = "Mymr";
lime.text._TextScript.TextScript_Impl_.OGHAM = "Ogam";
lime.text._TextScript.TextScript_Impl_.RUNIC = "Runr";
lime.text._TextScript.TextScript_Impl_.SINHALA = "Sinh";
lime.text._TextScript.TextScript_Impl_.SYRIAC = "Syrc";
lime.text._TextScript.TextScript_Impl_.THAANA = "Thaa";
lime.text._TextScript.TextScript_Impl_.YI = "Yiii";
lime.text._TextScript.TextScript_Impl_.DESERET = "Dsrt";
lime.text._TextScript.TextScript_Impl_.GOTHIC = "Goth";
lime.text._TextScript.TextScript_Impl_.OLD_ITALIC = "Ital";
lime.text._TextScript.TextScript_Impl_.BUHID = "Buhd";
lime.text._TextScript.TextScript_Impl_.HANUNOO = "Hano";
lime.text._TextScript.TextScript_Impl_.TAGALOG = "Tglg";
lime.text._TextScript.TextScript_Impl_.TAGBANWA = "Tagb";
lime.text._TextScript.TextScript_Impl_.CYPRIOT = "Cprt";
lime.text._TextScript.TextScript_Impl_.LIMBU = "Limb";
lime.text._TextScript.TextScript_Impl_.LINEAR_B = "Linb";
lime.text._TextScript.TextScript_Impl_.OSMANYA = "Osma";
lime.text._TextScript.TextScript_Impl_.SHAVIAN = "Shaw";
lime.text._TextScript.TextScript_Impl_.TAI_LE = "Tale";
lime.text._TextScript.TextScript_Impl_.UGARITIC = "Ugar";
lime.text._TextScript.TextScript_Impl_.BUGINESE = "Bugi";
lime.text._TextScript.TextScript_Impl_.COPTIC = "Copt";
lime.text._TextScript.TextScript_Impl_.GLAGOLITIC = "Glag";
lime.text._TextScript.TextScript_Impl_.KHAROSHTHI = "Khar";
lime.text._TextScript.TextScript_Impl_.NEW_TAI_LUE = "Talu";
lime.text._TextScript.TextScript_Impl_.OLD_PERSIAN = "Xpeo";
lime.text._TextScript.TextScript_Impl_.SYLOTI_NAGRI = "Sylo";
lime.text._TextScript.TextScript_Impl_.TIFINAGH = "Tfng";
lime.text._TextScript.TextScript_Impl_.BALINESE = "Bali";
lime.text._TextScript.TextScript_Impl_.CUNEIFORM = "Xsux";
lime.text._TextScript.TextScript_Impl_.NKO = "Nkoo";
lime.text._TextScript.TextScript_Impl_.PHAGS_PA = "Phag";
lime.text._TextScript.TextScript_Impl_.PHOENICIAN = "Phnx";
lime.text._TextScript.TextScript_Impl_.CARIAN = "Cari";
lime.text._TextScript.TextScript_Impl_.CHAM = "Cham";
lime.text._TextScript.TextScript_Impl_.KAYAH_LI = "Kali";
lime.text._TextScript.TextScript_Impl_.LEPCHA = "Lepc";
lime.text._TextScript.TextScript_Impl_.LYCIAN = "Lyci";
lime.text._TextScript.TextScript_Impl_.LYDIAN = "Lydi";
lime.text._TextScript.TextScript_Impl_.OL_CHIKI = "Olck";
lime.text._TextScript.TextScript_Impl_.REJANG = "Rjng";
lime.text._TextScript.TextScript_Impl_.SAURASHTRA = "Saur";
lime.text._TextScript.TextScript_Impl_.SUNDANESE = "Sund";
lime.text._TextScript.TextScript_Impl_.VAI = "Vaii";
lime.text._TextScript.TextScript_Impl_.AVESTAN = "Avst";
lime.text._TextScript.TextScript_Impl_.BAMUM = "Bamu";
lime.text._TextScript.TextScript_Impl_.EGYPTIAN_HIEROGLYPHS = "Egyp";
lime.text._TextScript.TextScript_Impl_.IMPERIAL_ARAMAIC = "Armi";
lime.text._TextScript.TextScript_Impl_.INSCRIPTIONAL_PAHLAVI = "Phli";
lime.text._TextScript.TextScript_Impl_.INSCRIPTIONAL_PARTHIAN = "Prti";
lime.text._TextScript.TextScript_Impl_.JAVANESE = "Java";
lime.text._TextScript.TextScript_Impl_.KAITHI = "Kthi";
lime.text._TextScript.TextScript_Impl_.LISU = "Lisu";
lime.text._TextScript.TextScript_Impl_.MEETEI_MAYEK = "Mtei";
lime.text._TextScript.TextScript_Impl_.OLD_SOUTH_ARABIAN = "Sarb";
lime.text._TextScript.TextScript_Impl_.OLD_TURKIC = "Orkh";
lime.text._TextScript.TextScript_Impl_.SAMARITAN = "Samr";
lime.text._TextScript.TextScript_Impl_.TAI_THAM = "Lana";
lime.text._TextScript.TextScript_Impl_.TAI_VIET = "Tavt";
lime.text._TextScript.TextScript_Impl_.BATAK = "Batk";
lime.text._TextScript.TextScript_Impl_.BRAHMI = "Brah";
lime.text._TextScript.TextScript_Impl_.MANDAIC = "Mand";
lime.text._TextScript.TextScript_Impl_.CHAKMA = "Cakm";
lime.text._TextScript.TextScript_Impl_.MEROITIC_CURSIVE = "Merc";
lime.text._TextScript.TextScript_Impl_.MEROITIC_HIEROGLYPHS = "Mero";
lime.text._TextScript.TextScript_Impl_.MIAO = "Plrd";
lime.text._TextScript.TextScript_Impl_.SHARADA = "Shrd";
lime.text._TextScript.TextScript_Impl_.SORA_SOMPENG = "Sora";
lime.text._TextScript.TextScript_Impl_.TAKRI = "Takr";
lime.text._TextScript.TextScript_Impl_.BASSA_VAH = "Bass";
lime.text._TextScript.TextScript_Impl_.CAUCASIAN_ALBANIAN = "Aghb";
lime.text._TextScript.TextScript_Impl_.DUPLOYAN = "Dupl";
lime.text._TextScript.TextScript_Impl_.ELBASAN = "Elba";
lime.text._TextScript.TextScript_Impl_.GRANTHA = "Gran";
lime.text._TextScript.TextScript_Impl_.KHOJKI = "Khoj";
lime.text._TextScript.TextScript_Impl_.KHUDAWADI = "Sind";
lime.text._TextScript.TextScript_Impl_.LINEAR_A = "Lina";
lime.text._TextScript.TextScript_Impl_.MAHAJANI = "Mahj";
lime.text._TextScript.TextScript_Impl_.MANICHAEAN = "Mani";
lime.text._TextScript.TextScript_Impl_.MENDE_KIKAKUI = "Mend";
lime.text._TextScript.TextScript_Impl_.MODI = "Modi";
lime.text._TextScript.TextScript_Impl_.MRO = "Mroo";
lime.text._TextScript.TextScript_Impl_.NABATAEAN = "Nbat";
lime.text._TextScript.TextScript_Impl_.OLD_NORTH_ARABIAN = "Narb";
lime.text._TextScript.TextScript_Impl_.OLD_PERMIC = "Perm";
lime.text._TextScript.TextScript_Impl_.PAHAWH_HMONG = "Hmng";
lime.text._TextScript.TextScript_Impl_.PALMYRENE = "Palm";
lime.text._TextScript.TextScript_Impl_.PAU_CIN_HAU = "Pauc";
lime.text._TextScript.TextScript_Impl_.PSALTER_PAHLAVI = "Phlp";
lime.text._TextScript.TextScript_Impl_.SIDDHAM = "Sidd";
lime.text._TextScript.TextScript_Impl_.TIRHUTA = "Tirh";
lime.text._TextScript.TextScript_Impl_.WARANG_CITI = "Wara";
lime.ui.Gamepad.devices = new haxe.ds.IntMap();
lime.ui._GamepadAxis.GamepadAxis_Impl_.LEFT_X = 0;
lime.ui._GamepadAxis.GamepadAxis_Impl_.LEFT_Y = 1;
lime.ui._GamepadAxis.GamepadAxis_Impl_.RIGHT_X = 2;
lime.ui._GamepadAxis.GamepadAxis_Impl_.RIGHT_Y = 3;
lime.ui._GamepadAxis.GamepadAxis_Impl_.TRIGGER_LEFT = 4;
lime.ui._GamepadAxis.GamepadAxis_Impl_.TRIGGER_RIGHT = 5;
lime.ui._GamepadButton.GamepadButton_Impl_.A = 0;
lime.ui._GamepadButton.GamepadButton_Impl_.B = 1;
lime.ui._GamepadButton.GamepadButton_Impl_.X = 2;
lime.ui._GamepadButton.GamepadButton_Impl_.Y = 3;
lime.ui._GamepadButton.GamepadButton_Impl_.BACK = 4;
lime.ui._GamepadButton.GamepadButton_Impl_.GUIDE = 5;
lime.ui._GamepadButton.GamepadButton_Impl_.START = 6;
lime.ui._GamepadButton.GamepadButton_Impl_.LEFT_STICK = 7;
lime.ui._GamepadButton.GamepadButton_Impl_.RIGHT_STICK = 8;
lime.ui._GamepadButton.GamepadButton_Impl_.LEFT_SHOULDER = 9;
lime.ui._GamepadButton.GamepadButton_Impl_.RIGHT_SHOULDER = 10;
lime.ui._GamepadButton.GamepadButton_Impl_.DPAD_UP = 11;
lime.ui._GamepadButton.GamepadButton_Impl_.DPAD_DOWN = 12;
lime.ui._GamepadButton.GamepadButton_Impl_.DPAD_LEFT = 13;
lime.ui._GamepadButton.GamepadButton_Impl_.DPAD_RIGHT = 14;
lime.ui._KeyCode.KeyCode_Impl_.UNKNOWN = 0;
lime.ui._KeyCode.KeyCode_Impl_.BACKSPACE = 8;
lime.ui._KeyCode.KeyCode_Impl_.TAB = 9;
lime.ui._KeyCode.KeyCode_Impl_.RETURN = 13;
lime.ui._KeyCode.KeyCode_Impl_.ESCAPE = 27;
lime.ui._KeyCode.KeyCode_Impl_.SPACE = 32;
lime.ui._KeyCode.KeyCode_Impl_.EXCLAMATION = 33;
lime.ui._KeyCode.KeyCode_Impl_.QUOTE = 34;
lime.ui._KeyCode.KeyCode_Impl_.HASH = 35;
lime.ui._KeyCode.KeyCode_Impl_.DOLLAR = 36;
lime.ui._KeyCode.KeyCode_Impl_.PERCENT = 37;
lime.ui._KeyCode.KeyCode_Impl_.AMPERSAND = 38;
lime.ui._KeyCode.KeyCode_Impl_.SINGLE_QUOTE = 39;
lime.ui._KeyCode.KeyCode_Impl_.LEFT_PARENTHESIS = 40;
lime.ui._KeyCode.KeyCode_Impl_.RIGHT_PARENTHESIS = 41;
lime.ui._KeyCode.KeyCode_Impl_.ASTERISK = 42;
lime.ui._KeyCode.KeyCode_Impl_.PLUS = 43;
lime.ui._KeyCode.KeyCode_Impl_.COMMA = 44;
lime.ui._KeyCode.KeyCode_Impl_.MINUS = 45;
lime.ui._KeyCode.KeyCode_Impl_.PERIOD = 46;
lime.ui._KeyCode.KeyCode_Impl_.SLASH = 47;
lime.ui._KeyCode.KeyCode_Impl_.NUMBER_0 = 48;
lime.ui._KeyCode.KeyCode_Impl_.NUMBER_1 = 49;
lime.ui._KeyCode.KeyCode_Impl_.NUMBER_2 = 50;
lime.ui._KeyCode.KeyCode_Impl_.NUMBER_3 = 51;
lime.ui._KeyCode.KeyCode_Impl_.NUMBER_4 = 52;
lime.ui._KeyCode.KeyCode_Impl_.NUMBER_5 = 53;
lime.ui._KeyCode.KeyCode_Impl_.NUMBER_6 = 54;
lime.ui._KeyCode.KeyCode_Impl_.NUMBER_7 = 55;
lime.ui._KeyCode.KeyCode_Impl_.NUMBER_8 = 56;
lime.ui._KeyCode.KeyCode_Impl_.NUMBER_9 = 57;
lime.ui._KeyCode.KeyCode_Impl_.COLON = 58;
lime.ui._KeyCode.KeyCode_Impl_.SEMICOLON = 59;
lime.ui._KeyCode.KeyCode_Impl_.LESS_THAN = 60;
lime.ui._KeyCode.KeyCode_Impl_.EQUALS = 61;
lime.ui._KeyCode.KeyCode_Impl_.GREATER_THAN = 62;
lime.ui._KeyCode.KeyCode_Impl_.QUESTION = 63;
lime.ui._KeyCode.KeyCode_Impl_.AT = 64;
lime.ui._KeyCode.KeyCode_Impl_.LEFT_BRACKET = 91;
lime.ui._KeyCode.KeyCode_Impl_.BACKSLASH = 92;
lime.ui._KeyCode.KeyCode_Impl_.RIGHT_BRACKET = 93;
lime.ui._KeyCode.KeyCode_Impl_.CARET = 94;
lime.ui._KeyCode.KeyCode_Impl_.UNDERSCORE = 95;
lime.ui._KeyCode.KeyCode_Impl_.GRAVE = 96;
lime.ui._KeyCode.KeyCode_Impl_.A = 97;
lime.ui._KeyCode.KeyCode_Impl_.B = 98;
lime.ui._KeyCode.KeyCode_Impl_.C = 99;
lime.ui._KeyCode.KeyCode_Impl_.D = 100;
lime.ui._KeyCode.KeyCode_Impl_.E = 101;
lime.ui._KeyCode.KeyCode_Impl_.F = 102;
lime.ui._KeyCode.KeyCode_Impl_.G = 103;
lime.ui._KeyCode.KeyCode_Impl_.H = 104;
lime.ui._KeyCode.KeyCode_Impl_.I = 105;
lime.ui._KeyCode.KeyCode_Impl_.J = 106;
lime.ui._KeyCode.KeyCode_Impl_.K = 107;
lime.ui._KeyCode.KeyCode_Impl_.L = 108;
lime.ui._KeyCode.KeyCode_Impl_.M = 109;
lime.ui._KeyCode.KeyCode_Impl_.N = 110;
lime.ui._KeyCode.KeyCode_Impl_.O = 111;
lime.ui._KeyCode.KeyCode_Impl_.P = 112;
lime.ui._KeyCode.KeyCode_Impl_.Q = 113;
lime.ui._KeyCode.KeyCode_Impl_.R = 114;
lime.ui._KeyCode.KeyCode_Impl_.S = 115;
lime.ui._KeyCode.KeyCode_Impl_.T = 116;
lime.ui._KeyCode.KeyCode_Impl_.U = 117;
lime.ui._KeyCode.KeyCode_Impl_.V = 118;
lime.ui._KeyCode.KeyCode_Impl_.W = 119;
lime.ui._KeyCode.KeyCode_Impl_.X = 120;
lime.ui._KeyCode.KeyCode_Impl_.Y = 121;
lime.ui._KeyCode.KeyCode_Impl_.Z = 122;
lime.ui._KeyCode.KeyCode_Impl_.DELETE = 127;
lime.ui._KeyCode.KeyCode_Impl_.CAPS_LOCK = 1073741881;
lime.ui._KeyCode.KeyCode_Impl_.F1 = 1073741882;
lime.ui._KeyCode.KeyCode_Impl_.F2 = 1073741883;
lime.ui._KeyCode.KeyCode_Impl_.F3 = 1073741884;
lime.ui._KeyCode.KeyCode_Impl_.F4 = 1073741885;
lime.ui._KeyCode.KeyCode_Impl_.F5 = 1073741886;
lime.ui._KeyCode.KeyCode_Impl_.F6 = 1073741887;
lime.ui._KeyCode.KeyCode_Impl_.F7 = 1073741888;
lime.ui._KeyCode.KeyCode_Impl_.F8 = 1073741889;
lime.ui._KeyCode.KeyCode_Impl_.F9 = 1073741890;
lime.ui._KeyCode.KeyCode_Impl_.F10 = 1073741891;
lime.ui._KeyCode.KeyCode_Impl_.F11 = 1073741892;
lime.ui._KeyCode.KeyCode_Impl_.F12 = 1073741893;
lime.ui._KeyCode.KeyCode_Impl_.PRINT_SCREEN = 1073741894;
lime.ui._KeyCode.KeyCode_Impl_.SCROLL_LOCK = 1073741895;
lime.ui._KeyCode.KeyCode_Impl_.PAUSE = 1073741896;
lime.ui._KeyCode.KeyCode_Impl_.INSERT = 1073741897;
lime.ui._KeyCode.KeyCode_Impl_.HOME = 1073741898;
lime.ui._KeyCode.KeyCode_Impl_.PAGE_UP = 1073741899;
lime.ui._KeyCode.KeyCode_Impl_.END = 1073741901;
lime.ui._KeyCode.KeyCode_Impl_.PAGE_DOWN = 1073741902;
lime.ui._KeyCode.KeyCode_Impl_.RIGHT = 1073741903;
lime.ui._KeyCode.KeyCode_Impl_.LEFT = 1073741904;
lime.ui._KeyCode.KeyCode_Impl_.DOWN = 1073741905;
lime.ui._KeyCode.KeyCode_Impl_.UP = 1073741906;
lime.ui._KeyCode.KeyCode_Impl_.NUM_LOCK = 1073741907;
lime.ui._KeyCode.KeyCode_Impl_.NUMPAD_DIVIDE = 1073741908;
lime.ui._KeyCode.KeyCode_Impl_.NUMPAD_MULTIPLY = 1073741909;
lime.ui._KeyCode.KeyCode_Impl_.NUMPAD_MINUS = 1073741910;
lime.ui._KeyCode.KeyCode_Impl_.NUMPAD_PLUS = 1073741911;
lime.ui._KeyCode.KeyCode_Impl_.NUMPAD_ENTER = 1073741912;
lime.ui._KeyCode.KeyCode_Impl_.NUMPAD_1 = 1073741913;
lime.ui._KeyCode.KeyCode_Impl_.NUMPAD_2 = 1073741914;
lime.ui._KeyCode.KeyCode_Impl_.NUMPAD_3 = 1073741915;
lime.ui._KeyCode.KeyCode_Impl_.NUMPAD_4 = 1073741916;
lime.ui._KeyCode.KeyCode_Impl_.NUMPAD_5 = 1073741917;
lime.ui._KeyCode.KeyCode_Impl_.NUMPAD_6 = 1073741918;
lime.ui._KeyCode.KeyCode_Impl_.NUMPAD_7 = 1073741919;
lime.ui._KeyCode.KeyCode_Impl_.NUMPAD_8 = 1073741920;
lime.ui._KeyCode.KeyCode_Impl_.NUMPAD_9 = 1073741921;
lime.ui._KeyCode.KeyCode_Impl_.NUMPAD_0 = 1073741922;
lime.ui._KeyCode.KeyCode_Impl_.NUMPAD_PERIOD = 1073741923;
lime.ui._KeyCode.KeyCode_Impl_.APPLICATION = 1073741925;
lime.ui._KeyCode.KeyCode_Impl_.POWER = 1073741926;
lime.ui._KeyCode.KeyCode_Impl_.NUMPAD_EQUALS = 1073741927;
lime.ui._KeyCode.KeyCode_Impl_.F13 = 1073741928;
lime.ui._KeyCode.KeyCode_Impl_.F14 = 1073741929;
lime.ui._KeyCode.KeyCode_Impl_.F15 = 1073741930;
lime.ui._KeyCode.KeyCode_Impl_.F16 = 1073741931;
lime.ui._KeyCode.KeyCode_Impl_.F17 = 1073741932;
lime.ui._KeyCode.KeyCode_Impl_.F18 = 1073741933;
lime.ui._KeyCode.KeyCode_Impl_.F19 = 1073741934;
lime.ui._KeyCode.KeyCode_Impl_.F20 = 1073741935;
lime.ui._KeyCode.KeyCode_Impl_.F21 = 1073741936;
lime.ui._KeyCode.KeyCode_Impl_.F22 = 1073741937;
lime.ui._KeyCode.KeyCode_Impl_.F23 = 1073741938;
lime.ui._KeyCode.KeyCode_Impl_.F24 = 1073741939;
lime.ui._KeyCode.KeyCode_Impl_.EXECUTE = 1073741940;
lime.ui._KeyCode.KeyCode_Impl_.HELP = 1073741941;
lime.ui._KeyCode.KeyCode_Impl_.MENU = 1073741942;
lime.ui._KeyCode.KeyCode_Impl_.SELECT = 1073741943;
lime.ui._KeyCode.KeyCode_Impl_.STOP = 1073741944;
lime.ui._KeyCode.KeyCode_Impl_.AGAIN = 1073741945;
lime.ui._KeyCode.KeyCode_Impl_.UNDO = 1073741946;
lime.ui._KeyCode.KeyCode_Impl_.CUT = 1073741947;
lime.ui._KeyCode.KeyCode_Impl_.COPY = 1073741948;
lime.ui._KeyCode.KeyCode_Impl_.PASTE = 1073741949;
lime.ui._KeyCode.KeyCode_Impl_.FIND = 1073741950;
lime.ui._KeyCode.KeyCode_Impl_.MUTE = 1073741951;
lime.ui._KeyCode.KeyCode_Impl_.VOLUME_UP = 1073741952;
lime.ui._KeyCode.KeyCode_Impl_.VOLUME_DOWN = 1073741953;
lime.ui._KeyCode.KeyCode_Impl_.NUMPAD_COMMA = 1073741957;
lime.ui._KeyCode.KeyCode_Impl_.ALT_ERASE = 1073741977;
lime.ui._KeyCode.KeyCode_Impl_.SYSTEM_REQUEST = 1073741978;
lime.ui._KeyCode.KeyCode_Impl_.CANCEL = 1073741979;
lime.ui._KeyCode.KeyCode_Impl_.CLEAR = 1073741980;
lime.ui._KeyCode.KeyCode_Impl_.PRIOR = 1073741981;
lime.ui._KeyCode.KeyCode_Impl_.RETURN2 = 1073741982;
lime.ui._KeyCode.KeyCode_Impl_.SEPARATOR = 1073741983;
lime.ui._KeyCode.KeyCode_Impl_.OUT = 1073741984;
lime.ui._KeyCode.KeyCode_Impl_.OPER = 1073741985;
lime.ui._KeyCode.KeyCode_Impl_.CLEAR_AGAIN = 1073741986;
lime.ui._KeyCode.KeyCode_Impl_.CRSEL = 1073741987;
lime.ui._KeyCode.KeyCode_Impl_.EXSEL = 1073741988;
lime.ui._KeyCode.KeyCode_Impl_.NUMPAD_00 = 1073742000;
lime.ui._KeyCode.KeyCode_Impl_.NUMPAD_000 = 1073742001;
lime.ui._KeyCode.KeyCode_Impl_.THOUSAND_SEPARATOR = 1073742002;
lime.ui._KeyCode.KeyCode_Impl_.DECIMAL_SEPARATOR = 1073742003;
lime.ui._KeyCode.KeyCode_Impl_.CURRENCY_UNIT = 1073742004;
lime.ui._KeyCode.KeyCode_Impl_.CURRENCY_SUBUNIT = 1073742005;
lime.ui._KeyCode.KeyCode_Impl_.NUMPAD_LEFT_PARENTHESIS = 1073742006;
lime.ui._KeyCode.KeyCode_Impl_.NUMPAD_RIGHT_PARENTHESIS = 1073742007;
lime.ui._KeyCode.KeyCode_Impl_.NUMPAD_LEFT_BRACE = 1073742008;
lime.ui._KeyCode.KeyCode_Impl_.NUMPAD_RIGHT_BRACE = 1073742009;
lime.ui._KeyCode.KeyCode_Impl_.NUMPAD_TAB = 1073742010;
lime.ui._KeyCode.KeyCode_Impl_.NUMPAD_BACKSPACE = 1073742011;
lime.ui._KeyCode.KeyCode_Impl_.NUMPAD_A = 1073742012;
lime.ui._KeyCode.KeyCode_Impl_.NUMPAD_B = 1073742013;
lime.ui._KeyCode.KeyCode_Impl_.NUMPAD_C = 1073742014;
lime.ui._KeyCode.KeyCode_Impl_.NUMPAD_D = 1073742015;
lime.ui._KeyCode.KeyCode_Impl_.NUMPAD_E = 1073742016;
lime.ui._KeyCode.KeyCode_Impl_.NUMPAD_F = 1073742017;
lime.ui._KeyCode.KeyCode_Impl_.NUMPAD_XOR = 1073742018;
lime.ui._KeyCode.KeyCode_Impl_.NUMPAD_POWER = 1073742019;
lime.ui._KeyCode.KeyCode_Impl_.NUMPAD_PERCENT = 1073742020;
lime.ui._KeyCode.KeyCode_Impl_.NUMPAD_LESS_THAN = 1073742021;
lime.ui._KeyCode.KeyCode_Impl_.NUMPAD_GREATER_THAN = 1073742022;
lime.ui._KeyCode.KeyCode_Impl_.NUMPAD_AMPERSAND = 1073742023;
lime.ui._KeyCode.KeyCode_Impl_.NUMPAD_DOUBLE_AMPERSAND = 1073742024;
lime.ui._KeyCode.KeyCode_Impl_.NUMPAD_VERTICAL_BAR = 1073742025;
lime.ui._KeyCode.KeyCode_Impl_.NUMPAD_DOUBLE_VERTICAL_BAR = 1073742026;
lime.ui._KeyCode.KeyCode_Impl_.NUMPAD_COLON = 1073742027;
lime.ui._KeyCode.KeyCode_Impl_.NUMPAD_HASH = 1073742028;
lime.ui._KeyCode.KeyCode_Impl_.NUMPAD_SPACE = 1073742029;
lime.ui._KeyCode.KeyCode_Impl_.NUMPAD_AT = 1073742030;
lime.ui._KeyCode.KeyCode_Impl_.NUMPAD_EXCLAMATION = 1073742031;
lime.ui._KeyCode.KeyCode_Impl_.NUMPAD_MEM_STORE = 1073742032;
lime.ui._KeyCode.KeyCode_Impl_.NUMPAD_MEM_RECALL = 1073742033;
lime.ui._KeyCode.KeyCode_Impl_.NUMPAD_MEM_CLEAR = 1073742034;
lime.ui._KeyCode.KeyCode_Impl_.NUMPAD_MEM_ADD = 1073742035;
lime.ui._KeyCode.KeyCode_Impl_.NUMPAD_MEM_SUBTRACT = 1073742036;
lime.ui._KeyCode.KeyCode_Impl_.NUMPAD_MEM_MULTIPLY = 1073742037;
lime.ui._KeyCode.KeyCode_Impl_.NUMPAD_MEM_DIVIDE = 1073742038;
lime.ui._KeyCode.KeyCode_Impl_.NUMPAD_PLUS_MINUS = 1073742039;
lime.ui._KeyCode.KeyCode_Impl_.NUMPAD_CLEAR = 1073742040;
lime.ui._KeyCode.KeyCode_Impl_.NUMPAD_CLEAR_ENTRY = 1073742041;
lime.ui._KeyCode.KeyCode_Impl_.NUMPAD_BINARY = 1073742042;
lime.ui._KeyCode.KeyCode_Impl_.NUMPAD_OCTAL = 1073742043;
lime.ui._KeyCode.KeyCode_Impl_.NUMPAD_DECIMAL = 1073742044;
lime.ui._KeyCode.KeyCode_Impl_.NUMPAD_HEXADECIMAL = 1073742045;
lime.ui._KeyCode.KeyCode_Impl_.LEFT_CTRL = 1073742048;
lime.ui._KeyCode.KeyCode_Impl_.LEFT_SHIFT = 1073742049;
lime.ui._KeyCode.KeyCode_Impl_.LEFT_ALT = 1073742050;
lime.ui._KeyCode.KeyCode_Impl_.LEFT_META = 1073742051;
lime.ui._KeyCode.KeyCode_Impl_.RIGHT_CTRL = 1073742052;
lime.ui._KeyCode.KeyCode_Impl_.RIGHT_SHIFT = 1073742053;
lime.ui._KeyCode.KeyCode_Impl_.RIGHT_ALT = 1073742054;
lime.ui._KeyCode.KeyCode_Impl_.RIGHT_META = 1073742055;
lime.ui._KeyCode.KeyCode_Impl_.MODE = 1073742081;
lime.ui._KeyCode.KeyCode_Impl_.AUDIO_NEXT = 1073742082;
lime.ui._KeyCode.KeyCode_Impl_.AUDIO_PREVIOUS = 1073742083;
lime.ui._KeyCode.KeyCode_Impl_.AUDIO_STOP = 1073742084;
lime.ui._KeyCode.KeyCode_Impl_.AUDIO_PLAY = 1073742085;
lime.ui._KeyCode.KeyCode_Impl_.AUDIO_MUTE = 1073742086;
lime.ui._KeyCode.KeyCode_Impl_.MEDIA_SELECT = 1073742087;
lime.ui._KeyCode.KeyCode_Impl_.WWW = 1073742088;
lime.ui._KeyCode.KeyCode_Impl_.MAIL = 1073742089;
lime.ui._KeyCode.KeyCode_Impl_.CALCULATOR = 1073742090;
lime.ui._KeyCode.KeyCode_Impl_.COMPUTER = 1073742091;
lime.ui._KeyCode.KeyCode_Impl_.APP_CONTROL_SEARCH = 1073742092;
lime.ui._KeyCode.KeyCode_Impl_.APP_CONTROL_HOME = 1073742093;
lime.ui._KeyCode.KeyCode_Impl_.APP_CONTROL_BACK = 1073742094;
lime.ui._KeyCode.KeyCode_Impl_.APP_CONTROL_FORWARD = 1073742095;
lime.ui._KeyCode.KeyCode_Impl_.APP_CONTROL_STOP = 1073742096;
lime.ui._KeyCode.KeyCode_Impl_.APP_CONTROL_REFRESH = 1073742097;
lime.ui._KeyCode.KeyCode_Impl_.APP_CONTROL_BOOKMARKS = 1073742098;
lime.ui._KeyCode.KeyCode_Impl_.BRIGHTNESS_DOWN = 1073742099;
lime.ui._KeyCode.KeyCode_Impl_.BRIGHTNESS_UP = 1073742100;
lime.ui._KeyCode.KeyCode_Impl_.DISPLAY_SWITCH = 1073742101;
lime.ui._KeyCode.KeyCode_Impl_.BACKLIGHT_TOGGLE = 1073742102;
lime.ui._KeyCode.KeyCode_Impl_.BACKLIGHT_DOWN = 1073742103;
lime.ui._KeyCode.KeyCode_Impl_.BACKLIGHT_UP = 1073742104;
lime.ui._KeyCode.KeyCode_Impl_.EJECT = 1073742105;
lime.ui._KeyCode.KeyCode_Impl_.SLEEP = 1073742106;
lime.ui._KeyModifier.KeyModifier_Impl_.NONE = 0;
lime.ui._KeyModifier.KeyModifier_Impl_.LEFT_SHIFT = 1;
lime.ui._KeyModifier.KeyModifier_Impl_.RIGHT_SHIFT = 2;
lime.ui._KeyModifier.KeyModifier_Impl_.LEFT_CTRL = 64;
lime.ui._KeyModifier.KeyModifier_Impl_.RIGHT_CTRL = 128;
lime.ui._KeyModifier.KeyModifier_Impl_.LEFT_ALT = 256;
lime.ui._KeyModifier.KeyModifier_Impl_.RIGHT_ALT = 512;
lime.ui._KeyModifier.KeyModifier_Impl_.LEFT_META = 1024;
lime.ui._KeyModifier.KeyModifier_Impl_.RIGHT_META = 2048;
lime.ui._KeyModifier.KeyModifier_Impl_.NUM_LOCK = 4096;
lime.ui._KeyModifier.KeyModifier_Impl_.CAPS_LOCK = 8192;
lime.ui._KeyModifier.KeyModifier_Impl_.MODE = 16384;
lime.ui._KeyModifier.KeyModifier_Impl_.CTRL = 192;
lime.ui._KeyModifier.KeyModifier_Impl_.SHIFT = 3;
lime.ui._KeyModifier.KeyModifier_Impl_.ALT = 768;
lime.ui._KeyModifier.KeyModifier_Impl_.META = 3072;
lime.utils.ByteArray.lime_byte_array_overwrite_file = lime.system.System.load("lime","lime_byte_array_overwrite_file",2);
lime.utils.ByteArray.lime_byte_array_read_file = lime.system.System.load("lime","lime_byte_array_read_file",1);
lime.utils.ByteArray.lime_lzma_decode = lime.system.System.load("lime","lime_lzma_decode",1);
lime.utils.ByteArray.lime_lzma_encode = lime.system.System.load("lime","lime_lzma_encode",1);
openfl.Assets.cache = new openfl.AssetCache();
openfl.Assets.dispatcher = new openfl.events.EventDispatcher();
openfl._Assets.AssetType_Impl_.BINARY = "BINARY";
openfl._Assets.AssetType_Impl_.FONT = "FONT";
openfl._Assets.AssetType_Impl_.IMAGE = "IMAGE";
openfl._Assets.AssetType_Impl_.MOVIE_CLIP = "MOVIE_CLIP";
openfl._Assets.AssetType_Impl_.MUSIC = "MUSIC";
openfl._Assets.AssetType_Impl_.SOUND = "SOUND";
openfl._Assets.AssetType_Impl_.TEMPLATE = "TEMPLATE";
openfl._Assets.AssetType_Impl_.TEXT = "TEXT";
openfl.display.LoaderInfo.__rootURL = window.document.URL;
openfl.system.ApplicationDomain.currentDomain = new openfl.system.ApplicationDomain(null);
openfl.Lib.current = new openfl.display.MovieClip();
openfl.Lib.__sentWarnings = new haxe.ds.StringMap();
openfl._internal.aglsl.Context3D.defaultsampler = new openfl._internal.aglsl.Sampler();
openfl._internal.aglsl.Context3D.driverInfo = "Call getter function instead";
openfl._internal.aglsl.Context3D.enableErrorChecking = false;
openfl._internal.aglsl.Context3D.maxfragconstants = 28;
openfl._internal.aglsl.Context3D.maxstreams = 8;
openfl._internal.aglsl.Context3D.maxtemp = 8;
openfl._internal.aglsl.Context3D.maxtextures = 8;
openfl._internal.aglsl.Context3D.maxvertexconstants = 128;
openfl._internal.aglsl.Context3D.resources = [];
openfl._internal.renderer.canvas.CanvasGraphics.SIN45 = 0.70710678118654752440084436210485;
openfl._internal.renderer.canvas.CanvasGraphics.TAN22 = 0.4142135623730950488016887242097;
openfl._internal.renderer.opengl.GLRenderer.blendModesWebGL = null;
openfl._internal.renderer.opengl.GLRenderer.glContextId = 0;
openfl._internal.renderer.opengl.GLRenderer.glContexts = [];
openfl._internal.renderer.opengl.GLTextField.bitmapData = new haxe.ds.ObjectMap();
openfl._internal.renderer.opengl.GLTextField.glyphs = new haxe.ds.ObjectMap();
openfl._internal.renderer.opengl.GLTextField.tilesheets = new haxe.ds.ObjectMap();
openfl._internal.renderer.opengl.GLTextField.tileIDs = new haxe.ds.ObjectMap();
openfl._internal.renderer.opengl.shaders2.Shader.UID = 0;
openfl._internal.renderer.opengl.shaders2._DefaultShader.Attrib_Impl_.Position = "aPosition";
openfl._internal.renderer.opengl.shaders2._DefaultShader.Attrib_Impl_.TexCoord = "aTexCoord0";
openfl._internal.renderer.opengl.shaders2._DefaultShader.Attrib_Impl_.Color = "aColor";
openfl._internal.renderer.opengl.shaders2._DefaultShader.Uniform_Impl_.Sampler = "uSampler0";
openfl._internal.renderer.opengl.shaders2._DefaultShader.Uniform_Impl_.ProjectionVector = "uProjectionVector";
openfl._internal.renderer.opengl.shaders2._DefaultShader.Uniform_Impl_.OffsetVector = "uOffsetVector";
openfl._internal.renderer.opengl.shaders2._DefaultShader.Uniform_Impl_.Color = "uColor";
openfl._internal.renderer.opengl.shaders2._DefaultShader.Uniform_Impl_.Alpha = "uAlpha";
openfl._internal.renderer.opengl.shaders2._DefaultShader.Uniform_Impl_.ColorMultiplier = "uColorMultiplier";
openfl._internal.renderer.opengl.shaders2._DefaultShader.Uniform_Impl_.ColorOffset = "uColorOffset";
openfl._internal.renderer.opengl.shaders2._DrawTrianglesShader.Attrib_Impl_.Position = "aPosition";
openfl._internal.renderer.opengl.shaders2._DrawTrianglesShader.Attrib_Impl_.TexCoord = "aTexCoord0";
openfl._internal.renderer.opengl.shaders2._DrawTrianglesShader.Attrib_Impl_.Color = "aColor";
openfl._internal.renderer.opengl.shaders2._DrawTrianglesShader.Uniform_Impl_.UseTexture = "uUseTexture";
openfl._internal.renderer.opengl.shaders2._DrawTrianglesShader.Uniform_Impl_.Sampler = "uSampler0";
openfl._internal.renderer.opengl.shaders2._DrawTrianglesShader.Uniform_Impl_.ProjectionVector = "uProjectionVector";
openfl._internal.renderer.opengl.shaders2._DrawTrianglesShader.Uniform_Impl_.OffsetVector = "uOffsetVector";
openfl._internal.renderer.opengl.shaders2._DrawTrianglesShader.Uniform_Impl_.Color = "uColor";
openfl._internal.renderer.opengl.shaders2._DrawTrianglesShader.Uniform_Impl_.Alpha = "uAlpha";
openfl._internal.renderer.opengl.shaders2._DrawTrianglesShader.Uniform_Impl_.ColorMultiplier = "uColorMultiplier";
openfl._internal.renderer.opengl.shaders2._DrawTrianglesShader.Uniform_Impl_.ColorOffset = "uColorOffset";
openfl._internal.renderer.opengl.shaders2._FillShader.Attrib_Impl_.Position = "aPosition";
openfl._internal.renderer.opengl.shaders2._FillShader.Uniform_Impl_.TranslationMatrix = "uTranslationMatrix";
openfl._internal.renderer.opengl.shaders2._FillShader.Uniform_Impl_.ProjectionVector = "uProjectionVector";
openfl._internal.renderer.opengl.shaders2._FillShader.Uniform_Impl_.OffsetVector = "uOffsetVector";
openfl._internal.renderer.opengl.shaders2._FillShader.Uniform_Impl_.Color = "uColor";
openfl._internal.renderer.opengl.shaders2._FillShader.Uniform_Impl_.Alpha = "uAlpha";
openfl._internal.renderer.opengl.shaders2._FillShader.Uniform_Impl_.ColorMultiplier = "uColorMultiplier";
openfl._internal.renderer.opengl.shaders2._FillShader.Uniform_Impl_.ColorOffset = "uColorOffset";
openfl._internal.renderer.opengl.shaders2._PatternFillShader.Attrib_Impl_.Position = "aPosition";
openfl._internal.renderer.opengl.shaders2._PatternFillShader.Uniform_Impl_.TranslationMatrix = "uTranslationMatrix";
openfl._internal.renderer.opengl.shaders2._PatternFillShader.Uniform_Impl_.PatternMatrix = "uPatternMatrix";
openfl._internal.renderer.opengl.shaders2._PatternFillShader.Uniform_Impl_.PatternTL = "uPatternTL";
openfl._internal.renderer.opengl.shaders2._PatternFillShader.Uniform_Impl_.PatternBR = "uPatternBR";
openfl._internal.renderer.opengl.shaders2._PatternFillShader.Uniform_Impl_.Sampler = "uSampler0";
openfl._internal.renderer.opengl.shaders2._PatternFillShader.Uniform_Impl_.ProjectionVector = "uProjectionVector";
openfl._internal.renderer.opengl.shaders2._PatternFillShader.Uniform_Impl_.OffsetVector = "uOffsetVector";
openfl._internal.renderer.opengl.shaders2._PatternFillShader.Uniform_Impl_.Color = "uColor";
openfl._internal.renderer.opengl.shaders2._PatternFillShader.Uniform_Impl_.Alpha = "uAlpha";
openfl._internal.renderer.opengl.shaders2._PatternFillShader.Uniform_Impl_.ColorMultiplier = "uColorMultiplier";
openfl._internal.renderer.opengl.shaders2._PatternFillShader.Uniform_Impl_.ColorOffset = "uColorOffset";
openfl._internal.renderer.opengl.shaders2._PrimitiveShader.Attrib_Impl_.Position = "aPosition";
openfl._internal.renderer.opengl.shaders2._PrimitiveShader.Attrib_Impl_.Color = "aColor";
openfl._internal.renderer.opengl.shaders2._PrimitiveShader.Uniform_Impl_.TranslationMatrix = "uTranslationMatrix";
openfl._internal.renderer.opengl.shaders2._PrimitiveShader.Uniform_Impl_.ProjectionVector = "uProjectionVector";
openfl._internal.renderer.opengl.shaders2._PrimitiveShader.Uniform_Impl_.OffsetVector = "uOffsetVector";
openfl._internal.renderer.opengl.shaders2._PrimitiveShader.Uniform_Impl_.Alpha = "uAlpha";
openfl._internal.renderer.opengl.shaders2._PrimitiveShader.Uniform_Impl_.ColorMultiplier = "uColorMultiplier";
openfl._internal.renderer.opengl.shaders2._PrimitiveShader.Uniform_Impl_.ColorOffset = "uColorOffset";
openfl._internal.renderer.opengl.utils.PathBuiler.__currentWinding = 0;
openfl._internal.renderer.opengl.utils.PathBuiler.__fillIndex = 0;
openfl._internal.renderer.opengl.utils._DrawPath.WindingRule_Impl_.EVEN_ODD = 0;
openfl._internal.renderer.opengl.utils._DrawPath.WindingRule_Impl_.NON_ZERO = 1;
openfl._internal.renderer.opengl.utils.GraphicsRenderer.fillVertexAttributes = [new openfl._internal.renderer.opengl.utils.VertexAttribute(2,5126,false,"aPosition")];
openfl._internal.renderer.opengl.utils.GraphicsRenderer.drawTrianglesVertexAttributes = [new openfl._internal.renderer.opengl.utils.VertexAttribute(2,5126,false,"aPosition"),new openfl._internal.renderer.opengl.utils.VertexAttribute(2,5126,false,"aTexCoord0"),new openfl._internal.renderer.opengl.utils.VertexAttribute(4,5121,true,"aColor")];
openfl._internal.renderer.opengl.utils.GraphicsRenderer.primitiveVertexAttributes = [new openfl._internal.renderer.opengl.utils.VertexAttribute(2,5126,false,"aPosition"),new openfl._internal.renderer.opengl.utils.VertexAttribute(4,5126,false,"aColor")];
openfl._internal.renderer.opengl.utils.GraphicsRenderer.graphicsDataPool = [];
openfl._internal.renderer.opengl.utils.GraphicsRenderer.bucketPool = [];
openfl._internal.renderer.opengl.utils.GraphicsRenderer.objectPosition = new openfl.geom.Point();
openfl._internal.renderer.opengl.utils.GraphicsRenderer.objectBounds = new openfl.geom.Rectangle();
openfl._internal.renderer.opengl.utils._GraphicsRenderer.RenderMode_Impl_.DEFAULT = 0;
openfl._internal.renderer.opengl.utils._GraphicsRenderer.RenderMode_Impl_.STENCIL = 1;
openfl._internal.renderer.opengl.utils.SpriteBatch.VERTS_PER_SPRITE = 4;
openfl._internal.renderer.opengl.utils._VertexAttribute.ElementType_Impl_.BYTE = 5120;
openfl._internal.renderer.opengl.utils._VertexAttribute.ElementType_Impl_.UNSIGNED_BYTE = 5121;
openfl._internal.renderer.opengl.utils._VertexAttribute.ElementType_Impl_.SHORT = 5122;
openfl._internal.renderer.opengl.utils._VertexAttribute.ElementType_Impl_.UNSIGNED_SHORT = 5123;
openfl._internal.renderer.opengl.utils._VertexAttribute.ElementType_Impl_.FLOAT = 5126;
openfl.display.BitmapDataChannel.ALPHA = 8;
openfl.display.BitmapDataChannel.BLUE = 4;
openfl.display.BitmapDataChannel.GREEN = 2;
openfl.display.BitmapDataChannel.RED = 1;
openfl.display.Graphics.TILE_SCALE = 1;
openfl.display.Graphics.TILE_ROTATION = 2;
openfl.display.Graphics.TILE_RGB = 4;
openfl.display.Graphics.TILE_ALPHA = 8;
openfl.display.Graphics.TILE_TRANS_2x2 = 16;
openfl.display.Graphics.TILE_RECT = 32;
openfl.display.Graphics.TILE_ORIGIN = 64;
openfl.display.Graphics.TILE_BLEND_NORMAL = 0;
openfl.display.Graphics.TILE_BLEND_ADD = 65536;
openfl.display.GraphicsPathCommand.LINE_TO = 2;
openfl.display.GraphicsPathCommand.MOVE_TO = 1;
openfl.display.GraphicsPathCommand.CURVE_TO = 3;
openfl.display.GraphicsPathCommand.WIDE_LINE_TO = 5;
openfl.display.GraphicsPathCommand.WIDE_MOVE_TO = 4;
openfl.display.GraphicsPathCommand.NO_OP = 0;
openfl.display.GraphicsPathCommand.CUBIC_CURVE_TO = 6;
openfl.display.OpenGLView.CONTEXT_LOST = "glcontextlost";
openfl.display.OpenGLView.CONTEXT_RESTORED = "glcontextrestored";
openfl.display.Tilesheet.TILE_SCALE = 1;
openfl.display.Tilesheet.TILE_ROTATION = 2;
openfl.display.Tilesheet.TILE_RGB = 4;
openfl.display.Tilesheet.TILE_ALPHA = 8;
openfl.display.Tilesheet.TILE_TRANS_2x2 = 16;
openfl.display.Tilesheet.TILE_RECT = 32;
openfl.display.Tilesheet.TILE_ORIGIN = 64;
openfl.display.Tilesheet.TILE_BLEND_NORMAL = 0;
openfl.display.Tilesheet.TILE_BLEND_ADD = 65536;
openfl.display.Tilesheet.TILE_BLEND_MULTIPLY = 131072;
openfl.display.Tilesheet.TILE_BLEND_SCREEN = 262144;
openfl.display.Tilesheet.TILE_BLEND_SUBTRACT = 524288;
openfl.display.Tilesheet.__defaultPoint = new openfl.geom.Point(0,0);
openfl.display3D.Context3D.TEXTURE_MAX_ANISOTROPY_EXT = 34046;
openfl.display3D.Context3D.MAX_SAMPLERS = 8;
openfl.display3D.Context3D.MAX_TEXTURE_MAX_ANISOTROPY_EXT = 34047;
openfl.display3D.Context3D.anisotropySupportTested = false;
openfl.display3D.Context3D.supportsAnisotropy = false;
openfl.display3D.Context3D.maxSupportedAnisotropy = 256;
openfl.display3D._Context3DBlendFactor.Context3DBlendFactor_Impl_.DESTINATION_ALPHA = 772;
openfl.display3D._Context3DBlendFactor.Context3DBlendFactor_Impl_.DESTINATION_COLOR = 774;
openfl.display3D._Context3DBlendFactor.Context3DBlendFactor_Impl_.ONE = 1;
openfl.display3D._Context3DBlendFactor.Context3DBlendFactor_Impl_.ONE_MINUS_DESTINATION_ALPHA = 773;
openfl.display3D._Context3DBlendFactor.Context3DBlendFactor_Impl_.ONE_MINUS_DESTINATION_COLOR = 775;
openfl.display3D._Context3DBlendFactor.Context3DBlendFactor_Impl_.ONE_MINUS_SOURCE_ALPHA = 771;
openfl.display3D._Context3DBlendFactor.Context3DBlendFactor_Impl_.ONE_MINUS_SOURCE_COLOR = 769;
openfl.display3D._Context3DBlendFactor.Context3DBlendFactor_Impl_.SOURCE_ALPHA = 770;
openfl.display3D._Context3DBlendFactor.Context3DBlendFactor_Impl_.SOURCE_COLOR = 768;
openfl.display3D._Context3DBlendFactor.Context3DBlendFactor_Impl_.ZERO = 0;
openfl.display3D.Context3DClearMask.ALL = 17664;
openfl.display3D.Context3DClearMask.COLOR = 16384;
openfl.display3D.Context3DClearMask.DEPTH = 256;
openfl.display3D.Context3DClearMask.STENCIL = 1024;
openfl.display3D._Context3DCompareMode.Context3DCompareMode_Impl_.ALWAYS = 519;
openfl.display3D._Context3DCompareMode.Context3DCompareMode_Impl_.EQUAL = 514;
openfl.display3D._Context3DCompareMode.Context3DCompareMode_Impl_.GREATER = 516;
openfl.display3D._Context3DCompareMode.Context3DCompareMode_Impl_.GREATER_EQUAL = 518;
openfl.display3D._Context3DCompareMode.Context3DCompareMode_Impl_.LESS = 513;
openfl.display3D._Context3DCompareMode.Context3DCompareMode_Impl_.LESS_EQUAL = 515;
openfl.display3D._Context3DCompareMode.Context3DCompareMode_Impl_.NEVER = 512;
openfl.display3D._Context3DCompareMode.Context3DCompareMode_Impl_.NOT_EQUAL = 517;
openfl.display3D._Context3DStencilAction.Context3DStencilAction_Impl_.DECREMENT_SATURATE = 7683;
openfl.display3D._Context3DStencilAction.Context3DStencilAction_Impl_.DECREMENT_WRAP = 34056;
openfl.display3D._Context3DStencilAction.Context3DStencilAction_Impl_.INCREMENT_SATURATE = 7682;
openfl.display3D._Context3DStencilAction.Context3DStencilAction_Impl_.INCREMENT_WRAP = 34055;
openfl.display3D._Context3DStencilAction.Context3DStencilAction_Impl_.INVERT = 5386;
openfl.display3D._Context3DStencilAction.Context3DStencilAction_Impl_.KEEP = 7680;
openfl.display3D._Context3DStencilAction.Context3DStencilAction_Impl_.SET = 7681;
openfl.display3D._Context3DStencilAction.Context3DStencilAction_Impl_.ZERO = 0;
openfl.display3D._Context3DTriangleFace.Context3DTriangleFace_Impl_.BACK = 1028;
openfl.display3D._Context3DTriangleFace.Context3DTriangleFace_Impl_.FRONT = 1029;
openfl.display3D._Context3DTriangleFace.Context3DTriangleFace_Impl_.FRONT_AND_BACK = 1032;
openfl.display3D._Context3DTriangleFace.Context3DTriangleFace_Impl_.NONE = 0;
openfl.errors.Error.DEFAULT_TO_STRING = "Error";
openfl.events.Event.ACTIVATE = "activate";
openfl.events.Event.ADDED = "added";
openfl.events.Event.ADDED_TO_STAGE = "addedToStage";
openfl.events.Event.CANCEL = "cancel";
openfl.events.Event.CHANGE = "change";
openfl.events.Event.CLOSE = "close";
openfl.events.Event.COMPLETE = "complete";
openfl.events.Event.CONNECT = "connect";
openfl.events.Event.CONTEXT3D_CREATE = "context3DCreate";
openfl.events.Event.DEACTIVATE = "deactivate";
openfl.events.Event.ENTER_FRAME = "enterFrame";
openfl.events.Event.ID3 = "id3";
openfl.events.Event.INIT = "init";
openfl.events.Event.MOUSE_LEAVE = "mouseLeave";
openfl.events.Event.OPEN = "open";
openfl.events.Event.REMOVED = "removed";
openfl.events.Event.REMOVED_FROM_STAGE = "removedFromStage";
openfl.events.Event.RENDER = "render";
openfl.events.Event.RESIZE = "resize";
openfl.events.Event.SCROLL = "scroll";
openfl.events.Event.SELECT = "select";
openfl.events.Event.SOUND_COMPLETE = "soundComplete";
openfl.events.Event.TAB_CHILDREN_CHANGE = "tabChildrenChange";
openfl.events.Event.TAB_ENABLED_CHANGE = "tabEnabledChange";
openfl.events.Event.TAB_INDEX_CHANGE = "tabIndexChange";
openfl.events.Event.UNLOAD = "unload";
openfl.events.TextEvent.LINK = "link";
openfl.events.TextEvent.TEXT_INPUT = "textInput";
openfl.events.ErrorEvent.ERROR = "error";
openfl.events.FocusEvent.FOCUS_IN = "focusIn";
openfl.events.FocusEvent.FOCUS_OUT = "focusOut";
openfl.events.FocusEvent.KEY_FOCUS_CHANGE = "keyFocusChange";
openfl.events.FocusEvent.MOUSE_FOCUS_CHANGE = "mouseFocusChange";
openfl.events.HTTPStatusEvent.HTTP_RESPONSE_STATUS = "httpResponseStatus";
openfl.events.HTTPStatusEvent.HTTP_STATUS = "httpStatus";
openfl.events.IOErrorEvent.IO_ERROR = "ioError";
openfl.events.KeyboardEvent.KEY_DOWN = "keyDown";
openfl.events.KeyboardEvent.KEY_UP = "keyUp";
openfl.events.MouseEvent.CLICK = "click";
openfl.events.MouseEvent.DOUBLE_CLICK = "doubleClick";
openfl.events.MouseEvent.MIDDLE_CLICK = "middleClick";
openfl.events.MouseEvent.MIDDLE_MOUSE_DOWN = "middleMouseDown";
openfl.events.MouseEvent.MIDDLE_MOUSE_UP = "middleMouseUp";
openfl.events.MouseEvent.MOUSE_DOWN = "mouseDown";
openfl.events.MouseEvent.MOUSE_MOVE = "mouseMove";
openfl.events.MouseEvent.MOUSE_OUT = "mouseOut";
openfl.events.MouseEvent.MOUSE_OVER = "mouseOver";
openfl.events.MouseEvent.MOUSE_UP = "mouseUp";
openfl.events.MouseEvent.MOUSE_WHEEL = "mouseWheel";
openfl.events.MouseEvent.RIGHT_CLICK = "rightClick";
openfl.events.MouseEvent.RIGHT_MOUSE_DOWN = "rightMouseDown";
openfl.events.MouseEvent.RIGHT_MOUSE_UP = "rightMouseUp";
openfl.events.MouseEvent.ROLL_OUT = "rollOut";
openfl.events.MouseEvent.ROLL_OVER = "rollOver";
openfl.events.MouseEvent.__buttonDown = [false,false,false];
openfl.events.NetStatusEvent.NET_STATUS = "netStatus";
openfl.events.ProgressEvent.PROGRESS = "progress";
openfl.events.ProgressEvent.SOCKET_DATA = "socketData";
openfl.events.SecurityErrorEvent.SECURITY_ERROR = "securityError";
openfl.events.TouchEvent.TOUCH_BEGIN = "touchBegin";
openfl.events.TouchEvent.TOUCH_END = "touchEnd";
openfl.events.TouchEvent.TOUCH_MOVE = "touchMove";
openfl.events.TouchEvent.TOUCH_OUT = "touchOut";
openfl.events.TouchEvent.TOUCH_OVER = "touchOver";
openfl.events.TouchEvent.TOUCH_ROLL_OUT = "touchRollOut";
openfl.events.TouchEvent.TOUCH_ROLL_OVER = "touchRollOver";
openfl.events.TouchEvent.TOUCH_TAP = "touchTap";
openfl.media.Sound.__registeredSounds = new haxe.ds.StringMap();
openfl.net.NetConnection.CONNECT_SUCCESS = "connectSuccess";
openfl.net.URLRequestMethod.DELETE = "DELETE";
openfl.net.URLRequestMethod.GET = "GET";
openfl.net.URLRequestMethod.HEAD = "HEAD";
openfl.net.URLRequestMethod.OPTIONS = "OPTIONS";
openfl.net.URLRequestMethod.POST = "POST";
openfl.net.URLRequestMethod.PUT = "PUT";
openfl.system.Capabilities.avHardwareDisable = true;
openfl.system.Capabilities.cpuArchitecture = "";
openfl.system.Capabilities.hasAccessibility = false;
openfl.system.Capabilities.hasAudio = true;
openfl.system.Capabilities.hasAudioEncoder = false;
openfl.system.Capabilities.hasEmbeddedVideo = false;
openfl.system.Capabilities.hasIME = false;
openfl.system.Capabilities.hasMP3 = false;
openfl.system.Capabilities.hasPrinting = false;
openfl.system.Capabilities.hasScreenBroadcast = false;
openfl.system.Capabilities.hasScreenPlayback = false;
openfl.system.Capabilities.hasStreamingAudio = false;
openfl.system.Capabilities.hasStreamingVideo = false;
openfl.system.Capabilities.hasTLS = true;
openfl.system.Capabilities.hasVideoEncoder = false;
openfl.system.Capabilities.isDebugger = false;
openfl.system.Capabilities.isEmbeddedInAcrobat = false;
openfl.system.Capabilities.localFileReadDisable = true;
openfl.system.Capabilities.manufacturer = "OpenFL Contributors";
openfl.system.Capabilities.maxLevelIDC = 0;
openfl.system.Capabilities.playerType = "OpenFL";
openfl.system.Capabilities.screenColor = "color";
openfl.system.Capabilities.serverString = "";
openfl.system.Capabilities.supports32BitProcesses = false;
openfl.system.Capabilities.supports64BitProcesses = false;
openfl.system.Capabilities.touchscreenType = openfl.system.TouchscreenType.FINGER;
openfl.system.SecurityDomain.currentDomain = new openfl.system.SecurityDomain();
openfl.system.System.useCodePage = false;
openfl.text.Font.__registeredFonts = new Array();
openfl.ui._KeyLocation.KeyLocation_Impl_.STANDARD = 0;
openfl.ui._KeyLocation.KeyLocation_Impl_.LEFT = 1;
openfl.ui._KeyLocation.KeyLocation_Impl_.RIGHT = 2;
openfl.ui._KeyLocation.KeyLocation_Impl_.NUM_PAD = 3;
openfl.ui.Keyboard.NUMBER_0 = 48;
openfl.ui.Keyboard.NUMBER_1 = 49;
openfl.ui.Keyboard.NUMBER_2 = 50;
openfl.ui.Keyboard.NUMBER_3 = 51;
openfl.ui.Keyboard.NUMBER_4 = 52;
openfl.ui.Keyboard.NUMBER_5 = 53;
openfl.ui.Keyboard.NUMBER_6 = 54;
openfl.ui.Keyboard.NUMBER_7 = 55;
openfl.ui.Keyboard.NUMBER_8 = 56;
openfl.ui.Keyboard.NUMBER_9 = 57;
openfl.ui.Keyboard.A = 65;
openfl.ui.Keyboard.B = 66;
openfl.ui.Keyboard.C = 67;
openfl.ui.Keyboard.D = 68;
openfl.ui.Keyboard.E = 69;
openfl.ui.Keyboard.F = 70;
openfl.ui.Keyboard.G = 71;
openfl.ui.Keyboard.H = 72;
openfl.ui.Keyboard.I = 73;
openfl.ui.Keyboard.J = 74;
openfl.ui.Keyboard.K = 75;
openfl.ui.Keyboard.L = 76;
openfl.ui.Keyboard.M = 77;
openfl.ui.Keyboard.N = 78;
openfl.ui.Keyboard.O = 79;
openfl.ui.Keyboard.P = 80;
openfl.ui.Keyboard.Q = 81;
openfl.ui.Keyboard.R = 82;
openfl.ui.Keyboard.S = 83;
openfl.ui.Keyboard.T = 84;
openfl.ui.Keyboard.U = 85;
openfl.ui.Keyboard.V = 86;
openfl.ui.Keyboard.W = 87;
openfl.ui.Keyboard.X = 88;
openfl.ui.Keyboard.Y = 89;
openfl.ui.Keyboard.Z = 90;
openfl.ui.Keyboard.NUMPAD_0 = 96;
openfl.ui.Keyboard.NUMPAD_1 = 97;
openfl.ui.Keyboard.NUMPAD_2 = 98;
openfl.ui.Keyboard.NUMPAD_3 = 99;
openfl.ui.Keyboard.NUMPAD_4 = 100;
openfl.ui.Keyboard.NUMPAD_5 = 101;
openfl.ui.Keyboard.NUMPAD_6 = 102;
openfl.ui.Keyboard.NUMPAD_7 = 103;
openfl.ui.Keyboard.NUMPAD_8 = 104;
openfl.ui.Keyboard.NUMPAD_9 = 105;
openfl.ui.Keyboard.NUMPAD_MULTIPLY = 106;
openfl.ui.Keyboard.NUMPAD_ADD = 107;
openfl.ui.Keyboard.NUMPAD_ENTER = 108;
openfl.ui.Keyboard.NUMPAD_SUBTRACT = 109;
openfl.ui.Keyboard.NUMPAD_DECIMAL = 110;
openfl.ui.Keyboard.NUMPAD_DIVIDE = 111;
openfl.ui.Keyboard.F1 = 112;
openfl.ui.Keyboard.F2 = 113;
openfl.ui.Keyboard.F3 = 114;
openfl.ui.Keyboard.F4 = 115;
openfl.ui.Keyboard.F5 = 116;
openfl.ui.Keyboard.F6 = 117;
openfl.ui.Keyboard.F7 = 118;
openfl.ui.Keyboard.F8 = 119;
openfl.ui.Keyboard.F9 = 120;
openfl.ui.Keyboard.F10 = 121;
openfl.ui.Keyboard.F11 = 122;
openfl.ui.Keyboard.F12 = 123;
openfl.ui.Keyboard.F13 = 124;
openfl.ui.Keyboard.F14 = 125;
openfl.ui.Keyboard.F15 = 126;
openfl.ui.Keyboard.BACKSPACE = 8;
openfl.ui.Keyboard.TAB = 9;
openfl.ui.Keyboard.ALTERNATE = 18;
openfl.ui.Keyboard.ENTER = 13;
openfl.ui.Keyboard.COMMAND = 15;
openfl.ui.Keyboard.SHIFT = 16;
openfl.ui.Keyboard.CONTROL = 17;
openfl.ui.Keyboard.CAPS_LOCK = 20;
openfl.ui.Keyboard.NUMPAD = 21;
openfl.ui.Keyboard.ESCAPE = 27;
openfl.ui.Keyboard.SPACE = 32;
openfl.ui.Keyboard.PAGE_UP = 33;
openfl.ui.Keyboard.PAGE_DOWN = 34;
openfl.ui.Keyboard.END = 35;
openfl.ui.Keyboard.HOME = 36;
openfl.ui.Keyboard.LEFT = 37;
openfl.ui.Keyboard.RIGHT = 39;
openfl.ui.Keyboard.UP = 38;
openfl.ui.Keyboard.DOWN = 40;
openfl.ui.Keyboard.INSERT = 45;
openfl.ui.Keyboard.DELETE = 46;
openfl.ui.Keyboard.NUMLOCK = 144;
openfl.ui.Keyboard.BREAK = 19;
openfl.ui.Keyboard.SEMICOLON = 186;
openfl.ui.Keyboard.EQUAL = 187;
openfl.ui.Keyboard.COMMA = 188;
openfl.ui.Keyboard.MINUS = 189;
openfl.ui.Keyboard.PERIOD = 190;
openfl.ui.Keyboard.SLASH = 191;
openfl.ui.Keyboard.BACKQUOTE = 192;
openfl.ui.Keyboard.LEFTBRACKET = 219;
openfl.ui.Keyboard.BACKSLASH = 220;
openfl.ui.Keyboard.RIGHTBRACKET = 221;
openfl.ui.Keyboard.QUOTE = 222;
openfl.ui.Keyboard.DOM_VK_CANCEL = 3;
openfl.ui.Keyboard.DOM_VK_HELP = 6;
openfl.ui.Keyboard.DOM_VK_BACK_SPACE = 8;
openfl.ui.Keyboard.DOM_VK_TAB = 9;
openfl.ui.Keyboard.DOM_VK_CLEAR = 12;
openfl.ui.Keyboard.DOM_VK_RETURN = 13;
openfl.ui.Keyboard.DOM_VK_ENTER = 14;
openfl.ui.Keyboard.DOM_VK_SHIFT = 16;
openfl.ui.Keyboard.DOM_VK_CONTROL = 17;
openfl.ui.Keyboard.DOM_VK_ALT = 18;
openfl.ui.Keyboard.DOM_VK_PAUSE = 19;
openfl.ui.Keyboard.DOM_VK_CAPS_LOCK = 20;
openfl.ui.Keyboard.DOM_VK_ESCAPE = 27;
openfl.ui.Keyboard.DOM_VK_SPACE = 32;
openfl.ui.Keyboard.DOM_VK_PAGE_UP = 33;
openfl.ui.Keyboard.DOM_VK_PAGE_DOWN = 34;
openfl.ui.Keyboard.DOM_VK_END = 35;
openfl.ui.Keyboard.DOM_VK_HOME = 36;
openfl.ui.Keyboard.DOM_VK_LEFT = 37;
openfl.ui.Keyboard.DOM_VK_UP = 38;
openfl.ui.Keyboard.DOM_VK_RIGHT = 39;
openfl.ui.Keyboard.DOM_VK_DOWN = 40;
openfl.ui.Keyboard.DOM_VK_PRINTSCREEN = 44;
openfl.ui.Keyboard.DOM_VK_INSERT = 45;
openfl.ui.Keyboard.DOM_VK_DELETE = 46;
openfl.ui.Keyboard.DOM_VK_0 = 48;
openfl.ui.Keyboard.DOM_VK_1 = 49;
openfl.ui.Keyboard.DOM_VK_2 = 50;
openfl.ui.Keyboard.DOM_VK_3 = 51;
openfl.ui.Keyboard.DOM_VK_4 = 52;
openfl.ui.Keyboard.DOM_VK_5 = 53;
openfl.ui.Keyboard.DOM_VK_6 = 54;
openfl.ui.Keyboard.DOM_VK_7 = 55;
openfl.ui.Keyboard.DOM_VK_8 = 56;
openfl.ui.Keyboard.DOM_VK_9 = 57;
openfl.ui.Keyboard.DOM_VK_SEMICOLON = 59;
openfl.ui.Keyboard.DOM_VK_EQUALS = 61;
openfl.ui.Keyboard.DOM_VK_A = 65;
openfl.ui.Keyboard.DOM_VK_B = 66;
openfl.ui.Keyboard.DOM_VK_C = 67;
openfl.ui.Keyboard.DOM_VK_D = 68;
openfl.ui.Keyboard.DOM_VK_E = 69;
openfl.ui.Keyboard.DOM_VK_F = 70;
openfl.ui.Keyboard.DOM_VK_G = 71;
openfl.ui.Keyboard.DOM_VK_H = 72;
openfl.ui.Keyboard.DOM_VK_I = 73;
openfl.ui.Keyboard.DOM_VK_J = 74;
openfl.ui.Keyboard.DOM_VK_K = 75;
openfl.ui.Keyboard.DOM_VK_L = 76;
openfl.ui.Keyboard.DOM_VK_M = 77;
openfl.ui.Keyboard.DOM_VK_N = 78;
openfl.ui.Keyboard.DOM_VK_O = 79;
openfl.ui.Keyboard.DOM_VK_P = 80;
openfl.ui.Keyboard.DOM_VK_Q = 81;
openfl.ui.Keyboard.DOM_VK_R = 82;
openfl.ui.Keyboard.DOM_VK_S = 83;
openfl.ui.Keyboard.DOM_VK_T = 84;
openfl.ui.Keyboard.DOM_VK_U = 85;
openfl.ui.Keyboard.DOM_VK_V = 86;
openfl.ui.Keyboard.DOM_VK_W = 87;
openfl.ui.Keyboard.DOM_VK_X = 88;
openfl.ui.Keyboard.DOM_VK_Y = 89;
openfl.ui.Keyboard.DOM_VK_Z = 90;
openfl.ui.Keyboard.DOM_VK_CONTEXT_MENU = 93;
openfl.ui.Keyboard.DOM_VK_NUMPAD0 = 96;
openfl.ui.Keyboard.DOM_VK_NUMPAD1 = 97;
openfl.ui.Keyboard.DOM_VK_NUMPAD2 = 98;
openfl.ui.Keyboard.DOM_VK_NUMPAD3 = 99;
openfl.ui.Keyboard.DOM_VK_NUMPAD4 = 100;
openfl.ui.Keyboard.DOM_VK_NUMPAD5 = 101;
openfl.ui.Keyboard.DOM_VK_NUMPAD6 = 102;
openfl.ui.Keyboard.DOM_VK_NUMPAD7 = 103;
openfl.ui.Keyboard.DOM_VK_NUMPAD8 = 104;
openfl.ui.Keyboard.DOM_VK_NUMPAD9 = 105;
openfl.ui.Keyboard.DOM_VK_MULTIPLY = 106;
openfl.ui.Keyboard.DOM_VK_ADD = 107;
openfl.ui.Keyboard.DOM_VK_SEPARATOR = 108;
openfl.ui.Keyboard.DOM_VK_SUBTRACT = 109;
openfl.ui.Keyboard.DOM_VK_DECIMAL = 110;
openfl.ui.Keyboard.DOM_VK_DIVIDE = 111;
openfl.ui.Keyboard.DOM_VK_F1 = 112;
openfl.ui.Keyboard.DOM_VK_F2 = 113;
openfl.ui.Keyboard.DOM_VK_F3 = 114;
openfl.ui.Keyboard.DOM_VK_F4 = 115;
openfl.ui.Keyboard.DOM_VK_F5 = 116;
openfl.ui.Keyboard.DOM_VK_F6 = 117;
openfl.ui.Keyboard.DOM_VK_F7 = 118;
openfl.ui.Keyboard.DOM_VK_F8 = 119;
openfl.ui.Keyboard.DOM_VK_F9 = 120;
openfl.ui.Keyboard.DOM_VK_F10 = 121;
openfl.ui.Keyboard.DOM_VK_F11 = 122;
openfl.ui.Keyboard.DOM_VK_F12 = 123;
openfl.ui.Keyboard.DOM_VK_F13 = 124;
openfl.ui.Keyboard.DOM_VK_F14 = 125;
openfl.ui.Keyboard.DOM_VK_F15 = 126;
openfl.ui.Keyboard.DOM_VK_F16 = 127;
openfl.ui.Keyboard.DOM_VK_F17 = 128;
openfl.ui.Keyboard.DOM_VK_F18 = 129;
openfl.ui.Keyboard.DOM_VK_F19 = 130;
openfl.ui.Keyboard.DOM_VK_F20 = 131;
openfl.ui.Keyboard.DOM_VK_F21 = 132;
openfl.ui.Keyboard.DOM_VK_F22 = 133;
openfl.ui.Keyboard.DOM_VK_F23 = 134;
openfl.ui.Keyboard.DOM_VK_F24 = 135;
openfl.ui.Keyboard.DOM_VK_NUM_LOCK = 144;
openfl.ui.Keyboard.DOM_VK_SCROLL_LOCK = 145;
openfl.ui.Keyboard.DOM_VK_COMMA = 188;
openfl.ui.Keyboard.DOM_VK_PERIOD = 190;
openfl.ui.Keyboard.DOM_VK_SLASH = 191;
openfl.ui.Keyboard.DOM_VK_BACK_QUOTE = 192;
openfl.ui.Keyboard.DOM_VK_OPEN_BRACKET = 219;
openfl.ui.Keyboard.DOM_VK_BACK_SLASH = 220;
openfl.ui.Keyboard.DOM_VK_CLOSE_BRACKET = 221;
openfl.ui.Keyboard.DOM_VK_QUOTE = 222;
openfl.ui.Keyboard.DOM_VK_META = 224;
openfl.ui.Keyboard.DOM_VK_KANA = 21;
openfl.ui.Keyboard.DOM_VK_HANGUL = 21;
openfl.ui.Keyboard.DOM_VK_JUNJA = 23;
openfl.ui.Keyboard.DOM_VK_FINAL = 24;
openfl.ui.Keyboard.DOM_VK_HANJA = 25;
openfl.ui.Keyboard.DOM_VK_KANJI = 25;
openfl.ui.Keyboard.DOM_VK_CONVERT = 28;
openfl.ui.Keyboard.DOM_VK_NONCONVERT = 29;
openfl.ui.Keyboard.DOM_VK_ACEPT = 30;
openfl.ui.Keyboard.DOM_VK_MODECHANGE = 31;
openfl.ui.Keyboard.DOM_VK_SELECT = 41;
openfl.ui.Keyboard.DOM_VK_PRINT = 42;
openfl.ui.Keyboard.DOM_VK_EXECUTE = 43;
openfl.ui.Keyboard.DOM_VK_SLEEP = 95;
openfl.utils.Endian.BIG_ENDIAN = "bigEndian";
openfl.utils.Endian.LITTLE_ENDIAN = "littleEndian";
starling.animation.DelayedCall.sPool = new Array();
starling.animation.Transitions.LINEAR = "linear";
starling.animation.Transitions.EASE_IN = "easeIn";
starling.animation.Transitions.EASE_OUT = "easeOut";
starling.animation.Transitions.EASE_IN_OUT = "easeInOut";
starling.animation.Transitions.EASE_OUT_IN = "easeOutIn";
starling.animation.Transitions.EASE_IN_BACK = "easeInBack";
starling.animation.Transitions.EASE_OUT_BACK = "easeOutBack";
starling.animation.Transitions.EASE_IN_OUT_BACK = "easeInOutBack";
starling.animation.Transitions.EASE_OUT_IN_BACK = "easeOutInBack";
starling.animation.Transitions.EASE_IN_ELASTIC = "easeInElastic";
starling.animation.Transitions.EASE_OUT_ELASTIC = "easeOutElastic";
starling.animation.Transitions.EASE_IN_OUT_ELASTIC = "easeInOutElastic";
starling.animation.Transitions.EASE_OUT_IN_ELASTIC = "easeOutInElastic";
starling.animation.Transitions.EASE_IN_BOUNCE = "easeInBounce";
starling.animation.Transitions.EASE_OUT_BOUNCE = "easeOutBounce";
starling.animation.Transitions.EASE_IN_OUT_BOUNCE = "easeInOutBounce";
starling.animation.Transitions.EASE_OUT_IN_BOUNCE = "easeOutInBounce";
starling.animation.Tween.HINT_MARKER = "#";
starling.animation.Tween.sTweenPool = (function($this) {
	var $r;
	var this1;
	this1 = new openfl.VectorData();
	{
		var this2;
		this2 = new Array(0);
		this1.data = this2;
	}
	this1.length = 0;
	this1.fixed = false;
	$r = this1;
	return $r;
}(this));
starling.core.RenderSupport.sPoint = new openfl.geom.Point();
starling.core.RenderSupport.sPoint3D = new openfl.geom.Vector3D();
starling.core.RenderSupport.sClipRect = new openfl.geom.Rectangle();
starling.core.RenderSupport.sBufferRect = new openfl.geom.Rectangle();
starling.core.RenderSupport.sScissorRect = new openfl.geom.Rectangle();
starling.core.RenderSupport.sMatrix3D = new openfl.geom.Matrix3D();
starling.core.RenderSupport.sMatrixData = [0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0];
starling.core.Starling.VERSION = "1.6.1";
starling.core.Starling.PROGRAM_DATA_NAME = "Starling.programs";
starling.core.Starling.sHandleLostContext = true;
starling.core.Starling.sContextData = new haxe.ds.ObjectMap();
starling.core.Starling.sAll = new Array();
starling.display.BlendMode.AUTO = "auto";
starling.display.BlendMode.NONE = "none";
starling.display.BlendMode.NORMAL = "normal";
starling.display.BlendMode.ADD = "add";
starling.display.BlendMode.MULTIPLY = "multiply";
starling.display.BlendMode.SCREEN = "screen";
starling.display.BlendMode.ERASE = "erase";
starling.display.BlendMode.BELOW = "below";
starling.display.Button.MAX_DRAG_DIST = 50;
starling.display.ButtonState.UP = "up";
starling.display.ButtonState.DOWN = "down";
starling.display.ButtonState.OVER = "over";
starling.display.ButtonState.DISABLED = "disabled";
starling.display.Canvas.PROGRAM_NAME = "Shape";
starling.display.Canvas.sHelperMatrix = new openfl.geom.Matrix();
starling.display.Quad.sHelperPoint = new openfl.geom.Point();
starling.display.Quad.sHelperPoint3D = new openfl.geom.Vector3D();
starling.display.Quad.sHelperMatrix = new openfl.geom.Matrix();
starling.display.Quad.sHelperMatrix3D = new openfl.geom.Matrix3D();
starling.display.QuadBatch.MAX_NUM_QUADS = 16383;
starling.display.QuadBatch.QUAD_PROGRAM_NAME = "QB_q";
starling.display.QuadBatch.sHelperMatrix = new openfl.geom.Matrix();
starling.display.QuadBatch.sProgramNameCache = new haxe.ds.IntMap();
starling.display.Sprite3D.E = 0.00001;
starling.display.Sprite3D.sHelperPoint = new openfl.geom.Vector3D();
starling.display.Sprite3D.sHelperPointAlt = new openfl.geom.Vector3D();
starling.display.Sprite3D.sHelperMatrix = new openfl.geom.Matrix3D();
starling.display.Stage.sHelperMatrix = new openfl.geom.Matrix3D();
starling.events.Event.ADDED = "added";
starling.events.Event.ADDED_TO_STAGE = "addedToStage";
starling.events.Event.ENTER_FRAME = "enterFrame";
starling.events.Event.REMOVED = "removed";
starling.events.Event.REMOVED_FROM_STAGE = "removedFromStage";
starling.events.Event.TRIGGERED = "triggered";
starling.events.Event.FLATTEN = "flatten";
starling.events.Event.RESIZE = "resize";
starling.events.Event.COMPLETE = "complete";
starling.events.Event.CONTEXT3D_CREATE = "context3DCreate";
starling.events.Event.ROOT_CREATED = "rootCreated";
starling.events.Event.REMOVE_FROM_JUGGLER = "removeFromJuggler";
starling.events.Event.TEXTURES_RESTORED = "texturesRestored";
starling.events.Event.IO_ERROR = "ioError";
starling.events.Event.SECURITY_ERROR = "securityError";
starling.events.Event.PARSE_ERROR = "parseError";
starling.events.Event.FATAL_ERROR = "fatalError";
starling.events.Event.CHANGE = "change";
starling.events.Event.CANCEL = "cancel";
starling.events.Event.SCROLL = "scroll";
starling.events.Event.OPEN = "open";
starling.events.Event.CLOSE = "close";
starling.events.Event.SELECT = "select";
starling.events.Event.READY = "ready";
starling.events.Event.sEventPool = new Array();
starling.events.EnterFrameEvent.ENTER_FRAME = "enterFrame";
starling.events.KeyboardEvent.KEY_UP = "keyUp";
starling.events.KeyboardEvent.KEY_DOWN = "keyDown";
starling.events.ResizeEvent.RESIZE = "resize";
starling.events.Touch.sHelperMatrix = new openfl.geom.Matrix();
starling.events.Touch.sHelperPoint = new openfl.geom.Point();
starling.events.TouchEvent.TOUCH = "touch";
starling.events.TouchEvent.sTouches = (function($this) {
	var $r;
	var this1;
	this1 = new openfl.VectorData();
	{
		var this2;
		this2 = new Array(0);
		this1.data = this2;
	}
	this1.length = 0;
	this1.fixed = false;
	$r = this1;
	return $r;
}(this));
starling.events.TouchPhase.__meta__ = { obj : { 'final' : null}};
starling.events.TouchPhase.HOVER = "hover";
starling.events.TouchPhase.BEGAN = "began";
starling.events.TouchPhase.MOVED = "moved";
starling.events.TouchPhase.STATIONARY = "stationary";
starling.events.TouchPhase.ENDED = "ended";
starling.events.TouchProcessor.sUpdatedTouches = (function($this) {
	var $r;
	var this1;
	this1 = new openfl.VectorData();
	{
		var this2;
		this2 = new Array(0);
		this1.data = this2;
	}
	this1.length = 0;
	this1.fixed = false;
	$r = this1;
	return $r;
}(this));
starling.events.TouchProcessor.sHoveringTouchData = (function($this) {
	var $r;
	var this1;
	this1 = new openfl.VectorData();
	{
		var this2;
		this2 = new Array(0);
		this1.data = this2;
	}
	this1.length = 0;
	this1.fixed = false;
	$r = this1;
	return $r;
}(this));
starling.events.TouchProcessor.sHelperPoint = new openfl.geom.Point();
starling.filters.FragmentFilter.sStageBounds = new openfl.geom.Rectangle();
starling.filters.FragmentFilter.sTransformationMatrix = new openfl.geom.Matrix();
starling.filters.BlurFilter.NORMAL_PROGRAM_NAME = "BF_n";
starling.filters.BlurFilter.TINTED_PROGRAM_NAME = "BF_t";
starling.filters.BlurFilter.MAX_SIGMA = 2.0;
starling.filters.ColorMatrixFilter.PROGRAM_NAME = "CMF";
starling.filters.ColorMatrixFilter.LUMA_R = 0.299;
starling.filters.ColorMatrixFilter.LUMA_G = 0.587;
starling.filters.ColorMatrixFilter.LUMA_B = 0.114;
starling.filters.ColorMatrixFilter.sTmpMatrix1 = (function($this) {
	var $r;
	var this1;
	this1 = new openfl.VectorData();
	{
		var this2;
		this2 = new Array(20);
		this1.data = this2;
	}
	this1.length = 20;
	this1.fixed = true;
	$r = this1;
	return $r;
}(this));
starling.filters.ColorMatrixFilter.sTmpMatrix2 = (function($this) {
	var $r;
	var this1;
	this1 = new openfl.VectorData();
	{
		var this2;
		this2 = new Array(0);
		this1.data = this2;
	}
	this1.length = 0;
	this1.fixed = false;
	$r = this1;
	return $r;
}(this));
starling.filters.DisplacementMapFilter.sMatrix = new openfl.geom.Matrix3D();
starling.filters.FragmentFilterMode.BELOW = "below";
starling.filters.FragmentFilterMode.REPLACE = "replace";
starling.filters.FragmentFilterMode.ABOVE = "above";
starling.text.BitmapFont.NATIVE_SIZE = -1;
starling.text.BitmapFont.MINI = "mini";
starling.text.BitmapFont.CHAR_SPACE = 32;
starling.text.BitmapFont.CHAR_TAB = 9;
starling.text.BitmapFont.CHAR_NEWLINE = 10;
starling.text.BitmapFont.CHAR_CARRIAGE_RETURN = 13;
starling.text.BitmapFont.sLines = (function($this) {
	var $r;
	var this1;
	this1 = new openfl.VectorData();
	{
		var this2;
		this2 = new Array(0);
		this1.data = this2;
	}
	this1.length = 0;
	this1.fixed = false;
	$r = this1;
	return $r;
}(this));
starling.text.CharLocation.sInstancePool = new Array();
starling.text.CharLocation.sVectorPool = new Array();
starling.text.CharLocation.sInstanceLoan = new Array();
starling.text.CharLocation.sVectorLoan = new Array();
starling.text.MiniBitmapFont.BITMAP_WIDTH = 128;
starling.text.MiniBitmapFont.BITMAP_HEIGHT = 64;
starling.text.MiniBitmapFont.BITMAP_DATA = [2027613533,3413039936,202148514,2266925598,4206886452,4286853117,2034947,3202703399,352977282,2957757964,3113652880,2158068882,1468709156,2268063717,2779310143,2101025806,3416509055,4215794539,3602168838,1038056207,1932393374,3182285627,3086802234,1741291262,2017257123,3395280843,984074419,3049693147,3986077023,1055013549,1806563255,1754714962,1577746187,1124058786,3888759258,2482229043,2916583666,3743065328,866060213,1695195001,2401582068,3113347901,2616521596,1053798161,2093370968,4229025683,560451479,854767518,2610241322,4279041348,4181572480,4031244973,587139110,1081376765,962217926,783603325,3605526425,4102001916,289204733,2635140255,3453981695,3487854373,2132197241,3164775074,4257640328,770238970,144664537,707141570,2934433071,871272893,512964596,808491899,481894297,3095982481,3598364156,1710636358,2904016319,1751040139,596966466,1363963692,465815609,315567311,4290666159,4086022551,179721458,2221734970,3942224988,1519355876,3292323782,3933427230,3314199893,3736227348,3846038425,603088884,2677349227,3207069327,3555275967,3063054283,3064577213,3412044179,693642210,4280513949,762928717,1802215333,3774849674,4221155330,970959395,557220237,2107226136,3509822982,3403284788,4265820019,898597576,991077243,2091615904,3334716888,633599866,4218780109,2216000376,834870947,2118009742,1362731961,236280636,1274945142,1458729366,797960805,3289369720,2103717340,3946406003,2676522889,1624104606,1156993903,3186170404,2254499071,1204911924,1314218830,3307086392,2824275959,3839865679,2073394964,1873329433,1754205930,1528429545,1631106062,2263272465,4220497047,3522893765,3641376303,707451487,3452496787,1390653868,2620555793,1027328684,3419683476,3662193703,765701986,3808279132,786403271,3824435837,713234896,4261856399,3471930731,3993492879,1447960461,1398434593,1914230187,2398643285,4156374464,3859339207,3220700061,3373248762,3186030434,1315917060,2809852481,4008553903,4105611953,1599499652,3513857591,877854499,4198259455,3648560077,2838035419,3255594190,2465578457,4263505201,534904657,2889261598,1358214576,1069250354,3870010557,2628896583,3448610878,442343309,1024736866,4015119133,3250867279,1513359261,2442089596,1944476762,735490552,426990058,4234106111,1204305707,3330995265,2398649368,4221048123,1724669255,3801115709,3489328790,3896402933,3696936939,2836983295,3656750393,3349724512,3810416287,3654997608,4284455103,2294939563,4207697932,642748805,2476981639,2319419898,572956615,3833238940,964924880,2081600351,3572458416,2056247513,1951368808,2133449703,2783728628,512866577,913279200,1678129016,3488578991,3373952929,2562996951,3666058925,1664169178,1943591935,750675303,154399903,2571590890,852654952,4117307766,1971649621,4180195820,1222535348,4283953215,2880662236,2717410980,1175907705,1157322027,505963121,2631540616,3661227656,3591803353,2624126821,1948662907,3596065103,1147387734,256773959,1173572460,2361957471,4210876076,3080180620,3464801210,3821654259,1465302035,2851185457,3143266144,3793180414,3368833103,4274670712,3473819108,3487569332,773123355,1618635668,2570176190,2075248691,1740805534,288646743,1837597401,603556968,3182536872,673184603,3088757053,2897054404,3192651316,2885335802,1057233368,1118437241,4182126463,3110464775,3313191614,2360987274,735505357,2992631425,2360928811,4187834527,279183208,1586420003,1174008423,4062987589,1162167621,1162167621,1162167621,1162167621,1174119799,787274608];
starling.text.MiniBitmapFont.XML_DATA = null;
starling.text.TextField.BITMAP_FONT_DATA_NAME = "starling.display.TextField.BitmapFonts";
starling.text.TextField.sHelperMatrix = new openfl.geom.Matrix();
starling.text.TextField.sNativeTextField = new openfl.text.TextField();
starling.text.TextFieldAutoSize.NONE = "none";
starling.text.TextFieldAutoSize.HORIZONTAL = "horizontal";
starling.text.TextFieldAutoSize.VERTICAL = "vertical";
starling.text.TextFieldAutoSize.BOTH_DIRECTIONS = "bothDirections";
starling.textures.ConcreteTexture.TEXTURE_READY = "textureReady";
starling.textures.ConcreteTexture.sOrigin = new openfl.geom.Point();
starling.textures.SubTexture.sTexCoords = new openfl.geom.Point();
starling.textures.RenderTexture.sClipRect = new openfl.geom.Rectangle();
starling.textures.RenderTexture.optimizePersistentBuffers = false;
starling.textures.TextureAtlas.sNames = (function($this) {
	var $r;
	var this1;
	this1 = new openfl.VectorData();
	{
		var this2;
		this2 = new Array(0);
		this1.data = this2;
	}
	this1.length = 0;
	this1.fixed = false;
	$r = this1;
	return $r;
}(this));
starling.textures.TextureSmoothing.NONE = "none";
starling.textures.TextureSmoothing.BILINEAR = "bilinear";
starling.textures.TextureSmoothing.TRILINEAR = "trilinear";
starling.utils.AssetManager.HTTP_RESPONSE_STATUS = "httpResponseStatus";
starling.utils.AssetManager.sNames = (function($this) {
	var $r;
	var this1;
	this1 = new openfl.VectorData();
	{
		var this2;
		this2 = new Array(0);
		this1.data = this2;
	}
	this1.length = 0;
	this1.fixed = false;
	$r = this1;
	return $r;
}(this));
starling.utils.AssetManager.NAME_REGEX = new EReg("([^\\?/\\\\]+?)(?:\\.([\\w\\-]+))?(?:\\?.*)?$","");
starling.utils.Color.WHITE = 16777215;
starling.utils.Color.SILVER = 12632256;
starling.utils.Color.GRAY = 8421504;
starling.utils.Color.BLACK = 0;
starling.utils.Color.RED = 16711680;
starling.utils.Color.MAROON = 8388608;
starling.utils.Color.YELLOW = 16776960;
starling.utils.Color.OLIVE = 8421376;
starling.utils.Color.LIME = 65280;
starling.utils.Color.GREEN = 32768;
starling.utils.Color.AQUA = 65535;
starling.utils.Color.TEAL = 32896;
starling.utils.Color.BLUE = 255;
starling.utils.Color.NAVY = 128;
starling.utils.Color.FUCHSIA = 16711935;
starling.utils.Color.PURPLE = 8388736;
starling.utils.MathUtil.TWO_PI = Math.PI * 2.0;
starling.utils.MatrixUtil.sRawData2 = (function($this) {
	var $r;
	var this1;
	this1 = new openfl.VectorData();
	{
		var this2;
		this2 = new Array(16);
		this1.data = this2;
	}
	this1.length = 16;
	this1.fixed = true;
	$r = this1;
	return $r;
}(this));
starling.utils.RectangleUtil.sHelperPoint = new openfl.geom.Point();
starling.utils.ScaleMode.NONE = "none";
starling.utils.ScaleMode.NO_BORDER = "noBorder";
starling.utils.ScaleMode.SHOW_ALL = "showAll";
starling.utils.StarlingUtils.deprecationNotified = false;
starling.utils.SystemUtil.sInitialized = false;
starling.utils.SystemUtil.sApplicationActive = true;
starling.utils.SystemUtil.sWaitingCalls = new Array();
starling.utils.SystemUtil.sSupportsDepthAndStencil = true;
starling.utils.VertexData.ELEMENTS_PER_VERTEX = 8;
starling.utils.VertexData.POSITION_OFFSET = 0;
starling.utils.VertexData.COLOR_OFFSET = 2;
starling.utils.VertexData.TEXCOORD_OFFSET = 6;
starling.utils.VertexData.sHelperPoint = new openfl.geom.Point();
starling.utils.VertexData.sHelperPoint3D = new openfl.geom.Vector3D();
ApplicationMain.main();
})(typeof window != "undefined" ? window : exports);
